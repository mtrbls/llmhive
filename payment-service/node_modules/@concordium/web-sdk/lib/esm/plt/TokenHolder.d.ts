import type * as Proto from '../grpc-api/v2/concordium/protocol-level-tokens.js';
import type { Upward } from '../grpc/index.js';
import { Base58String } from '../index.js';
import { AccountAddress } from '../types/index.js';
interface TokenHolder<T extends string> {
    /** The type of the token holder. */
    type: T;
}
type TokenHolderAccountJSON = TokenHolder<'account'> & {
    /** The address of the token holder account. */
    address: Base58String;
};
declare class TokenHolderAccount implements TokenHolder<'account'> {
    /** The address of the account holding the token. */
    readonly address: AccountAddress.Type;
    readonly type = "account";
    constructor(
    /** The address of the account holding the token. */
    address: AccountAddress.Type);
    toString(): string;
    /**
     * Get a JSON-serializable representation of the token holder account. This is called implicitly when serialized with JSON.stringify.
     * @returns {TokenHolderAccountJSON} The JSON representation.
     */
    toJSON(): TokenHolderAccountJSON;
}
/** Describes the `Account` variant of a `TokenHolder`. */
export type Account = TokenHolderAccount;
/** Describes the `Account` variant of a `TokenHolder.JSON`. */
export type AccountJSON = TokenHolderAccountJSON;
/** Describes any variant of a `TokenHolder`. */
export type Type = Account;
/** Describes the JSON representation of variant of any `TokenHolder`. */
export type JSON = AccountJSON;
export declare function fromAccountAddress(address: AccountAddress.Type): TokenHolderAccount;
/**
 * Recreate a token holder {@link Account} from its JSON form.
 */
export declare function fromJSON(json: AccountJSON): Account;
/**
 * Recreate a {@link Type} from its JSON form.
 * If the `type` field is unknown, {@linkcode Unknown} is returned.
 */
export declare function fromJSON(json: JSON): Upward<Type>;
/**
 * Construct a {@linkcode Account} from a base58check string.
 *
 * @param {string} address String of base58check encoded account address, must use a byte version of 1.
 * @returns {Account} The token holder account.
 * @throws If the provided string is not: exactly 50 characters, a valid base58check encoding using version byte 1.
 */
export declare function fromBase58(address: string): Account;
/**
 * Get a base58check string of the token holder account address.
 * @param {Account} accountAddress The token holder account.
 */
export declare function toBase58(accountAddress: Account): string;
/**
 * Type predicate which checks if a value is an instance of {@linkcode Type}
 */
export declare function instanceOf(value: unknown): value is Account;
/**
 * Convert token holder from its protobuf encoding.
 * @param {Proto.TokenHolder} tokenHolder the token holder
 * @returns {Type} The token holder.
 * @throws {Error} If the token holder type is unsupported.
 */
export declare function fromProto(tokenHolder: Proto.TokenHolder): Upward<Type>;
/**
 * Convert token holder into its protobuf encoding.
 * @param {Type} tokenHolder The token holder.
 * @returns {Proto.TokenHolder} The protobuf encoding.
 */
export declare function toProto(tokenHolder: Type): Proto.TokenHolder;
export {};
