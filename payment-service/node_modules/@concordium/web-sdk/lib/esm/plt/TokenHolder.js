import { AccountAddress } from '../types/index.js';
class TokenHolderAccount {
    constructor(
    /** The address of the account holding the token. */
    address) {
        this.address = address;
        this.type = 'account';
    }
    toString() {
        return this.address.toString();
    }
    /**
     * Get a JSON-serializable representation of the token holder account. This is called implicitly when serialized with JSON.stringify.
     * @returns {TokenHolderAccountJSON} The JSON representation.
     */
    toJSON() {
        return {
            type: 'account',
            address: this.address.toJSON(),
        };
    }
}
export function fromAccountAddress(address) {
    return new TokenHolderAccount(address);
}
export function fromJSON(json) {
    switch (json.type) {
        case 'account':
            return new TokenHolderAccount(AccountAddress.fromJSON(json.address));
        default:
            return null;
    }
}
/**
 * Construct a {@linkcode Account} from a base58check string.
 *
 * @param {string} address String of base58check encoded account address, must use a byte version of 1.
 * @returns {Account} The token holder account.
 * @throws If the provided string is not: exactly 50 characters, a valid base58check encoding using version byte 1.
 */
export function fromBase58(address) {
    return fromAccountAddress(AccountAddress.fromBase58(address));
}
/**
 * Get a base58check string of the token holder account address.
 * @param {Account} accountAddress The token holder account.
 */
export function toBase58(accountAddress) {
    return accountAddress.address.address;
}
/**
 * Type predicate which checks if a value is an instance of {@linkcode Type}
 */
export function instanceOf(value) {
    return value instanceof TokenHolderAccount;
}
/**
 * Convert token holder from its protobuf encoding.
 * @param {Proto.TokenHolder} tokenHolder the token holder
 * @returns {Type} The token holder.
 * @throws {Error} If the token holder type is unsupported.
 */
export function fromProto(tokenHolder) {
    switch (tokenHolder.address.oneofKind) {
        case 'account':
            return fromAccountAddress(AccountAddress.fromProto(tokenHolder.address.account));
        // Add other token holder types here as needed
        case undefined:
            return null;
    }
}
/**
 * Convert token holder into its protobuf encoding.
 * @param {Type} tokenHolder The token holder.
 * @returns {Proto.TokenHolder} The protobuf encoding.
 */
export function toProto(tokenHolder) {
    return {
        address: {
            oneofKind: 'account',
            account: AccountAddress.toProto(tokenHolder.address),
        },
    };
}
//# sourceMappingURL=TokenHolder.js.map