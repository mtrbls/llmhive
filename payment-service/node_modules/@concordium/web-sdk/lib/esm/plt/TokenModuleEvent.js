import { cborDecode } from '../types/cbor.js';
import { TokenOperationType } from './TokenOperation.js';
import { CborAccountAddress } from './index.js';
function parseTokenListUpdateEventDetails(decoded) {
    if (typeof decoded !== 'object' || decoded === null) {
        throw new Error(`Invalid event details: ${JSON.stringify(decoded)}. Expected an object.`);
    }
    if (!('target' in decoded && CborAccountAddress.instanceOf(decoded.target))) {
        throw new Error(`Invalid event details: ${JSON.stringify(decoded)}. Expected 'target' to be a TokenHolder`);
    }
    return decoded;
}
function parseTokenPauseEventDetails(decoded) {
    if (typeof decoded !== 'object' || decoded === null) {
        throw new Error(`Invalid event details: ${JSON.stringify(decoded)}. Expected an object.`);
    }
    return decoded;
}
/**
 * Parses a token module event, decoding the details from CBOR format.
 *
 * @param event - The token module event to parse.
 * @returns The parsed token module event with decoded details.
 *
 * @example
 * const parsedEvent = parseTokenModuleEvent(encodedEvent);
 * switch (parsedEvent.type) {
 *   // typed details are now available, e.g.:
 *   case TokenOperationType.AddAllowList: console.log(parsedEvent.details.target);
 *   ...
 *   default: console.warn('Unknown event encountered:', parsedEvent);
 * }
 */
export function parseTokenModuleEvent(event) {
    const decoded = cborDecode(event.details.bytes);
    switch (event.type) {
        case TokenOperationType.AddAllowList:
        case TokenOperationType.RemoveAllowList:
        case TokenOperationType.AddDenyList:
        case TokenOperationType.RemoveDenyList:
            return { ...event, type: event.type, details: parseTokenListUpdateEventDetails(decoded) };
        case TokenOperationType.Pause:
        case TokenOperationType.Unpause:
            return { ...event, type: event.type, details: parseTokenPauseEventDetails(decoded) };
        default:
            return { ...event, details: decoded };
    }
}
//# sourceMappingURL=TokenModuleEvent.js.map