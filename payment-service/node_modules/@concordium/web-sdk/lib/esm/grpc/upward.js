import { bail } from '../util.js';
/**
 * Type guard that checks whether an Upward<T> holds a known value.
 *
 * @template T - The type representing the known variants
 * @param value - The possibly {@linkcode Unknown} value returned from gRPC.
 * @returns True if value is not {@linkcode Unknown} (i.e., is T).
 */
export function isKnown(value) {
    return value !== null;
}
/**
 * Asserts that an Upward<T> is known, otherwise throws the provided error.
 *
 * Useful when {@linkcode Unknown} values should be treated as hard failures.
 *
 * @template T - The type representing the known variants
 * @param value - The possibly {@linkcode Unknown} value returned from gRPC.
 * @param error - Error to throw if value is unknown.
 * @returns True as a type predicate when value is known.
 */
export function assertKnown(value, error) {
    return isKnown(value) || bail(error);
}
/**
 * Returns the known value or throws the provided error when unknown.
 *
 * @template T - The type representing the known variants
 * @param value - The possibly {@linkcode Unknown} value returned from gRPC.
 * @param error - Error to throw if value is unknown.
 * @returns The unwrapped known value of type T.
 */
export function knownOrError(value, error) {
    if (!isKnown(value))
        throw error instanceof Error ? error : new Error(error);
    return value;
}
//# sourceMappingURL=upward.js.map