import * as GRPC_Kernel from '../grpc-api/v2/concordium/kernel.js';
import * as GRPC from '../grpc-api/v2/concordium/types.js';
import * as PLT from '../plt/index.js';
import * as SDK from '../types.js';
import * as BlockHash from '../types/BlockHash.js';
import type { Upward } from './upward.js';
export declare function unwrapValToHex(x: {
    value: Uint8Array;
} | undefined): string;
export declare function unwrapToBase58(address: GRPC_Kernel.AccountAddress | undefined): SDK.Base58String;
export declare function accountInfo(acc: GRPC.AccountInfo): SDK.AccountInfo;
export declare function nextAccountSequenceNumber(nasn: GRPC.NextAccountSequenceNumber): SDK.NextAccountNonce;
export declare function cryptographicParameters(cp: GRPC.CryptographicParameters): SDK.CryptographicParameters;
export declare function blockChainParameters(params: GRPC.ChainParameters): SDK.ChainParameters;
export declare function bakerPoolInfo(info: GRPC.PoolInfoResponse): SDK.BakerPoolStatus;
export declare function passiveDelegationInfo(info: GRPC.PassiveDelegationInfo): SDK.PassiveDelegationStatus;
export declare function tokenomicsInfo(info: GRPC.TokenomicsInfo): Upward<SDK.RewardStatus>;
export declare function consensusInfo(ci: GRPC.ConsensusInfo): SDK.ConsensusStatus;
export declare function pendingUpdate(pendingUpdate: GRPC.PendingUpdate): SDK.PendingUpdate;
export declare function trPendingUpdateEffect(pendingUpdate: GRPC.PendingUpdate): Upward<SDK.PendingUpdateEffect>;
export declare function blockItemSummary(summary: GRPC.BlockItemSummary): Upward<SDK.BlockItemSummary>;
export declare function blockItemStatus(itemStatus: GRPC.BlockItemStatus): SDK.BlockItemStatus;
export declare function invokeInstanceResponse(invokeResponse: GRPC.InvokeInstanceResponse): SDK.InvokeContractResult;
export declare function instanceInfo(instanceInfo: GRPC.InstanceInfo): SDK.InstanceInfo;
export declare function commonBlockInfo(blockInfo: GRPC.ArrivedBlockInfo | GRPC.FinalizedBlockInfo): SDK.CommonBlockInfo;
export declare function instanceStateKVPair(state: GRPC.InstanceStateKVPair): SDK.InstanceStateKVPair;
export declare function ipInfo(ip: GRPC.IpInfo): SDK.IpInfo;
export declare function arInfo(ar: GRPC.ArInfo): SDK.ArInfo;
export declare function blocksAtHeightResponse(blocks: GRPC.BlocksAtHeightResponse): BlockHash.Type[];
export declare function blockInfo(blockInfo: GRPC.BlockInfo): SDK.BlockInfo;
export declare function delegatorInfo(delegatorInfo: GRPC.DelegatorInfo): SDK.DelegatorInfo;
export declare function branch(branchV2: GRPC.Branch): SDK.Branch;
export declare function electionInfo(electionInfo: GRPC.ElectionInfo): SDK.ElectionInfo;
export declare function nextUpdateSequenceNumbers(nextNums: GRPC.NextUpdateSequenceNumbers): SDK.NextUpdateSequenceNumbers;
export declare function trNodeInfo_Node(node: GRPC.NodeInfo_Node): SDK.NodeInfoConsensusStatus;
export declare function nodeInfo(nodeInfo: GRPC.NodeInfo): SDK.NodeInfo;
export declare function peerInfo(peerInfo: GRPC.PeersInfo_Peer): SDK.PeerInfo;
export declare function blockSpecialEvent(specialEvent: GRPC.BlockSpecialEvent): Upward<SDK.BlockSpecialEvent>;
export declare function blockFinalizationSummary(finalizationSummary: GRPC.BlockFinalizationSummary): SDK.BlockFinalizationSummary;
export declare function blockCertificates(certs: GRPC.BlockCertificates): SDK.BlockCertificates;
export declare function quorumCertificate(cert: GRPC.QuorumCertificate): SDK.QuorumCertificate;
export declare function timeoutCertificate(cert: GRPC.TimeoutCertificate): SDK.TimeoutCertificate;
export declare function epochFinalizationEntry(cert: GRPC.EpochFinalizationEntry): SDK.EpochFinalizationEntry;
export declare function finalizerRound(round: GRPC.FinalizerRound): SDK.FinalizerRound;
export declare function bakerRewardPeriodInfo(bakerRewardPeriod: GRPC.BakerRewardPeriodInfo): SDK.BakerRewardPeriodInfo;
export declare function bakerInfo(bakerInfo: GRPC.BakerInfo): SDK.BakerInfo;
export declare function winningBaker(winningBaker: GRPC.WinningBaker): SDK.WinningBaker;
export declare function trTokenInfo(tokenInfo: GRPC.TokenInfo): PLT.TokenInfo;
export declare function accountTransactionSignatureToV2(signature: SDK.AccountTransactionSignature): GRPC.AccountTransactionSignature;
export declare function BlocksAtHeightRequestToV2(request: SDK.BlocksAtHeightRequest): GRPC.BlocksAtHeightRequest;
