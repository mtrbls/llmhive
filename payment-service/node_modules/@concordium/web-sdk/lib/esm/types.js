export * from './types/NodeInfo.js';
export * from './types/PeerInfo.js';
export * from './types/blockItemSummary.js';
export * from './types/chainUpdate.js';
export * from './types/rejectReason.js';
export * from './types/transactionEvent.js';
export * from './types/BlockSpecialEvents.js';
export * from './types/errors.js';
export var AttributesKeys;
(function (AttributesKeys) {
    AttributesKeys[AttributesKeys["firstName"] = 0] = "firstName";
    AttributesKeys[AttributesKeys["lastName"] = 1] = "lastName";
    AttributesKeys[AttributesKeys["sex"] = 2] = "sex";
    AttributesKeys[AttributesKeys["dob"] = 3] = "dob";
    AttributesKeys[AttributesKeys["countryOfResidence"] = 4] = "countryOfResidence";
    AttributesKeys[AttributesKeys["nationality"] = 5] = "nationality";
    AttributesKeys[AttributesKeys["idDocType"] = 6] = "idDocType";
    AttributesKeys[AttributesKeys["idDocNo"] = 7] = "idDocNo";
    AttributesKeys[AttributesKeys["idDocIssuer"] = 8] = "idDocIssuer";
    AttributesKeys[AttributesKeys["idDocIssuedAt"] = 9] = "idDocIssuedAt";
    AttributesKeys[AttributesKeys["idDocExpiresAt"] = 10] = "idDocExpiresAt";
    AttributesKeys[AttributesKeys["nationalIdNo"] = 11] = "nationalIdNo";
    AttributesKeys[AttributesKeys["taxIdNo"] = 12] = "taxIdNo";
    AttributesKeys[AttributesKeys["lei"] = 13] = "lei";
    AttributesKeys[AttributesKeys["legalName"] = 14] = "legalName";
    AttributesKeys[AttributesKeys["legalCountry"] = 15] = "legalCountry";
    AttributesKeys[AttributesKeys["businessNumber"] = 16] = "businessNumber";
    AttributesKeys[AttributesKeys["registrationAuth"] = 17] = "registrationAuth";
})(AttributesKeys || (AttributesKeys = {}));
export var AttributeKeyString;
(function (AttributeKeyString) {
    AttributeKeyString["firstName"] = "firstName";
    AttributeKeyString["lastName"] = "lastName";
    AttributeKeyString["sex"] = "sex";
    AttributeKeyString["dob"] = "dob";
    AttributeKeyString["countryOfResidence"] = "countryOfResidence";
    AttributeKeyString["nationality"] = "nationality";
    AttributeKeyString["idDocType"] = "idDocType";
    AttributeKeyString["idDocNo"] = "idDocNo";
    AttributeKeyString["idDocIssuer"] = "idDocIssuer";
    AttributeKeyString["idDocIssuedAt"] = "idDocIssuedAt";
    AttributeKeyString["idDocExpiresAt"] = "idDocExpiresAt";
    AttributeKeyString["nationalIdNo"] = "nationalIdNo";
    AttributeKeyString["taxIdNo"] = "taxIdNo";
    AttributeKeyString["lei"] = "lei";
    AttributeKeyString["legalName"] = "legalName";
    AttributeKeyString["legalCountry"] = "legalCountry";
    AttributeKeyString["businessNumber"] = "businessNumber";
    AttributeKeyString["registrationAuth"] = "registrationAuth";
})(AttributeKeyString || (AttributeKeyString = {}));
export var Sex;
(function (Sex) {
    Sex["NotKnown"] = "0";
    Sex["Male"] = "1";
    Sex["Female"] = "2";
    Sex["NA"] = "9";
})(Sex || (Sex = {}));
export var IdDocType;
(function (IdDocType) {
    IdDocType["NA"] = "0";
    IdDocType["Passport"] = "1";
    IdDocType["NationalIdCard"] = "2";
    IdDocType["DriversLicense"] = "3";
    IdDocType["ImmigrationCard"] = "4";
})(IdDocType || (IdDocType = {}));
export var TransactionStatusEnum;
(function (TransactionStatusEnum) {
    TransactionStatusEnum["Received"] = "received";
    TransactionStatusEnum["Finalized"] = "finalized";
    TransactionStatusEnum["Committed"] = "committed";
})(TransactionStatusEnum || (TransactionStatusEnum = {}));
export var TransactionSummaryType;
(function (TransactionSummaryType) {
    TransactionSummaryType["AccountTransaction"] = "accountTransaction";
    TransactionSummaryType["CredentialDeploymentTransaction"] = "credentialDeploymentTransaction";
    TransactionSummaryType["AccountCreation"] = "accountCreation";
    TransactionSummaryType["UpdateTransaction"] = "updateTransaction";
    TransactionSummaryType["TokenCreation"] = "tokenCreation";
})(TransactionSummaryType || (TransactionSummaryType = {}));
export var StakePendingChangeType;
(function (StakePendingChangeType) {
    StakePendingChangeType["ReduceStake"] = "ReduceStake";
    StakePendingChangeType["RemoveStake"] = "RemoveStake";
})(StakePendingChangeType || (StakePendingChangeType = {}));
export var OpenStatus;
(function (OpenStatus) {
    OpenStatus[OpenStatus["OpenForAll"] = 0] = "OpenForAll";
    OpenStatus[OpenStatus["ClosedForNew"] = 1] = "ClosedForNew";
    OpenStatus[OpenStatus["ClosedForAll"] = 2] = "ClosedForAll";
})(OpenStatus || (OpenStatus = {}));
/**
 * How the node translates OpenStatus to JSON.
 */
export var OpenStatusText;
(function (OpenStatusText) {
    OpenStatusText["OpenForAll"] = "openForAll";
    OpenStatusText["ClosedForNew"] = "closedForNew";
    OpenStatusText["ClosedForAll"] = "closedForAll";
})(OpenStatusText || (OpenStatusText = {}));
export var BakerPoolPendingChangeType;
(function (BakerPoolPendingChangeType) {
    BakerPoolPendingChangeType["ReduceBakerCapital"] = "ReduceBakerCapital";
    BakerPoolPendingChangeType["RemovePool"] = "RemovePool";
    BakerPoolPendingChangeType["NoChange"] = "NoChange";
})(BakerPoolPendingChangeType || (BakerPoolPendingChangeType = {}));
export var PoolStatusType;
(function (PoolStatusType) {
    PoolStatusType["BakerPool"] = "BakerPool";
    PoolStatusType["PassiveDelegation"] = "PassiveDelegation";
})(PoolStatusType || (PoolStatusType = {}));
export var DelegationTargetType;
(function (DelegationTargetType) {
    DelegationTargetType["PassiveDelegation"] = "Passive";
    DelegationTargetType["Baker"] = "Baker";
})(DelegationTargetType || (DelegationTargetType = {}));
export var AccountInfoType;
(function (AccountInfoType) {
    AccountInfoType["Simple"] = "simple";
    AccountInfoType["Baker"] = "baker";
    AccountInfoType["Delegator"] = "delegator";
    AccountInfoType["Unknown"] = "unknown";
})(AccountInfoType || (AccountInfoType = {}));
export var BlockItemKind;
(function (BlockItemKind) {
    BlockItemKind[BlockItemKind["AccountTransactionKind"] = 0] = "AccountTransactionKind";
    BlockItemKind[BlockItemKind["CredentialDeploymentKind"] = 1] = "CredentialDeploymentKind";
    BlockItemKind[BlockItemKind["UpdateInstructionKind"] = 2] = "UpdateInstructionKind";
})(BlockItemKind || (BlockItemKind = {}));
/**
 * The different types of account transactions. The number value
 * is important as it is part of the serialization of a particular
 * transaction.
 */
export var AccountTransactionType;
(function (AccountTransactionType) {
    AccountTransactionType[AccountTransactionType["DeployModule"] = 0] = "DeployModule";
    AccountTransactionType[AccountTransactionType["InitContract"] = 1] = "InitContract";
    AccountTransactionType[AccountTransactionType["Update"] = 2] = "Update";
    AccountTransactionType[AccountTransactionType["Transfer"] = 3] = "Transfer";
    AccountTransactionType[AccountTransactionType["AddBaker"] = 4] = "AddBaker";
    AccountTransactionType[AccountTransactionType["RemoveBaker"] = 5] = "RemoveBaker";
    AccountTransactionType[AccountTransactionType["UpdateBakerStake"] = 6] = "UpdateBakerStake";
    AccountTransactionType[AccountTransactionType["UpdateBakerRestakeEarnings"] = 7] = "UpdateBakerRestakeEarnings";
    AccountTransactionType[AccountTransactionType["UpdateBakerKeys"] = 8] = "UpdateBakerKeys";
    AccountTransactionType[AccountTransactionType["UpdateCredentialKeys"] = 13] = "UpdateCredentialKeys";
    AccountTransactionType[AccountTransactionType["EncryptedAmountTransfer"] = 16] = "EncryptedAmountTransfer";
    AccountTransactionType[AccountTransactionType["TransferToEncrypted"] = 17] = "TransferToEncrypted";
    AccountTransactionType[AccountTransactionType["TransferToPublic"] = 18] = "TransferToPublic";
    AccountTransactionType[AccountTransactionType["TransferWithSchedule"] = 19] = "TransferWithSchedule";
    AccountTransactionType[AccountTransactionType["UpdateCredentials"] = 20] = "UpdateCredentials";
    AccountTransactionType[AccountTransactionType["RegisterData"] = 21] = "RegisterData";
    AccountTransactionType[AccountTransactionType["TransferWithMemo"] = 22] = "TransferWithMemo";
    AccountTransactionType[AccountTransactionType["EncryptedAmountTransferWithMemo"] = 23] = "EncryptedAmountTransferWithMemo";
    AccountTransactionType[AccountTransactionType["TransferWithScheduleAndMemo"] = 24] = "TransferWithScheduleAndMemo";
    AccountTransactionType[AccountTransactionType["ConfigureBaker"] = 25] = "ConfigureBaker";
    AccountTransactionType[AccountTransactionType["ConfigureDelegation"] = 26] = "ConfigureDelegation";
    AccountTransactionType[AccountTransactionType["TokenUpdate"] = 27] = "TokenUpdate";
})(AccountTransactionType || (AccountTransactionType = {}));
export function isAccountTransactionType(candidate) {
    return candidate in AccountTransactionType;
}
export var SchemaVersion;
(function (SchemaVersion) {
    SchemaVersion[SchemaVersion["V0"] = 0] = "V0";
    SchemaVersion[SchemaVersion["V1"] = 1] = "V1";
    SchemaVersion[SchemaVersion["V2"] = 2] = "V2";
})(SchemaVersion || (SchemaVersion = {}));
/**
 * The status of a cooldown. When stake is removed from a baker or delegator
 * (from protocol version 7) it first enters the pre-pre-cooldown state.
 * The next time the stake snaphot is taken (at the epoch transition before
 * a payday) it enters the pre-cooldown state. At the subsequent payday, it
 * enters the cooldown state. At the payday after the end of the cooldown
 * period, the stake is finally released.
 */
export var CooldownStatus;
(function (CooldownStatus) {
    /**
     * The amount is in cooldown and will expire at the specified time, becoming available
     * at the subsequent pay day.
     */
    CooldownStatus[CooldownStatus["Cooldown"] = 0] = "Cooldown";
    /**
     * The amount will enter cooldown at the next pay day. The specified end time is
     * projected to be the end of the cooldown period, but the actual end time will be
     * determined at the payday, and may be different if the global cooldown period
     * changes.
     */
    CooldownStatus[CooldownStatus["PreCooldown"] = 1] = "PreCooldown";
    /**
     * The amount will enter pre-cooldown at the next snapshot epoch (i.e. the epoch
     * transition before a pay day transition). As with pre-cooldown, the specified
     * end time is projected, but the actual end time will be determined later.
     */
    CooldownStatus[CooldownStatus["PrePreCooldown"] = 2] = "PrePreCooldown";
})(CooldownStatus || (CooldownStatus = {}));
//# sourceMappingURL=types.js.map