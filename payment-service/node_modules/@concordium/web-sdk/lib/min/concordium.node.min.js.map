{"version":3,"file":"concordium.node.min.js","mappings":"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","sources":["webpack:///./src/pub/plt.ts","webpack:///../../node_modules/cbor2/lib/sorts.js","webpack:///./src/accountHelpers.ts","webpack:///./src/pub/types/ModuleReference.ts","webpack:///../../node_modules/iso-3166-1/dist/iso-3166.js","webpack:///./src/id/idProofs.ts","webpack:///./src/types/blockItemSummary.ts","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js","webpack:///../../node_modules/hash.js/lib/hash/utils.js","webpack:///../rust-bindings/lib/wallet/node/cjs/index.js","webpack:///../../node_modules/hash.js/lib/hash/sha/256.js","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-output-stream.js","webpack:///../../node_modules/hash.js/lib/hash/sha/common.js","webpack:///./src/types/chainUpdate.ts","webpack:///../../node_modules/cbor2/lib/tag.js","webpack:///./src/types/ContractName.ts","webpack:///./src/cis2/index.ts","webpack:///./src/pub/plt/TokenModuleReference.ts","webpack:///../../node_modules/buffer/index.js","webpack:///../../node_modules/@scure/bip39/index.js","webpack:///../../node_modules/cbor2/lib/diagnostic.js","webpack:///../../node_modules/cbor2/lib/comment.js","webpack:///../../node_modules/cbor2/lib/types.js","webpack:///../../node_modules/cbor2/lib/version.js","webpack:///../../node_modules/cbor2/lib/index.js","webpack:///./src/web3-id/proofs.ts","webpack:///./src/plt/TokenOperation.ts","webpack:///./src/grpc-api/v2/concordium/health.client.ts","webpack:///./src/types/cbor.ts","webpack:///./src/plt/TokenHolder.ts","webpack:///./src/plt/module.ts","webpack:///../../node_modules/@noble/hashes/_sha2.js","webpack:///./src/pub/types/ReturnValue.ts","webpack:///../../node_modules/json-bigint/lib/parse.js","webpack:///./src/hash.ts","webpack:///./src/cis4/util.ts","webpack:///../../node_modules/hash.js/lib/hash/hmac.js","webpack:///./src/accountTransactions.ts","webpack:///./src/constants.ts","webpack:///./src/grpc-api/v2/concordium/types.ts","webpack:///./src/pub/types/ReceiveName.ts","webpack:///./src/plt/CborContractAddress.ts","webpack:///./src/types/Parameter.ts","webpack:///./src/types/AccountAddress.ts","webpack:///./src/web3-id/index.ts","webpack:///./src/plt/Token.ts","webpack:///../../node_modules/hash.js/lib/hash/sha/512.js","webpack:///../../node_modules/hash.js/lib/hash/common.js","webpack:///./src/versionedTypeHelpers.ts","webpack:///./src/pub/web3-id.ts","webpack:///../../node_modules/inherits/inherits.js","webpack:///./src/pub/plt/TokenMetadataUrl.ts","webpack:///../../node_modules/@noble/ed25519/index.js","webpack:///./lib/esm/shims/ed25519/node.js","webpack:///../../node_modules/hash.js/lib/hash/sha/384.js","webpack:///./src/plt/TokenModuleEvent.ts","webpack:///./src/types/ContractEvent.ts","webpack:///./src/plt/Cbor.ts","webpack:///./src/types/index.ts","webpack:///./src/types/DataBlob.ts","webpack:///./src/types/json.ts","webpack:///./src/schema.ts","webpack:///../../node_modules/cbor2/lib/simple.js","webpack:///./src/grpc/index.ts","webpack:///../../node_modules/cbor2/lib/writer.js","webpack:///../../node_modules/cbor2/lib/encoder.js","webpack:///./src/types/SequenceNumber.ts","webpack:///../../node_modules/hash.js/lib/hash/sha/1.js","webpack:///./src/plt/TokenModuleRejectReason.ts","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/deferred.js","webpack:///./src/cis3/index.ts","webpack:///./src/types/ContractAddress.ts","webpack:///../../node_modules/cbor2/lib/container.js","webpack:///./src/deserializationHelpers.ts","webpack:///./src/types/ReceiveName.ts","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js","webpack:///./src/pub/util.ts","webpack:///./src/types.ts","webpack:///../../node_modules/iso-3166-1/dist/index.js","webpack:///./src/pub/types/Energy.ts","webpack:///./src/pub/wasm.ts","webpack:///./src/wasm/web3Id.ts","webpack:///./src/cis2/util.ts","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/reflection-info.js","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/client-streaming-call.js","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/duplex-streaming-call.js","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/test-transport.js","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/server-call-context.js","webpack:///./src/serialization.ts","webpack:///./src/types/InitName.ts","webpack:///./src/pub/types/Duration.ts","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/unary-call.js","webpack:///../../node_modules/hash.js/lib/hash/ripemd.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/assert.js","webpack:///./src/pub/types/AccountAddress.ts","webpack:///./node_modules/@protobuf-ts/grpcweb-transport/build/es2015/goog-grpc-status-code.js","webpack:///./node_modules/@protobuf-ts/grpcweb-transport/build/es2015/grpc-web-format.js","webpack:///./node_modules/@protobuf-ts/grpcweb-transport/build/es2015/grpc-web-transport.js","webpack:///../../node_modules/json-bigint/index.js","webpack:///./src/cis3/CIS3Contract.ts","webpack:///./src/id/idProofTypes.ts","webpack:///../../node_modules/@noble/hashes/hmac.js","webpack:///./src/pub/plt/CborMemo.ts","webpack:///./src/web3-id/grpc.ts","webpack:///./src/types/VersionedModuleSource.ts","webpack:///./src/plt/index.ts","webpack:///./src/grpc/upward.ts","webpack:///./src/cis0.ts","webpack:///./src/schemaTypes.ts","webpack:///./src/pub/types/Parameter.ts","webpack:///./src/plt/TokenAmount.ts","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js","webpack:///./src/grpc-api/v2/concordium/protocol-level-tokens.ts","webpack:///./src/wasm/identity.ts","webpack:///./src/wasm/serialization.ts","webpack:///../../node_modules/@noble/hashes/sha512.js","webpack:///./src/pub/plt/Cbor.ts","webpack:///./src/wasm/HdWallet.ts","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-options.js","webpack:///./src/commonProofTypes.ts","webpack:///./src/web3-id/types.ts","webpack:///./src/GenericContract.ts","webpack:///./src/pub/cis3.ts","webpack:///./src/plt/CborMemo.ts","webpack:///../../node_modules/hash.js/lib/hash/sha/224.js","webpack:///./src/wasm/deserialization.ts","webpack:///./src/pub/schema.ts","webpack:///./src/serializationHelpers.ts","webpack:///./src/cis4/CIS4Contract.ts","webpack:///./src/pub/cis2.ts","webpack:///../../node_modules/cbor2/lib/options.js","webpack:///../../node_modules/bignumber.js/bignumber.js","webpack:///../../node_modules/inherits/inherits_browser.js","webpack:///./src/cis2/CIS2Contract.ts","webpack:///./src/pub/plt/TokenAmount.ts","webpack:///./src/deserialization.ts","webpack:///../../node_modules/hash.js/lib/hash/sha.js","webpack:///./src/grpc-api/v2/concordium/service.client.ts","webpack:///./src/pub/types/TransactionHash.ts","webpack:///./src/types/ModuleReference.ts","webpack:///./src/pub/plt/CborContractAddress.ts","webpack:///./src/pub/plt/CborAccountAddress.ts","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/server-streaming-call.js","webpack:///./src/contractHelpers.ts","webpack:///./src/plt/TokenModuleReference.ts","webpack:///./src/plt/TokenId.ts","webpack:///../../node_modules/@noble/hashes/cryptoNode.js","webpack:///./src/types/PeerInfo.ts","webpack:///./src/cis4/index.ts","webpack:///./src/types/CcdAmount.ts","webpack:///./src/plt/decode.ts","webpack:///../../node_modules/cbor2/lib/box.js","webpack:///./src/types/NodeInfo.ts","webpack:///./src/pub/types/SequenceNumber.ts","webpack:///./src/grpc-api/v2/concordium/kernel.ts","webpack:///../../node_modules/big.js/big.js","webpack:///../../node_modules/@scure/base/lib/index.js","webpack:///./src/types/Duration.ts","webpack:///./src/plt/CborAccountAddress.ts","webpack:///./src/energyCost.ts","webpack:///./src/pub/types/ContractAddress.ts","webpack:///./src/web3-id/helpers.ts","webpack:///./src/pub/grpc.ts","webpack:///./src/types/util.ts","webpack:///../../node_modules/@noble/hashes/pbkdf2.js","webpack:///./src/types/errors.ts","webpack:///./src/grpc/translation.ts","webpack:///../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-error.js","webpack:///../../node_modules/base-x/src/index.js","webpack:///./src/types/transactionEvent.ts","webpack:///./src/pub/id.ts","webpack:///./src/types/BlockSpecialEvents.ts","webpack:///external node-commonjs \"node:crypto\"","webpack:///./src/types/ModuleClient.ts","webpack:///../../node_modules/bs58check/base.js","webpack:///./src/grpc-api/v2/concordium/health.ts","webpack:///../../node_modules/minimalistic-assert/index.js","webpack:///./src/pub/cis4.ts","webpack:///./src/types/rejectReason.ts","webpack:///./src/pub/plt/TokenId.ts","webpack:///./src/ratioHelpers.ts","webpack:///./src/types/CredentialRegistrationId.ts","webpack:///./src/pub/types/CcdAmount.ts","webpack:///./src/grpc-api/v2/concordium/service.ts","webpack:///../../node_modules/base64-js/index.js","webpack:///./src/pub/types/Timestamp.ts","webpack:///../../node_modules/@noble/hashes/_u64.js","webpack:///./src/plt/TokenMetadataUrl.ts","webpack:///../../node_modules/cbor2/lib/decodeStream.js","webpack:///./src/pub/types/InitName.ts","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/base64.js","webpack:///./src/types/ReturnValue.ts","webpack:///./src/pub/types/TransactionExpiry.ts","webpack:///./src/index.ts","webpack:///./src/id/index.ts","webpack:///./src/types/VerifiablePresentation.ts","webpack:///../../node_modules/@noble/hashes/_assert.js","webpack:///./src/types/EntrypointName.ts","webpack:///./src/types/BlockHash.ts","webpack:///./src/types/TransactionHash.ts","webpack:///./src/pub/types/BlockHash.ts","webpack:///./src/wasm/accountHelpers.ts","webpack:///./src/wasm/index.ts","webpack:///../../node_modules/cbor2/lib/decoder.js","webpack:///../../node_modules/cbor2/lib/float.js","webpack:///../rust-bindings/lib/dapp/node/cjs/index.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/protobufjs-utf8.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/oneof.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/message-type.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-contains-message-type.js","webpack:///../../node_modules/@protobuf-ts/runtime/build/es2015/enum-object.js","webpack:///./src/pub/types.ts","webpack:///./src/pub/cis0.ts","webpack:///external node-commonjs \"util\"","webpack:///../../node_modules/@noble/hashes/utils.js","webpack:///../../node_modules/cbor2/lib/utils.js","webpack:///../../node_modules/bs58/index.js","webpack:///./src/signHelpers.ts","webpack:///../../node_modules/ieee754/index.js","webpack:///./src/util.ts","webpack:///./src/uleb128.ts","webpack:///./src/types/TransactionExpiry.ts","webpack:///../../node_modules/hash.js/lib/hash.js","webpack:///./src/cis3/util.ts","webpack:///./src/grpc/GRPCClient.ts","webpack:///../../node_modules/json-bigint/lib/stringify.js","webpack:///./src/types/Timestamp.ts","webpack:///./src/types/Energy.ts","webpack:///../../node_modules/@noble/hashes/sha256.js","webpack:///./src/pub/plt/TokenHolder.ts","webpack:///./src/wasm/credentialDeploymentTransactions.ts","webpack:///../../node_modules/bs58check/index.js","webpack:///../../node_modules/@scure/bip39/wordlists/english.js","webpack:///../../node_modules/cbor2/lib/constants.js","webpack:///./src/pub/types/ContractEvent.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/startup"],"sourcesContent":["import * as Token from '../plt/Token.js';\n// To limit the exports meant only for internal use, we re-create the module exports.\nimport * as Cbor from './plt/Cbor.js';\nimport * as CborAccountAddress from './plt/CborAccountAddress.js';\nimport * as CborContractAddress from './plt/CborContractAddress.js';\nimport * as CborMemo from './plt/CborMemo.js';\nimport * as TokenAmount from './plt/TokenAmount.js';\nimport * as TokenHolder from './plt/TokenHolder.js';\nimport * as TokenId from './plt/TokenId.js';\nimport * as TokenMetadataUrl from './plt/TokenMetadataUrl.js';\nimport * as TokenModuleReference from './plt/TokenModuleReference.js';\n\nexport * from '../plt/types.js';\nexport * from '../plt/module.js';\nexport * from '../plt/TokenModuleRejectReason.js';\nexport * from '../plt/TokenModuleEvent.js';\nexport * from '../plt/TokenOperation.js';\n\nexport {\n    Token,\n    Cbor,\n    TokenAmount,\n    CborMemo,\n    TokenId,\n    TokenModuleReference,\n    TokenMetadataUrl,\n    TokenHolder,\n    CborAccountAddress,\n    CborContractAddress,\n};\n","function f(c,d){const[u,a,n]=c,[l,s,t]=d,r=Math.min(n.length,t.length);for(let o=0;o<r;o++){const e=n[o]-t[o];if(e!==0)return e}return 0}function y(c,d){const[u,a,n]=c,[l,s,t]=d,r=n.length-t.length;if(r!==0)return r;const o=Math.min(n.length,t.length);for(let e=0;e<o;e++){const i=n[e]-t[e];if(i!==0)return i}return 0}export{f as sortCoreDeterministic,y as sortLengthFirstDeterministic};\n","import {\n    AccountInfo,\n    AccountInfoBaker,\n    AccountInfoDelegator,\n    AccountInfoType,\n    ReduceStakePendingChange,\n    RemovalPendingChange,\n    StakePendingChange,\n    StakePendingChangeType,\n} from './types.js';\n\n/**\n * Whether {@link AccountInfo} parameter given is of type {@link AccountInfoDelegator}, i.e. the account is a delegator\n *\n * @deprecated check `type` member instead.\n */\nexport const isDelegatorAccount = (ai: AccountInfo): ai is AccountInfoDelegator =>\n    ai.type === AccountInfoType.Delegator;\n\n/**\n * Whether {@link AccountInfo} parameter given is of type {@link AccountInfoBaker}, i.e. the account is a baker.\n *\n * @deprecated check `type` member instead.\n */\nexport const isBakerAccount = (ai: AccountInfo): ai is AccountInfoBaker => ai.type === AccountInfoType.Baker;\n\n/**\n * Whether the pending change given is of type {@link ReduceStakePendingChange}\n *\n * @deprecated check `change` member instead.\n */\nexport const isReduceStakePendingChange = (spc: StakePendingChange): spc is ReduceStakePendingChange =>\n    spc.change === StakePendingChangeType.ReduceStake;\n\n/**\n * Whether the pending change given is of type {@link RemovalPendingChange}\n *\n * @deprecated check `change` member instead.\n */\nexport const isRemovalPendingChange = (spc: StakePendingChange): spc is RemovalPendingChange =>\n    spc.change === StakePendingChangeType.RemoveStake;\n","export {\n    Type,\n    fromJSON,\n    instanceOf,\n    fromHexString,\n    fromBuffer,\n    toHexString,\n    equals,\n    Serializable,\n    JSON_DISCRIMINATOR,\n    fromTypedJSON,\n    toUnwrappedJSON,\n    toTypedJSON,\n} from '../../types/ModuleReference.js';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst countries = [\n    {\n        country: 'Afghanistan',\n        alpha2: 'AF',\n        alpha3: 'AFG',\n        numeric: '004',\n    },\n    {\n        country: 'Åland Islands',\n        alpha2: 'AX',\n        alpha3: 'ALA',\n        numeric: '248',\n    },\n    {\n        country: 'Albania',\n        alpha2: 'AL',\n        alpha3: 'ALB',\n        numeric: '008',\n    },\n    {\n        country: 'Algeria',\n        alpha2: 'DZ',\n        alpha3: 'DZA',\n        numeric: '012',\n    },\n    {\n        country: 'American Samoa',\n        alpha2: 'AS',\n        alpha3: 'ASM',\n        numeric: '016',\n    },\n    {\n        country: 'Andorra',\n        alpha2: 'AD',\n        alpha3: 'AND',\n        numeric: '020',\n    },\n    {\n        country: 'Angola',\n        alpha2: 'AO',\n        alpha3: 'AGO',\n        numeric: '024',\n    },\n    {\n        country: 'Anguilla',\n        alpha2: 'AI',\n        alpha3: 'AIA',\n        numeric: '660',\n    },\n    {\n        country: 'Antarctica',\n        alpha2: 'AQ',\n        alpha3: 'ATA',\n        numeric: '010',\n    },\n    {\n        country: 'Antigua and Barbuda',\n        alpha2: 'AG',\n        alpha3: 'ATG',\n        numeric: '028',\n    },\n    {\n        country: 'Argentina',\n        alpha2: 'AR',\n        alpha3: 'ARG',\n        numeric: '032',\n    },\n    {\n        country: 'Armenia',\n        alpha2: 'AM',\n        alpha3: 'ARM',\n        numeric: '051',\n    },\n    {\n        country: 'Aruba',\n        alpha2: 'AW',\n        alpha3: 'ABW',\n        numeric: '533',\n    },\n    {\n        country: 'Australia',\n        alpha2: 'AU',\n        alpha3: 'AUS',\n        numeric: '036',\n    },\n    {\n        country: 'Austria',\n        alpha2: 'AT',\n        alpha3: 'AUT',\n        numeric: '040',\n    },\n    {\n        country: 'Azerbaijan',\n        alpha2: 'AZ',\n        alpha3: 'AZE',\n        numeric: '031',\n    },\n    {\n        country: 'Bahamas',\n        alpha2: 'BS',\n        alpha3: 'BHS',\n        numeric: '044',\n    },\n    {\n        country: 'Bahrain',\n        alpha2: 'BH',\n        alpha3: 'BHR',\n        numeric: '048',\n    },\n    {\n        country: 'Bangladesh',\n        alpha2: 'BD',\n        alpha3: 'BGD',\n        numeric: '050',\n    },\n    {\n        country: 'Barbados',\n        alpha2: 'BB',\n        alpha3: 'BRB',\n        numeric: '052',\n    },\n    {\n        country: 'Belarus',\n        alpha2: 'BY',\n        alpha3: 'BLR',\n        numeric: '112',\n    },\n    {\n        country: 'Belgium',\n        alpha2: 'BE',\n        alpha3: 'BEL',\n        numeric: '056',\n    },\n    {\n        country: 'Belize',\n        alpha2: 'BZ',\n        alpha3: 'BLZ',\n        numeric: '084',\n    },\n    {\n        country: 'Benin',\n        alpha2: 'BJ',\n        alpha3: 'BEN',\n        numeric: '204',\n    },\n    {\n        country: 'Bermuda',\n        alpha2: 'BM',\n        alpha3: 'BMU',\n        numeric: '060',\n    },\n    {\n        country: 'Bhutan',\n        alpha2: 'BT',\n        alpha3: 'BTN',\n        numeric: '064',\n    },\n    {\n        country: 'Bolivia',\n        alpha2: 'BO',\n        alpha3: 'BOL',\n        numeric: '068',\n    },\n    {\n        country: 'Bonaire, Sint Eustatius and Saba',\n        alpha2: 'BQ',\n        alpha3: 'BES',\n        numeric: '535',\n    },\n    {\n        country: 'Bosnia and Herzegovina',\n        alpha2: 'BA',\n        alpha3: 'BIH',\n        numeric: '070',\n    },\n    {\n        country: 'Botswana',\n        alpha2: 'BW',\n        alpha3: 'BWA',\n        numeric: '072',\n    },\n    {\n        country: 'Bouvet Island',\n        alpha2: 'BV',\n        alpha3: 'BVT',\n        numeric: '074',\n    },\n    {\n        country: 'Brazil',\n        alpha2: 'BR',\n        alpha3: 'BRA',\n        numeric: '076',\n    },\n    {\n        country: 'British Indian Ocean Territory',\n        alpha2: 'IO',\n        alpha3: 'IOT',\n        numeric: '086',\n    },\n    {\n        country: 'Brunei Darussalam',\n        alpha2: 'BN',\n        alpha3: 'BRN',\n        numeric: '096',\n    },\n    {\n        country: 'Bulgaria',\n        alpha2: 'BG',\n        alpha3: 'BGR',\n        numeric: '100',\n    },\n    {\n        country: 'Burkina Faso',\n        alpha2: 'BF',\n        alpha3: 'BFA',\n        numeric: '854',\n    },\n    {\n        country: 'Burundi',\n        alpha2: 'BI',\n        alpha3: 'BDI',\n        numeric: '108',\n    },\n    {\n        country: 'Cabo Verde',\n        alpha2: 'CV',\n        alpha3: 'CPV',\n        numeric: '132',\n    },\n    {\n        country: 'Cambodia',\n        alpha2: 'KH',\n        alpha3: 'KHM',\n        numeric: '116',\n    },\n    {\n        country: 'Cameroon',\n        alpha2: 'CM',\n        alpha3: 'CMR',\n        numeric: '120',\n    },\n    {\n        country: 'Canada',\n        alpha2: 'CA',\n        alpha3: 'CAN',\n        numeric: '124',\n    },\n    {\n        country: 'Cayman Islands',\n        alpha2: 'KY',\n        alpha3: 'CYM',\n        numeric: '136',\n    },\n    {\n        country: 'Central African Republic',\n        alpha2: 'CF',\n        alpha3: 'CAF',\n        numeric: '140',\n    },\n    {\n        country: 'Chad',\n        alpha2: 'TD',\n        alpha3: 'TCD',\n        numeric: '148',\n    },\n    {\n        country: 'Chile',\n        alpha2: 'CL',\n        alpha3: 'CHL',\n        numeric: '152',\n    },\n    {\n        country: 'China',\n        alpha2: 'CN',\n        alpha3: 'CHN',\n        numeric: '156',\n    },\n    {\n        country: 'Christmas Island',\n        alpha2: 'CX',\n        alpha3: 'CXR',\n        numeric: '162',\n    },\n    {\n        country: 'Cocos Islands',\n        alpha2: 'CC',\n        alpha3: 'CCK',\n        numeric: '166',\n    },\n    {\n        country: 'Colombia',\n        alpha2: 'CO',\n        alpha3: 'COL',\n        numeric: '170',\n    },\n    {\n        country: 'Comoros',\n        alpha2: 'KM',\n        alpha3: 'COM',\n        numeric: '174',\n    },\n    {\n        country: 'Congo',\n        alpha2: 'CG',\n        alpha3: 'COG',\n        numeric: '178',\n    },\n    {\n        country: 'Congo',\n        alpha2: 'CD',\n        alpha3: 'COD',\n        numeric: '180',\n    },\n    {\n        country: 'Cook Islands',\n        alpha2: 'CK',\n        alpha3: 'COK',\n        numeric: '184',\n    },\n    {\n        country: 'Costa Rica',\n        alpha2: 'CR',\n        alpha3: 'CRI',\n        numeric: '188',\n    },\n    {\n        country: \"Côte d'Ivoire\",\n        alpha2: 'CI',\n        alpha3: 'CIV',\n        numeric: '384',\n    },\n    {\n        country: 'Croatia',\n        alpha2: 'HR',\n        alpha3: 'HRV',\n        numeric: '191',\n    },\n    {\n        country: 'Cuba',\n        alpha2: 'CU',\n        alpha3: 'CUB',\n        numeric: '192',\n    },\n    {\n        country: 'Curaçao',\n        alpha2: 'CW',\n        alpha3: 'CUW',\n        numeric: '531',\n    },\n    {\n        country: 'Cyprus',\n        alpha2: 'CY',\n        alpha3: 'CYP',\n        numeric: '196',\n    },\n    {\n        country: 'Czech Republic',\n        alpha2: 'CZ',\n        alpha3: 'CZE',\n        numeric: '203',\n    },\n    {\n        country: 'Denmark',\n        alpha2: 'DK',\n        alpha3: 'DNK',\n        numeric: '208',\n    },\n    {\n        country: 'Djibouti',\n        alpha2: 'DJ',\n        alpha3: 'DJI',\n        numeric: '262',\n    },\n    {\n        country: 'Dominica',\n        alpha2: 'DM',\n        alpha3: 'DMA',\n        numeric: '212',\n    },\n    {\n        country: 'Dominican Republic',\n        alpha2: 'DO',\n        alpha3: 'DOM',\n        numeric: '214',\n    },\n    {\n        country: 'Ecuador',\n        alpha2: 'EC',\n        alpha3: 'ECU',\n        numeric: '218',\n    },\n    {\n        country: 'Egypt',\n        alpha2: 'EG',\n        alpha3: 'EGY',\n        numeric: '818',\n    },\n    {\n        country: 'El Salvador',\n        alpha2: 'SV',\n        alpha3: 'SLV',\n        numeric: '222',\n    },\n    {\n        country: 'Equatorial Guinea',\n        alpha2: 'GQ',\n        alpha3: 'GNQ',\n        numeric: '226',\n    },\n    {\n        country: 'Eritrea',\n        alpha2: 'ER',\n        alpha3: 'ERI',\n        numeric: '232',\n    },\n    {\n        country: 'Estonia',\n        alpha2: 'EE',\n        alpha3: 'EST',\n        numeric: '233',\n    },\n    {\n        country: 'Ethiopia',\n        alpha2: 'ET',\n        alpha3: 'ETH',\n        numeric: '231',\n    },\n    {\n        country: 'Falkland Islands',\n        alpha2: 'FK',\n        alpha3: 'FLK',\n        numeric: '238',\n    },\n    {\n        country: 'Faroe Islands',\n        alpha2: 'FO',\n        alpha3: 'FRO',\n        numeric: '234',\n    },\n    {\n        country: 'Fiji',\n        alpha2: 'FJ',\n        alpha3: 'FJI',\n        numeric: '242',\n    },\n    {\n        country: 'Finland',\n        alpha2: 'FI',\n        alpha3: 'FIN',\n        numeric: '246',\n    },\n    {\n        country: 'France',\n        alpha2: 'FR',\n        alpha3: 'FRA',\n        numeric: '250',\n    },\n    {\n        country: 'French Guiana',\n        alpha2: 'GF',\n        alpha3: 'GUF',\n        numeric: '254',\n    },\n    {\n        country: 'French Polynesia',\n        alpha2: 'PF',\n        alpha3: 'PYF',\n        numeric: '258',\n    },\n    {\n        country: 'French Southern Territories',\n        alpha2: 'TF',\n        alpha3: 'ATF',\n        numeric: '260',\n    },\n    {\n        country: 'Gabon',\n        alpha2: 'GA',\n        alpha3: 'GAB',\n        numeric: '266',\n    },\n    {\n        country: 'Gambia',\n        alpha2: 'GM',\n        alpha3: 'GMB',\n        numeric: '270',\n    },\n    {\n        country: 'Georgia',\n        alpha2: 'GE',\n        alpha3: 'GEO',\n        numeric: '268',\n    },\n    {\n        country: 'Germany',\n        alpha2: 'DE',\n        alpha3: 'DEU',\n        numeric: '276',\n    },\n    {\n        country: 'Ghana',\n        alpha2: 'GH',\n        alpha3: 'GHA',\n        numeric: '288',\n    },\n    {\n        country: 'Gibraltar',\n        alpha2: 'GI',\n        alpha3: 'GIB',\n        numeric: '292',\n    },\n    {\n        country: 'Greece',\n        alpha2: 'GR',\n        alpha3: 'GRC',\n        numeric: '300',\n    },\n    {\n        country: 'Greenland',\n        alpha2: 'GL',\n        alpha3: 'GRL',\n        numeric: '304',\n    },\n    {\n        country: 'Grenada',\n        alpha2: 'GD',\n        alpha3: 'GRD',\n        numeric: '308',\n    },\n    {\n        country: 'Guadeloupe',\n        alpha2: 'GP',\n        alpha3: 'GLP',\n        numeric: '312',\n    },\n    {\n        country: 'Guam',\n        alpha2: 'GU',\n        alpha3: 'GUM',\n        numeric: '316',\n    },\n    {\n        country: 'Guatemala',\n        alpha2: 'GT',\n        alpha3: 'GTM',\n        numeric: '320',\n    },\n    {\n        country: 'Guernsey',\n        alpha2: 'GG',\n        alpha3: 'GGY',\n        numeric: '831',\n    },\n    {\n        country: 'Guinea',\n        alpha2: 'GN',\n        alpha3: 'GIN',\n        numeric: '324',\n    },\n    {\n        country: 'Guinea-Bissau',\n        alpha2: 'GW',\n        alpha3: 'GNB',\n        numeric: '624',\n    },\n    {\n        country: 'Guyana',\n        alpha2: 'GY',\n        alpha3: 'GUY',\n        numeric: '328',\n    },\n    {\n        country: 'Haiti',\n        alpha2: 'HT',\n        alpha3: 'HTI',\n        numeric: '332',\n    },\n    {\n        country: 'Heard Island and McDonald Islands',\n        alpha2: 'HM',\n        alpha3: 'HMD',\n        numeric: '334',\n    },\n    {\n        country: 'Holy See',\n        alpha2: 'VA',\n        alpha3: 'VAT',\n        numeric: '336',\n    },\n    {\n        country: 'Honduras',\n        alpha2: 'HN',\n        alpha3: 'HND',\n        numeric: '340',\n    },\n    {\n        country: 'Hong Kong',\n        alpha2: 'HK',\n        alpha3: 'HKG',\n        numeric: '344',\n    },\n    {\n        country: 'Hungary',\n        alpha2: 'HU',\n        alpha3: 'HUN',\n        numeric: '348',\n    },\n    {\n        country: 'Iceland',\n        alpha2: 'IS',\n        alpha3: 'ISL',\n        numeric: '352',\n    },\n    {\n        country: 'India',\n        alpha2: 'IN',\n        alpha3: 'IND',\n        numeric: '356',\n    },\n    {\n        country: 'Indonesia',\n        alpha2: 'ID',\n        alpha3: 'IDN',\n        numeric: '360',\n    },\n    {\n        country: 'Islamic Republic of Iran',\n        alpha2: 'IR',\n        alpha3: 'IRN',\n        numeric: '364',\n    },\n    {\n        country: 'Iraq',\n        alpha2: 'IQ',\n        alpha3: 'IRQ',\n        numeric: '368',\n    },\n    {\n        country: 'Ireland',\n        alpha2: 'IE',\n        alpha3: 'IRL',\n        numeric: '372',\n    },\n    {\n        country: 'Isle of Man',\n        alpha2: 'IM',\n        alpha3: 'IMN',\n        numeric: '833',\n    },\n    {\n        country: 'Israel',\n        alpha2: 'IL',\n        alpha3: 'ISR',\n        numeric: '376',\n    },\n    {\n        country: 'Italy',\n        alpha2: 'IT',\n        alpha3: 'ITA',\n        numeric: '380',\n    },\n    {\n        country: 'Jamaica',\n        alpha2: 'JM',\n        alpha3: 'JAM',\n        numeric: '388',\n    },\n    {\n        country: 'Japan',\n        alpha2: 'JP',\n        alpha3: 'JPN',\n        numeric: '392',\n    },\n    {\n        country: 'Jersey',\n        alpha2: 'JE',\n        alpha3: 'JEY',\n        numeric: '832',\n    },\n    {\n        country: 'Jordan',\n        alpha2: 'JO',\n        alpha3: 'JOR',\n        numeric: '400',\n    },\n    {\n        country: 'Kazakhstan',\n        alpha2: 'KZ',\n        alpha3: 'KAZ',\n        numeric: '398',\n    },\n    {\n        country: 'Kenya',\n        alpha2: 'KE',\n        alpha3: 'KEN',\n        numeric: '404',\n    },\n    {\n        country: 'Kiribati',\n        alpha2: 'KI',\n        alpha3: 'KIR',\n        numeric: '296',\n    },\n    {\n        country: \"Democratic People's Republic of Korea\",\n        alpha2: 'KP',\n        alpha3: 'PRK',\n        numeric: '408',\n    },\n    {\n        country: 'Republic of Korea',\n        alpha2: 'KR',\n        alpha3: 'KOR',\n        numeric: '410',\n    },\n    {\n        country: 'Kuwait',\n        alpha2: 'KW',\n        alpha3: 'KWT',\n        numeric: '414',\n    },\n    {\n        country: 'Kyrgyzstan',\n        alpha2: 'KG',\n        alpha3: 'KGZ',\n        numeric: '417',\n    },\n    {\n        country: \"Lao People's Democratic Republic\",\n        alpha2: 'LA',\n        alpha3: 'LAO',\n        numeric: '418',\n    },\n    {\n        country: 'Latvia',\n        alpha2: 'LV',\n        alpha3: 'LVA',\n        numeric: '428',\n    },\n    {\n        country: 'Lebanon',\n        alpha2: 'LB',\n        alpha3: 'LBN',\n        numeric: '422',\n    },\n    {\n        country: 'Lesotho',\n        alpha2: 'LS',\n        alpha3: 'LSO',\n        numeric: '426',\n    },\n    {\n        country: 'Liberia',\n        alpha2: 'LR',\n        alpha3: 'LBR',\n        numeric: '430',\n    },\n    {\n        country: 'Libya',\n        alpha2: 'LY',\n        alpha3: 'LBY',\n        numeric: '434',\n    },\n    {\n        country: 'Liechtenstein',\n        alpha2: 'LI',\n        alpha3: 'LIE',\n        numeric: '438',\n    },\n    {\n        country: 'Lithuania',\n        alpha2: 'LT',\n        alpha3: 'LTU',\n        numeric: '440',\n    },\n    {\n        country: 'Luxembourg',\n        alpha2: 'LU',\n        alpha3: 'LUX',\n        numeric: '442',\n    },\n    {\n        country: 'Macao',\n        alpha2: 'MO',\n        alpha3: 'MAC',\n        numeric: '446',\n    },\n    {\n        country: 'Macedonia',\n        alpha2: 'MK',\n        alpha3: 'MKD',\n        numeric: '807',\n    },\n    {\n        country: 'Madagascar',\n        alpha2: 'MG',\n        alpha3: 'MDG',\n        numeric: '450',\n    },\n    {\n        country: 'Malawi',\n        alpha2: 'MW',\n        alpha3: 'MWI',\n        numeric: '454',\n    },\n    {\n        country: 'Malaysia',\n        alpha2: 'MY',\n        alpha3: 'MYS',\n        numeric: '458',\n    },\n    {\n        country: 'Maldives',\n        alpha2: 'MV',\n        alpha3: 'MDV',\n        numeric: '462',\n    },\n    {\n        country: 'Mali',\n        alpha2: 'ML',\n        alpha3: 'MLI',\n        numeric: '466',\n    },\n    {\n        country: 'Malta',\n        alpha2: 'MT',\n        alpha3: 'MLT',\n        numeric: '470',\n    },\n    {\n        country: 'Marshall Islands',\n        alpha2: 'MH',\n        alpha3: 'MHL',\n        numeric: '584',\n    },\n    {\n        country: 'Martinique',\n        alpha2: 'MQ',\n        alpha3: 'MTQ',\n        numeric: '474',\n    },\n    {\n        country: 'Mauritania',\n        alpha2: 'MR',\n        alpha3: 'MRT',\n        numeric: '478',\n    },\n    {\n        country: 'Mauritius',\n        alpha2: 'MU',\n        alpha3: 'MUS',\n        numeric: '480',\n    },\n    {\n        country: 'Mayotte',\n        alpha2: 'YT',\n        alpha3: 'MYT',\n        numeric: '175',\n    },\n    {\n        country: 'Mexico',\n        alpha2: 'MX',\n        alpha3: 'MEX',\n        numeric: '484',\n    },\n    {\n        country: 'Federated States of Micronesia',\n        alpha2: 'FM',\n        alpha3: 'FSM',\n        numeric: '583',\n    },\n    {\n        country: 'Republic of Moldova',\n        alpha2: 'MD',\n        alpha3: 'MDA',\n        numeric: '498',\n    },\n    {\n        country: 'Monaco',\n        alpha2: 'MC',\n        alpha3: 'MCO',\n        numeric: '492',\n    },\n    {\n        country: 'Mongolia',\n        alpha2: 'MN',\n        alpha3: 'MNG',\n        numeric: '496',\n    },\n    {\n        country: 'Montenegro',\n        alpha2: 'ME',\n        alpha3: 'MNE',\n        numeric: '499',\n    },\n    {\n        country: 'Montserrat',\n        alpha2: 'MS',\n        alpha3: 'MSR',\n        numeric: '500',\n    },\n    {\n        country: 'Morocco',\n        alpha2: 'MA',\n        alpha3: 'MAR',\n        numeric: '504',\n    },\n    {\n        country: 'Mozambique',\n        alpha2: 'MZ',\n        alpha3: 'MOZ',\n        numeric: '508',\n    },\n    {\n        country: 'Myanmar',\n        alpha2: 'MM',\n        alpha3: 'MMR',\n        numeric: '104',\n    },\n    {\n        country: 'Namibia',\n        alpha2: 'NA',\n        alpha3: 'NAM',\n        numeric: '516',\n    },\n    {\n        country: 'Nauru',\n        alpha2: 'NR',\n        alpha3: 'NRU',\n        numeric: '520',\n    },\n    {\n        country: 'Nepal',\n        alpha2: 'NP',\n        alpha3: 'NPL',\n        numeric: '524',\n    },\n    {\n        country: 'Netherlands',\n        alpha2: 'NL',\n        alpha3: 'NLD',\n        numeric: '528',\n    },\n    {\n        country: 'New Caledonia',\n        alpha2: 'NC',\n        alpha3: 'NCL',\n        numeric: '540',\n    },\n    {\n        country: 'New Zealand',\n        alpha2: 'NZ',\n        alpha3: 'NZL',\n        numeric: '554',\n    },\n    {\n        country: 'Nicaragua',\n        alpha2: 'NI',\n        alpha3: 'NIC',\n        numeric: '558',\n    },\n    {\n        country: 'Niger',\n        alpha2: 'NE',\n        alpha3: 'NER',\n        numeric: '562',\n    },\n    {\n        country: 'Nigeria',\n        alpha2: 'NG',\n        alpha3: 'NGA',\n        numeric: '566',\n    },\n    {\n        country: 'Niue',\n        alpha2: 'NU',\n        alpha3: 'NIU',\n        numeric: '570',\n    },\n    {\n        country: 'Norfolk Island',\n        alpha2: 'NF',\n        alpha3: 'NFK',\n        numeric: '574',\n    },\n    {\n        country: 'Northern Mariana Islands',\n        alpha2: 'MP',\n        alpha3: 'MNP',\n        numeric: '580',\n    },\n    {\n        country: 'Norway',\n        alpha2: 'NO',\n        alpha3: 'NOR',\n        numeric: '578',\n    },\n    {\n        country: 'Oman',\n        alpha2: 'OM',\n        alpha3: 'OMN',\n        numeric: '512',\n    },\n    {\n        country: 'Pakistan',\n        alpha2: 'PK',\n        alpha3: 'PAK',\n        numeric: '586',\n    },\n    {\n        country: 'Palau',\n        alpha2: 'PW',\n        alpha3: 'PLW',\n        numeric: '585',\n    },\n    {\n        country: 'State of Palestine',\n        alpha2: 'PS',\n        alpha3: 'PSE',\n        numeric: '275',\n    },\n    {\n        country: 'Panama',\n        alpha2: 'PA',\n        alpha3: 'PAN',\n        numeric: '591',\n    },\n    {\n        country: 'Papua New Guinea',\n        alpha2: 'PG',\n        alpha3: 'PNG',\n        numeric: '598',\n    },\n    {\n        country: 'Paraguay',\n        alpha2: 'PY',\n        alpha3: 'PRY',\n        numeric: '600',\n    },\n    {\n        country: 'Peru',\n        alpha2: 'PE',\n        alpha3: 'PER',\n        numeric: '604',\n    },\n    {\n        country: 'Philippines',\n        alpha2: 'PH',\n        alpha3: 'PHL',\n        numeric: '608',\n    },\n    {\n        country: 'Pitcairn',\n        alpha2: 'PN',\n        alpha3: 'PCN',\n        numeric: '612',\n    },\n    {\n        country: 'Poland',\n        alpha2: 'PL',\n        alpha3: 'POL',\n        numeric: '616',\n    },\n    {\n        country: 'Portugal',\n        alpha2: 'PT',\n        alpha3: 'PRT',\n        numeric: '620',\n    },\n    {\n        country: 'Puerto Rico',\n        alpha2: 'PR',\n        alpha3: 'PRI',\n        numeric: '630',\n    },\n    {\n        country: 'Qatar',\n        alpha2: 'QA',\n        alpha3: 'QAT',\n        numeric: '634',\n    },\n    {\n        country: 'Réunion',\n        alpha2: 'RE',\n        alpha3: 'REU',\n        numeric: '638',\n    },\n    {\n        country: 'Romania',\n        alpha2: 'RO',\n        alpha3: 'ROU',\n        numeric: '642',\n    },\n    {\n        country: 'Russian Federation',\n        alpha2: 'RU',\n        alpha3: 'RUS',\n        numeric: '643',\n    },\n    {\n        country: 'Rwanda',\n        alpha2: 'RW',\n        alpha3: 'RWA',\n        numeric: '646',\n    },\n    {\n        country: 'Saint Barthélemy',\n        alpha2: 'BL',\n        alpha3: 'BLM',\n        numeric: '652',\n    },\n    {\n        country: 'Saint Helena, Ascension and Tristan da Cunha',\n        alpha2: 'SH',\n        alpha3: 'SHN',\n        numeric: '654',\n    },\n    {\n        country: 'Saint Kitts and Nevis',\n        alpha2: 'KN',\n        alpha3: 'KNA',\n        numeric: '659',\n    },\n    {\n        country: 'Saint Lucia',\n        alpha2: 'LC',\n        alpha3: 'LCA',\n        numeric: '662',\n    },\n    {\n        country: 'Saint Martin',\n        alpha2: 'MF',\n        alpha3: 'MAF',\n        numeric: '663',\n    },\n    {\n        country: 'Saint Pierre and Miquelon',\n        alpha2: 'PM',\n        alpha3: 'SPM',\n        numeric: '666',\n    },\n    {\n        country: 'Saint Vincent and the Grenadines',\n        alpha2: 'VC',\n        alpha3: 'VCT',\n        numeric: '670',\n    },\n    {\n        country: 'Samoa',\n        alpha2: 'WS',\n        alpha3: 'WSM',\n        numeric: '882',\n    },\n    {\n        country: 'San Marino',\n        alpha2: 'SM',\n        alpha3: 'SMR',\n        numeric: '674',\n    },\n    {\n        country: 'Sao Tome and Principe',\n        alpha2: 'ST',\n        alpha3: 'STP',\n        numeric: '678',\n    },\n    {\n        country: 'Saudi Arabia',\n        alpha2: 'SA',\n        alpha3: 'SAU',\n        numeric: '682',\n    },\n    {\n        country: 'Senegal',\n        alpha2: 'SN',\n        alpha3: 'SEN',\n        numeric: '686',\n    },\n    {\n        country: 'Serbia',\n        alpha2: 'RS',\n        alpha3: 'SRB',\n        numeric: '688',\n    },\n    {\n        country: 'Seychelles',\n        alpha2: 'SC',\n        alpha3: 'SYC',\n        numeric: '690',\n    },\n    {\n        country: 'Sierra Leone',\n        alpha2: 'SL',\n        alpha3: 'SLE',\n        numeric: '694',\n    },\n    {\n        country: 'Singapore',\n        alpha2: 'SG',\n        alpha3: 'SGP',\n        numeric: '702',\n    },\n    {\n        country: 'Sint Maarten',\n        alpha2: 'SX',\n        alpha3: 'SXM',\n        numeric: '534',\n    },\n    {\n        country: 'Slovakia',\n        alpha2: 'SK',\n        alpha3: 'SVK',\n        numeric: '703',\n    },\n    {\n        country: 'Slovenia',\n        alpha2: 'SI',\n        alpha3: 'SVN',\n        numeric: '705',\n    },\n    {\n        country: 'Solomon Islands',\n        alpha2: 'SB',\n        alpha3: 'SLB',\n        numeric: '090',\n    },\n    {\n        country: 'Somalia',\n        alpha2: 'SO',\n        alpha3: 'SOM',\n        numeric: '706',\n    },\n    {\n        country: 'South Africa',\n        alpha2: 'ZA',\n        alpha3: 'ZAF',\n        numeric: '710',\n    },\n    {\n        country: 'South Georgia and the South Sandwich Islands',\n        alpha2: 'GS',\n        alpha3: 'SGS',\n        numeric: '239',\n    },\n    {\n        country: 'South Sudan',\n        alpha2: 'SS',\n        alpha3: 'SSD',\n        numeric: '728',\n    },\n    {\n        country: 'Spain',\n        alpha2: 'ES',\n        alpha3: 'ESP',\n        numeric: '724',\n    },\n    {\n        country: 'Sri Lanka',\n        alpha2: 'LK',\n        alpha3: 'LKA',\n        numeric: '144',\n    },\n    {\n        country: 'Sudan',\n        alpha2: 'SD',\n        alpha3: 'SDN',\n        numeric: '729',\n    },\n    {\n        country: 'Suriname',\n        alpha2: 'SR',\n        alpha3: 'SUR',\n        numeric: '740',\n    },\n    {\n        country: 'Svalbard and Jan Mayen',\n        alpha2: 'SJ',\n        alpha3: 'SJM',\n        numeric: '744',\n    },\n    {\n        country: 'Swaziland',\n        alpha2: 'SZ',\n        alpha3: 'SWZ',\n        numeric: '748',\n    },\n    {\n        country: 'Sweden',\n        alpha2: 'SE',\n        alpha3: 'SWE',\n        numeric: '752',\n    },\n    {\n        country: 'Switzerland',\n        alpha2: 'CH',\n        alpha3: 'CHE',\n        numeric: '756',\n    },\n    {\n        country: 'Syrian Arab Republic',\n        alpha2: 'SY',\n        alpha3: 'SYR',\n        numeric: '760',\n    },\n    {\n        country: 'Taiwan, Province of China',\n        alpha2: 'TW',\n        alpha3: 'TWN',\n        numeric: '158',\n    },\n    {\n        country: 'Tajikistan',\n        alpha2: 'TJ',\n        alpha3: 'TJK',\n        numeric: '762',\n    },\n    {\n        country: 'United Republic of Tanzania',\n        alpha2: 'TZ',\n        alpha3: 'TZA',\n        numeric: '834',\n    },\n    {\n        country: 'Thailand',\n        alpha2: 'TH',\n        alpha3: 'THA',\n        numeric: '764',\n    },\n    {\n        country: 'Timor-Leste',\n        alpha2: 'TL',\n        alpha3: 'TLS',\n        numeric: '626',\n    },\n    {\n        country: 'Togo',\n        alpha2: 'TG',\n        alpha3: 'TGO',\n        numeric: '768',\n    },\n    {\n        country: 'Tokelau',\n        alpha2: 'TK',\n        alpha3: 'TKL',\n        numeric: '772',\n    },\n    {\n        country: 'Tonga',\n        alpha2: 'TO',\n        alpha3: 'TON',\n        numeric: '776',\n    },\n    {\n        country: 'Trinidad and Tobago',\n        alpha2: 'TT',\n        alpha3: 'TTO',\n        numeric: '780',\n    },\n    {\n        country: 'Tunisia',\n        alpha2: 'TN',\n        alpha3: 'TUN',\n        numeric: '788',\n    },\n    {\n        country: 'Turkey',\n        alpha2: 'TR',\n        alpha3: 'TUR',\n        numeric: '792',\n    },\n    {\n        country: 'Turkmenistan',\n        alpha2: 'TM',\n        alpha3: 'TKM',\n        numeric: '795',\n    },\n    {\n        country: 'Turks and Caicos Islands',\n        alpha2: 'TC',\n        alpha3: 'TCA',\n        numeric: '796',\n    },\n    {\n        country: 'Tuvalu',\n        alpha2: 'TV',\n        alpha3: 'TUV',\n        numeric: '798',\n    },\n    {\n        country: 'Uganda',\n        alpha2: 'UG',\n        alpha3: 'UGA',\n        numeric: '800',\n    },\n    {\n        country: 'Ukraine',\n        alpha2: 'UA',\n        alpha3: 'UKR',\n        numeric: '804',\n    },\n    {\n        country: 'United Arab Emirates',\n        alpha2: 'AE',\n        alpha3: 'ARE',\n        numeric: '784',\n    },\n    {\n        country: 'United Kingdom of Great Britain and Northern Ireland',\n        alpha2: 'GB',\n        alpha3: 'GBR',\n        numeric: '826',\n    },\n    {\n        country: 'United States of America',\n        alpha2: 'US',\n        alpha3: 'USA',\n        numeric: '840',\n    },\n    {\n        country: 'United States Minor Outlying Islands',\n        alpha2: 'UM',\n        alpha3: 'UMI',\n        numeric: '581',\n    },\n    {\n        country: 'Uruguay',\n        alpha2: 'UY',\n        alpha3: 'URY',\n        numeric: '858',\n    },\n    {\n        country: 'Uzbekistan',\n        alpha2: 'UZ',\n        alpha3: 'UZB',\n        numeric: '860',\n    },\n    {\n        country: 'Vanuatu',\n        alpha2: 'VU',\n        alpha3: 'VUT',\n        numeric: '548',\n    },\n    {\n        country: 'Venezuela (Bolivarian Republic of)',\n        alpha2: 'VE',\n        alpha3: 'VEN',\n        numeric: '862',\n    },\n    {\n        country: 'Viet Nam',\n        alpha2: 'VN',\n        alpha3: 'VNM',\n        numeric: '704',\n    },\n    {\n        country: 'Virgin Islands',\n        alpha2: 'VG',\n        alpha3: 'VGB',\n        numeric: '092',\n    },\n    {\n        country: 'Virgin Islands of the United States',\n        alpha2: 'VI',\n        alpha3: 'VIR',\n        numeric: '850',\n    },\n    {\n        country: 'Wallis and Futuna',\n        alpha2: 'WF',\n        alpha3: 'WLF',\n        numeric: '876',\n    },\n    {\n        country: 'Western Sahara',\n        alpha2: 'EH',\n        alpha3: 'ESH',\n        numeric: '732',\n    },\n    {\n        country: 'Yemen',\n        alpha2: 'YE',\n        alpha3: 'YEM',\n        numeric: '887',\n    },\n    {\n        country: 'Zambia',\n        alpha2: 'ZM',\n        alpha3: 'ZMB',\n        numeric: '894',\n    },\n    {\n        country: 'Zimbabwe',\n        alpha2: 'ZW',\n        alpha3: 'ZWE',\n        numeric: '716',\n    },\n];\nexports.default = countries;\n","import { whereAlpha2 } from 'iso-3166-1';\n\nimport { EU_MEMBERS, MAX_DATE, MIN_DATE, StatementTypes } from '../commonProofTypes.js';\nimport { AttributeKey, AttributeKeyString, AttributesKeys, IdDocType } from '../types.js';\nimport {\n    AtomicStatement,\n    IdStatement,\n    MembershipStatement,\n    NonMembershipStatement,\n    RangeStatement,\n} from './idProofTypes.js';\n\n/**\n * Given a number x, return the date string for x years ago.\n * @param yearsAgo how many years to go back from today\n * @param daysOffset optional, how many days should be added to the current date\n * @returns YYYYMMDD for x years ago today in local time.\n */\nexport function getPastDate(yearsAgo: number, daysOffset = 0): string {\n    const date = new Date();\n    date.setDate(date.getDate() + daysOffset);\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    const year = (date.getFullYear() - yearsAgo).toString();\n    return year + month + day;\n}\n\ninterface StatementBuilder {\n    addRange(attribute: AttributesKeys, lower: string, upper: string): IdStatementBuilder;\n\n    addMembership(attribute: AttributesKeys, set: string[]): IdStatementBuilder;\n\n    addNonMembership(attribute: AttributesKeys, set: string[]): IdStatementBuilder;\n    revealAttribute(attribute: AttributesKeys): IdStatementBuilder;\n    getStatement(): IdStatement;\n}\n\n/**\n * Converts the attribute value into the name string.\n */\nfunction getAttributeString(key: AttributesKeys): AttributeKey {\n    if (!(key in AttributesKeys)) {\n        throw new Error('invalid attribute key');\n    }\n    return AttributesKeys[key] as AttributeKey;\n}\n\nfunction isISO8601(date: string): boolean {\n    if (date.length !== 8) {\n        return false;\n    }\n    if (!/^\\d+$/.test(date)) {\n        return false;\n    }\n    const month = Number(date.substring(4, 6));\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    const day = Number(date.substring(6));\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    return true;\n}\n\nfunction isISO3166_1Alpha2(code: string) {\n    return Boolean(whereAlpha2(code)) && /^[A-Z][A-Z]$/.test(code);\n}\n\n/**\n * ISO3166-2 codes consist of a ISO3166_1Alpha2 code, then a dash, and then 1-3 alphanumerical characters\n */\nfunction isISO3166_2(code: string) {\n    return isISO3166_1Alpha2(code.substring(0, 2)) && /^\\-([a-zA-Z0-9]){1,3}$/.test(code.substring(2));\n}\n\nfunction verifyRangeStatement(statement: RangeStatement) {\n    if (statement.lower === undefined) {\n        throw new Error('Range statements must contain a lower field');\n    }\n    if (statement.upper === undefined) {\n        throw new Error('Range statements must contain an upper field');\n    }\n    if (statement.upper < statement.lower) {\n        throw new Error('Upper bound must be greater than lower bound');\n    }\n\n    switch (statement.attributeTag) {\n        case AttributeKeyString.dob:\n        case AttributeKeyString.idDocIssuedAt:\n        case AttributeKeyString.idDocExpiresAt: {\n            if (!isISO8601(statement.lower)) {\n                throw new Error(statement.attributeTag + ' lower range value must be YYYYMMDD');\n            }\n            if (!isISO8601(statement.upper)) {\n                throw new Error(statement.attributeTag + ' upper range value must be YYYYMMDD');\n            }\n            break;\n        }\n        default:\n            throw new Error(statement.attributeTag + ' is not allowed to be used in range statements');\n    }\n}\n\nfunction verifySetStatement(statement: MembershipStatement | NonMembershipStatement, typeName: string) {\n    if (statement.set === undefined) {\n        throw new Error(typeName + 'statements must contain a lower field');\n    }\n    if (statement.set.length === 0) {\n        throw new Error(typeName + ' statements may not use empty sets');\n    }\n\n    switch (statement.attributeTag) {\n        case AttributeKeyString.countryOfResidence:\n        case AttributeKeyString.nationality:\n            if (!statement.set.every(isISO3166_1Alpha2)) {\n                throw new Error(statement.attributeTag + ' values must be ISO3166-1 Alpha 2 codes in upper case');\n            }\n            break;\n        case AttributeKeyString.idDocIssuer:\n            if (!statement.set.every((x) => isISO3166_1Alpha2(x) || isISO3166_2(x))) {\n                throw new Error('idDocIssuer must be ISO3166-1 Alpha 2  in upper case or ISO3166-2 codes');\n            }\n            break;\n        case AttributeKeyString.idDocType:\n            if (!statement.set.every((v) => Object.values(IdDocType).includes(v as IdDocType))) {\n                throw new Error('idDocType values must be one from IdDocType enum');\n            }\n            break;\n        case AttributeKeyString.legalCountry:\n            if (!statement.set.every(isISO3166_1Alpha2)) {\n                throw new Error(statement.attributeTag + ' values must be ISO3166-1 Alpha 2 codes in upper case');\n            }\n            break;\n        default:\n            throw new Error(statement.attributeTag + ' is not allowed to be used in ' + typeName + ' statements');\n    }\n}\n\nfunction verifyAtomicStatement(statement: AtomicStatement, existingStatements: IdStatement) {\n    if (statement.type === undefined) {\n        throw new Error('Statements must contain a type field');\n    }\n    if (statement.attributeTag === undefined) {\n        throw new Error('Statements must contain an attributeTag field');\n    }\n    if (!(statement.attributeTag in AttributeKeyString)) {\n        throw new Error('Unknown attributeTag: ' + statement.attributeTag);\n    }\n    if (existingStatements.some((v) => v.attributeTag === statement.attributeTag)) {\n        throw new Error('Only 1 statement is allowed for each attribute');\n    }\n    switch (statement.type) {\n        case StatementTypes.AttributeInRange:\n            return verifyRangeStatement(statement);\n        case StatementTypes.AttributeInSet:\n            return verifySetStatement(statement, 'membership');\n        case StatementTypes.AttributeNotInSet:\n            return verifySetStatement(statement, 'non-membership');\n        case StatementTypes.RevealAttribute:\n            return;\n        default:\n            throw new Error(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                'Unknown statement type: ' + (statement as any).type\n            );\n    }\n}\n\n/**\n * Check that the Id statement is well formed and do not break any rules.\n * If it does not verify, this throw an error.\n */\nexport function verifyIdstatement(statements: IdStatement): boolean {\n    if (statements.length === 0) {\n        throw new Error('Empty statements are not allowed');\n    }\n    const checkedStatements = [];\n    for (const s of statements) {\n        verifyAtomicStatement(s, checkedStatements);\n        checkedStatements.push(s);\n    }\n    return true;\n}\n\nexport class IdStatementBuilder implements StatementBuilder {\n    statements: IdStatement;\n    checkConstraints: boolean;\n\n    constructor(checkConstraints = true) {\n        this.statements = [];\n        this.checkConstraints = checkConstraints;\n    }\n\n    /**\n     * Outputs the built statement.\n     */\n    getStatement(): IdStatement {\n        return this.statements;\n    }\n\n    /**\n     * If checkConstraints is true, this checks whether the given statement may be added to the statement being built.\n     * If the statement breaks any rules, this will throw an error.\n     */\n    private check(statement: AtomicStatement) {\n        if (this.checkConstraints) {\n            verifyAtomicStatement(statement, this.statements);\n        }\n    }\n\n    /**\n     * Add to the statement, that the given attribute should be in the given range, i.e. that lower <= attribute < upper.\n     * @param attribute the attribute that should be checked\n     * @param lower: the lower end of the range, inclusive.\n     * @param upper: the upper end of the range, exclusive.\n     * @returns the updated builder\n     */\n    addRange(\n        // TODO: use an Enum with string values instead, maybe?\n        attribute: AttributesKeys,\n        lower: string,\n        upper: string\n    ): IdStatementBuilder {\n        const statement: AtomicStatement = {\n            type: StatementTypes.AttributeInRange,\n            attributeTag: getAttributeString(attribute),\n            lower,\n            upper,\n        };\n        this.check(statement);\n        this.statements.push(statement);\n        return this;\n    }\n\n    /**\n     * Add to the statement, that the given attribute should be one of the values in the given set.\n     * @param attribute the attribute that should be checked\n     * @param set: the set of values that the attribute must be included in.\n     * @returns the updated builder\n     */\n    addMembership(attribute: AttributesKeys, set: string[]): IdStatementBuilder {\n        const statement: AtomicStatement = {\n            type: StatementTypes.AttributeInSet,\n            attributeTag: getAttributeString(attribute),\n            set,\n        };\n        this.check(statement);\n        this.statements.push(statement);\n        return this;\n    }\n\n    /**\n     * Add to the statement, that the given attribute should be one of the values in the given set.\n     * @param attribute the attribute that should be checked\n     * @param set: the set of values that the attribute must be included in.\n     * @returns the updated builder\n     */\n    addNonMembership(attribute: AttributesKeys, set: string[]): IdStatementBuilder {\n        const statement: AtomicStatement = {\n            type: StatementTypes.AttributeNotInSet,\n            attributeTag: getAttributeString(attribute),\n            set,\n        };\n        this.check(statement);\n        this.statements.push(statement);\n        return this;\n    }\n\n    /**\n     * Add to the statement, that the given attribute should be revealed.\n     * The proof will contain the value.\n     * @param attribute the attribute that should be revealed\n     * @returns the updated builder\n     */\n    revealAttribute(attribute: AttributesKeys): IdStatementBuilder {\n        const statement: AtomicStatement = {\n            type: StatementTypes.RevealAttribute,\n            attributeTag: getAttributeString(attribute),\n        };\n        this.check(statement);\n        this.statements.push(statement);\n        return this;\n    }\n\n    /**\n     * Add to the statement that the age is at minimum the given value.\n     * This adds a range statement that the date of birth is between 1st of january 1800 and <age> years ago.\n     * @param age: the minimum age allowed.\n     * @returns the updated builder\n     */\n    addMinimumAge(age: number): IdStatementBuilder {\n        return this.addRange(AttributesKeys.dob, MIN_DATE, getPastDate(age, 1));\n    }\n\n    /**\n     * Add to the statement that the age is at maximum the given value.\n     * This adds a range statement that the date of birth is between <age + 1> years ago and 1st of january 9999.\n     * @param age: the maximum age allowed.\n     * @returns the updated builder\n     */\n    addMaximumAge(age: number): IdStatementBuilder {\n        return this.addRange(AttributesKeys.dob, getPastDate(age + 1, 1), MAX_DATE);\n    }\n\n    /**\n     * Add to the statement that the age is between two given ages.\n     * This adds a range statement that the date of birth is between <maxAge> years ago and <minAge> years ago.\n     * @param minAge: the maximum age allowed.\n     * @param maxAge: the maximum age allowed.\n     * @returns the updated builder\n     */\n    addAgeInRange(minAge: number, maxAge: number): IdStatementBuilder {\n        return this.addRange(AttributesKeys.dob, getPastDate(maxAge + 1, 1), getPastDate(minAge));\n    }\n\n    /**\n     * Add to the statement that the user's document expiry is atleast the given date.\n     * This adds a range statement that the idDocExpiresAt is between the given date and 1st of january 9999 .\n     * @param earliestDate: the earliest the document is allow to be expired at, should be a string in YYYYMMDD format.\n     * @returns the updated builder\n     */\n    documentExpiryNoEarlierThan(earliestDate: string): IdStatementBuilder {\n        return this.addRange(AttributesKeys.idDocExpiresAt, earliestDate, MAX_DATE);\n    }\n\n    /**\n     * Add to the statement that the country of residence is one of the EU countries\n     * @returns the updated builder\n     */\n    addEUResidency(): IdStatementBuilder {\n        return this.addMembership(AttributesKeys.countryOfResidence, EU_MEMBERS);\n    }\n\n    /**\n     * Add to the statement that the nationality is one of the EU countries\n     * @returns the updated builder\n     */\n    addEUNationality(): IdStatementBuilder {\n        return this.addMembership(AttributesKeys.nationality, EU_MEMBERS);\n    }\n}\n","import { type Upward, isKnown } from '../grpc/upward.js';\nimport { CreatePLTPayload } from '../plt/types.js';\nimport { AccountTransactionType, TransactionStatusEnum, TransactionSummaryType } from '../types.js';\nimport { isDefined } from '../util.js';\nimport * as AccountAddress from './AccountAddress.js';\nimport type * as BlockHash from './BlockHash.js';\nimport * as ContractAddress from './ContractAddress.js';\nimport type * as ContractEvent from './ContractEvent.js';\nimport type * as Energy from './Energy.js';\nimport type * as TransactionHash from './TransactionHash.js';\nimport { UpdateInstructionPayload } from './chainUpdate.js';\nimport { RejectReason } from './rejectReason.js';\nimport {\n    AccountTransferredEvent,\n    AmountAddedByDecryptionEvent,\n    BakerAddedEvent,\n    BakerEvent,\n    BakerKeysUpdatedEvent,\n    BakerRemovedEvent,\n    BakerSetRestakeEarningsEvent,\n    BakerStakeChangedEvent,\n    ContractInitializedEvent,\n    ContractTraceEvent,\n    CredentialKeysUpdatedEvent,\n    CredentialsUpdatedEvent,\n    DataRegisteredEvent,\n    DelegationEvent,\n    EncryptedAmountsRemovedEvent,\n    EncryptedSelfAmountAddedEvent,\n    MemoEvent,\n    ModuleDeployedEvent,\n    NewEncryptedAmountEvent,\n    TokenEvent,\n    TransactionEventTag,\n    TransferredWithScheduleEvent,\n} from './transactionEvent.js';\n\nexport interface BaseBlockItemSummary {\n    index: bigint;\n    energyCost: Energy.Type;\n    hash: TransactionHash.Type;\n}\n\nexport interface BaseAccountTransactionSummary extends BaseBlockItemSummary {\n    type: TransactionSummaryType.AccountTransaction;\n    cost: bigint;\n    sender: AccountAddress.Type;\n}\n\nexport enum TransactionKindString {\n    DeployModule = 'deployModule',\n    InitContract = 'initContract',\n    Update = 'update',\n    Transfer = 'transfer',\n    AddBaker = 'addBaker',\n    RemoveBaker = 'removeBaker',\n    UpdateBakerStake = 'updateBakerStake',\n    UpdateBakerRestakeEarnings = 'updateBakerRestakeEarnings',\n    UpdateBakerKeys = 'updateBakerKeys',\n    UpdateCredentialKeys = 'updateCredentialKeys',\n    BakingReward = 'bakingReward',\n    BlockReward = 'blockReward',\n    FinalizationReward = 'finalizationReward',\n    EncryptedAmountTransfer = 'encryptedAmountTransfer',\n    TransferToEncrypted = 'transferToEncrypted',\n    TransferToPublic = 'transferToPublic',\n    TransferWithSchedule = 'transferWithSchedule',\n    UpdateCredentials = 'updateCredentials',\n    RegisterData = 'registerData',\n    TransferWithMemo = 'transferWithMemo',\n    EncryptedAmountTransferWithMemo = 'encryptedAmountTransferWithMemo',\n    TransferWithScheduleAndMemo = 'transferWithScheduleAndMemo',\n    ConfigureBaker = 'configureBaker',\n    ConfigureDelegation = 'configureDelegation',\n    StakingReward = 'paydayAccountReward',\n    Failed = 'failed',\n    TokenUpdate = 'tokenUpdate',\n}\n\n/**\n * Given an AccountTransactionType number value, return the corresponding TransactionKindString value\n */\nexport function getTransactionKindString(type: AccountTransactionType): TransactionKindString {\n    return TransactionKindString[AccountTransactionType[type] as keyof typeof AccountTransactionType];\n}\n\nexport interface TransferSummary {\n    transactionType: TransactionKindString.Transfer;\n    transfer: AccountTransferredEvent;\n}\n\nexport interface TransferWithMemoSummary {\n    transactionType: TransactionKindString.TransferWithMemo;\n    transfer: AccountTransferredEvent;\n    memo: MemoEvent;\n}\n\nexport interface TransferWithScheduleSummary {\n    transactionType: TransactionKindString.TransferWithSchedule;\n    event: TransferredWithScheduleEvent;\n}\n\nexport interface TransferWithScheduleAndMemoSummary {\n    transactionType: TransactionKindString.TransferWithScheduleAndMemo;\n    transfer: TransferredWithScheduleEvent;\n    memo: MemoEvent;\n}\n\nexport interface EncryptedAmountTransferSummary {\n    transactionType: TransactionKindString.EncryptedAmountTransfer;\n    removed: EncryptedAmountsRemovedEvent;\n    added: NewEncryptedAmountEvent;\n}\n\nexport interface EncryptedAmountTransferWithMemoSummary {\n    transactionType: TransactionKindString.EncryptedAmountTransferWithMemo;\n    removed: EncryptedAmountsRemovedEvent;\n    added: NewEncryptedAmountEvent;\n    memo: MemoEvent;\n}\n\nexport interface ModuleDeployedSummary {\n    transactionType: TransactionKindString.DeployModule;\n    moduleDeployed: ModuleDeployedEvent;\n}\n\nexport interface InitContractSummary {\n    transactionType: TransactionKindString.InitContract;\n    contractInitialized: ContractInitializedEvent;\n}\n\nexport interface UpdateContractSummary {\n    transactionType: TransactionKindString.Update;\n    /**\n     * The events related to the contract update.\n     *\n     * **Please note**, these can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    events: Upward<ContractTraceEvent>[];\n}\n\nexport interface DataRegisteredSummary {\n    transactionType: TransactionKindString.RegisterData;\n    dataRegistered: DataRegisteredEvent;\n}\n\nexport interface TransferToPublicSummary {\n    transactionType: TransactionKindString.TransferToPublic;\n    removed: EncryptedAmountsRemovedEvent;\n    added: AmountAddedByDecryptionEvent;\n}\n\nexport interface TransferToEncryptedSummary {\n    transactionType: TransactionKindString.TransferToEncrypted;\n    added: EncryptedSelfAmountAddedEvent;\n}\n\nexport interface AddBakerSummary {\n    transactionType: TransactionKindString.AddBaker;\n    bakerAdded: BakerAddedEvent;\n}\n\nexport interface RemoveBakerSummary {\n    transactionType: TransactionKindString.RemoveBaker;\n    bakerRemoved: BakerRemovedEvent;\n}\n\nexport interface UpdateBakerKeysSummary {\n    transactionType: TransactionKindString.UpdateBakerKeys;\n    bakerKeysUpdated: BakerKeysUpdatedEvent;\n}\n\nexport interface UpdateBakerStakeSummary {\n    transactionType: TransactionKindString.UpdateBakerStake;\n    bakerStakeChanged: BakerStakeChangedEvent;\n}\n\nexport interface UpdateBakerRestakeEarningsSummary {\n    transactionType: TransactionKindString.UpdateBakerRestakeEarnings;\n    bakerRestakeEarningsUpdated: BakerSetRestakeEarningsEvent;\n}\n\nexport interface ConfigureBakerSummary {\n    transactionType: TransactionKindString.ConfigureBaker;\n    /**\n     * The events corresponding to the baker configuration\n     *\n     * **Please note**, these can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    events: Upward<BakerEvent>[];\n}\n\nexport interface ConfigureDelegationSummary {\n    transactionType: TransactionKindString.ConfigureDelegation;\n    /**\n     * The events corresponding to the delegation configuration\n     *\n     * **Please note**, these can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    events: Upward<DelegationEvent>[];\n}\n\nexport interface UpdateCredentialKeysSummary {\n    transactionType: TransactionKindString.UpdateCredentialKeys;\n    keysUpdated: CredentialKeysUpdatedEvent;\n}\n\nexport interface UpdateCredentialsSummary {\n    transactionType: TransactionKindString.UpdateCredentials;\n    credentialsUpdated: CredentialsUpdatedEvent;\n}\nexport interface FailedTransactionSummary {\n    transactionType: TransactionKindString.Failed;\n    failedTransactionType?: TransactionKindString;\n    /**\n     * The reject reason for the failed transaction\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    rejectReason: Upward<RejectReason>;\n}\n\n/**\n * The summary of a token transaction of any type.\n */\nexport type TokenUpdateSummary = {\n    transactionType: TransactionKindString.TokenUpdate;\n    /**\n     * The token update details\n     *\n     * **Please note**, these can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    events: Upward<TokenEvent>[];\n};\n\n/**\n * Tagged union type of all possible account transaction summaries, distinguishable by the `transactionType` tag.\n */\nexport type AccountTransactionSummary = BaseAccountTransactionSummary &\n    (\n        | TransferSummary\n        | TransferWithMemoSummary\n        | TransferWithScheduleSummary\n        | TransferWithScheduleAndMemoSummary\n        | EncryptedAmountTransferSummary\n        | EncryptedAmountTransferWithMemoSummary\n        | DataRegisteredSummary\n        | TransferToPublicSummary\n        | TransferToEncryptedSummary\n        | ModuleDeployedSummary\n        | InitContractSummary\n        | UpdateContractSummary\n        | FailedTransactionSummary\n        | AddBakerSummary\n        | RemoveBakerSummary\n        | UpdateBakerKeysSummary\n        | UpdateBakerStakeSummary\n        | UpdateBakerRestakeEarningsSummary\n        | ConfigureBakerSummary\n        | ConfigureDelegationSummary\n        | UpdateCredentialKeysSummary\n        | UpdateCredentialsSummary\n        | TokenUpdateSummary\n    );\n\nexport interface AccountCreationSummary extends BaseBlockItemSummary {\n    type: TransactionSummaryType.AccountCreation;\n    credentialType: 'initial' | 'normal';\n    address: AccountAddress.Type;\n    regId: string;\n}\n\nexport interface UpdateSummary extends BaseBlockItemSummary {\n    type: TransactionSummaryType.UpdateTransaction;\n    effectiveTime: bigint;\n    /**\n     * The payload of update.\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    payload: Upward<UpdateInstructionPayload>;\n}\n\nexport type TokenCreationSummary = {\n    type: TransactionSummaryType.TokenCreation;\n    payload: CreatePLTPayload;\n    /**\n     * The token creation details\n     *\n     * **Please note**, these can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    events: Upward<TokenEvent>[];\n};\n\nexport type BlockItemSummary =\n    | AccountTransactionSummary\n    | AccountCreationSummary\n    | UpdateSummary\n    | TokenCreationSummary;\n\nexport interface BlockItemSummaryInBlock {\n    blockHash: BlockHash.Type;\n    /**\n     * The summary/outcome of processing the block item.\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    summary: Upward<BlockItemSummary>;\n}\n\nexport interface PendingBlockItem {\n    status: TransactionStatusEnum.Received;\n}\n\nexport interface CommittedBlockItem {\n    status: TransactionStatusEnum.Committed;\n    outcomes: BlockItemSummaryInBlock[];\n}\n\nexport interface FinalizedBlockItem {\n    status: TransactionStatusEnum.Finalized;\n    outcome: BlockItemSummaryInBlock;\n}\n\nexport type BlockItemStatus = CommittedBlockItem | FinalizedBlockItem | PendingBlockItem;\n\n/**\n * Type predicate for {@link InitContractSummary}.\n *\n * @param {BlockItemSummary} summary - The block item summary to check.\n *\n * @returns {boolean} whether summary is of type `InitContractSummary`.\n */\nexport const isInitContractSummary = (\n    summary: BlockItemSummary\n): summary is BaseAccountTransactionSummary & InitContractSummary =>\n    summary.type === TransactionSummaryType.AccountTransaction &&\n    summary.transactionType === TransactionKindString.InitContract;\n\n/**\n * Type predicate for {@link UpdateContractSummary}.\n *\n * @param {BlockItemSummary} summary - The block item summary to check.\n *\n * @returns {boolean} whether summary is of type `UpdateContractSummary`.\n */\nexport const isUpdateContractSummary = (\n    summary: BlockItemSummary\n): summary is BaseAccountTransactionSummary & UpdateContractSummary =>\n    summary.type === TransactionSummaryType.AccountTransaction &&\n    summary.transactionType === TransactionKindString.Update;\n\n/**\n * Type predicate for transfer-like transactions.\n *\n * @param {BlockItemSummary} summary - The block item summary to check.\n *\n * @returns {boolean} whether summary is of type `TransferSummary` or `TransferWithMemoSummary`.\n */\nexport const isTransferLikeSummary = (\n    summary: BlockItemSummary\n): summary is BaseAccountTransactionSummary & (TransferSummary | TransferWithMemoSummary) =>\n    summary.type === TransactionSummaryType.AccountTransaction &&\n    (summary.transactionType === TransactionKindString.Transfer ||\n        summary.transactionType === TransactionKindString.TransferWithMemo);\n\n/**\n * Type predicate for {@link FailedTransactionSummary}.\n *\n * @param {BlockItemSummary} summary - The block item summary to check.\n *\n * @returns {boolean} whether transaction was rejected.\n */\nexport const isRejectTransaction = (\n    summary: BlockItemSummary\n): summary is BaseAccountTransactionSummary & FailedTransactionSummary =>\n    summary.type === TransactionSummaryType.AccountTransaction &&\n    summary.transactionType === TransactionKindString.Failed;\n/**\n * Helper function to determine whether a transaction was successful (inverse of {@link isRejectTransaction}).\n *\n * @param {BlockItemSummary} summary - The block item summary to check.\n *\n * @returns {boolean} whether transaction was successful.\n */\nexport const isSuccessTransaction = (\n    summary: BlockItemSummary\n): summary is Exclude<BlockItemSummary, FailedTransactionSummary> => !isRejectTransaction(summary);\n\n/**\n * Gets the {@link RejectReason} for rejected transction.\n *\n * @param {BlockItemSummary} summary - The block item summary to check.\n *\n * @returns {RejectReason | undefined} Reject reason if `summary` is a rejected transaction. Otherwise returns undefined.\n */\nexport function getTransactionRejectReason<T extends FailedTransactionSummary>(summary: T): Upward<RejectReason>;\nexport function getTransactionRejectReason(summary: AccountCreationSummary | UpdateSummary): undefined;\nexport function getTransactionRejectReason(\n    summary: Exclude<AccountTransactionSummary, FailedTransactionSummary>\n): undefined;\nexport function getTransactionRejectReason(summary: BlockItemSummary): Upward<RejectReason> | undefined;\nexport function getTransactionRejectReason(summary: BlockItemSummary): Upward<RejectReason> | undefined {\n    if (!isRejectTransaction(summary)) {\n        return undefined;\n    }\n\n    return summary.rejectReason;\n}\n\n/**\n * Gets the receiver account of a transaction, if the transaction is a transfer transaction (excluding encrypted transfers).\n *\n * @param {BlockItemSummary} summary - The block item summary to check.\n *\n * @returns {Base58String | undefined} The receiver account for transfer transactions. Otherwise returns undefined.\n */\nexport function getReceiverAccount<\n    T extends\n        | TransferSummary\n        | TransferWithMemoSummary\n        | TransferWithScheduleSummary\n        | TransferWithScheduleAndMemoSummary,\n>(summary: T): AccountAddress.Type;\nexport function getReceiverAccount(\n    summary: Exclude<\n        AccountTransactionSummary,\n        TransferSummary | TransferWithMemoSummary | TransferWithScheduleSummary | TransferWithScheduleAndMemoSummary\n    >\n): undefined;\nexport function getReceiverAccount(summary: AccountCreationSummary | UpdateSummary): undefined;\nexport function getReceiverAccount(summary: BlockItemSummary): AccountAddress.Type | undefined;\nexport function getReceiverAccount(summary: BlockItemSummary): AccountAddress.Type | undefined {\n    if (summary.type !== TransactionSummaryType.AccountTransaction) {\n        return undefined;\n    }\n\n    switch (summary.transactionType) {\n        case TransactionKindString.Transfer:\n        case TransactionKindString.TransferWithMemo:\n        case TransactionKindString.TransferWithScheduleAndMemo:\n            return summary.transfer.to;\n        case TransactionKindString.TransferWithSchedule:\n            return summary.event.to;\n    }\n}\n\n/**\n *\n * Takes a list of items and appends another list of items to it, given they are not already in the list\n * according to the eq function.\n *\n * @template T - the type of items in the list\n * @param list - the list to append to\n * @param items - the list to append to the existing list\n * @param eq - the equality function to use for checking uniqueness\n * @returns A new list consisting of unique items from both lists supplied\n *\n * NOTE: This is O(n*m) i.e. not great, but the expected data set is very small. If that ever changes,\n * consider optimizing.\n */\nfunction addUnique<T>(list: Upward<T>[], items: T | T[], eq: (a: T, b: T) => boolean): Upward<T>[] {\n    const next = [...list];\n    const flattened = Array.isArray(items) ? items : [items];\n    for (let i = 0; i < flattened.length; i++) {\n        const item = flattened[i];\n        if (!next.filter(isKnown).some((li) => eq(item, li))) {\n            next.push(item);\n        }\n    }\n    return next;\n}\n\n/**\n * Gets a list of {@link ContractAddress} contract addresses affected by the transaction.\n *\n * @param {BlockItemSummary} summary - The block item summary to check.\n *\n * @returns {Upward<ContractAddress.Type>[]} List of contract addresses affected by the transaction.\n */\nexport function affectedContracts<T extends InitContractSummary | UpdateContractSummary>(\n    summary: T\n): Upward<ContractAddress.Type>[];\nexport function affectedContracts(\n    summary: Exclude<AccountTransactionSummary, InitContractSummary | UpdateContractSummary>\n): never[];\nexport function affectedContracts(summary: AccountCreationSummary | UpdateSummary): never[];\nexport function affectedContracts(summary: BlockItemSummary): Upward<ContractAddress.Type>[];\nexport function affectedContracts(summary: BlockItemSummary): Upward<ContractAddress.Type>[] {\n    if (summary.type !== TransactionSummaryType.AccountTransaction) {\n        return [];\n    }\n\n    switch (summary.transactionType) {\n        case TransactionKindString.InitContract: {\n            return [summary.contractInitialized.address];\n        }\n        case TransactionKindString.Update: {\n            return summary.events.reduce((addresses: Upward<ContractAddress.Type>[], event) => {\n                if (!isKnown(event)) {\n                    return [...addresses, null];\n                }\n                if (event.tag !== TransactionEventTag.Updated) {\n                    return addresses;\n                }\n                return addUnique(addresses, event.address, ContractAddress.equals);\n            }, []);\n        }\n        default: {\n            return [];\n        }\n    }\n}\n\nfunction tokenEventsAffectedAccounts(\n    events: Upward<TokenEvent>[],\n    sender?: AccountAddress.Type\n): Upward<AccountAddress.Type>[] {\n    return events.reduce(\n        (addresses: Upward<AccountAddress.Type>[], event) => {\n            if (!isKnown(event)) {\n                return [...addresses, null];\n            }\n\n            switch (event.tag) {\n                case TransactionEventTag.TokenTransfer:\n                    return addUnique(\n                        addresses,\n                        [event.to?.address, event.from?.address].filter(isDefined),\n                        AccountAddress.equals\n                    );\n                case TransactionEventTag.TokenBurn:\n                case TransactionEventTag.TokenMint:\n                    return addUnique(addresses, [event.target?.address].filter(isDefined), AccountAddress.equals);\n                case TransactionEventTag.TokenModuleEvent:\n                    // This only includes the encoded events pertaining to list updates and token pausation,\n                    // thus not affecting any account's balance\n                    return addresses;\n            }\n        },\n        sender !== undefined ? [sender] : []\n    );\n}\n\nfunction accTransactionsAffectedAccounts(summary: AccountTransactionSummary): Upward<AccountAddress.Type>[] {\n    switch (summary.transactionType) {\n        case TransactionKindString.EncryptedAmountTransfer:\n        case TransactionKindString.EncryptedAmountTransferWithMemo:\n            return [summary.added.account, summary.removed.account];\n        case TransactionKindString.TransferToEncrypted:\n            return [summary.added.account];\n        case TransactionKindString.TransferToPublic:\n            return [summary.removed.account];\n        case TransactionKindString.Update: {\n            return summary.events.reduce(\n                (addresses: Upward<AccountAddress.Type>[], event) => {\n                    if (!isKnown(event)) {\n                        return [...addresses, null];\n                    }\n                    if (event.tag !== TransactionEventTag.Transferred) {\n                        return addresses;\n                    }\n                    return addUnique(addresses, event.to, AccountAddress.equals);\n                },\n                [summary.sender]\n            );\n        }\n        case TransactionKindString.TokenUpdate: {\n            return tokenEventsAffectedAccounts(summary.events, summary.sender);\n        }\n        default: {\n            const receiver = getReceiverAccount(summary);\n            if (receiver === undefined || AccountAddress.equals(summary.sender, receiver)) {\n                return [summary.sender];\n            }\n\n            return [summary.sender, receiver];\n        }\n    }\n}\n\n/**\n * Gets a list of {@link Base58String} account addresses affected by the transaction.\n *\n * @param {BlockItemSummary} summary - The block item summary to check.\n *\n * @returns {Upward<AccountAddress.Type>[]} List of account addresses affected by the transaction.\n */\nexport function affectedAccounts(summary: AccountTransactionSummary): Upward<AccountAddress.Type>[];\nexport function affectedAccounts(summary: TokenCreationSummary): Upward<AccountAddress.Type>[];\nexport function affectedAccounts(summary: AccountCreationSummary | UpdateSummary): never[];\nexport function affectedAccounts(summary: BlockItemSummary): Upward<AccountAddress.Type>[];\nexport function affectedAccounts(summary: BlockItemSummary): Upward<AccountAddress.Type>[] {\n    switch (summary.type) {\n        case TransactionSummaryType.AccountTransaction:\n            return accTransactionsAffectedAccounts(summary);\n        case TransactionSummaryType.TokenCreation:\n            return tokenEventsAffectedAccounts(summary.events);\n        default:\n            return [];\n    }\n}\n\nexport type SummaryContractUpdateLog = {\n    address: ContractAddress.Type;\n    events: ContractEvent.Type[];\n};\n\n/**\n * Gets a list of update logs, each consisting of a {@link ContractAddress.Type} and a list of {@link ContractEvent.Type} events.\n * The list will be empty for any transaction type but {@link UpdateContractSummary} contract updates.\n *\n * @param {BlockItemSummary} summary - The block item summary to check.\n *\n * @returns {Upward<SummaryContractUpdateLog>[]} List of update logs corresponding to the transaction.\n */\nexport function getSummaryContractUpdateLogs<T extends UpdateContractSummary>(\n    summary: T\n): Upward<SummaryContractUpdateLog>[];\nexport function getSummaryContractUpdateLogs(summary: AccountCreationSummary | UpdateSummary): never[];\nexport function getSummaryContractUpdateLogs(\n    summary: Exclude<AccountTransactionSummary, UpdateContractSummary>\n): never[];\nexport function getSummaryContractUpdateLogs(summary: BlockItemSummary): Upward<SummaryContractUpdateLog>[];\nexport function getSummaryContractUpdateLogs(summary: BlockItemSummary): Upward<SummaryContractUpdateLog>[] {\n    if (summary.type !== TransactionSummaryType.AccountTransaction || !isUpdateContractSummary(summary)) {\n        return [];\n    }\n\n    return summary.events\n        .map((event) => {\n            if (!isKnown(event)) {\n                return null;\n            }\n\n            switch (event.tag) {\n                case TransactionEventTag.Updated:\n                case TransactionEventTag.Interrupted:\n                    return { address: event.address, events: event.events };\n                default:\n                    return undefined;\n            }\n        })\n        .filter(isDefined);\n}\n","/**\n * This handler implements the default behaviour for unknown fields.\n * When reading data, unknown fields are stored on the message, in a\n * symbol property.\n * When writing data, the symbol property is queried and unknown fields\n * are serialized into the output again.\n */\nexport var UnknownFieldHandler;\n(function (UnknownFieldHandler) {\n    /**\n     * The symbol used to store unknown fields for a message.\n     * The property must conform to `UnknownFieldContainer`.\n     */\n    UnknownFieldHandler.symbol = Symbol.for(\"protobuf-ts/unknown\");\n    /**\n     * Store an unknown field during binary read directly on the message.\n     * This method is compatible with `BinaryReadOptions.readUnknownField`.\n     */\n    UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {\n        let container = is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = [];\n        container.push({ no: fieldNo, wireType, data });\n    };\n    /**\n     * Write unknown fields stored for the message to the writer.\n     * This method is compatible with `BinaryWriteOptions.writeUnknownFields`.\n     */\n    UnknownFieldHandler.onWrite = (typeName, message, writer) => {\n        for (let { no, wireType, data } of UnknownFieldHandler.list(message))\n            writer.tag(no, wireType).raw(data);\n    };\n    /**\n     * List unknown fields stored for the message.\n     * Note that there may be multiples fields with the same number.\n     */\n    UnknownFieldHandler.list = (message, fieldNo) => {\n        if (is(message)) {\n            let all = message[UnknownFieldHandler.symbol];\n            return fieldNo ? all.filter(uf => uf.no == fieldNo) : all;\n        }\n        return [];\n    };\n    /**\n     * Returns the last unknown field by field number.\n     */\n    UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];\n    const is = (message) => message && Array.isArray(message[UnknownFieldHandler.symbol]);\n})(UnknownFieldHandler || (UnknownFieldHandler = {}));\n/**\n * Merges binary write or read options. Later values override earlier values.\n */\nexport function mergeBinaryOptions(a, b) {\n    return Object.assign(Object.assign({}, a), b);\n}\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","\nlet imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextDecoder, TextEncoder } = require(`util`);\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n/**\n* @param {string} input\n* @returns {string}\n*/\nmodule.exports.generateUnsignedCredential = function(input) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.generateUnsignedCredential(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\nlet stack_pointer = 128;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n* @param {any} signatures\n* @param {string} unsigned_info\n* @param {bigint} expiry\n* @returns {string}\n*/\nmodule.exports.getDeploymentDetails = function(signatures, unsigned_info, expiry) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(unsigned_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.getDeploymentDetails(retptr, addBorrowedObject(signatures), ptr0, len0, expiry);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* @param {any} signatures\n* @param {string} unsigned_info\n* @returns {string}\n*/\nmodule.exports.getDeploymentInfo = function(signatures, unsigned_info) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(unsigned_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.getDeploymentInfo(retptr, addBorrowedObject(signatures), ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* @param {string} input\n* @returns {string}\n*/\nmodule.exports.createIdRequestV1 = function(input) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.createIdRequestV1(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* @param {string} input\n* @returns {string}\n*/\nmodule.exports.createIdentityRecoveryRequest = function(input) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.createIdentityRecoveryRequest(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* @param {string} raw_input\n* @returns {string}\n*/\nmodule.exports.createCredentialV1 = function(raw_input) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(raw_input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.createCredentialV1(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* @param {string} input\n* @returns {string}\n*/\nmodule.exports.createUnsignedCredentialV1 = function(input) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.createUnsignedCredentialV1(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* @param {string} raw_input\n* @returns {string}\n*/\nmodule.exports.createIdProof = function(raw_input) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(raw_input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.createIdProof(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* @param {string} seed_as_hex\n* @param {string} raw_net\n* @param {number} identity_provider_index\n* @param {number} identity_index\n* @param {number} credential_counter\n* @returns {string}\n*/\nmodule.exports.getAccountSigningKey = function(seed_as_hex, raw_net, identity_provider_index, identity_index, credential_counter) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(seed_as_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_net, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.getAccountSigningKey(retptr, ptr0, len0, ptr1, len1, identity_provider_index, identity_index, credential_counter);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} seed_as_hex\n* @param {string} raw_net\n* @param {number} identity_provider_index\n* @param {number} identity_index\n* @param {number} credential_counter\n* @returns {string}\n*/\nmodule.exports.getAccountPublicKey = function(seed_as_hex, raw_net, identity_provider_index, identity_index, credential_counter) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(seed_as_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_net, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.getAccountPublicKey(retptr, ptr0, len0, ptr1, len1, identity_provider_index, identity_index, credential_counter);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} serialized\n* @returns {string}\n*/\nmodule.exports.deserializeCredentialDeployment = function(serialized) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(serialized, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.deserializeCredentialDeployment(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* @param {string} seed_as_hex\n* @param {string} raw_net\n* @param {number} identity_provider_index\n* @param {number} identity_index\n* @param {number} credential_counter\n* @param {string} raw_on_chain_commitment_key\n* @returns {string}\n*/\nmodule.exports.getCredentialId = function(seed_as_hex, raw_net, identity_provider_index, identity_index, credential_counter, raw_on_chain_commitment_key) {\n    let deferred5_0;\n    let deferred5_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(seed_as_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_net, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(raw_on_chain_commitment_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.getCredentialId(retptr, ptr0, len0, ptr1, len1, identity_provider_index, identity_index, credential_counter, ptr2, len2);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr4 = r0;\n        var len4 = r1;\n        if (r3) {\n            ptr4 = 0; len4 = 0;\n            throw takeObject(r2);\n        }\n        deferred5_0 = ptr4;\n        deferred5_1 = len4;\n        return getStringFromWasm0(ptr4, len4);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n    }\n};\n\n/**\n* @param {string} seed_as_hex\n* @param {string} raw_net\n* @param {number} identity_provider_index\n* @param {number} identity_index\n* @returns {string}\n*/\nmodule.exports.getPrfKey = function(seed_as_hex, raw_net, identity_provider_index, identity_index) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(seed_as_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_net, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.getPrfKey(retptr, ptr0, len0, ptr1, len1, identity_provider_index, identity_index);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} seed_as_hex\n* @param {string} raw_net\n* @param {number} identity_provider_index\n* @param {number} identity_index\n* @returns {string}\n*/\nmodule.exports.getIdCredSec = function(seed_as_hex, raw_net, identity_provider_index, identity_index) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(seed_as_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_net, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.getIdCredSec(retptr, ptr0, len0, ptr1, len1, identity_provider_index, identity_index);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} seed_as_hex\n* @param {string} raw_net\n* @param {number} identity_provider_index\n* @param {number} identity_index\n* @returns {string}\n*/\nmodule.exports.getSignatureBlindingRandomness = function(seed_as_hex, raw_net, identity_provider_index, identity_index) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(seed_as_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_net, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.getSignatureBlindingRandomness(retptr, ptr0, len0, ptr1, len1, identity_provider_index, identity_index);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} seed_as_hex\n* @param {string} raw_net\n* @param {number} identity_provider_index\n* @param {number} identity_index\n* @param {number} credential_counter\n* @param {number} attribute\n* @returns {string}\n*/\nmodule.exports.getAttributeCommitmentRandomness = function(seed_as_hex, raw_net, identity_provider_index, identity_index, credential_counter, attribute) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(seed_as_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_net, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.getAttributeCommitmentRandomness(retptr, ptr0, len0, ptr1, len1, identity_provider_index, identity_index, credential_counter, attribute);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} seed_as_hex\n* @param {string} raw_net\n* @param {bigint} issuer_index\n* @param {bigint} issuer_subindex\n* @param {number} verifiable_credential_index\n* @returns {string}\n*/\nmodule.exports.getVerifiableCredentialSigningKey = function(seed_as_hex, raw_net, issuer_index, issuer_subindex, verifiable_credential_index) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(seed_as_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_net, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.getVerifiableCredentialSigningKey(retptr, ptr0, len0, ptr1, len1, issuer_index, issuer_subindex, verifiable_credential_index);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} seed_as_hex\n* @param {string} raw_net\n* @param {bigint} issuer_index\n* @param {bigint} issuer_subindex\n* @param {number} verifiable_credential_index\n* @returns {string}\n*/\nmodule.exports.getVerifiableCredentialPublicKey = function(seed_as_hex, raw_net, issuer_index, issuer_subindex, verifiable_credential_index) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(seed_as_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_net, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.getVerifiableCredentialPublicKey(retptr, ptr0, len0, ptr1, len1, issuer_index, issuer_subindex, verifiable_credential_index);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} seed_as_hex\n* @param {string} raw_net\n* @returns {string}\n*/\nmodule.exports.getVerifiableCredentialBackupEncryptionKey = function(seed_as_hex, raw_net) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(seed_as_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(raw_net, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.getVerifiableCredentialBackupEncryptionKey(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {any} signatures\n* @param {string} unsigned_info\n* @returns {Uint8Array}\n*/\nmodule.exports.serializeCredentialDeploymentPayload = function(signatures, unsigned_info) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(unsigned_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.serializeCredentialDeploymentPayload(retptr, addBorrowedObject(signatures), ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1, 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        heap[stack_pointer++] = undefined;\n    }\n};\n\n/**\n* @param {string} sender\n* @returns {string}\n*/\nmodule.exports.generateBakerKeys = function(sender) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(sender, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.generateBakerKeys(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* @param {string} raw_input\n* @returns {string}\n*/\nmodule.exports.createWeb3IdProof = function(raw_input) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(raw_input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.createWeb3IdProof(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* @param {string} raw_input\n* @returns {boolean}\n*/\nmodule.exports.verifyWeb3IdCredentialSignature = function(raw_input) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(raw_input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyWeb3IdCredentialSignature(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\n/**\n* @param {string} input\n* @returns {string}\n*/\nmodule.exports.verifyPresentation = function(input) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.verifyPresentation(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\n/**\n* Returns the CountryCode3 with the given Alpha4 code, if exists.\n* #Sample\n* ```\n* let sub = rust_iso3166::iso3166_3::from_code(\"PZPA\");\n* assert_eq!(\"Panama Canal Zone\", sub.unwrap().name);\n* ```\n* @param {string} alpha4\n* @returns {CountryCode3 | undefined}\n*/\nmodule.exports.from_code_iso_3166_3 = function(alpha4) {\n    const ptr0 = passStringToWasm0(alpha4, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.from_code_iso_3166_3(ptr0, len0);\n    return ret === 0 ? undefined : CountryCode3.__wrap(ret);\n};\n\n/**\n* Returns the CountryCode with the given Alpha2 code, if exists.\n* #Sample\n* ```\n* let country = rust_iso3166::from_alpha2(\"AU\");\n* assert_eq!(\"AUS\", country.unwrap().alpha3);\n* ```\n* @param {string} alpha2\n* @returns {CountryCode | undefined}\n*/\nmodule.exports.from_alpha2 = function(alpha2) {\n    const ptr0 = passStringToWasm0(alpha2, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.from_alpha2(ptr0, len0);\n    return ret === 0 ? undefined : CountryCode.__wrap(ret);\n};\n\n/**\n* Returns the CountryCode with the given Alpha3 code, if exists.\n* #Sample\n* ```\n* let country = rust_iso3166::from_alpha3(\"AUS\");\n* assert_eq!(036, country.unwrap().numeric);\n* ```\n* @param {string} alpha3\n* @returns {CountryCode | undefined}\n*/\nmodule.exports.from_alpha3 = function(alpha3) {\n    const ptr0 = passStringToWasm0(alpha3, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.from_alpha3(ptr0, len0);\n    return ret === 0 ? undefined : CountryCode.__wrap(ret);\n};\n\n/**\n* Returns the CountryCode with the given numeric , if exists.\n* ```\n* let country = rust_iso3166::from_numeric(036);\n* assert_eq!(\"AUS\", country.unwrap().alpha3);\n* ```\n* @param {number} numeric\n* @returns {CountryCode | undefined}\n*/\nmodule.exports.from_numeric = function(numeric) {\n    const ret = wasm.from_numeric(numeric);\n    return ret === 0 ? undefined : CountryCode.__wrap(ret);\n};\n\n/**\n* Returns the CountryCode with the given numeric 3 length str, if exists.\n* ```\n* let country = rust_iso3166::from_numeric_str(\"036\");\n* assert_eq!(\"AUS\", country.unwrap().alpha3);\n* ```\n* @param {string} numeric\n* @returns {CountryCode | undefined}\n*/\nmodule.exports.from_numeric_str = function(numeric) {\n    const ptr0 = passStringToWasm0(numeric, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.from_numeric_str(ptr0, len0);\n    return ret === 0 ? undefined : CountryCode.__wrap(ret);\n};\n\n/**\n* Returns the Subdivision with the given code, if exists.\n* #Sample\n* ```\n* let sub = rust_iso3166::iso3166_2::from_code(\"SE-O\");\n* assert_eq!(\"Västra Götalands län\", sub.unwrap().name);\n* ```\n* @param {string} code\n* @returns {Subdivision | undefined}\n*/\nmodule.exports.from_code_iso_3166_2 = function(code) {\n    const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.from_code_iso_3166_2(ptr0, len0);\n    return ret === 0 ? undefined : Subdivision.__wrap(ret);\n};\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nconst CountryCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_countrycode_free(ptr >>> 0, 1));\n/**\n* # Sample code\n* ```\n* let country = rust_iso3166::from_alpha2(\"AU\");\n* assert_eq!(\"AUS\", country.unwrap().alpha3);\n* let country = rust_iso3166::from_alpha3(\"AUS\");\n* assert_eq!(\"AU\", country.unwrap().alpha2);\n* let country = rust_iso3166::from_numeric(036);\n* assert_eq!(\"AUS\", country.unwrap().alpha3);\n* let country = rust_iso3166::from_numeric_str(\"036\");\n* assert_eq!(\"AUS\", country.unwrap().alpha3);\n*\n* println!(\"{:?}\", country);\n* println!(\"{:?}\", rust_iso3166::ALL);\n* println!(\"{:?}\", rust_iso3166::ALL_ALPHA2);\n* println!(\"{:?}\", rust_iso3166::ALL_ALPHA3);\n* println!(\"{:?}\", rust_iso3166::ALL_NAME);\n* println!(\"{:?}\", rust_iso3166::ALL_NUMERIC);\n* println!(\"{:?}\", rust_iso3166::ALL_NUMERIC_STR);\n* println!(\"{:?}\", rust_iso3166::NUMERIC_MAP);\n* println!(\"{:?}\", rust_iso3166::ALPHA3_MAP);\n* println!(\"{:?}\", rust_iso3166::ALPHA2_MAP);\n* ```\n* Data for each Country Code defined by ISO 3166-1\n*/\nclass CountryCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CountryCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CountryCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CountryCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_countrycode_free(ptr, 0);\n    }\n    /**\n    * @returns {string}\n    */\n    get name() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countrycode_name(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get alpha2() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countrycode_alpha2(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get alpha3() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countrycode_alpha3(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    get numeric() {\n        const ret = wasm.countrycode_numeric(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    *Return len 3 String for CountryCode numeric\n    * @returns {string}\n    */\n    numeric_str() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countrycode_numeric_str(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {Array<any>}\n    */\n    subdivisions() {\n        const ret = wasm.countrycode_subdivisions(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.CountryCode = CountryCode;\n\nconst CountryCode3Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_countrycode3_free(ptr >>> 0, 1));\n/**\n* Data for each Country Code defined by ISO 3166-1\n*/\nclass CountryCode3 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CountryCode3.prototype);\n        obj.__wbg_ptr = ptr;\n        CountryCode3Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CountryCode3Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_countrycode3_free(ptr, 0);\n    }\n    /**\n    * @returns {string}\n    */\n    get code() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countrycode3_code(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get name() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countrycode3_name(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {CountryCode}\n    */\n    get former() {\n        const ret = wasm.countrycode3_former(this.__wbg_ptr);\n        return CountryCode.__wrap(ret);\n    }\n    /**\n    * @returns {Array<any>}\n    */\n    get new_countries() {\n        const ret = wasm.countrycode3_new_countries(this.__wbg_ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    get desc() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countrycode3_desc(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\nmodule.exports.CountryCode3 = CountryCode3;\n\nconst SubdivisionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_subdivision_free(ptr >>> 0, 1));\n/**\n* # Sample code\n* ```\n* let country = rust_iso3166::from_alpha2(\"GB\").unwrap();\n* let subdivisions = country.subdivisions();\n* assert!(subdivisions.unwrap().len() > 0);\n* let country = rust_iso3166::iso3166_2::from_code(\"GB-EDH\");\n* assert_eq!(\"Edinburgh, City of\", country.unwrap().name);\n* println!(\"{:?}\", rust_iso3166::iso3166_2::SUBDIVISION_COUNTRY_MAP);\n* println!(\"{:?}\", rust_iso3166::iso3166_2::SUBDIVISION_MAP);\n* ```\n* Data for each Country Code defined by ISO 3166-2\n*/\nclass Subdivision {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Subdivision.prototype);\n        obj.__wbg_ptr = ptr;\n        SubdivisionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SubdivisionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_subdivision_free(ptr, 0);\n    }\n    /**\n    * @returns {string}\n    */\n    get name() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subdivision_name(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get code() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subdivision_code(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get subdivision_type() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subdivision_subdivision_type(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get country_name() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subdivision_country_name(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get country_code() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subdivision_country_code(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    get region_code() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.subdivision_region_code(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\nmodule.exports.Subdivision = Subdivision;\n\nmodule.exports.__wbindgen_error_new = function(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_string_get = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nmodule.exports.__wbindgen_object_clone_ref = function(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_object = function(arg0) {\n    const val = getObject(arg0);\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nmodule.exports.__wbindgen_jsval_loose_eq = function(arg0, arg1) {\n    const ret = getObject(arg0) == getObject(arg1);\n    return ret;\n};\n\nmodule.exports.__wbindgen_boolean_get = function(arg0) {\n    const v = getObject(arg0);\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nmodule.exports.__wbindgen_number_get = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nmodule.exports.__wbindgen_string_new = function(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_subdivision_new = function(arg0) {\n    const ret = Subdivision.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_countrycode_new = function(arg0) {\n    const ret = CountryCode.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_crypto_566d7465cdbb6b7a = function(arg0) {\n    const ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_process_dc09a8c7d59982f6 = function(arg0) {\n    const ret = getObject(arg0).process;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_versions_d98c6400c6ca2bd8 = function(arg0) {\n    const ret = getObject(arg0).versions;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_node_caaf83d002149bd5 = function(arg0) {\n    const ret = getObject(arg0).node;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_string = function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'string';\n    return ret;\n};\n\nmodule.exports.__wbg_require_94a9da52636aacbf = function() { return handleError(function () {\n    const ret = module.require;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbindgen_is_function = function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nmodule.exports.__wbg_msCrypto_0b84745e9245cdf6 = function(arg0) {\n    const ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_randomFillSync_290977693942bf03 = function() { return handleError(function (arg0, arg1) {\n    getObject(arg0).randomFillSync(takeObject(arg1));\n}, arguments) };\n\nmodule.exports.__wbg_getRandomValues_260cc23a41afad9a = function() { return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n}, arguments) };\n\nmodule.exports.__wbg_get_44be0491f933a435 = function(arg0, arg1) {\n    const ret = getObject(arg0)[arg1 >>> 0];\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_length_fff51ee6522a1a18 = function(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nmodule.exports.__wbg_new_898a68150f225f2e = function() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_newnoargs_581967eacc0e2604 = function(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_next_526fc47e980da008 = function(arg0) {\n    const ret = getObject(arg0).next;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_next_ddb3312ca1c4e32a = function() { return handleError(function (arg0) {\n    const ret = getObject(arg0).next();\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_done_5c1f01fb660d73b5 = function(arg0) {\n    const ret = getObject(arg0).done;\n    return ret;\n};\n\nmodule.exports.__wbg_value_1695675138684bd5 = function(arg0) {\n    const ret = getObject(arg0).value;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_iterator_97f0c81209c6c35a = function() {\n    const ret = Symbol.iterator;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_get_97b561fb56f034b5 = function() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_call_cb65541d95d71282 = function() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_self_1ff1d729e9aae938 = function() { return handleError(function () {\n    const ret = self.self;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_window_5f4faef6c12b79ec = function() { return handleError(function () {\n    const ret = window.window;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_globalThis_1d39714405582d3c = function() { return handleError(function () {\n    const ret = globalThis.globalThis;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_global_651f05c6a0944d1c = function() { return handleError(function () {\n    const ret = global.global;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbindgen_is_undefined = function(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nmodule.exports.__wbg_isArray_4c24b343cb13cfb1 = function(arg0) {\n    const ret = Array.isArray(getObject(arg0));\n    return ret;\n};\n\nmodule.exports.__wbg_push_ca1c26067ef907ac = function(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nmodule.exports.__wbg_instanceof_ArrayBuffer_39ac22089b74fddb = function(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nmodule.exports.__wbg_call_01734de55d61e11d = function() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_getTime_5e2054f832d82ec9 = function(arg0) {\n    const ret = getObject(arg0).getTime();\n    return ret;\n};\n\nmodule.exports.__wbg_new0_c0be7df4b6bd481f = function() {\n    const ret = new Date();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_buffer_085ec1f694018c4f = function(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_8125e318e6245eed = function(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nmodule.exports.__wbg_length_72e2208bbc0efc61 = function(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nmodule.exports.__wbg_instanceof_Uint8Array_d8d9cb2b8e8ac1d4 = function(arg0) {\n    let result;\n    try {\n        result = getObject(arg0) instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nmodule.exports.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_subarray_13db269f57aa838d = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_debug_string = function(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nmodule.exports.__wbindgen_memory = function() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nconst path = require('path').join(__dirname, 'index_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","import { Deferred, DeferredState } from \"./deferred\";\nimport { assert } from \"@protobuf-ts/runtime\";\n/**\n * A `RpcOutputStream` that you control.\n */\nexport class RpcOutputStreamController {\n    constructor() {\n        this._lis = {\n            nxt: [],\n            msg: [],\n            err: [],\n            cmp: [],\n        };\n        this._closed = false;\n    }\n    // --- RpcOutputStream callback API\n    onNext(callback) {\n        return this.addLis(callback, this._lis.nxt);\n    }\n    onMessage(callback) {\n        return this.addLis(callback, this._lis.msg);\n    }\n    onError(callback) {\n        return this.addLis(callback, this._lis.err);\n    }\n    onComplete(callback) {\n        return this.addLis(callback, this._lis.cmp);\n    }\n    addLis(callback, list) {\n        list.push(callback);\n        return () => {\n            let i = list.indexOf(callback);\n            if (i >= 0)\n                list.splice(i, 1);\n        };\n    }\n    // remove all listeners\n    clearLis() {\n        for (let l of Object.values(this._lis))\n            l.splice(0, l.length);\n    }\n    // --- Controller API\n    /**\n     * Is this stream already closed by a completion or error?\n     */\n    get closed() {\n        return this._closed !== false;\n    }\n    /**\n     * Emit message, close with error, or close successfully, but only one\n     * at a time.\n     * Can be used to wrap a stream by using the other stream's `onNext`.\n     */\n    notifyNext(message, error, complete) {\n        assert((message ? 1 : 0) + (error ? 1 : 0) + (complete ? 1 : 0) <= 1, 'only one emission at a time');\n        if (message)\n            this.notifyMessage(message);\n        if (error)\n            this.notifyError(error);\n        if (complete)\n            this.notifyComplete();\n    }\n    /**\n     * Emits a new message. Throws if stream is closed.\n     *\n     * Triggers onNext and onMessage callbacks.\n     */\n    notifyMessage(message) {\n        assert(!this.closed, 'stream is closed');\n        this.pushIt({ value: message, done: false });\n        this._lis.msg.forEach(l => l(message));\n        this._lis.nxt.forEach(l => l(message, undefined, false));\n    }\n    /**\n     * Closes the stream with an error. Throws if stream is closed.\n     *\n     * Triggers onNext and onError callbacks.\n     */\n    notifyError(error) {\n        assert(!this.closed, 'stream is closed');\n        this._closed = error;\n        this.pushIt(error);\n        this._lis.err.forEach(l => l(error));\n        this._lis.nxt.forEach(l => l(undefined, error, false));\n        this.clearLis();\n    }\n    /**\n     * Closes the stream successfully. Throws if stream is closed.\n     *\n     * Triggers onNext and onComplete callbacks.\n     */\n    notifyComplete() {\n        assert(!this.closed, 'stream is closed');\n        this._closed = true;\n        this.pushIt({ value: null, done: true });\n        this._lis.cmp.forEach(l => l());\n        this._lis.nxt.forEach(l => l(undefined, undefined, true));\n        this.clearLis();\n    }\n    /**\n     * Creates an async iterator (that can be used with `for await {...}`)\n     * to consume the stream.\n     *\n     * Some things to note:\n     * - If an error occurs, the `for await` will throw it.\n     * - If an error occurred before the `for await` was started, `for await`\n     *   will re-throw it.\n     * - If the stream is already complete, the `for await` will be empty.\n     * - If your `for await` consumes slower than the stream produces,\n     *   for example because you are relaying messages in a slow operation,\n     *   messages are queued.\n     */\n    [Symbol.asyncIterator]() {\n        // init the iterator state, enabling pushIt()\n        if (!this._itState) {\n            this._itState = { q: [] };\n        }\n        // if we are closed, we are definitely not receiving any more messages.\n        // but we can't let the iterator get stuck. we want to either:\n        // a) finish the new iterator immediately, because we are completed\n        // b) reject the new iterator, because we errored\n        if (this._closed === true)\n            this.pushIt({ value: null, done: true });\n        else if (this._closed !== false)\n            this.pushIt(this._closed);\n        // the async iterator\n        return {\n            next: () => {\n                let state = this._itState;\n                assert(state, \"bad state\"); // if we don't have a state here, code is broken\n                // there should be no pending result.\n                // did the consumer call next() before we resolved our previous result promise?\n                assert(!state.p, \"iterator contract broken\");\n                // did we produce faster than the iterator consumed?\n                // return the oldest result from the queue.\n                let first = state.q.shift();\n                if (first)\n                    return (\"value\" in first) ? Promise.resolve(first) : Promise.reject(first);\n                // we have no result ATM, but we promise one.\n                // as soon as we have a result, we must resolve promise.\n                state.p = new Deferred();\n                return state.p.promise;\n            },\n        };\n    }\n    // \"push\" a new iterator result.\n    // this either resolves a pending promise, or enqueues the result.\n    pushIt(result) {\n        let state = this._itState;\n        if (!state)\n            return;\n        // is the consumer waiting for us?\n        if (state.p) {\n            // yes, consumer is waiting for this promise.\n            const p = state.p;\n            assert(p.state == DeferredState.PENDING, \"iterator contract broken\");\n            // resolve the promise\n            (\"value\" in result) ? p.resolve(result) : p.reject(result);\n            // must cleanup, otherwise iterator.next() would pick it up again.\n            delete state.p;\n        }\n        else {\n            // we are producing faster than the iterator consumes.\n            // push result onto queue.\n            state.q.push(result);\n        }\n    }\n}\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","import { Upward } from '../index.js';\nimport { CreatePLTPayload } from '../plt/types.js';\nimport type {\n    ArInfo,\n    AuthorizationsV0,\n    AuthorizationsV1,\n    Base58String,\n    CommissionRates,\n    ExchangeRate,\n    FinalizationCommitteeParameters,\n    GasRewardsV0,\n    GasRewardsV1,\n    HexString,\n    IpInfo,\n    MintDistribution,\n    MintRate,\n    TimeoutParameters,\n    TransactionFeeDistribution,\n    UpdatePublicKey,\n    ValidatorScoreParameters,\n} from '../types.js';\nimport type * as CcdAmount from './CcdAmount.js';\nimport type * as Duration from './Duration.js';\nimport type * as Energy from './Energy.js';\nimport type * as Timestamp from './Timestamp.js';\n\ntype ChainUpdate<UpdateType, T> = {\n    /** The type of the update */\n    updateType: UpdateType;\n    /** The parameters used for the update */\n    update: T;\n};\n\n/** An update to mint distribution parameters */\nexport type MintDistributionUpdate = ChainUpdate<UpdateType.MintDistribution, MintDistribution>;\n\n/** An update to the foundation account */\nexport type FoundationAccountUpdate = ChainUpdate<UpdateType.FoundationAccount, FoundationAccount>;\n\n/** An update to election difficulty parameters */\nexport type ElectionDifficultyUpdate = ChainUpdate<UpdateType.ElectionDifficulty, ElectionDifficulty>;\n\n/** An update to the euro per energy exchange rate */\nexport type EuroPerEnergyUpdate = ChainUpdate<UpdateType.EuroPerEnergy, ExchangeRate>;\n\n/** An update to the micro CCD per euro exchange rate */\nexport type MicroGtuPerEuroUpdate = ChainUpdate<UpdateType.MicroGtuPerEuro, ExchangeRate>;\n\n/** An update to transaction fee distribution parameters */\nexport type TransactionFeeDistributionUpdate = ChainUpdate<\n    UpdateType.TransactionFeeDistribution,\n    TransactionFeeDistribution\n>;\n\n/** An update to gas reward parameters for protocol version 1-5 */\nexport type GasRewardsV0Update = ChainUpdate<UpdateType.GasRewards, GasRewardsV0>;\n\n/** An update to gas reward parameters from protocol version 6 */\nexport type GasRewardsV1Update = ChainUpdate<UpdateType.GasRewardsCpv2, GasRewardsV1>;\n\n/** An update to add an anonymity revoker */\nexport type AddAnonymityRevokerUpdate = ChainUpdate<UpdateType.AddAnonymityRevoker, AddAnonymityRevoker>;\n\n/** An update to add an identity provider */\nexport type AddIdentityProviderUpdate = ChainUpdate<UpdateType.AddIdentityProvider, AddIdentityProvider>;\n\n/** An update to staking cooldown parameters */\nexport type CooldownParametersUpdate = ChainUpdate<UpdateType.CooldownParameters, CooldownParameters>;\n\n/** An update to time parameters */\nexport type TimeParametersUpdate = ChainUpdate<UpdateType.TimeParameters, TimeParameters>;\n\n/** An update holding a protocol update */\nexport type ProtocolUpdate = ChainUpdate<UpdateType.Protocol, ProtocolUpdateDetails>;\n\n/** An update to baker pool parameters */\nexport type PoolParametersUpdate = ChainUpdate<UpdateType.PoolParameters, PoolParameters>;\n\n/** An update to baker stake threshold parameters */\nexport type BakerStakeThresholdUpdate = ChainUpdate<UpdateType.BakerStakeThreshold, BakerStakeThreshold>;\n\n/** An update to timeout parameters, used from protocol version 6 */\nexport type TimeoutParametersUpdate = ChainUpdate<UpdateType.TimeoutParameters, TimeoutParameters>;\n\n/** An update to mininum time between blocks, used from protocol version 6 */\nexport type MinBlockTimeUpdate = ChainUpdate<UpdateType.MinBlockTime, Duration.Type>;\n\n/** An update to maximum amount of energy per block, used from protocol version 6 */\nexport type BlockEnergyLimitUpdate = ChainUpdate<UpdateType.BlockEnergyLimit, Energy.Type>;\n\n/** An update to finalization committee parameters, used from protocol version 6 */\nexport type FinalizationCommitteeParametersUpdate = ChainUpdate<\n    UpdateType.FinalizationCommitteeParameters,\n    FinalizationCommitteeParameters\n>;\n\n/** An update to level 1 key */\nexport type Level1Update = ChainUpdate<UpdateType.Level1, KeyUpdate>;\n\n/** An update to root key */\nexport type RootUpdate = ChainUpdate<UpdateType.Root, KeyUpdate>;\n\n/** A pending update to higher level keys */\nexport type PendingHigherLevelKeyUpdate = ChainUpdate<UpdateType.HigherLevelKeyUpdate, HigherLevelKeyUpdate>;\n\n/** A pending update to authorization keys */\nexport type PendingAuthorizationKeysUpdate = ChainUpdate<UpdateType.AuthorizationKeysUpdate, AuthorizationKeysUpdate>;\n\n/** A pending update to validator score parameters */\nexport type PendingValidatorScoreUpdate = ChainUpdate<UpdateType.ValidatorScoreParameters, ValidatorScoreParameters>;\n\nexport type CreatePLTUpdate = ChainUpdate<UpdateType.CreatePLT, CreatePLTPayload>;\n\n/** A union of chain updates, barring key updates */\nexport type CommonUpdate =\n    | MicroGtuPerEuroUpdate\n    | EuroPerEnergyUpdate\n    | TransactionFeeDistributionUpdate\n    | FoundationAccountUpdate\n    | MintDistributionUpdate\n    | ProtocolUpdate\n    | GasRewardsV0Update\n    | BakerStakeThresholdUpdate\n    | ElectionDifficultyUpdate\n    | AddAnonymityRevokerUpdate\n    | AddIdentityProviderUpdate\n    | CooldownParametersUpdate\n    | PoolParametersUpdate\n    | TimeParametersUpdate\n    | GasRewardsV1Update\n    | TimeoutParametersUpdate\n    | MinBlockTimeUpdate\n    | BlockEnergyLimitUpdate\n    | FinalizationCommitteeParametersUpdate\n    | PendingValidatorScoreUpdate\n    | CreatePLTUpdate;\n\n/** A union of chain updates */\nexport type UpdateInstructionPayload = CommonUpdate | RootUpdate | Level1Update;\n\n/** A pending update */\nexport type PendingUpdate = {\n    /** The effective time of the update */\n    effectiveTime: Timestamp.Type;\n    /**\n     * The effect of the update.\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    effect: Upward<PendingUpdateEffect>;\n};\n\n/** A union of possible effects */\nexport type PendingUpdateEffect = CommonUpdate | PendingHigherLevelKeyUpdate | PendingAuthorizationKeysUpdate;\n\n/** Chain update types */\nexport enum UpdateType {\n    Root = 'root',\n    Level1 = 'level1',\n    HigherLevelKeyUpdate = 'higherLevelKeyUpdate',\n    AuthorizationKeysUpdate = 'AuthorizationKeysUpdate',\n    Protocol = 'protocol',\n    ElectionDifficulty = 'electionDifficulty',\n    EuroPerEnergy = 'euroPerEnergy',\n    MicroGtuPerEuro = 'microGtuPerEuro',\n    FoundationAccount = 'foundationAccount',\n    MintDistribution = 'mintDistribution',\n    TransactionFeeDistribution = 'transactionFeeDistribution',\n    GasRewards = 'gasRewards',\n    PoolParameters = 'poolParameters',\n    AddAnonymityRevoker = 'addAnonymityRevoker',\n    AddIdentityProvider = 'addIdentityProvider',\n    CooldownParameters = 'cooldownParameters',\n    TimeParameters = 'timeParameters',\n    ProtocolUpdate = 'protocolUpdate',\n    BakerStakeThreshold = 'bakerStakeThreshold',\n    Emergency = 'emergency',\n    GasRewardsCpv2 = 'gasRewardsCpv2',\n    TimeoutParameters = 'timeoutParameters',\n    MinBlockTime = 'minBlockTime',\n    BlockEnergyLimit = 'blockEnergyLimit',\n    FinalizationCommitteeParameters = 'finalizationCommitteeParameters',\n    ValidatorScoreParameters = 'validatorScoreParameters',\n    CreatePLT = 'createPLT',\n}\n\nexport type KeyUpdate = HigherLevelKeyUpdate | AuthorizationKeysUpdate;\n\nexport interface Fraction {\n    numerator: bigint;\n    denominator: bigint;\n}\n\nexport type AddIdentityProvider = IpInfo;\nexport type AddAnonymityRevoker = ArInfo;\n\nexport interface FoundationAccount {\n    address: Base58String;\n}\n\nexport interface ProtocolUpdateDetails {\n    message: string;\n    specificationUrl: string;\n    specificationHash: HexString;\n    specificationAuxiliaryData: string;\n}\n\nexport interface BakerStakeThreshold {\n    threshold: bigint;\n}\n\nexport interface ElectionDifficulty {\n    electionDifficulty: number;\n}\n\nexport interface TimeParameters {\n    rewardPeriodLength: bigint;\n    mintRatePerPayday: MintRate;\n}\n\nexport interface CooldownParameters {\n    poolOwnerCooldown: bigint;\n    delegatorCooldown: bigint;\n}\n\nexport interface CommissionRange {\n    min: number;\n    max: number;\n}\n\nexport interface CommissionRanges {\n    finalizationRewardCommission: CommissionRange;\n    bakingRewardCommission: CommissionRange;\n    transactionFeeCommission: CommissionRange;\n}\n\nexport interface PoolParameters {\n    passiveCommissions: CommissionRates;\n    commissionBounds: CommissionRanges;\n    minimumEquityCapital: CcdAmount.Type;\n    capitalBound: number;\n    leverageBound: Fraction;\n}\n\nexport enum KeyUpdateEntryStatus {\n    Added,\n    Removed,\n    Unchanged,\n}\n\nexport interface KeyWithStatus {\n    key: UpdatePublicKey;\n    status: KeyUpdateEntryStatus;\n}\n\nexport enum HigherLevelKeyUpdateType {\n    RootKeysUpdate = 'rootKeysUpdate',\n    Level1KeysUpdate = 'level1KeysUpdate',\n}\n\nexport interface HigherLevelKeyUpdate {\n    typeOfUpdate: HigherLevelKeyUpdateType;\n    /**\n     * The authorization keys included in the update.\n     */\n    updateKeys: UpdatePublicKey[];\n    /**\n     * The key threshold needed to perform the update to higher level keys.\n     */\n    threshold: number;\n}\n\nexport enum AuthorizationKeysUpdateType {\n    Level2KeysUpdate = 'level2KeysUpdate',\n    Level2KeysUpdateV1 = 'level2KeysUpdateV1',\n}\n\nexport type AuthorizationKeysUpdate =\n    | {\n          typeOfUpdate: AuthorizationKeysUpdateType.Level2KeysUpdate;\n          updatePayload: AuthorizationsV0;\n      }\n    | {\n          typeOfUpdate: AuthorizationKeysUpdateType.Level2KeysUpdateV1;\n          updatePayload: AuthorizationsV1;\n      };\n\nexport type UpdateInstructionHeader = {\n    sequenceNumber: bigint;\n    effectiveTime: bigint;\n    timeout: bigint;\n};\n\nexport type UpdateInstruction = {\n    header: UpdateInstructionHeader;\n    payload: HexString;\n};\n","class i{static#e=new Map;tag;contents;constructor(t,e=void 0){this.tag=t,this.contents=e}get noChildren(){return!!i.#e.get(this.tag)?.noChildren}static registerDecoder(t,e,n){const o=this.#e.get(t);return this.#e.set(t,e),o&&(\"comment\"in e||(e.comment=o.comment),\"noChildren\"in e||(e.noChildren=o.noChildren)),n&&!e.comment&&(e.comment=()=>`(${n})`),o}static clearDecoder(t){const e=this.#e.get(t);return this.#e.delete(t),e}static getDecoder(t){return this.#e.get(t)}static getAllDecoders(){return new Map(this.#e)}*[Symbol.iterator](){yield this.contents}push(t){return this.contents=t,1}decode(t){const e=i.#e.get(this.tag);return e?e(this,t):this}comment(t,e){const n=i.#e.get(this.tag);if(n?.comment)return n.comment(this,t,e)}toCBOR(){return[this.tag,this.contents]}[Symbol.for(\"nodejs.util.inspect.custom\")](t,e,n){return`${this.tag}(${n(this.contents,e)})`}}export{i as Tag};\n","import { isAsciiAlphaNumericPunctuation } from '../contractHelpers.js';\nimport * as InitName from './InitName.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.ContractName;\n/**\n * @deprecated\n */\nexport type Serializable = string;\n\n/** The name of a smart contract. Note: This does _not_ including the 'init_' prefix. */\nclass ContractName {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** The internal string value of the contract name. */\n        public readonly value: string\n    ) {}\n\n    /**\n     * Get a string representation of the contract name.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.value;\n    }\n\n    /**\n     * Get a JSON-serializable representation of the contract name.\n     * @returns {string} The JSON-serializable representation.\n     */\n    public toJSON(): string {\n        return this.value;\n    }\n}\n\n/**\n * Converts a `string` to a contract name.\n * @param {string} json The JSON representation of the contract name.\n * @returns {ContractName} The contract name.\n */\nexport function fromJSON(json: string): ContractName {\n    return fromString(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode ContractName.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON(value: Type): Serializable {\n    return value.toString();\n}\n\n/** The name of a smart contract. Note: This does _not_ including the 'init_' prefix. */\nexport type Type = ContractName;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is ContractName {\n    return value instanceof ContractName;\n}\n\n/**\n * Create a contract name from a string, ensuring it follows the format of a contract name.\n * @param {string} value The string of the contract name.\n * @throws If the provided value is not a valid contract name.\n * @returns {ContractName}\n */\nexport function fromString(value: string): ContractName {\n    if (value.length > 95) {\n        throw new Error('Invalid ContractName: Can be atmost 95 characters long.');\n    }\n    if (value.includes('.')) {\n        throw new Error(\"Invalid ContractName: Must not contain a '.' character.\");\n    }\n    if (!isAsciiAlphaNumericPunctuation(value)) {\n        throw new Error('Invalid ContractName: Must only contain ASCII alpha, numeric and punctuation characters.');\n    }\n    return new ContractName(value);\n}\n\n/**\n * Create a contract name from a string, but _without_ ensuring it follows the format of a contract name.\n * It is up to the caller to validate the string is a contract name.\n * @param {string} value The string of the contract name.\n * @returns {ContractName}\n */\nexport function fromStringUnchecked(value: string): ContractName {\n    return new ContractName(value);\n}\n\n/**\n * Extract the contract name from an {@link InitName.Type}.\n * @param {InitName.Type} initName The init-function name of a smart contract.\n * @returns {ContractName}\n */\nexport function fromInitName(initName: InitName.Type): ContractName {\n    return fromStringUnchecked(initName.value.substring(5));\n}\n\n/**\n * Convert a contract name to a string\n * @deprecated Use the {@linkcode ContractName.toString} method instead.\n * @param {ContractName} contractName The contract name to stringify.\n * @returns {string}\n */\nexport function toString(contractName: ContractName): string {\n    return contractName.value;\n}\n\n/** Type used when encoding a contract name in the JSON format used when serializing using a smart contract schema type. */\nexport type SchemaValue = {\n    contract: string;\n};\n\n/**\n * Get contract name in the JSON format used when serializing using a smart contract schema type.\n * @param {ContractName} contractName The contract name.\n * @returns {SchemaValue} The schema JSON representation.\n */\nexport function toSchemaValue(contractName: ContractName): SchemaValue {\n    return { contract: contractName.value };\n}\n\n/**\n * Convert to contract name from JSON format used when serializing using a smart contract schema type.\n * @param {SchemaValue} contractName The contract name in schema JSON format.\n * @returns {ContractName} The contract name.\n */\nexport function fromSchemaValue(contractName: SchemaValue): ContractName {\n    return fromString(contractName.contract);\n}\n\n/**\n * Check if two contract names represent the same name of a contract.\n * @param {ContractName} left\n * @param {ContractName} right\n * @returns {boolean} True if they are equal.\n */\nexport function equals(left: ContractName, right: ContractName): boolean {\n    return left.value === right.value;\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode ContractName.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: ContractName): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toString(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromString);\n","export type { CIS2 } from './util.js';\nexport {\n    tokenAddressFromBase58,\n    tokenAddressToBase58,\n    deserializeCIS2Event,\n    deserializeCIS2EventsFromInvokationResult,\n    deserializeCIS2EventsFromSummary,\n    parseCIS2RejectionError,\n} from './util.js';\nexport * from './CIS2Contract.js';\n","export {\n    Type,\n    JSON,\n    fromJSON,\n    Err,\n    ErrorType,\n    instanceOf,\n    fromHexString,\n    fromBuffer,\n    toHexString,\n    equals,\n} from '../../plt/TokenModuleReference.js';\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mnemonicToSeedSync = exports.mnemonicToSeed = exports.validateMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.generateMnemonic = void 0;\n/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nconst _assert_1 = require(\"@noble/hashes/_assert\");\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst base_1 = require(\"@scure/base\");\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError(`Invalid mnemonic type: ${typeof str}`);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction assertEntropy(entropy) {\n    _assert_1.default.bytes(entropy, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction generateMnemonic(wordlist, strength = 128) {\n    _assert_1.default.number(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic((0, utils_1.randomBytes)(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([((0, sha256_1.sha256)(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string')\n        throw new Error('Worlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error(`Wordlist: non-string element: ${i}`);\n    });\n    return base_1.utils.chain(base_1.utils.checksum(1, calcChecksum), base_1.utils.radix2(11, true), base_1.utils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    assertEntropy(entropy);\n    return entropy;\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction entropyToMnemonic(entropy, wordlist) {\n    assertEntropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nconst salt = (passphrase) => nfkd(`mnemonic${passphrase}`);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeed(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2Async)(sha512_1.sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2)(sha512_1.sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\n","import{DiagnosticSizes as b}from\"./options.js\";import{MT as s,NUMBYTES as f,SYMS as d}from\"./constants.js\";import{CBORcontainer as S}from\"./container.js\";import{DecodeStream as E}from\"./decodeStream.js\";import{Simple as N}from\"./simple.js\";import{halfToUint as I}from\"./float.js\";import{u8toHex as _}from\"./utils.js\";const O=\"  \",y=new TextEncoder;class g extends S{close=\"\";quote='\"';get isEmptyStream(){return(this.mt===s.UTF8_STRING||this.mt===s.BYTE_STRING)&&this.count===0}}function a(m,l,n,p){let t=\"\";if(l===f.INDEFINITE)t+=\"_\";else{if(p.diagnosticSizes===b.NEVER)return\"\";{let r=p.diagnosticSizes===b.ALWAYS;if(!r){let e=f.ZERO;if(Object.is(n,-0))e=f.TWO;else if(m===s.POS_INT||m===s.NEG_INT){const T=n<0,u=typeof n==\"bigint\"?1n:1,o=T?-n-u:n;o<=23?e=Number(o):o<=255?e=f.ONE:o<=65535?e=f.TWO:o<=4294967295?e=f.FOUR:e=f.EIGHT}else isFinite(n)?Math.fround(n)===n?I(n)==null?e=f.FOUR:e=f.TWO:e=f.EIGHT:e=f.TWO;r=e!==l}r&&(t+=\"_\",l<f.ONE?t+=\"i\":t+=String(l-24))}}return t}function M(m,l){const n={...S.defaultDecodeOptions,...l,ParentType:g},p=new E(m,n);let t,r,e=\"\";for(const T of p){const[u,o,i]=T;switch(t&&(t.count>0&&i!==d.BREAK&&(t.mt===s.MAP&&t.count%2?e+=\": \":(e+=\",\",n.pretty||(e+=\" \"))),n.pretty&&(t.mt!==s.MAP||t.count%2===0)&&(e+=`\n${O.repeat(t.depth+1)}`)),r=S.create(T,t,n,p),u){case s.POS_INT:case s.NEG_INT:e+=String(i),e+=a(u,o,i,n);break;case s.SIMPLE_FLOAT:if(i!==d.BREAK)if(typeof i==\"number\"){const c=Object.is(i,-0)?\"-0.0\":String(i);e+=c,isFinite(i)&&!/[.e]/.test(c)&&(e+=\".0\"),e+=a(u,o,i,n)}else i instanceof N?(e+=\"simple(\",e+=String(i.value),e+=a(s.POS_INT,o,i.value,n),e+=\")\"):e+=String(i);break;case s.BYTE_STRING:i===1/0?(e+=\"(_ \",r.close=\")\",r.quote=\"'\"):(e+=\"h'\",e+=_(i),e+=\"'\",e+=a(s.POS_INT,o,i.length,n));break;case s.UTF8_STRING:i===1/0?(e+=\"(_ \",r.close=\")\"):(e+=JSON.stringify(i),e+=a(s.POS_INT,o,y.encode(i).length,n));break;case s.ARRAY:{e+=\"[\";const c=a(s.POS_INT,o,i,n);e+=c,c&&(e+=\" \"),n.pretty&&i?r.close=`\n${O.repeat(r.depth)}]`:r.close=\"]\";break}case s.MAP:{e+=\"{\";const c=a(s.POS_INT,o,i,n);e+=c,c&&(e+=\" \"),n.pretty&&i?r.close=`\n${O.repeat(r.depth)}}`:r.close=\"}\";break}case s.TAG:e+=String(i),e+=a(s.POS_INT,o,i,n),e+=\"(\",r.close=\")\";break}if(r===d.BREAK)if(t?.isStreaming)t.left=0;else throw new Error(\"Unexpected BREAK\");else t&&(t.count++,t.left--);for(r instanceof g&&(t=r);t?.done;){if(t.isEmptyStream)e=e.slice(0,-3),e+=`${t.quote}${t.quote}_`;else{if(t.mt===s.MAP&&t.count%2!==0)throw new Error(`Odd streaming map size: ${t.count}`);e+=t.close}t=t.parent}}return e}export{M as diagnose};\n","import{MT as u,NUMBYTES as b,SYMS as E}from\"./constants.js\";import{getEncoded as B,saveEncoded as R}from\"./box.js\";import{getRanges as S,subarrayRanges as I,u8toHex as C}from\"./utils.js\";import{CBORcontainer as T}from\"./container.js\";import{DecodeStream as M}from\"./decodeStream.js\";import{Simple as N}from\"./simple.js\";import{Tag as P}from\"./tag.js\";import{diagnose as U}from\"./diagnostic.js\";const H=new TextDecoder;class A extends T{depth=0;leaf=!1;value;length;[E.ENCODED];constructor(a,f,e,n){super(a,f,e,n),this.parent?this.depth=this.parent.depth+1:this.depth=n.initialDepth,[,,this.value,,this.length]=a}numBytes(){switch(this.ai){case b.ONE:return 1;case b.TWO:return 2;case b.FOUR:return 4;case b.EIGHT:return 8}return 0}}function k(t){return t instanceof A}function O(t,a){return t===1/0?\"Indefinite\":a?`${t} ${a}${t!==1&&t!==1n?\"s\":\"\"}`:String(t)}function y(t){return\"\".padStart(t,\" \")}function x(t,a,f){let e=\"\";e+=y(t.depth*2);const n=B(t);e+=C(n.subarray(0,1));const r=t.numBytes();r&&(e+=\" \",e+=C(n.subarray(1,r+1))),e=e.padEnd(a.minCol+1,\" \"),e+=\"-- \",f!==void 0&&(e+=y(t.depth*2),f!==\"\"&&(e+=`[${f}] `));let p=!1;const[s]=t.children;switch(t.mt){case u.POS_INT:e+=`Unsigned: ${s}`,typeof s==\"bigint\"&&(e+=\"n\");break;case u.NEG_INT:e+=`Negative: ${s}`,typeof s==\"bigint\"&&(e+=\"n\");break;case u.BYTE_STRING:e+=`Bytes (Length: ${O(t.length)})`;break;case u.UTF8_STRING:e+=`UTF8 (Length: ${O(t.length)})`,t.length!==1/0&&(e+=`: ${JSON.stringify(s)}`);break;case u.ARRAY:e+=`Array (Length: ${O(t.value,\"item\")})`;break;case u.MAP:e+=`Map (Length: ${O(t.value,\"pair\")})`;break;case u.TAG:{e+=`Tag #${t.value}`;const o=t.children,[m]=o.contents.children,i=new P(o.tag,m);R(i,n);const l=i.comment(a,t.depth);l&&(e+=\": \",e+=l),p||=i.noChildren;break}case u.SIMPLE_FLOAT:s===E.BREAK?e+=\"BREAK\":t.ai>b.ONE?Object.is(s,-0)?e+=\"Float: -0\":e+=`Float: ${s}`:(e+=\"Simple: \",s instanceof N?e+=s.value:e+=s);break}if(!p)if(t.leaf){if(e+=`\n`,n.length>r+1){const o=y((t.depth+1)*2),m=S(n);if(m?.length){m.sort((l,c)=>{const g=l[0]-c[0];return g||c[1]-l[1]});let i=0;for(const[l,c,g]of m)if(!(l<i)){if(i=l+c,g===\"<<\"){e+=y(a.minCol+1),e+=\"--\",e+=o,e+=\"<< \";const d=I(n,l,l+c),h=S(d);if(h){const $=h.findIndex(([w,D,v])=>w===0&&D===c&&v===\"<<\");$>=0&&h.splice($,1)}e+=U(d),e+=` >>\n`,e+=L(d,{initialDepth:t.depth+1,minCol:a.minCol,noPrefixHex:!0});continue}else g===\"'\"&&(e+=y(a.minCol+1),e+=\"--\",e+=o,e+=\"'\",e+=H.decode(n.subarray(l,l+c)),e+=`'\n`);if(l>r)for(let d=l;d<l+c;d+=8){const h=Math.min(d+8,l+c);e+=o,e+=C(n.subarray(d,h)),e+=`\n`}}}else for(let i=r+1;i<n.length;i+=8)e+=o,e+=C(n.subarray(i,i+8)),e+=`\n`}}else{e+=`\n`;let o=0;for(const m of t.children){if(k(m)){let i=String(o);t.mt===u.MAP?i=o%2?`val ${(o-1)/2}`:`key ${o/2}`:t.mt===u.TAG&&(i=\"\"),e+=x(m,a,i)}o++}}return e}const q={...T.defaultDecodeOptions,initialDepth:0,noPrefixHex:!1,minCol:0};function L(t,a){const f={...q,...a,ParentType:A,saveOriginal:!0},e=new M(t,f);let n,r;for(const s of e){if(r=T.create(s,n,f,e),s[2]===E.BREAK)if(n?.isStreaming)n.left=1;else throw new Error(\"Unexpected BREAK\");if(!k(r)){const i=new A(s,0,n,f);i.leaf=!0,i.children.push(r),R(i,e.toHere(s[3])),r=i}let o=(r.depth+1)*2;const m=r.numBytes();for(m&&(o+=1,o+=m*2),f.minCol=Math.max(f.minCol,o),n&&n.push(r,e,s[3]),n=r;n?.done;)r=n,r.leaf||R(r,e.toHere(r.offset)),{parent:n}=n}a&&(a.minCol=f.minCol);let p=f.noPrefixHex?\"\":`0x${C(e.toHere(0))}\n`;return p+=x(r,f),p}export{L as comment};\n","import{MT as R,TAG as a}from\"./constants.js\";import{Tag as i}from\"./tag.js\";import{box as x,getEncoded as $}from\"./box.js\";import{base64ToBytes as L,base64UrlToBytes as q,isBigEndian as C,u8toHex as A}from\"./utils.js\";import{encode as w,registerEncoder as s,writeInt as v,writeLength as V,writeTag as k,writeUnknown as P}from\"./encoder.js\";import{CBORcontainer as F}from\"./container.js\";import{comment as K}from\"./comment.js\";const B=!C();function S(e){if(typeof e==\"object\"&&e){if(e.constructor!==Number)throw new Error(`Expected number: ${e}`)}else if(typeof e!=\"number\")throw new Error(`Expected number: ${e}`)}function f(e){if(typeof e==\"object\"&&e){if(e.constructor!==String)throw new Error(`Expected string: ${e}`)}else if(typeof e!=\"string\")throw new Error(`Expected string: ${e}`)}function l(e){if(!(e instanceof Uint8Array))throw new Error(`Expected Uint8Array: ${e}`)}function U(e){if(!Array.isArray(e))throw new Error(`Expected Array: ${e}`)}s(Map,(e,r,n)=>{const t=[...e.entries()].map(o=>[o[0],o[1],w(o[0],n)]);if(n.rejectDuplicateKeys){const o=new Set;for(const[d,u,y]of t){const g=A(y);if(o.has(g))throw new Error(`Duplicate map key: 0x${g}`);o.add(g)}}n.sortKeys&&t.sort(n.sortKeys),V(e,e.size,R.MAP,r,n);for(const[o,d,u]of t)r.write(u),P(d,r,n)});function h(e){return f(e.contents),new Date(e.contents)}h.comment=e=>(f(e.contents),`(String Date) ${new Date(e.contents).toISOString()}`),i.registerDecoder(a.DATE_STRING,h);function O(e){return S(e.contents),new Date(e.contents*1e3)}O.comment=e=>(S(e.contents),`(Epoch Date) ${new Date(e.contents*1e3).toISOString()}`),i.registerDecoder(a.DATE_EPOCH,O),s(Date,e=>[a.DATE_EPOCH,e.valueOf()/1e3]);function p(e,r,n){if(l(r.contents),n.rejectBigInts)throw new Error(`Decoding unwanted big integer: ${r}(h'${A(r.contents)}')`);if(n.requirePreferred&&r.contents[0]===0)throw new Error(`Decoding overly-large bigint: ${r.tag}(h'${A(r.contents)})`);let t=r.contents.reduce((o,d)=>o<<8n|BigInt(d),0n);if(e&&(t=-1n-t),n.requirePreferred&&t>=Number.MIN_SAFE_INTEGER&&t<=Number.MAX_SAFE_INTEGER)throw new Error(`Decoding bigint that could have been int: ${t}n`);return n.boxed?x(t,r.contents):t}const N=p.bind(null,!1),_=p.bind(null,!0);N.comment=(e,r)=>`(Positive BigInt) ${p(!1,e,r)}n`,_.comment=(e,r)=>`(Negative BigInt) ${p(!0,e,r)}n`,i.registerDecoder(a.POS_BIGINT,N),i.registerDecoder(a.NEG_BIGINT,_);function I(e,r){return l(e.contents),e}I.comment=(e,r,n)=>{l(e.contents);const t={...r,initialDepth:n+2,noPrefixHex:!0},o=$(e);let u=2**((o[0]&31)-24)+1;const y=o[u]&31;let g=A(o.subarray(u,++u));y>=24&&(g+=\" \",g+=A(o.subarray(u,u+2**(y-24)))),t.minCol=Math.max(t.minCol,(n+1)*2+g.length);const b=K(e.contents,t);let T=`Embedded CBOR\n`;return T+=`${\"\".padStart((n+1)*2,\" \")}${g}`.padEnd(t.minCol+1,\" \"),T+=`-- Bytes (Length: ${e.contents.length})\n`,T+=b,T},I.noChildren=!0,i.registerDecoder(a.CBOR,I),i.registerDecoder(a.URI,e=>(f(e.contents),new URL(e.contents)),\"URI\"),s(URL,e=>[a.URI,e.toString()]),i.registerDecoder(a.BASE64URL,e=>(f(e.contents),q(e.contents)),\"Base64url-encoded\"),i.registerDecoder(a.BASE64,e=>(f(e.contents),L(e.contents)),\"Base64-encoded\"),i.registerDecoder(35,e=>(f(e.contents),new RegExp(e.contents)),\"RegExp\"),i.registerDecoder(21065,e=>{f(e.contents);const r=`^(?:${e.contents})$`;return new RegExp(r,\"u\")},\"I-RegExp\"),i.registerDecoder(a.REGEXP,e=>{if(U(e.contents),e.contents.length<1||e.contents.length>2)throw new Error(`Invalid RegExp Array: ${e.contents}`);return new RegExp(e.contents[0],e.contents[1])},\"RegExp\"),s(RegExp,e=>[a.REGEXP,[e.source,e.flags]]),i.registerDecoder(64,e=>(l(e.contents),e.contents),\"uint8 Typed Array\");function c(e,r,n){l(e.contents);let t=e.contents.length;if(t%r.BYTES_PER_ELEMENT!==0)throw new Error(`Number of bytes must be divisible by ${r.BYTES_PER_ELEMENT}, got: ${t}`);t/=r.BYTES_PER_ELEMENT;const o=new r(t),d=new DataView(e.contents.buffer,e.contents.byteOffset,e.contents.byteLength),u=d[`get${r.name.replace(/Array/,\"\")}`].bind(d);for(let y=0;y<t;y++)o[y]=u(y*r.BYTES_PER_ELEMENT,n);return o}function E(e,r,n,t,o){const d=o.forceEndian??B;if(k(d?r:n,e,o),v(t.byteLength,e,R.BYTE_STRING),B===d)e.write(new Uint8Array(t.buffer,t.byteOffset,t.byteLength));else{const y=`write${t.constructor.name.replace(/Array/,\"\")}`,g=e[y].bind(e);for(const b of t)g(b,d)}}i.registerDecoder(65,e=>c(e,Uint16Array,!1),\"uint16, big endian, Typed Array\"),i.registerDecoder(66,e=>c(e,Uint32Array,!1),\"uint32, big endian, Typed Array\"),i.registerDecoder(67,e=>c(e,BigUint64Array,!1),\"uint64, big endian, Typed Array\"),i.registerDecoder(68,e=>(l(e.contents),new Uint8ClampedArray(e.contents)),\"uint8 Typed Array, clamped arithmetic\"),s(Uint8ClampedArray,e=>[68,new Uint8Array(e.buffer,e.byteOffset,e.byteLength)]),i.registerDecoder(69,e=>c(e,Uint16Array,!0),\"uint16, little endian, Typed Array\"),s(Uint16Array,(e,r,n)=>E(r,69,65,e,n)),i.registerDecoder(70,e=>c(e,Uint32Array,!0),\"uint32, little endian, Typed Array\"),s(Uint32Array,(e,r,n)=>E(r,70,66,e,n)),i.registerDecoder(71,e=>c(e,BigUint64Array,!0),\"uint64, little endian, Typed Array\"),s(BigUint64Array,(e,r,n)=>E(r,71,67,e,n)),i.registerDecoder(72,e=>(l(e.contents),new Int8Array(e.contents)),\"sint8 Typed Array\"),s(Int8Array,e=>[72,new Uint8Array(e.buffer,e.byteOffset,e.byteLength)]),i.registerDecoder(73,e=>c(e,Int16Array,!1),\"sint16, big endian, Typed Array\"),i.registerDecoder(74,e=>c(e,Int32Array,!1),\"sint32, big endian, Typed Array\"),i.registerDecoder(75,e=>c(e,BigInt64Array,!1),\"sint64, big endian, Typed Array\"),i.registerDecoder(77,e=>c(e,Int16Array,!0),\"sint16, little endian, Typed Array\"),s(Int16Array,(e,r,n)=>E(r,77,73,e,n)),i.registerDecoder(78,e=>c(e,Int32Array,!0),\"sint32, little endian, Typed Array\"),s(Int32Array,(e,r,n)=>E(r,78,74,e,n)),i.registerDecoder(79,e=>c(e,BigInt64Array,!0),\"sint64, little endian, Typed Array\"),s(BigInt64Array,(e,r,n)=>E(r,79,75,e,n)),i.registerDecoder(81,e=>c(e,Float32Array,!1),\"IEEE 754 binary32, big endian, Typed Array\"),i.registerDecoder(82,e=>c(e,Float64Array,!1),\"IEEE 754 binary64, big endian, Typed Array\"),i.registerDecoder(85,e=>c(e,Float32Array,!0),\"IEEE 754 binary32, little endian, Typed Array\"),s(Float32Array,(e,r,n)=>E(r,85,81,e,n)),i.registerDecoder(86,e=>c(e,Float64Array,!0),\"IEEE 754 binary64, big endian, Typed Array\"),s(Float64Array,(e,r,n)=>E(r,86,82,e,n)),i.registerDecoder(a.SET,(e,r)=>{if(U(e.contents),r.sortKeys){const n=F.decodeToEncodeOpts(r);let t=null;for(const o of e.contents){const d=[o,void 0,w(o,n)];if(t&&r.sortKeys(t,d)>=0)throw new Error(`Set items out of order in tag #${a.SET}`);t=d}}return new Set(e.contents)},\"Set\"),s(Set,(e,r,n)=>{let t=[...e];if(n.sortKeys){const o=t.map(d=>[d,void 0,w(d,n)]);o.sort(n.sortKeys),t=o.map(([d])=>d)}return[a.SET,t]}),i.registerDecoder(a.JSON,e=>(f(e.contents),JSON.parse(e.contents)),\"JSON-encoded\"),i.registerDecoder(a.SELF_DESCRIBED,e=>e.contents,\"Self-Described\"),i.registerDecoder(a.INVALID_16,()=>{throw new Error(`Tag always invalid: ${a.INVALID_16}`)},\"Invalid\"),i.registerDecoder(a.INVALID_32,()=>{throw new Error(`Tag always invalid: ${a.INVALID_32}`)},\"Invalid\"),i.registerDecoder(a.INVALID_64,()=>{throw new Error(`Tag always invalid: ${a.INVALID_64}`)},\"Invalid\");function D(e){throw new Error(`Encoding ${e.constructor.name} intentionally unimplmented.  It is not concrete enough to interoperate.  Convert to Uint8Array first.`)}s(ArrayBuffer,D),s(DataView,D),typeof SharedArrayBuffer<\"u\"&&s(SharedArrayBuffer,D);function m(e){return[NaN,e.valueOf()]}s(Boolean,m),s(Number,m),s(String,m),s(BigInt,m);\n","const o=\"1.12.0\";export{o as version};\n","import\"./types.js\";import{version as c}from\"./version.js\";import{CBORcontainer as e}from\"./container.js\";import{DiagnosticSizes as a}from\"./options.js\";import{decode as O}from\"./decoder.js\";import{diagnose as x}from\"./diagnostic.js\";import{comment as l}from\"./comment.js\";import{cdeEncodeOptions as D,defaultEncodeOptions as E,dcborEncodeOptions as b,encode as S,encodedNumber as C}from\"./encoder.js\";import{Simple as j}from\"./simple.js\";import{Tag as T}from\"./tag.js\";import{saveEncoded as q,saveEncodedLength as v,unbox as N,getEncoded as z}from\"./box.js\";const{cdeDecodeOptions:r,dcborDecodeOptions:n,defaultDecodeOptions:d}=e;export{a as DiagnosticSizes,j as Simple,T as Tag,r as cdeDecodeOptions,D as cdeEncodeOptions,l as comment,n as dcborDecodeOptions,b as dcborEncodeOptions,O as decode,d as defaultDecodeOptions,E as defaultEncodeOptions,x as diagnose,S as encode,C as encodedNumber,z as getEncoded,q as saveEncoded,v as saveEncodedLength,N as unbox,c as version};\n","import { Buffer } from 'buffer/index.js';\n\nimport { EU_MEMBERS, MAX_DATE, MIN_DATE, StatementBuilder, StatementTypes } from '../commonProofTypes.js';\nimport { MAX_U64 } from '../constants.js';\nimport { getPastDate } from '../id/idProofs.js';\nimport { AttributeKey, AttributeKeyString, AttributeList, AttributesKeys, HexString, Network } from '../types.js';\nimport type * as ContractAddress from '../types/ContractAddress.js';\nimport { ConcordiumHdWallet } from '../wasm/HdWallet.js';\nimport {\n    compareStringAttributes,\n    isStringAttributeInRange,\n    statementAttributeTypeToAttributeType,\n    timestampToDate,\n} from './helpers.js';\nimport {\n    AccountCommitmentInput,\n    AtomicStatementV2,\n    AttributeType,\n    CredentialSchemaProperty,\n    CredentialSchemaSubject,\n    CredentialStatement,\n    CredentialStatements,\n    CredentialSubject,\n    IDENTITY_SUBJECT_SCHEMA,\n    IdentityQualifier,\n    MembershipStatementV2,\n    NonMembershipStatementV2,\n    RangeStatementV2,\n    StatementAttributeType,\n    StatementProverQualifier,\n    VerifiableCredentialQualifier,\n    Web3IssuerCommitmentInput,\n    isTimestampAttribute,\n} from './types.js';\n\nexport const MAX_STRING_BYTE_LENGTH = 31;\nexport const MIN_DATE_ISO = '-262144-01-01T00:00:00Z';\nexport const MAX_DATE_ISO = '+262143-12-31T23:59:59.999999999Z';\nexport const MIN_DATE_TIMESTAMP = Date.parse(MIN_DATE_ISO);\nexport const MAX_DATE_TIMESTAMP = Date.parse(MAX_DATE_ISO);\n\nconst TIMESTAMP_VALID_VALUES = MIN_DATE_ISO + 'to ' + MAX_DATE_ISO;\nconst STRING_VALID_VALUES = '0 to ' + MAX_STRING_BYTE_LENGTH + ' bytes as UTF-8';\nconst INTEGER_VALID_VALUES = '0 to ' + MAX_U64;\n\nconst throwRangeError = (title: string, property: string, end: string, mustBe: string, validRange: string) => {\n    throw new Error(\n        title +\n            ' is a ' +\n            property +\n            ' property and therefore the ' +\n            end +\n            ' end of a range statement must be a ' +\n            mustBe +\n            ' in the range of ' +\n            validRange\n    );\n};\nconst throwSetError = (title: string, property: string, mustBe: string, validRange: string) => {\n    throw new Error(\n        title +\n            ' is a ' +\n            property +\n            ' property and therefore the members of a set statement must be ' +\n            mustBe +\n            ' in the range of ' +\n            validRange\n    );\n};\n\nfunction isTimestampAttributeSchemaProperty(properties?: CredentialSchemaProperty) {\n    return properties && properties.type === 'object' && properties.properties.type.const === 'date-time';\n}\n\nfunction isValidStringAttribute(attributeValue: string): boolean {\n    return Buffer.from(attributeValue, 'utf-8').length <= MAX_STRING_BYTE_LENGTH;\n}\n\nfunction isValidIntegerAttribute(attributeValue: bigint) {\n    return attributeValue >= 0 && attributeValue <= MAX_U64;\n}\n\nfunction isValidTimestampAttribute(attributeValue: Date) {\n    return attributeValue.getTime() >= MIN_DATE_TIMESTAMP && attributeValue.getTime() <= MAX_DATE_TIMESTAMP;\n}\n\nfunction validateTimestampAttribute(value: AttributeType) {\n    return isTimestampAttribute(value) && isValidTimestampAttribute(timestampToDate(value));\n}\n\nfunction validateStringAttribute(value: AttributeType) {\n    return typeof value === 'string' && isValidStringAttribute(value);\n}\n\nfunction validateIntegerAttribute(value: AttributeType) {\n    return typeof value === 'bigint' && isValidIntegerAttribute(value);\n}\n\nfunction verifyRangeStatement(statement: RangeStatementV2, properties?: CredentialSchemaProperty) {\n    if (statement.lower === undefined) {\n        throw new Error('Range statements must contain a lower field');\n    }\n    if (statement.upper === undefined) {\n        throw new Error('Range statements must contain an upper field');\n    }\n\n    if (properties) {\n        const checkRange = (\n            typeName: string,\n            validate: (a: AttributeType) => boolean,\n            typeString: string,\n            validRange: string\n        ) => {\n            if (!validate(statement.lower)) {\n                throwRangeError(properties.title, typeName, 'lower', typeString, validRange);\n            }\n            if (!validate(statement.upper)) {\n                throwRangeError(properties.title, typeName, 'upper', typeString, validRange);\n            }\n        };\n\n        if (isTimestampAttributeSchemaProperty(properties)) {\n            checkRange('timestamp', validateTimestampAttribute, 'Date', TIMESTAMP_VALID_VALUES);\n        } else if (properties.type === 'string') {\n            checkRange('string', validateStringAttribute, 'string', STRING_VALID_VALUES);\n        } else if (properties.type === 'integer') {\n            checkRange('integer', validateIntegerAttribute, 'bigint', INTEGER_VALID_VALUES);\n        }\n    }\n\n    // The assertions are safe, because we already validated that lower/upper has the correct types.\n    if (\n        (properties?.type === 'integer' && statement.upper < statement.lower) ||\n        (isTimestampAttributeSchemaProperty(properties) &&\n            isTimestampAttribute(statement.lower) &&\n            isTimestampAttribute(statement.upper) &&\n            timestampToDate(statement.upper).getTime() < timestampToDate(statement.lower).getTime()) ||\n        (properties?.type === 'string' &&\n            compareStringAttributes(statement.lower as string, statement.upper as string) > 0)\n    ) {\n        throw new Error('Upper bound must be greater than lower bound');\n    }\n}\n\nfunction verifySetStatement(\n    statement: MembershipStatementV2 | NonMembershipStatementV2,\n    statementTypeName: string,\n    properties?: CredentialSchemaProperty\n) {\n    if (statement.set === undefined) {\n        throw new Error(statementTypeName + 'statements must contain a set field');\n    }\n    if (statement.set.length === 0) {\n        throw new Error(statementTypeName + ' statements may not use empty sets');\n    }\n\n    if (properties) {\n        const checkSet = (\n            typeName: string,\n            validate: (a: AttributeType) => boolean,\n            typeString: string,\n            validValues: string\n        ) => {\n            if (!statement.set.every(validate)) {\n                throwSetError(properties.title, typeName, typeString, validValues);\n            }\n        };\n\n        if (isTimestampAttributeSchemaProperty(properties)) {\n            checkSet('date-time', validateTimestampAttribute, 'Date', TIMESTAMP_VALID_VALUES);\n        } else if (properties.type === 'string') {\n            checkSet('string', validateStringAttribute, 'string', STRING_VALID_VALUES);\n        } else if (properties.type === 'integer') {\n            checkSet('integer', validateIntegerAttribute, 'bigint', INTEGER_VALID_VALUES);\n        }\n    }\n}\n\nfunction verifyAtomicStatement(statement: AtomicStatementV2, schema?: CredentialSchemaSubject) {\n    if (statement.type === undefined) {\n        throw new Error('Statements must contain a type field');\n    }\n    if (statement.attributeTag === undefined) {\n        throw new Error('Statements must contain an attributeTag field');\n    }\n\n    if (schema && !Object.keys(schema.properties.attributes.properties).includes(statement.attributeTag)) {\n        throw new Error('Unknown attributeTag: ' + statement.attributeTag);\n    }\n\n    const property = schema && schema.properties.attributes.properties[statement.attributeTag];\n\n    switch (statement.type) {\n        case StatementTypes.AttributeInRange:\n            return verifyRangeStatement(statement, property);\n        case StatementTypes.AttributeInSet:\n            return verifySetStatement(statement, 'membership', property);\n        case StatementTypes.AttributeNotInSet:\n            return verifySetStatement(statement, 'non-membership', property);\n        case StatementTypes.RevealAttribute:\n            return;\n        default:\n            throw new Error(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                'Unknown statement type: ' + (statement as any).type\n            );\n    }\n}\n\n/**\n * Verify that the atomicStatement is valid, and check it doesn't break any \"composite\" rules in the context of the existing statements.\n */\nfunction verifyAtomicStatementInContext(\n    statement: AtomicStatementV2,\n    existingStatements: AtomicStatementV2[],\n    schema?: CredentialSchemaSubject\n) {\n    verifyAtomicStatement(statement, schema);\n    if (existingStatements.some((v) => v.attributeTag === statement.attributeTag)) {\n        throw new Error('Only 1 statement is allowed for each attribute');\n    }\n}\n\n/**\n * Check that the given atomic statements are well formed and do not break any rules.\n * If they do not verify, this throw an error.\n */\nexport function verifyAtomicStatements(statements: AtomicStatementV2[], schema?: CredentialSchemaSubject): boolean {\n    if (statements.length === 0) {\n        throw new Error('Empty statements are not allowed');\n    }\n    const checkedStatements: AtomicStatementV2[] = [];\n    for (const s of statements) {\n        verifyAtomicStatementInContext(s, checkedStatements, schema);\n        checkedStatements.push(s);\n    }\n    return true;\n}\n\nfunction getWeb3IdCredentialQualifier(validContractAddresses: ContractAddress.Type[]): VerifiableCredentialQualifier {\n    return {\n        type: 'sci',\n        issuers: validContractAddresses,\n    };\n}\n\nfunction getAccountCredentialQualifier(validIdentityProviders: number[]): IdentityQualifier {\n    return {\n        type: 'cred',\n        issuers: validIdentityProviders,\n    };\n}\n\nexport class AtomicStatementBuilder implements InternalBuilder {\n    statements: AtomicStatementV2[];\n    schema: CredentialSchemaSubject | undefined;\n\n    constructor(schema?: CredentialSchemaSubject) {\n        this.statements = [];\n        this.schema = schema;\n    }\n\n    /**\n     * Outputs the built statement.\n     */\n    getStatement(): AtomicStatementV2[] {\n        return this.statements;\n    }\n\n    /**\n     * This checks whether the given statement may be added to the statement being built.\n     * If the statement breaks any rules, this will throw an error.\n     */\n    private check(statement: AtomicStatementV2) {\n        if (this.schema) {\n            verifyAtomicStatementInContext(statement, this.statements, this.schema);\n        }\n    }\n\n    /**\n     * Add to the statement, that the given attribute should be in the given range, i.e. that lower <= attribute < upper.\n     * @param attribute the attribute that should be checked\n     * @param lower: the lower end of the range, inclusive.\n     * @param upper: the upper end of the range, exclusive.\n     * @returns the updated builder\n     */\n    addRange(attribute: string, lower: StatementAttributeType, upper: StatementAttributeType): this {\n        const statement: AtomicStatementV2 = {\n            type: StatementTypes.AttributeInRange,\n            attributeTag: attribute,\n            lower: statementAttributeTypeToAttributeType(lower),\n            upper: statementAttributeTypeToAttributeType(upper),\n        };\n        this.check(statement);\n        this.statements.push(statement);\n        return this;\n    }\n\n    /**\n     * Add to the statement, that the given attribute should be one of the values in the given set.\n     * @param attribute the attribute that should be checked\n     * @param set: the set of values that the attribute must be included in.\n     * @returns the updated builder\n     */\n    addMembership(attribute: string, set: StatementAttributeType[]): this {\n        const statement: AtomicStatementV2 = {\n            type: StatementTypes.AttributeInSet,\n            attributeTag: attribute,\n            set: set.map(statementAttributeTypeToAttributeType),\n        };\n        this.check(statement);\n        this.statements.push(statement);\n        return this;\n    }\n\n    /**\n     * Add to the statement, that the given attribute should _not_ be one of the values in the given set.\n     * @param attribute the attribute that should be checked\n     * @param set: the set of values that the attribute must be included in.\n     * @returns the updated builder\n     */\n    addNonMembership(attribute: string, set: StatementAttributeType[]): this {\n        const statement: AtomicStatementV2 = {\n            type: StatementTypes.AttributeNotInSet,\n            attributeTag: attribute,\n            set: set.map(statementAttributeTypeToAttributeType),\n        };\n        this.check(statement);\n        this.statements.push(statement);\n        return this;\n    }\n\n    /**\n     * Add to the statement, that the given attribute should be revealed.\n     * The proof will contain the value.\n     * @param attribute the attribute that should be revealed\n     * @returns the updated builder\n     */\n    revealAttribute(attribute: string): this {\n        const statement: AtomicStatementV2 = {\n            type: StatementTypes.RevealAttribute,\n            attributeTag: attribute,\n        };\n        this.check(statement);\n        this.statements.push(statement);\n        return this;\n    }\n}\n\nexport class AccountStatementBuild extends AtomicStatementBuilder {\n    /**\n     * Add to the statement that the age is at minimum the given value.\n     * This adds a range statement that the date of birth is between 1st of january 1800 and <age> years ago.\n     * @param age: the minimum age allowed.\n     * @returns the updated builder\n     */\n    addMinimumAge(age: number): AtomicStatementBuilder {\n        return this.addRange(AttributeKeyString.dob, MIN_DATE, getPastDate(age, 1));\n    }\n\n    /**\n     * Add to the statement that the age is at maximum the given value.\n     * This adds a range statement that the date of birth is between <age + 1> years ago and 1st of january 9999.\n     * @param age: the maximum age allowed.\n     * @returns the updated builder\n     */\n    addMaximumAge(age: number): AtomicStatementBuilder {\n        return this.addRange(AttributeKeyString.dob, getPastDate(age + 1, 1), MAX_DATE);\n    }\n\n    /**\n     * Add to the statement that the age is between two given ages.\n     * This adds a range statement that the date of birth is between <maxAge> years ago and <minAge> years ago.\n     * @param minAge: the maximum age allowed.\n     * @param maxAge: the maximum age allowed.\n     * @returns the updated builder\n     */\n    addAgeInRange(minAge: number, maxAge: number): AtomicStatementBuilder {\n        return this.addRange(AttributeKeyString.dob, getPastDate(maxAge + 1, 1), getPastDate(minAge));\n    }\n\n    /**\n     * Add to the statement that the user's document expiry is atleast the given date.\n     * This adds a range statement that the idDocExpiresAt is between the given date and 1st of january 9999 .\n     * @param earliestDate: the earliest the document is allow to be expired at, should be a string in YYYYMMDD format.\n     * @returns the updated builder\n     */\n    documentExpiryNoEarlierThan(earliestDate: string): AtomicStatementBuilder {\n        return this.addRange(AttributeKeyString.idDocExpiresAt, earliestDate, MAX_DATE);\n    }\n\n    /**\n     * Add to the statement that the country of residence is one of the EU countries\n     * @returns the updated builder\n     */\n    addEUResidency(): AtomicStatementBuilder {\n        return this.addMembership(AttributeKeyString.countryOfResidence, EU_MEMBERS);\n    }\n\n    /**\n     * Add to the statement that the nationality is one of the EU countries\n     * @returns the updated builder\n     */\n    addEUNationality(): AtomicStatementBuilder {\n        return this.addMembership(AttributeKeyString.nationality, EU_MEMBERS);\n    }\n}\n\ntype InternalBuilder = StatementBuilder<StatementAttributeType, string>;\nexport class Web3StatementBuilder {\n    private statements: CredentialStatements = [];\n\n    private add(\n        idQualifier: StatementProverQualifier,\n        builderCallback: (builder: InternalBuilder) => void,\n        schema?: CredentialSchemaSubject\n    ): this {\n        const builder = new AtomicStatementBuilder(schema);\n        builderCallback(builder);\n        this.statements.push({\n            idQualifier,\n            statement: builder.getStatement(),\n        });\n        return this;\n    }\n\n    addForVerifiableCredentials(\n        validContractAddresses: ContractAddress.Type[],\n        builderCallback: (builder: InternalBuilder) => void,\n        schema?: CredentialSchemaSubject\n    ): this {\n        return this.add(getWeb3IdCredentialQualifier(validContractAddresses), builderCallback, schema);\n    }\n\n    addForIdentityCredentials(\n        validIdentityProviders: number[],\n        builderCallback: (builder: InternalBuilder) => void\n    ): this {\n        return this.add(\n            getAccountCredentialQualifier(validIdentityProviders),\n            builderCallback,\n            IDENTITY_SUBJECT_SCHEMA\n        );\n    }\n\n    getStatements(): CredentialStatements {\n        return this.statements;\n    }\n}\n\n/**\n * Create a DID string for a web3id credential. Used to build a request for a verifiable credential.\n */\nexport function createWeb3IdDID(network: Network, publicKey: string, index: bigint, subindex: bigint): string {\n    return (\n        'did:ccd:' +\n        network.toLowerCase() +\n        ':sci:' +\n        index.toString() +\n        ':' +\n        subindex.toString() +\n        '/credentialEntry/' +\n        publicKey\n    );\n}\n\n/**\n * Create a DID string for a web3id credential. Used to build a request for a verifiable credential.\n */\nexport function createAccountDID(network: Network, credId: string): string {\n    return 'did:ccd:' + network.toLowerCase() + ':cred:' + credId;\n}\n\n/**\n * Create the commitment input required to create a proof for the given statements, using an account credential.\n */\nexport function createAccountCommitmentInput(\n    statements: AtomicStatementV2[],\n    identityProvider: number,\n    attributes: AttributeList,\n    randomness: Record<number, string>\n): AccountCommitmentInput {\n    return {\n        type: 'account',\n        issuer: identityProvider,\n        values: statements.reduce<Record<string, string>>((acc, x) => {\n            const attr = attributes.chosenAttributes[x.attributeTag as AttributeKey];\n            if (attr !== undefined) {\n                acc[x.attributeTag] = attr;\n            }\n\n            return acc;\n        }, {}),\n        randomness,\n    };\n}\n\n/**\n * Create the commitment input required to create a proof for the given statements, using an account credential.\n * Uses a ConcordiumHdWallet to get randomness needed.\n */\nexport function createAccountCommitmentInputWithHdWallet(\n    statements: AtomicStatementV2[],\n    identityProvider: number,\n    attributes: AttributeList,\n    wallet: ConcordiumHdWallet,\n    identityIndex: number,\n    credIndex: number\n): AccountCommitmentInput {\n    const randomness = statements.reduce<Record<string, string>>((acc, x) => {\n        acc[x.attributeTag] = wallet\n            .getAttributeCommitmentRandomness(\n                identityProvider,\n                identityIndex,\n                credIndex,\n                AttributesKeys[x.attributeTag as AttributeKey]\n            )\n            .toString('hex');\n        return acc;\n    }, {});\n    return createAccountCommitmentInput(statements, identityProvider, attributes, randomness);\n}\n\n/**\n * Create the commitment input required to create a proof for the given statements, using an web3Id credential.\n */\nexport function createWeb3CommitmentInput(\n    verifiableCredentialPrivateKey: HexString,\n    credentialSubject: CredentialSubject,\n    randomness: Record<string, string>,\n    signature: string\n): Web3IssuerCommitmentInput {\n    return {\n        type: 'web3Issuer',\n        signer: verifiableCredentialPrivateKey,\n        values: credentialSubject.attributes,\n        randomness,\n        signature,\n    };\n}\n\n/**\n * Create the commitment input required to create a proof for the given statements, using an web3Id credential.\n * Uses a ConcordiumHdWallet to supply the public key and the signing key of the credential.\n */\nexport function createWeb3CommitmentInputWithHdWallet(\n    wallet: ConcordiumHdWallet,\n    issuer: ContractAddress.Type,\n    credentialIndex: number,\n    credentialSubject: CredentialSubject,\n    randomness: Record<string, string>,\n    signature: string\n): Web3IssuerCommitmentInput {\n    return createWeb3CommitmentInput(\n        wallet.getVerifiableCredentialSigningKey(issuer, credentialIndex).toString('hex'),\n        credentialSubject,\n        randomness,\n        signature\n    );\n}\n\n/**\n * Helper to check if an attribute value is in the given range.\n */\nfunction isInRange(value: AttributeType, lower: AttributeType, upper: AttributeType) {\n    if (typeof value === 'string' && typeof lower === 'string' && typeof upper === 'string') {\n        return isStringAttributeInRange(value, lower, upper);\n    }\n    if (typeof value === 'bigint' && typeof lower === 'bigint' && typeof upper === 'bigint') {\n        return lower <= value && upper > value;\n    }\n    if (isTimestampAttribute(value) && isTimestampAttribute(lower) && isTimestampAttribute(upper)) {\n        return (\n            timestampToDate(lower).getTime() <= timestampToDate(value).getTime() &&\n            timestampToDate(upper).getTime() > timestampToDate(value).getTime()\n        );\n    }\n    // Mismatch in types.\n    return false;\n}\n\n/**\n * Helper to check if an attribute value is in the given set.\n */\nfunction isInSet(value: AttributeType, set: AttributeType[]) {\n    if (typeof value === 'string' || typeof value === 'bigint') {\n        return set.includes(value);\n    }\n    if (isTimestampAttribute(value)) {\n        return set\n            .map((timestamp) => (isTimestampAttribute(timestamp) ? timestampToDate(timestamp).getTime() : undefined))\n            .includes(timestampToDate(value).getTime());\n    }\n    return false;\n}\n\n/**\n * Given an atomic statement and a prover's attributes, determine whether the statement is fulfilled.\n */\nexport function canProveAtomicStatement(\n    statement: AtomicStatementV2,\n    attributes: Record<string, AttributeType>\n): boolean {\n    const attribute = attributes[statement.attributeTag];\n\n    if (attribute === undefined) {\n        return false;\n    }\n\n    switch (statement.type) {\n        case StatementTypes.AttributeInRange:\n            return isInRange(attribute, statement.lower, statement.upper);\n        case StatementTypes.AttributeInSet:\n            return isInSet(attribute, statement.set);\n        case StatementTypes.AttributeNotInSet:\n            return !isInSet(attribute, statement.set);\n        case StatementTypes.RevealAttribute:\n            return attribute !== undefined;\n        default:\n            throw new Error('Statement type of ' + statement.type + ' is not supported');\n    }\n}\n\n/**\n * Given a credential statement and a prover's attributes, determine whether the statements are fulfilled.\n */\nexport function canProveCredentialStatement(\n    credentialStatement: CredentialStatement,\n    attributes: Record<string, AttributeType>\n): boolean {\n    return credentialStatement.statement.every((statement) => canProveAtomicStatement(statement, attributes));\n}\n","import { TokenUpdatePayload } from '../types.js';\nimport { Cbor, CborAccountAddress, CborMemo, TokenAmount, TokenId } from './index.js';\n\n/**\n * Enum representing the types of token operations.\n */\nexport enum TokenOperationType {\n    Transfer = 'transfer',\n    Mint = 'mint',\n    Burn = 'burn',\n    AddAllowList = 'addAllowList',\n    RemoveAllowList = 'removeAllowList',\n    AddDenyList = 'addDenyList',\n    RemoveDenyList = 'removeDenyList',\n    Pause = 'pause',\n    Unpause = 'unpause',\n}\n\nexport type Memo = CborMemo.Type | Uint8Array;\n\n/**\n * The structure of a PLT transfer.\n */\nexport type TokenTransfer = {\n    /** The amount to transfer. */\n    amount: TokenAmount.Type;\n    /** The recipient of the transfer. */\n    recipient: CborAccountAddress.Type;\n    /** An optional memo for the transfer. A string will be CBOR encoded, while raw bytes are included in the\n     * transaction as is. */\n    memo?: Memo;\n};\n\n/**\n * Generic type for a token operation.\n * @template TokenOperationType - The type of the token operation.\n * @template T - The specific operation details.\n */\ntype TokenOperationGen<Type extends TokenOperationType, T extends Object> = {\n    [K in Type]: T;\n};\n\n/**\n * Represents a token transfer operation.\n */\nexport type TokenTransferOperation = TokenOperationGen<TokenOperationType.Transfer, TokenTransfer>;\n\n/**\n * The structure of a PLT mint/burn operation.\n */\nexport type TokenSupplyUpdate = {\n    /** The amount to mint/burn. */\n    amount: TokenAmount.Type;\n};\n\n/**\n * Represents a token mint operation.\n */\nexport type TokenMintOperation = TokenOperationGen<TokenOperationType.Mint, TokenSupplyUpdate>;\n\n/**\n * Represents a token burn operation.\n */\nexport type TokenBurnOperation = TokenOperationGen<TokenOperationType.Burn, TokenSupplyUpdate>;\n\n/**\n * The structure of any list update operation for a PLT.\n */\nexport type TokenListUpdate = {\n    /** The target of the list update. */\n    target: CborAccountAddress.Type;\n};\n\n/**\n * Represents an operation to add an account to the allow list.\n */\nexport type TokenAddAllowListOperation = TokenOperationGen<TokenOperationType.AddAllowList, TokenListUpdate>;\n\n/**\n * Represents an operation to remove an account from the allow list.\n */\nexport type TokenRemoveAllowListOperation = TokenOperationGen<TokenOperationType.RemoveAllowList, TokenListUpdate>;\n\n/**\n * Represents an operation to add an account to the deny list.\n */\nexport type TokenAddDenyListOperation = TokenOperationGen<TokenOperationType.AddDenyList, TokenListUpdate>;\n\n/**\n * Represents an operation to remove an account from the deny list.\n */\nexport type TokenRemoveDenyListOperation = TokenOperationGen<TokenOperationType.RemoveDenyList, TokenListUpdate>;\n\n/**\n * Represents an operation to pause the execution any operation that involves token balance\n * changes.\n */\nexport type TokenPauseOperation = TokenOperationGen<TokenOperationType.Pause, {}>;\n\n/**\n * Represents an operation to unpause the execution any operation that involves token balance\n * changes.\n */\nexport type TokenUnpauseOperation = TokenOperationGen<TokenOperationType.Unpause, {}>;\n\n/**\n * Union type representing all possible operations for a token.\n */\nexport type TokenOperation =\n    | TokenTransferOperation\n    | TokenMintOperation\n    | TokenBurnOperation\n    | TokenAddAllowListOperation\n    | TokenRemoveAllowListOperation\n    | TokenAddDenyListOperation\n    | TokenRemoveDenyListOperation\n    | TokenPauseOperation\n    | TokenUnpauseOperation;\n\n/**\n * Creates a payload for token operations.\n * This function encodes the provided token operation(s) into a CBOR format.\n *\n * @param tokenId - The unique identifier of the token for which the operation(s) is being performed.\n * @param operations - A single token operation or an array of token operations.\n *\n * @returns The encoded token governance payload.\n */\nexport function createTokenUpdatePayload(\n    tokenId: TokenId.Type,\n    operations: TokenOperation | TokenOperation[]\n): TokenUpdatePayload {\n    const ops = [operations].flat();\n    return {\n        tokenId: tokenId,\n        operations: Cbor.encode(ops),\n    };\n}\n\n/**\n * Represents a token operation (found when decoding) unknown to the SDK.\n */\nexport type UnknownTokenOperation = { [key: string]: unknown };\n\nfunction parseTransfer(details: unknown): TokenTransfer {\n    if (typeof details !== 'object' || details === null)\n        throw new Error(`Invalid transfer details: ${JSON.stringify(details)}. Expected an object.`);\n    if (!('amount' in details) || !TokenAmount.instanceOf(details.amount))\n        throw new Error(`Invalid transfer details: ${JSON.stringify(details)}. Expected 'amount' to be a TokenAmount`);\n    if (!('recipient' in details) || !CborAccountAddress.instanceOf(details.recipient))\n        throw new Error(\n            `Invalid transfer details: ${JSON.stringify(details)}. Expected 'recipient' to be a TokenHolder`\n        );\n    if ('memo' in details && !(details.memo instanceof Uint8Array || CborMemo.instanceOf(details.memo)))\n        throw new Error(\n            `Invalid transfer details: ${JSON.stringify(details)}. Expected 'memo' to be Uint8Array | CborMemo`\n        );\n    return details as TokenTransfer;\n}\n\nfunction parseSupplyUpdate(details: unknown): TokenSupplyUpdate {\n    if (typeof details !== 'object' || details === null) {\n        throw new Error(`Invalid supply update details: ${JSON.stringify(details)}. Expected an object.`);\n    }\n    if (!('amount' in details) || !TokenAmount.instanceOf(details.amount))\n        throw new Error(\n            `Invalid supply update details: ${JSON.stringify(details)}. Expected 'amount' to be a TokenAmount`\n        );\n    return details as TokenSupplyUpdate;\n}\n\nfunction parseListUpdate(details: unknown): TokenListUpdate {\n    if (typeof details !== 'object' || details === null)\n        throw new Error(`Invalid list update details: ${JSON.stringify(details)}. Expected an object.`);\n    if (!('target' in details) || !CborAccountAddress.instanceOf(details.target))\n        throw new Error(\n            `Invalid list update details: ${JSON.stringify(details)}. Expected 'target' to be a TokenHolder`\n        );\n    return details as TokenListUpdate;\n}\n\nfunction parseEmpty(details: unknown): {} {\n    if (typeof details !== 'object' || details === null || Object.keys(details as object).length !== 0)\n        throw new Error(`Invalid operation details: ${JSON.stringify(details)}. Expected empty object {}`);\n    return details;\n}\n\n/**\n * Decode a single token operation from CBOR. Throws on invalid shapes, only returns Unknown variant when the key is unrecognized.\n */\nfunction parseTokenOperation(decoded: unknown): TokenOperation | UnknownTokenOperation {\n    if (typeof decoded !== 'object' || decoded === null)\n        throw new Error(`Invalid token operation: ${JSON.stringify(decoded)}. Expected an object.`);\n\n    const keys = Object.keys(decoded);\n    if (keys.length !== 1)\n        throw new Error(\n            `Invalid token operation: ${JSON.stringify(decoded)}. Expected an object with a single key identifying the operation type.`\n        );\n\n    const type = keys[0];\n    const details = (decoded as Record<string, unknown>)[type];\n    switch (type) {\n        case TokenOperationType.Transfer:\n            return { [type]: parseTransfer(details) };\n        case TokenOperationType.Mint:\n            return { [type]: parseSupplyUpdate(details) };\n        case TokenOperationType.Burn:\n            return { [type]: parseSupplyUpdate(details) };\n        case TokenOperationType.AddAllowList:\n            return { [type]: parseListUpdate(details) };\n        case TokenOperationType.RemoveAllowList:\n            return { [type]: parseListUpdate(details) };\n        case TokenOperationType.AddDenyList:\n            return { [type]: parseListUpdate(details) };\n        case TokenOperationType.RemoveDenyList:\n            return { [type]: parseListUpdate(details) };\n        case TokenOperationType.Pause:\n            return { [type]: parseEmpty(details) };\n        case TokenOperationType.Unpause:\n            return { [type]: parseEmpty(details) };\n        default:\n            return decoded as UnknownTokenOperation;\n    }\n}\n\n/**\n * Decodes a token operation.\n *\n * @param cbor - The CBOR encoding to decode.\n * @returns The decoded token operation.\n *\n * @example\n * const op = decodeTokenOperation(cbor);\n * switch (true) {\n *   case TokenOperationType.Transfer in op: {\n *     const details = op[TokenOperationType.Transfer]; // type is known at this point.\n *     console.log(details);\n *   }\n *   ...\n *   default: console.warn('Unknown operation', op);\n * }\n */\nexport function decodeTokenOperation(cbor: Cbor.Type): TokenOperation | UnknownTokenOperation {\n    const decoded = Cbor.decode(cbor);\n    return parseTokenOperation(decoded);\n}\n\n/**\n * Decodes a list of token operations.\n *\n * @param cbor - The CBOR encoding to decode.\n * @returns The decoded token operations.\n *\n * @example\n * const ops = decodeTokenOperations(cbor);\n * ops.forEach(op => {\n *   switch (true) {\n *     case TokenOperationType.Transfer in op: {\n *       const details = op[TokenOperationType.Transfer]; // type is known at this point.\n *       console.log(details);\n *     }\n *     ...\n *     default: console.warn('Unknown operation', op);\n *   }\n * });\n */\nexport function decodeTokenOperations(cbor: Cbor.Type): (TokenOperation | UnknownTokenOperation)[] {\n    const decoded = Cbor.decode(cbor);\n    if (!Array.isArray(decoded))\n        throw new Error(`Invalid token update operations: ${JSON.stringify(decoded)}. Expected a list of operations.`);\n\n    return decoded.map(parseTokenOperation);\n}\n\n/**\n * Parses a token update payload, decoding the operations from CBOR format.\n *\n * @param payload - The token update payload to parse.\n * @returns The parsed token update payload with decoded operations.\n *\n * @example\n * const parsedPayload = parseTokenUpdatePayload(encodedPayload);\n * parsedPayload.operations.forEach(op => {\n *   switch (true) {\n *     case TokenOperationType.Transfer in op: {\n *       const details = op[TokenOperationType.Transfer]; // type is known at this point.\n *       console.log(details);\n *     }\n *     ...\n *     default: console.warn('Unknown operation', op);\n *   }\n * });\n */\nexport function parseTokenUpdatePayload(\n    payload: TokenUpdatePayload\n): Omit<TokenUpdatePayload, 'operations'> & { operations: (TokenOperation | UnknownTokenOperation)[] } {\n    const operations = decodeTokenOperations(payload.operations);\n    return { ...payload, operations };\n}\n","// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size\n// @generated from protobuf file \"v2/concordium/health.proto\" (package \"concordium.health\", syntax proto3)\n// tslint:disable\nimport type { RpcTransport } from \"@protobuf-ts/runtime-rpc\";\nimport type { ServiceInfo } from \"@protobuf-ts/runtime-rpc\";\nimport { Health } from \"./health.js\";\nimport { stackIntercept } from \"@protobuf-ts/runtime-rpc\";\nimport type { NodeHealthResponse } from \"./health.js\";\nimport type { NodeHealthRequest } from \"./health.js\";\nimport type { UnaryCall } from \"@protobuf-ts/runtime-rpc\";\nimport type { RpcOptions } from \"@protobuf-ts/runtime-rpc\";\n/**\n * @generated from protobuf service concordium.health.Health\n */\nexport interface IHealthClient {\n    /**\n     * Check the health of the node. By necessity this involves a number of\n     * heuristics since in a distributed network we have to rely on the local\n     * information only and we don't have authoritative data on, e.g., last\n     * finalized block.\n     *\n     * In particular, a node that is not caught up to the head of the chain is not\n     * healthy.\n     *\n     * If possible the client should use other queries to get a more fine-grained\n     * understanding of the node health. However this endpoint should provide a\n     * reasonable default and is usable in cases where an automatic check is\n     * performed that does not allow for configuration, such as in load-balancers.\n     *\n     * @generated from protobuf rpc: Check(concordium.health.NodeHealthRequest) returns (concordium.health.NodeHealthResponse);\n     */\n    check(input: NodeHealthRequest, options?: RpcOptions): UnaryCall<NodeHealthRequest, NodeHealthResponse>;\n}\n/**\n * @generated from protobuf service concordium.health.Health\n */\nexport class HealthClient implements IHealthClient, ServiceInfo {\n    typeName = Health.typeName;\n    methods = Health.methods;\n    options = Health.options;\n    constructor(private readonly _transport: RpcTransport) {\n    }\n    /**\n     * Check the health of the node. By necessity this involves a number of\n     * heuristics since in a distributed network we have to rely on the local\n     * information only and we don't have authoritative data on, e.g., last\n     * finalized block.\n     *\n     * In particular, a node that is not caught up to the head of the chain is not\n     * healthy.\n     *\n     * If possible the client should use other queries to get a more fine-grained\n     * understanding of the node health. However this endpoint should provide a\n     * reasonable default and is usable in cases where an automatic check is\n     * performed that does not allow for configuration, such as in load-balancers.\n     *\n     * @generated from protobuf rpc: Check(concordium.health.NodeHealthRequest) returns (concordium.health.NodeHealthResponse);\n     */\n    check(input: NodeHealthRequest, options?: RpcOptions): UnaryCall<NodeHealthRequest, NodeHealthResponse> {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return stackIntercept<NodeHealthRequest, NodeHealthResponse>(\"unary\", this._transport, method, opt, input);\n    }\n}\n","import { decode, encode } from 'cbor2';\n\nimport { CborAccountAddress, CborMemo, TokenAmount, TokenMetadataUrl } from '../plt/index.js';\n\n/**\n * Register CBOR encoders for all types.\n * This is safe to do as multiple encoders for the same CBOR tag is not a problem.\n *\n * Currently, this auto-registers the following encoders:\n * - `AccountAddress`: For encoding Concordium account addresses in CBOR format\n * - `TokenAmount`: For encoding protocol-level token amounts in CBOR format\n * - `CborMemo`: For encoding protocol-level token memos in CBOR format\n */\nexport function registerCBOREncoders(): void {\n    CborAccountAddress.registerCBOREncoder();\n    TokenAmount.registerCBOREncoder();\n    CborMemo.registerCBOREncoder();\n    TokenMetadataUrl.registerCBOREncoder();\n}\n\n/**\n * Removes undefined fields from plain objects (not class instances).\n * This function handles nested objects recursively.\n *\n * @param value - The value to process.\n * @returns The processed value with undefined fields removed.\n */\nfunction removeUndefined(value: unknown): unknown {\n    // Handle null early\n    if (value === null) {\n        return value;\n    }\n\n    // Handle arrays\n    if (Array.isArray(value)) {\n        return value.map(removeUndefined);\n    }\n\n    // Only process plain objects, not class instances\n    if (typeof value !== 'object' || Object.getPrototypeOf(value) !== Object.prototype) {\n        return value;\n    }\n\n    return Object.entries(value).reduce<Record<string, unknown>>((result, [key, val]) => {\n        if (val !== undefined) {\n            result[key] = removeUndefined(val);\n        }\n        return result;\n    }, {});\n}\n\n/**\n * Encodes a value into a dCBOR (Deterministic Concise Binary Object Representation) byte array.\n * Undefined fields in plain objects are automatically removed before encoding.\n *\n * @param value - The value to encode into CBOR format.\n * @returns A Uint8Array containing the CBOR-encoded data.\n */\nexport function cborEncode(value: unknown): Uint8Array {\n    registerCBOREncoders();\n    const processedValue = removeUndefined(value);\n    return encode(processedValue, { dcbor: true });\n}\n\n/**\n * Registers all available CBOR decoders globally with the cbor2 library.\n *\n * This function currently registers the following decoders:\n * - `AccountAddress` (tag 40307): For decoding Concordium account addresses\n * - `TokenAmount` (tag 4): For decoding protocol-level token amounts as decimal fractions\n * - `CborMemo` (tag 24): For decoding protocol-level token memos as cbor encoded data items\n *\n * @returns {(() => void)[]} An array of functions to clean up decoder registrations, i.e. restore the decoders\n * registered prior to registering the Concordium-specific ones.\n * @example\n * // Register all CBOR decoders globally\n * const oldDecoders = registerDecoders();\n * // Now `cbor2.decode` will automatically handle known Concordium types\n * const address = decode(cborBytes);\n * const tokenAmount = decode(tokenCborBytes);\n * // Restore old decoders\n * oldDecoders.forEach((cleanup) => {\n *     cleanup();\n * });\n */\n// We do NOT want to register all decoders, as only one decoder for each CBOR tag can exist at a time.\n// As such, it should be up to the end user to decide if they want to register the decoders globally in their application.\nexport function registerCBORDecoders(): (() => void)[] {\n    return [\n        CborAccountAddress.registerCBORDecoder(),\n        TokenAmount.registerCBORDecoder(),\n        CborMemo.registerCBORDecoder(),\n    ];\n}\n\n/**\n * Decodes CBOR-encoded data with temporary registration of the provided decoders.\n *\n * This function provides a scoped way to decode CBOR data with concordium-specific decoders,\n * without permanently altering the global decoder registry. It temporarily registers\n * the custom type decoders, performs the decoding, and then restores the previous\n * decoder configuration.\n *\n * @param {Uint8Array} bytes - The CBOR encoded data to decode.\n * @returns {unknown} The decoded value.\n */\nexport function cborDecode(bytes: Uint8Array): unknown {\n    // Register all the decoders, and store the old ones for restoration.\n    const oldDecoders = registerCBORDecoders();\n    const decoded = decode(bytes);\n\n    // Restore old decoders\n    oldDecoders.forEach((cleanup) => {\n        cleanup();\n    });\n\n    return decoded;\n}\n","import type * as Proto from '../grpc-api/v2/concordium/protocol-level-tokens.js';\nimport type {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- used for docs\n    Unknown,\n    Upward,\n} from '../grpc/index.js';\nimport { Base58String } from '../index.js';\nimport { AccountAddress } from '../types/index.js';\n\ninterface TokenHolder<T extends string> {\n    /** The type of the token holder. */\n    type: T;\n}\n\ntype TokenHolderAccountJSON = TokenHolder<'account'> & {\n    /** The address of the token holder account. */\n    address: Base58String;\n};\n\nclass TokenHolderAccount implements TokenHolder<'account'> {\n    public readonly type = 'account';\n\n    constructor(\n        /** The address of the account holding the token. */\n        public readonly address: AccountAddress.Type\n    ) {}\n\n    public toString(): string {\n        return this.address.toString();\n    }\n\n    /**\n     * Get a JSON-serializable representation of the token holder account. This is called implicitly when serialized with JSON.stringify.\n     * @returns {TokenHolderAccountJSON} The JSON representation.\n     */\n    public toJSON(): TokenHolderAccountJSON {\n        return {\n            type: 'account',\n            address: this.address.toJSON(),\n        };\n    }\n}\n\n/** Describes the `Account` variant of a `TokenHolder`. */\nexport type Account = TokenHolderAccount;\n/** Describes the `Account` variant of a `TokenHolder.JSON`. */\nexport type AccountJSON = TokenHolderAccountJSON;\n\n/** Describes any variant of a `TokenHolder`. */\nexport type Type = Account; // Can be extended to include other token holder types in the future\n/** Describes the JSON representation of variant of any `TokenHolder`. */\nexport type JSON = AccountJSON; // Can be extended to include other token holder types in the future\n\nexport function fromAccountAddress(address: AccountAddress.Type): TokenHolderAccount {\n    return new TokenHolderAccount(address);\n}\n\n/**\n * Recreate a token holder {@link Account} from its JSON form.\n */\nexport function fromJSON(json: AccountJSON): Account;\n/**\n * Recreate a {@link Type} from its JSON form.\n * If the `type` field is unknown, {@linkcode Unknown} is returned.\n */\nexport function fromJSON(json: JSON): Upward<Type>;\nexport function fromJSON(json: JSON): Upward<Type> {\n    switch (json.type) {\n        case 'account':\n            return new TokenHolderAccount(AccountAddress.fromJSON(json.address));\n        default:\n            return null;\n    }\n}\n\n/**\n * Construct a {@linkcode Account} from a base58check string.\n *\n * @param {string} address String of base58check encoded account address, must use a byte version of 1.\n * @returns {Account} The token holder account.\n * @throws If the provided string is not: exactly 50 characters, a valid base58check encoding using version byte 1.\n */\nexport function fromBase58(address: string): Account {\n    return fromAccountAddress(AccountAddress.fromBase58(address));\n}\n\n/**\n * Get a base58check string of the token holder account address.\n * @param {Account} accountAddress The token holder account.\n */\nexport function toBase58(accountAddress: Account): string {\n    return accountAddress.address.address;\n}\n\n/**\n * Type predicate which checks if a value is an instance of {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is Account {\n    return value instanceof TokenHolderAccount;\n}\n\n/**\n * Convert token holder from its protobuf encoding.\n * @param {Proto.TokenHolder} tokenHolder the token holder\n * @returns {Type} The token holder.\n * @throws {Error} If the token holder type is unsupported.\n */\nexport function fromProto(tokenHolder: Proto.TokenHolder): Upward<Type> {\n    switch (tokenHolder.address.oneofKind) {\n        case 'account':\n            return fromAccountAddress(AccountAddress.fromProto(tokenHolder.address.account));\n        // Add other token holder types here as needed\n        case undefined:\n            return null;\n    }\n}\n\n/**\n * Convert token holder into its protobuf encoding.\n * @param {Type} tokenHolder The token holder.\n * @returns {Proto.TokenHolder} The protobuf encoding.\n */\nexport function toProto(tokenHolder: Type): Proto.TokenHolder {\n    return {\n        address: {\n            oneofKind: 'account',\n            account: AccountAddress.toProto(tokenHolder.address),\n        },\n    };\n}\n","import { MAX_U8 } from '../constants.js';\nimport { Cbor, CborAccountAddress, CreatePLTPayload, TokenAmount, TokenMetadataUrl } from './index.js';\n\n/**\n * The Token Module state represents global state information that is maintained by the Token Module,\n * and is returned as part of a `GetTokenInfo` query. It does not include state that is managed by\n * the Token Kernel, such as the token identifier, global supply and governance account. It also\n * does not (typically) include account-specific state, which is returned as part of\n * `GetAccountInfo` instead.\n *\n * The \"name\" and \"metadata\" fields are required. Other fields are optional, and can be omitted if\n * the module implementation does not support them. The structure supports additional fields for\n * future extensibility. Non-standard fields (i.e. any fields that are not defined by a standard,\n * and are specific to the module implementation) may be included, and their tags should be\n * prefixed with an underscore (\"_\") to distinguish them as such.\n */\nexport type TokenModuleState = {\n    /** The name of the token. */\n    name?: string;\n    /** A URL pointing to the metadata of the token. */\n    metadata?: TokenMetadataUrl.Type;\n    /** The governance account for the token. */\n    governanceAccount?: CborAccountAddress.Type;\n    /** Whether the token supports an allow list */\n    allowList?: boolean;\n    /** Whether the token supports an deny list */\n    denyList?: boolean;\n    /** Whether the token is mintable */\n    mintable?: boolean;\n    /** Whether the token is burnable */\n    burnable?: boolean;\n    /** Whether the token operations are paused or not. */\n    paused?: boolean;\n    /** Any additional state information depending on the module implementation */\n    [key: string]: unknown;\n};\n\n/**\n * The account state represents account-specific information that is maintained by the Token\n * Module, and is returned as part of a `GetAccountInfo` query. It does not include state that is\n * managed by the Token Kernel, such as the token identifier and account balance.\n *\n * All fields are optional, and can be omitted if the module implementation does not support them.\n * The structure supports additional fields for future extensibility. Non-standard fields (i.e. any\n * fields that are not defined by a standard, and are specific to the module implementation) may\n * be included, and their tags should be prefixed with an underscore (\"_\") to distinguish them\n * as such.\n */\nexport type TokenModuleAccountState = {\n    /** Whether the account is on the allow list. */\n    allowList?: boolean;\n    /** Whether the account is on the deny list. */\n    denyList?: boolean;\n    /** Any additional state information depending on the module implementation. */\n    [key: string]: unknown;\n};\n\n/**\n * These parameters are passed to the token module to initialize the token.\n * The token initialization update will also include the ticker symbol,\n * number of decimals, and a reference to the token module implementation.\n */\nexport type TokenInitializationParameters = {\n    /** The name of the token. */\n    name?: string;\n    /** A URL pointing to the metadata of the token. */\n    metadata?: TokenMetadataUrl.Type;\n    /** The governance account for the token. */\n    governanceAccount?: CborAccountAddress.Type;\n    /** Whether the token supports an allow list */\n    allowList?: boolean;\n    /** Whether the token supports an deny list */\n    denyList?: boolean;\n    /** The initial amount of tokens to be minted */\n    initialSupply?: TokenAmount.Type;\n    /** Whether the token is mintable */\n    mintable?: boolean;\n    /** Whether the token is burnable */\n    burnable?: boolean;\n};\n\n/**\n * Creates a PLT (protocol-level token) payload with the specified initialization parameters.\n *\n * @param payload - The base payload for the PLT, excluding the initialization parameters.\n * @param params - The initialization parameters for the token, such as name, metadata, governance account, and feature flags.\n * @returns The complete PLT payload including the CBOR-encoded initialization parameters.\n */\nexport function createPltPayload(\n    payload: Omit<CreatePLTPayload, 'initializationParameters'>,\n    params: TokenInitializationParameters\n): CreatePLTPayload {\n    if (payload.decimals < 0 || payload.decimals > MAX_U8) {\n        throw new Error('Token decimals must be in the range 0..255 (inclusive).');\n    }\n    return {\n        ...payload,\n        initializationParameters: Cbor.encode(params),\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        (0, _assert_js_1.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.exists)(this);\n        (0, _assert_js_1.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n//# sourceMappingURL=_sha2.js.map","export {\n    Type,\n    toBuffer,\n    fromBuffer,\n    toHexString,\n    fromHexString,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    instanceOf,\n    fromJSON,\n    parseWithSchemaTypeBase64,\n    parseWithSchemaType,\n    empty,\n} from '../../types/ReturnValue.js';\n","var BigNumber = null;\n\n// regexpxs extracted from\n// (c) BSD-3-Clause\n// https://github.com/fastify/secure-json-parse/graphs/contributors and https://github.com/hapijs/bourne/graphs/contributors\n\nconst suspectProtoRx = /(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])/;\nconst suspectConstructorRx = /(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)/;\n\n/*\n    json_parse.js\n    2012-06-20\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\n    This file creates a json_parse function.\n    During create you can (optionally) specify some behavioural switches\n\n        require('json-bigint')(options)\n\n            The optional options parameter holds switches that drive certain\n            aspects of the parsing process:\n            * options.strict = true will warn about duplicate-key usage in the json.\n              The default (strict = false) will silently ignore those and overwrite\n              values for keys that are in duplicate use.\n\n    The resulting function follows this signature:\n        json_parse(text, reviver)\n            This method parses a JSON text to produce an object or array.\n            It can throw a SyntaxError exception.\n\n            The optional reviver parameter is a function that can filter and\n            transform the results. It receives each of the keys and values,\n            and its return value is used instead of the original value.\n            If it returns what it received, then the structure is not modified.\n            If it returns undefined then the member is deleted.\n\n            Example:\n\n            // Parse the text. Values that look like ISO date strings will\n            // be converted to Date objects.\n\n            myData = json_parse(text, function (key, value) {\n                var a;\n                if (typeof value === 'string') {\n                    a =\n/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n                    if (a) {\n                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n                            +a[5], +a[6]));\n                    }\n                }\n                return value;\n            });\n\n    This is a reference implementation. You are free to copy, modify, or\n    redistribute.\n\n    This code should be minified before deployment.\n    See http://javascript.crockford.com/jsmin.html\n\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n    NOT CONTROL.\n*/\n\n/*members \"\", \"\\\"\", \"\\/\", \"\\\\\", at, b, call, charAt, f, fromCharCode,\n    hasOwnProperty, message, n, name, prototype, push, r, t, text\n*/\n\nvar json_parse = function (options) {\n  'use strict';\n\n  // This is a function that can parse a JSON text, producing a JavaScript\n  // data structure. It is a simple, recursive descent parser. It does not use\n  // eval or regular expressions, so it can be used as a model for implementing\n  // a JSON parser in other languages.\n\n  // We are defining the function inside of another function to avoid creating\n  // global variables.\n\n  // Default options one can override by passing options to the parse()\n  var _options = {\n    strict: false, // not being strict means do not generate syntax errors for \"duplicate key\"\n    storeAsString: false, // toggles whether the values should be stored as BigNumber (default) or a string\n    alwaysParseAsBig: false, // toggles whether all numbers should be Big\n    useNativeBigInt: false, // toggles whether to use native BigInt instead of bignumber.js\n    protoAction: 'error',\n    constructorAction: 'error',\n  };\n\n  // If there are options, then use them to override the default _options\n  if (options !== undefined && options !== null) {\n    if (options.strict === true) {\n      _options.strict = true;\n    }\n    if (options.storeAsString === true) {\n      _options.storeAsString = true;\n    }\n    _options.alwaysParseAsBig =\n      options.alwaysParseAsBig === true ? options.alwaysParseAsBig : false;\n    _options.useNativeBigInt =\n      options.useNativeBigInt === true ? options.useNativeBigInt : false;\n\n    if (typeof options.constructorAction !== 'undefined') {\n      if (\n        options.constructorAction === 'error' ||\n        options.constructorAction === 'ignore' ||\n        options.constructorAction === 'preserve'\n      ) {\n        _options.constructorAction = options.constructorAction;\n      } else {\n        throw new Error(\n          `Incorrect value for constructorAction option, must be \"error\", \"ignore\" or undefined but passed ${options.constructorAction}`\n        );\n      }\n    }\n\n    if (typeof options.protoAction !== 'undefined') {\n      if (\n        options.protoAction === 'error' ||\n        options.protoAction === 'ignore' ||\n        options.protoAction === 'preserve'\n      ) {\n        _options.protoAction = options.protoAction;\n      } else {\n        throw new Error(\n          `Incorrect value for protoAction option, must be \"error\", \"ignore\" or undefined but passed ${options.protoAction}`\n        );\n      }\n    }\n  }\n\n  var at, // The index of the current character\n    ch, // The current character\n    escapee = {\n      '\"': '\"',\n      '\\\\': '\\\\',\n      '/': '/',\n      b: '\\b',\n      f: '\\f',\n      n: '\\n',\n      r: '\\r',\n      t: '\\t',\n    },\n    text,\n    error = function (m) {\n      // Call error when something is wrong.\n\n      throw {\n        name: 'SyntaxError',\n        message: m,\n        at: at,\n        text: text,\n      };\n    },\n    next = function (c) {\n      // If a c parameter is provided, verify that it matches the current character.\n\n      if (c && c !== ch) {\n        error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n      }\n\n      // Get the next character. When there are no more characters,\n      // return the empty string.\n\n      ch = text.charAt(at);\n      at += 1;\n      return ch;\n    },\n    number = function () {\n      // Parse a number value.\n\n      var number,\n        string = '';\n\n      if (ch === '-') {\n        string = '-';\n        next('-');\n      }\n      while (ch >= '0' && ch <= '9') {\n        string += ch;\n        next();\n      }\n      if (ch === '.') {\n        string += '.';\n        while (next() && ch >= '0' && ch <= '9') {\n          string += ch;\n        }\n      }\n      if (ch === 'e' || ch === 'E') {\n        string += ch;\n        next();\n        if (ch === '-' || ch === '+') {\n          string += ch;\n          next();\n        }\n        while (ch >= '0' && ch <= '9') {\n          string += ch;\n          next();\n        }\n      }\n      number = +string;\n      if (!isFinite(number)) {\n        error('Bad number');\n      } else {\n        if (BigNumber == null) BigNumber = require('bignumber.js');\n        //if (number > 9007199254740992 || number < -9007199254740992)\n        // Bignumber has stricter check: everything with length > 15 digits disallowed\n        if (string.length > 15)\n          return _options.storeAsString\n            ? string\n            : _options.useNativeBigInt\n            ? BigInt(string)\n            : new BigNumber(string);\n        else\n          return !_options.alwaysParseAsBig\n            ? number\n            : _options.useNativeBigInt\n            ? BigInt(number)\n            : new BigNumber(number);\n      }\n    },\n    string = function () {\n      // Parse a string value.\n\n      var hex,\n        i,\n        string = '',\n        uffff;\n\n      // When parsing for string values, we must look for \" and \\ characters.\n\n      if (ch === '\"') {\n        var startAt = at;\n        while (next()) {\n          if (ch === '\"') {\n            if (at - 1 > startAt) string += text.substring(startAt, at - 1);\n            next();\n            return string;\n          }\n          if (ch === '\\\\') {\n            if (at - 1 > startAt) string += text.substring(startAt, at - 1);\n            next();\n            if (ch === 'u') {\n              uffff = 0;\n              for (i = 0; i < 4; i += 1) {\n                hex = parseInt(next(), 16);\n                if (!isFinite(hex)) {\n                  break;\n                }\n                uffff = uffff * 16 + hex;\n              }\n              string += String.fromCharCode(uffff);\n            } else if (typeof escapee[ch] === 'string') {\n              string += escapee[ch];\n            } else {\n              break;\n            }\n            startAt = at;\n          }\n        }\n      }\n      error('Bad string');\n    },\n    white = function () {\n      // Skip whitespace.\n\n      while (ch && ch <= ' ') {\n        next();\n      }\n    },\n    word = function () {\n      // true, false, or null.\n\n      switch (ch) {\n        case 't':\n          next('t');\n          next('r');\n          next('u');\n          next('e');\n          return true;\n        case 'f':\n          next('f');\n          next('a');\n          next('l');\n          next('s');\n          next('e');\n          return false;\n        case 'n':\n          next('n');\n          next('u');\n          next('l');\n          next('l');\n          return null;\n      }\n      error(\"Unexpected '\" + ch + \"'\");\n    },\n    value, // Place holder for the value function.\n    array = function () {\n      // Parse an array value.\n\n      var array = [];\n\n      if (ch === '[') {\n        next('[');\n        white();\n        if (ch === ']') {\n          next(']');\n          return array; // empty array\n        }\n        while (ch) {\n          array.push(value());\n          white();\n          if (ch === ']') {\n            next(']');\n            return array;\n          }\n          next(',');\n          white();\n        }\n      }\n      error('Bad array');\n    },\n    object = function () {\n      // Parse an object value.\n\n      var key,\n        object = Object.create(null);\n\n      if (ch === '{') {\n        next('{');\n        white();\n        if (ch === '}') {\n          next('}');\n          return object; // empty object\n        }\n        while (ch) {\n          key = string();\n          white();\n          next(':');\n          if (\n            _options.strict === true &&\n            Object.hasOwnProperty.call(object, key)\n          ) {\n            error('Duplicate key \"' + key + '\"');\n          }\n\n          if (suspectProtoRx.test(key) === true) {\n            if (_options.protoAction === 'error') {\n              error('Object contains forbidden prototype property');\n            } else if (_options.protoAction === 'ignore') {\n              value();\n            } else {\n              object[key] = value();\n            }\n          } else if (suspectConstructorRx.test(key) === true) {\n            if (_options.constructorAction === 'error') {\n              error('Object contains forbidden constructor property');\n            } else if (_options.constructorAction === 'ignore') {\n              value();\n            } else {\n              object[key] = value();\n            }\n          } else {\n            object[key] = value();\n          }\n\n          white();\n          if (ch === '}') {\n            next('}');\n            return object;\n          }\n          next(',');\n          white();\n        }\n      }\n      error('Bad object');\n    };\n\n  value = function () {\n    // Parse a JSON value. It could be an object, an array, a string, a number,\n    // or a word.\n\n    white();\n    switch (ch) {\n      case '{':\n        return object();\n      case '[':\n        return array();\n      case '\"':\n        return string();\n      case '-':\n        return number();\n      default:\n        return ch >= '0' && ch <= '9' ? number() : word();\n    }\n  };\n\n  // Return the json_parse function. It will have access to all of the above\n  // functions and variables.\n\n  return function (source, reviver) {\n    var result;\n\n    text = source + '';\n    at = 0;\n    ch = ' ';\n    result = value();\n    white();\n    if (ch) {\n      error('Syntax error');\n    }\n\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n\n    return typeof reviver === 'function'\n      ? (function walk(holder, key) {\n          var k,\n            v,\n            value = holder[key];\n          if (value && typeof value === 'object') {\n            Object.keys(value).forEach(function (k) {\n              v = walk(value, k);\n              if (v !== undefined) {\n                value[k] = v;\n              } else {\n                delete value[k];\n              }\n            });\n          }\n          return reviver.call(holder, key, value);\n        })({ '': result }, '')\n      : result;\n  };\n};\n\nmodule.exports = json_parse;\n","import { Buffer } from 'buffer/index.js';\nimport hash from 'hash.js';\n\nexport function sha256(data: (Buffer | Uint8Array)[]): Buffer {\n    const sha256Hash = hash.sha256();\n    data.forEach((input) => sha256Hash.update(input));\n    return Buffer.from(sha256Hash.digest('hex'), 'hex');\n}\n","// self-referencing not allowed by eslint resolver\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as ed from '@concordium/web-sdk/shims/ed25519';\nimport { Buffer } from 'buffer/index.js';\n\nimport type { CIS2 } from '../cis2/util.js';\nimport {\n    deserializeCIS2MetadataUrl,\n    serializeCIS2MetadataUrl,\n    serializeContractAddress,\n    serializeReceiveHookName,\n} from '../cis2/util.js';\nimport { Cursor, makeDeserializeListResponse } from '../deserializationHelpers.js';\nimport { isKnown } from '../grpc/index.js';\nimport { OptionJson, toOptionJson } from '../schemaTypes.js';\nimport {\n    encodeBool,\n    encodeWord16,\n    encodeWord64,\n    makeSerializeOptional,\n    packBufferWithWord8Length,\n    packBufferWithWord16Length,\n} from '../serializationHelpers.js';\nimport { getSignature } from '../signHelpers.js';\nimport {\n    type BlockItemSummary,\n    type ContractTraceEvent,\n    type HexString,\n    type InvokeContractSuccessResult,\n    TransactionKindString,\n    TransactionSummaryType,\n} from '../types.js';\nimport * as ContractAddress from '../types/ContractAddress.js';\nimport * as ContractEvent from '../types/ContractEvent.js';\nimport * as EntrypointName from '../types/EntrypointName.js';\nimport * as Timestamp from '../types/Timestamp.js';\n\n/** Holds all types related to CIS4 */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace CIS4 {\n    /** Structure holding an url pointing to some metadata, including an optional checksum */\n    export type MetadataUrl = CIS2.MetadataUrl;\n    /** Structure holding an url pointing to some metadata, including an optional checksum */\n    export type SchemaRef = MetadataUrl;\n\n    /** Response type for `registryMetadata` query */\n    export type MetadataResponse = {\n        /** URL for issuer metadata */\n        issuerMetadata: MetadataUrl;\n        /** The credential type */\n        credentialType: string;\n        /** URL for the credential schema */\n        credentialSchema: SchemaRef;\n    };\n\n    /** Holds info pertaining to a credential. */\n    export type CredentialInfo = {\n        /** Ed25519 public key of credential holder (hex encoded) */\n        holderPubKey: HexString;\n        /** Whether holder can revoke or not */\n        holderRevocable: boolean;\n        /** Time the credential is valid from */\n        validFrom: Timestamp.Type;\n        /** (Optional) time the credential is valid until */\n        validUntil?: Timestamp.Type;\n        /** Metadata url of the credential */\n        metadataUrl: MetadataUrl;\n    };\n\n    /** Response to a credential data query. */\n    export type CredentialEntry = {\n        /** Info for the credential entry */\n        credentialInfo: CredentialInfo;\n        /** A schema URL or DID address pointing to the JSON schema for a verifiable credential */\n        schemaRef: SchemaRef;\n        /**\n         * The nonce is used to avoid replay attacks when checking the holder's\n         * signature on a revocation message. This is the nonce that should be used\n         * when signing a revocation.\n         */\n        revocationNonce: bigint;\n    };\n\n    /** Response type for `credentialStatus` query */\n    export enum CredentialStatus {\n        /** The credential is active */\n        Active,\n        /** The credential has been revoked */\n        Revoked,\n        /** The credential has expired */\n        Expired,\n        /** The credential has not been activated */\n        NotActivated,\n    }\n\n    /** A revocation key and its corresponding nonce */\n    export type RevocationKeyWithNonce = {\n        /** The revocation key (hex encoded) */\n        key: HexString;\n        /** The nonce of the revocation key */\n        nonce: bigint;\n    };\n\n    /** Data needed for the `registerCredential` update */\n    export type RegisterCredentialParam = {\n        /** The credential info to register */\n        credInfo: CredentialInfo;\n        /** Any additional data to include in the parameter (hex encoded) */\n        additionalData: HexString;\n    };\n\n    /** schema serializable JSON representation of parameter for the \"registerCredential\" entrypoint */\n    export type RegisterCredentialParamJson = {\n        /** The credential info to register */\n        credential_info: {\n            /** Ed25519 public key of credential holder (hex encoded) */\n            holder_id: HexString;\n            /** Whether holder can revoke or not */\n            holder_revocable: boolean;\n            /** Time (as ISO string) the credential is valid from */\n            valid_from: Timestamp.SchemaValue;\n            /** (Optional) Time (as ISO string) the credential is valid until */\n            valid_until: OptionJson<Timestamp.SchemaValue>;\n            /** Metadata url of the credential */\n            metadata_url: {\n                /** The url */\n                url: string;\n                /** An optional checksum of the data at the URL destination */\n                hash: OptionJson<HexString>;\n            };\n        };\n        /** Any additional data to include in the parameter (hex encoded) */\n        auxiliary_data: number[];\n    };\n\n    /** Data needed for the `revokeCredentialIssuer` update */\n    export type RevokeCredentialIssuerParam = {\n        /** The public key of the credential holder (hex encoded) */\n        credHolderPubKey: HexString;\n        /** An optional reason for the revocation */\n        reason?: string;\n        /** Any additional data to include in the parameter (hex encoded) */\n        additionalData: HexString;\n    };\n\n    /** schema serializable JSON representation of a revocation reason */\n    export type RevocationReasonJson = {\n        /** The reason for revocation */\n        reason: string;\n    };\n\n    /** schema serializable JSON representation of parameter for the \"revokeCredentialIssuer\" entrypoint */\n    export type RevokeCredentialIssuerParamJson = {\n        /** The public key of the credential holder (hex encoded) */\n        credential_id: HexString;\n        /** An optional reason for the revocation */\n        reason: OptionJson<RevocationReasonJson>;\n        /** Any additional data to include in the parameter (hex encoded) */\n        auxiliary_data: number[];\n    };\n\n    /** Signing metadata for credential revocation */\n    export type SigningData = {\n        /** The contract address of the CIS4 contract */\n        contractAddress: ContractAddress.Type;\n        /** The CIS4 entrypoint from which the revocation is done */\n        entrypoint: EntrypointName.Type;\n        /** The credential nonce */\n        nonce: bigint;\n        /** Timestamp at which the revocation should be invalidated */\n        timestamp: Timestamp.Type;\n    };\n\n    export type SigningDataJson = {\n        /** The contract address of the CIS4 contract */\n        contract_address: {\n            /** The contract index */\n            index: number;\n            /** The contract subindex */\n            subindex: number;\n        };\n        /** The CIS4 entrypoint from which the revocation is done */\n        entry_point: string;\n        /** The credential nonce */\n        nonce: number;\n        /** Timestamp at which the revocation should be invalidated */\n        timestamp: string;\n    };\n\n    /** Revocation data for revocations done by the credential holder */\n    export type RevocationDataHolder = {\n        /** The public key of the credential to revoke (hex encoded) */\n        credentialPubKey: HexString;\n        /** The signing metadata of the revocation */\n        signingData: SigningData;\n        /** An optional reason for the revocation */\n        reason?: string;\n    };\n\n    /** Data needed for the `revokeCredentialHolder` update */\n    export type RevokeCredentialHolderParam = {\n        /** Signature on the `data` (hex encoded) */\n        signature: HexString;\n        /** The revocation data */\n        data: RevocationDataHolder;\n    };\n\n    /** schema serializable JSON representation of parameter for the \"revokeCredentialHolder\" entrypoint */\n    export type RevokeCredentialHolderParamJson = {\n        /** Signature on the `data` (hex encoded) */\n        signature: HexString;\n        /** The revocation data */\n        data: {\n            /** The public key of the credential to revoke (hex encoded) */\n            credential_id: HexString;\n            /** The signing metadata of the revocation */\n            signing_data: SigningDataJson;\n            /** An optional reason for the revocation */\n            reason: OptionJson<RevocationReasonJson>;\n        };\n    };\n\n    /** Revocation data for revocations done by other revocation entities */\n    export type RevocationDataOther = {\n        /** The public key of the credential to revoke (hex encoded) */\n        credentialPubKey: HexString;\n        /** The data signed */\n        signingData: SigningData;\n        /** The public key of the revoker (hex encoded) */\n        revocationPubKey: HexString;\n        /** An optional reason for the revocation */\n        reason?: string;\n    };\n\n    /** Data needed for the `revokeCredentialOther` update */\n    export type RevokeCredentialOtherParam = {\n        /** Signature on the `data` (hex encoded) */\n        signature: HexString;\n        /** The revocation data */\n        data: RevocationDataOther;\n    };\n\n    /** schema serializable JSON representation of parameter for the \"revokeCredentialOther\" entrypoint */\n    export type RevokeCredentialOtherParamJson = {\n        /** Signature on the `data` (hex encoded) */\n        signature: HexString;\n        /** The revocation data */\n        data: {\n            /** The public key of the credential to revoke (hex encoded) */\n            credential_id: HexString;\n            /** The signing metadata of the revocation */\n            signing_data: SigningDataJson;\n            /** The public key of the revoker (hex encoded) */\n            revocation_key: HexString;\n            /** An optional reason for the revocation */\n            reason: OptionJson<RevocationReasonJson>;\n        };\n    };\n\n    /** Data needed for the `registerRevocationKeys` and `removeRevocationKeys` update */\n    export type UpdateRevocationKeysParam = {\n        /** The keys to register/remove */\n        keys: HexString[];\n        /** Any additional data to include in the parameter (hex encoded) */\n        additionalData: HexString;\n    };\n\n    /** schema serializable JSON representation of parameter for the \"revokeCredentialIssuer\" entrypoint */\n    export type UpdateRevocationKeysParamJson = {\n        /** The keys to register/remove */\n        keys: HexString[];\n        /** Any additional data to include in the parameter (hex encoded) */\n        auxiliary_data: number[];\n    };\n\n    /** A type of credential revoker. Either the issuer of the credential,\n     * holder of the credential, or a third party authority. */\n    export enum RevokerType {\n        /** The issuer of the credential */\n        Issuer,\n        /** The holder of the credential */\n        Holder,\n        /** A third party credential authority */\n        Other,\n    }\n\n    /** A revoker of a credential */\n    export type Revoker =\n        | {\n              /** The type of revoker */\n              type: RevokerType.Issuer | RevokerType.Holder;\n          }\n        | {\n              /** The type of revoker */\n              type: RevokerType.Other;\n              /** The public key of the third party credential revoker (hex encoded) */\n              key: HexString;\n          };\n\n    /** An action determining if a revocation key is registered or removed */\n    export enum RevocationKeyAction {\n        /** Register a revocation key */\n        Register,\n        /** Remove a revocation key */\n        Remove,\n    }\n\n    /** A type of CIS-4 event */\n    export enum EventType {\n        /** A credential was registered */\n        RegisterCredential,\n        /** A credential was revoked */\n        RevokeCredential,\n        /** The issuer metadata was updated */\n        IssuerMetadata,\n        /** The credential metadata was updated */\n        CredentialMetadata,\n        /** The credential schema reference was updated */\n        CredentialSchemaRef,\n        /** A revocation key was registered or removed */\n        RevocationKey,\n        /** A custom event outside CIS-4 */\n        Custom,\n    }\n\n    /** A RegisterCredential event from the CIS-4 standard */\n    export type RegisterCredentialEvent = {\n        /** The type of the event */\n        type: EventType.RegisterCredential;\n        /** The public key of the registered credential (hex encoded) */\n        credentialPubKey: HexString;\n        /** The schema reference of the registered credential */\n        schemaRef: SchemaRef;\n        /** The credential type of the registered credential */\n        credentialType: string;\n        /** The metadata URL of the registered credential */\n        metadataUrl: MetadataUrl;\n    };\n\n    /** A RevokeCredential event from the CIS-4 standard */\n    export type RevokeCredentialEvent = {\n        /** The type of the event */\n        type: EventType.RevokeCredential;\n        /** The public key of the revoked credential (hex encoded) */\n        credentialPubKey: HexString;\n        /** The revoker that revoked the credential */\n        revoker: Revoker;\n        /** An optional reason for the revocation */\n        reason?: string;\n    };\n\n    /** An IssuerMetadata event from the CIS-4 standard */\n    export type IssuerMetadataEvent = {\n        /** The type of the event */\n        type: EventType.IssuerMetadata;\n        /** The updated metadata URL of the issuer */\n        metadataUrl: MetadataUrl;\n    };\n\n    /** A CredentialMetadata event from the CIS-4 standard */\n    export type CredentialMetadataEvent = {\n        /** The type of the event */\n        type: EventType.CredentialMetadata;\n        /** The public key of the credential (hex encoded) */\n        credentialPubKey: HexString;\n        /** The updated metadata URL of the credential */\n        metadataUrl: MetadataUrl;\n    };\n\n    /** A CredentialSchemaRef event from the CIS-4 standard */\n    export type CredentialSchemaRefEvent = {\n        /** The type of the event */\n        type: EventType.CredentialSchemaRef;\n        /** The credential type of the credential */\n        credentialType: string;\n        /** The updated schema reference of the credential */\n        schemaRef: SchemaRef;\n    };\n\n    /** A RevocationKey event from the CIS-4 standard */\n    export type RevocationKeyEvent = {\n        /** The type of the event */\n        type: EventType.RevocationKey;\n        /** The key being registered or removed */\n        key: HexString;\n        /** The action (either registration or removal) performed on the revocation key */\n        action: RevocationKeyAction;\n    };\n\n    /** A custom event outside CIS-4 */\n    export type CustomEvent = {\n        /** The type of the event */\n        type: EventType.Custom;\n        /** The raw data of the event */\n        data: Uint8Array;\n    };\n\n    /** A CIS-4 event */\n    export type Event =\n        | RegisterCredentialEvent\n        | RevokeCredentialEvent\n        | IssuerMetadataEvent\n        | CredentialMetadataEvent\n        | CredentialSchemaRefEvent\n        | RevocationKeyEvent\n        | CustomEvent;\n\n    /** A CIS-4 event which is not a custom event */\n    export type NonCustomEvent = Exclude<Event, CustomEvent>;\n}\n\n/**\n * A wrapper around an ed25519 keypair which is used by {@link CIS4Contract} methods for signing as various entities.\n */\nexport class Web3IdSigner {\n    /**\n     * Builds a `Web3IdSigner` from ed25519 keypair\n     *\n     * @param {HexString} privateKey - the ed25519 private key used for signing\n     * @param {HexString} publicKey - the ed25519 public key used for verifcation of signature\n     */\n    constructor(\n        private privateKey: HexString,\n        private publicKey: HexString\n    ) {}\n\n    /**\n     * Builds a `Web3IdSigner` from ed25519 private key\n     *\n     * @param {HexString} privateKey - the ed25519 private key used for signing\n     *\n     * @returns {Web3IdSigner} signer structure.\n     */\n    public static async from(privateKey: HexString): Promise<Web3IdSigner> {\n        const publicKey = Buffer.from(await ed.getPublicKeyAsync(Buffer.from(privateKey, 'hex'))).toString('hex');\n        return new Web3IdSigner(privateKey, publicKey);\n    }\n\n    /** Public key of signer */\n    public get pubKey(): HexString {\n        return this.publicKey;\n    }\n\n    /**\n     * Signs the message given\n     *\n     * @param {ArrayBuffer} message - the message to sign\n     *\n     * @returns {Buffer} the signature on `message`\n     */\n    public async sign(message: ArrayBuffer): Promise<Buffer> {\n        return getSignature(message, this.privateKey);\n    }\n}\n\n/**\n * Expected prefix of messages signed for CIS4 revocation entrypoints.\n */\nexport const REVOKE_DOMAIN = Buffer.from('WEB3ID:REVOKE', 'utf8');\n\nconst deserializeOptional = <T>(cursor: Cursor, fun: (c: Cursor) => T): T | undefined => {\n    const hasValue = cursor.read(1).readUInt8(0);\n    if (!hasValue) {\n        return undefined;\n    }\n\n    return fun(cursor);\n};\n\nexport function serializeDate(date: Timestamp.Type): Buffer {\n    return encodeWord64(BigInt(date.value), true);\n}\n\nexport function deserializeDate(cursor: Cursor): Timestamp.Type {\n    const value = cursor.read(8).readBigInt64LE(0);\n    return Timestamp.fromMillis(Number(value));\n}\n\nfunction deserializeEd25519PublicKey(cursor: Cursor): HexString {\n    return cursor.read(32).toString('hex');\n}\n\nfunction deserializeReason(cursor: Cursor): string | undefined {\n    return deserializeOptional(cursor, (c) => {\n        const len = c.read(1).readUInt8(0);\n        return c.read(len).toString('utf8');\n    });\n}\n\nfunction serializeCIS4CredentialInfo(credInfo: CIS4.CredentialInfo): Buffer {\n    const holderPubKey = Buffer.from(credInfo.holderPubKey, 'hex');\n    const holderRevocable = encodeBool(credInfo.holderRevocable);\n    const validFrom = serializeDate(credInfo.validFrom);\n    const validUntil = makeSerializeOptional(serializeDate)(credInfo.validUntil);\n    const metadataUrl = serializeCIS2MetadataUrl(credInfo.metadataUrl);\n\n    return Buffer.concat([holderPubKey, holderRevocable, validFrom, validUntil, metadataUrl]);\n}\n\nfunction serializeAdditionalData(data: HexString): Buffer {\n    return packBufferWithWord16Length(Buffer.from(data, 'hex'), true);\n}\n\n/**\n * Serializes {@link CIS4.RegisterCredentialParam} into bytes which can be\n * supplied as parameters to `registerCredential` entrypoints on CIS4 contracts\n *\n * @param {CIS4.RegisterCredentialParam} param - The parameters to serialize\n *\n * @returns {Buffer} the parameters serialized to bytes\n */\nexport function serializeCIS4RegisterCredentialParam(param: CIS4.RegisterCredentialParam): Buffer {\n    const credInfo = serializeCIS4CredentialInfo(param.credInfo);\n    const additionalData = serializeAdditionalData(param.additionalData);\n    return Buffer.concat([credInfo, additionalData]);\n}\n\nfunction deserializeCIS4CredentialInfo(cursor: Cursor): CIS4.CredentialInfo {\n    const holderPubKey = deserializeEd25519PublicKey(cursor);\n    const holderRevocable = cursor.read(1).readUInt8(0) === 1;\n    const validFrom = deserializeDate(cursor);\n    const validUntil = deserializeOptional(cursor, deserializeDate);\n    const metadataUrl = deserializeCIS2MetadataUrl(cursor);\n\n    return {\n        holderPubKey,\n        holderRevocable,\n        validFrom,\n        validUntil,\n        metadataUrl,\n    };\n}\n\n/**\n * Attemps to deserializes a value into {@link CIS4.CredentialEntry}\n *\n * @param {HexString} value - The value (hex encoded) to deserialize\n *\n * @throws If deserialization fails\n *\n * @returns {CIS4.CredentialEntry} The credential entry\n */\nexport function deserializeCIS4CredentialEntry(value: HexString): CIS4.CredentialEntry {\n    const cursor = Cursor.fromHex(value);\n\n    const credentialInfo = deserializeCIS4CredentialInfo(cursor);\n    const schemaRef = deserializeCIS2MetadataUrl(cursor);\n    const revocationNonce = cursor.read(8).readBigInt64LE(0).valueOf();\n\n    return {\n        credentialInfo,\n        schemaRef,\n        revocationNonce,\n    };\n}\n\n/**\n * Attemps to deserializes a value into {@link CIS4.CredentialStatus}\n *\n * @param {HexString} value - The value (hex encoded) to deserialize\n *\n * @throws If deserialization fails\n *\n * @returns {CIS4.CredentialStatus} The credential status\n */\nexport function deserializeCIS4CredentialStatus(value: HexString): CIS4.CredentialStatus {\n    const b = Buffer.from(value, 'hex');\n    return b.readUInt8(0);\n}\n\nfunction deserializeCIS4RevocationKey(cursor: Cursor): CIS4.RevocationKeyWithNonce {\n    const key = deserializeEd25519PublicKey(cursor);\n    const nonce = cursor.read(8).readBigInt64LE(0).valueOf();\n\n    return {\n        key,\n        nonce,\n    };\n}\n\n/**\n * Attemps to deserializes a value into a list of {@link CIS4.RevocationKeyWithNonce}\n *\n * @param {HexString} value - The value (hex encoded) to deserialize\n *\n * @throws If deserialization fails\n *\n * @returns {CIS4.RevocationKeyWithNonce[]} The revocation keys\n */\nexport const deserializeCIS4RevocationKeys = makeDeserializeListResponse(deserializeCIS4RevocationKey);\n\nfunction formatAdditionalData(data: HexString): number[] {\n    return Buffer.from(data, 'hex').toJSON().data;\n}\n\n/**\n * Format {@link CIS4.RegisterCredentialParam} as JSON compatible with serialization with corresponding schema.\n */\nexport function formatCIS4RegisterCredential({\n    credInfo,\n    additionalData,\n}: CIS4.RegisterCredentialParam): CIS4.RegisterCredentialParamJson {\n    return {\n        credential_info: {\n            holder_id: credInfo.holderPubKey,\n            holder_revocable: credInfo.holderRevocable,\n            valid_from: Timestamp.toSchemaValue(credInfo.validFrom),\n            valid_until: toOptionJson(\n                credInfo.validUntil === undefined ? undefined : Timestamp.toSchemaValue(credInfo.validUntil)\n            ),\n            metadata_url: {\n                url: credInfo.metadataUrl.url,\n                hash: toOptionJson(credInfo.metadataUrl.hash),\n            },\n        },\n        auxiliary_data: formatAdditionalData(additionalData),\n    };\n}\n\nfunction serializeReason(reason: string) {\n    const b = Buffer.from(reason);\n    return packBufferWithWord8Length(b);\n}\n\n/**\n * Serializes {@link CIS4.RevokeCredentialIssuerParam} into bytes which can be\n * supplied as parameters to `revokeCredentialIssuer` entrypoints on CIS4 contracts\n *\n * @param {CIS4.RevokeCredentialIssuerParam} param - The parameters to serialize\n *\n * @returns {Buffer} the parameters serialized to bytes\n */\nexport function serializeCIS4RevokeCredentialIssuerParam(param: CIS4.RevokeCredentialIssuerParam): Buffer {\n    const credHolderPubKey = Buffer.from(param.credHolderPubKey, 'hex');\n    const reason = makeSerializeOptional<string>(serializeReason)(param.reason);\n    const additionalData = serializeAdditionalData(param.additionalData);\n\n    return Buffer.concat([credHolderPubKey, reason, additionalData]);\n}\n\n/**\n * Format {@link CIS4.RevokeCredentialIssuerParam} as JSON compatible with serialization with corresponding schema.\n */\nexport function formatCIS4RevokeCredentialIssuer({\n    credHolderPubKey,\n    reason,\n    additionalData,\n}: CIS4.RevokeCredentialIssuerParam): CIS4.RevokeCredentialIssuerParamJson {\n    return {\n        credential_id: credHolderPubKey,\n        reason: toOptionJson(reason ? { reason } : undefined),\n        auxiliary_data: formatAdditionalData(additionalData),\n    };\n}\n\n/**\n * Serializes {@link CIS4.RevocationDataHolder} into bytes which can be\n * supplied as parameters to `revokeCredentialHolder` entrypoints on CIS4 contracts prefixed\n * with a signature on the data\n *\n * @param {CIS4.RevocationDataHolder} data - The data to serialize\n *\n * @returns {Buffer} the data serialized to bytes\n */\nexport function serializeCIS4RevocationDataHolder(data: CIS4.RevocationDataHolder): Buffer {\n    const credentialPubKey = Buffer.from(data.credentialPubKey, 'hex');\n    const contractAddress = serializeContractAddress(data.signingData.contractAddress);\n    const entrypoint = serializeReceiveHookName(data.signingData.entrypoint);\n    const nonce = encodeWord64(data.signingData.nonce, true);\n    const timestamp = serializeDate(data.signingData.timestamp);\n    const reason = makeSerializeOptional<string>(serializeReason)(data.reason);\n\n    return Buffer.concat([credentialPubKey, contractAddress, entrypoint, nonce, timestamp, reason]);\n}\n\n/**\n * Format {@link CIS4.RevokeCredentialHolderParam} as JSON compatible with serialization with corresponding schema.\n */\nexport function formatCIS4RevokeCredentialHolder({\n    signature,\n    data,\n}: CIS4.RevokeCredentialHolderParam): CIS4.RevokeCredentialHolderParamJson {\n    const reason = data.reason;\n    return {\n        signature: signature,\n        data: {\n            credential_id: data.credentialPubKey,\n            signing_data: {\n                contract_address: {\n                    index: Number(data.signingData.contractAddress.index),\n                    subindex: Number(data.signingData.contractAddress.subindex),\n                },\n                entry_point: EntrypointName.toString(data.signingData.entrypoint),\n                nonce: Number(data.signingData.nonce),\n                timestamp: Timestamp.toSchemaValue(data.signingData.timestamp),\n            },\n            reason: toOptionJson(reason ? { reason } : undefined),\n        },\n    };\n}\n\n/**\n * Serializes {@link CIS4.RevocationDataOther} into bytes which can be\n * supplied as parameters to `revokeCredentialOther` entrypoints on CIS4 contracts prefixed\n * with a signature on the data\n *\n * @param {CIS4.RevocationDataOther} data - The data to serialize\n *\n * @returns {Buffer} the data serialized to bytes\n */\nexport function serializeCIS4RevocationDataOther(data: CIS4.RevocationDataOther): Buffer {\n    const credentialPubKey = Buffer.from(data.credentialPubKey, 'hex');\n    const contractAddress = serializeContractAddress(data.signingData.contractAddress);\n    const entrypoint = serializeReceiveHookName(data.signingData.entrypoint);\n    const nonce = encodeWord64(data.signingData.nonce);\n    const timestamp = serializeDate(data.signingData.timestamp);\n    const revocationPubKey = Buffer.from(data.revocationPubKey, 'hex');\n    const reason = makeSerializeOptional<string>(serializeReason)(data.reason);\n\n    return Buffer.concat([credentialPubKey, contractAddress, entrypoint, nonce, timestamp, revocationPubKey, reason]);\n}\n\n/**\n * Format {@link CIS4.RevokeCredentialOtherParam} as JSON compatible with serialization with corresponding schema.\n */\nexport function formatCIS4RevokeCredentialOther({\n    signature,\n    data,\n}: CIS4.RevokeCredentialOtherParam): CIS4.RevokeCredentialOtherParamJson {\n    const reason = data.reason;\n    return {\n        signature: signature,\n        data: {\n            credential_id: data.credentialPubKey,\n            signing_data: {\n                contract_address: {\n                    index: Number(data.signingData.contractAddress.index),\n                    subindex: Number(data.signingData.contractAddress.subindex),\n                },\n                entry_point: EntrypointName.toString(data.signingData.entrypoint),\n                nonce: Number(data.signingData.nonce),\n                timestamp: Timestamp.toSchemaValue(data.signingData.timestamp),\n            },\n            revocation_key: data.revocationPubKey,\n            reason: toOptionJson(reason ? { reason } : undefined),\n        },\n    };\n}\n\n/**\n * Serializes {@link CIS4.UpdateRevocationKeysParam} into bytes which can be\n * supplied as parameters to `registerRevocationKeys` and `removeRevocationKeys`\n * entrypoints on CIS4 contracts\n *\n * @param {CIS4.RevokeCredentialIssuerParam} param - The parameters to serialize\n *\n * @returns {Buffer} the parameters serialized to bytes\n */\nexport function serializeCIS4UpdateRevocationKeysParam(param: CIS4.UpdateRevocationKeysParam): Buffer {\n    const ks = param.keys.map((k) => Buffer.from(k, 'hex'));\n    const numKeys = encodeWord16(ks.length, true);\n    const additionalData = serializeAdditionalData(param.additionalData);\n\n    return Buffer.concat([numKeys, ...ks, additionalData]);\n}\n\nfunction deserializeCredentialType(cursor: Cursor): string {\n    const len = cursor.read(1).readUInt8(0);\n    return cursor.read(len).toString('utf8');\n}\n\n/**\n * Format {@link CIS4.UpdateRevocationKeysParam} as JSON compatible with serialization with corresponding schema.\n */\nexport function formatCIS4UpdateRevocationKeys({\n    keys,\n    additionalData,\n}: CIS4.UpdateRevocationKeysParam): CIS4.UpdateRevocationKeysParamJson {\n    return { keys, auxiliary_data: formatAdditionalData(additionalData) };\n}\n\n/**\n * Attemps to deserializes a value into a list of {@link CIS4.MetadataResponse}\n *\n * @param {HexString} value - The value (hex encoded) to deserialize\n *\n * @throws If deserialization fails\n *\n * @returns {CIS4.MetadataResponse} The metadata\n */\nexport function deserializeCIS4MetadataResponse(value: HexString): CIS4.MetadataResponse {\n    const cursor = Cursor.fromHex(value);\n    const issuerMetadata = deserializeCIS2MetadataUrl(cursor);\n    const credentialType = deserializeCredentialType(cursor);\n    const credentialSchema = deserializeCIS2MetadataUrl(cursor);\n\n    return { issuerMetadata, credentialType, credentialSchema };\n}\n\n/**\n * Deserializes a CIS-4 event according to the CIS-4 standard.\n *\n * @param {ContractEvent.Type} event - The event to deserialize\n *\n * @returns {CIS4.Event} The deserialized event\n *\n * @throws If the event is not custom (starts with an unreserved tag)\n * and the event cannot be deserialized to a valid CIS-4 event\n */\nexport function deserializeCIS4Event(event: ContractEvent.Type): CIS4.Event {\n    // An empty buffer is a valid custom event\n    if (event.buffer.length === 0) {\n        return {\n            type: CIS4.EventType.Custom,\n            data: event.buffer,\n        };\n    }\n\n    const cursor = Cursor.fromBuffer(event.buffer);\n    const tag = cursor.read(1).readUInt8(0);\n    if (tag == 249) {\n        const credentialPubKey = deserializeEd25519PublicKey(cursor);\n        const schemaRef = deserializeCIS2MetadataUrl(cursor);\n        const credentialType = deserializeCredentialType(cursor);\n        const metadataUrl = deserializeCIS2MetadataUrl(cursor);\n        return {\n            type: CIS4.EventType.RegisterCredential,\n            credentialPubKey,\n            schemaRef,\n            credentialType,\n            metadataUrl,\n        };\n    } else if (tag == 248) {\n        const credentialPubKey = deserializeEd25519PublicKey(cursor);\n        const revokerType = cursor.read(1).readUInt8(0);\n        let revoker: CIS4.Revoker;\n        if (revokerType == 0) {\n            revoker = {\n                type: CIS4.RevokerType.Issuer,\n            };\n        } else if (revokerType == 1) {\n            revoker = {\n                type: CIS4.RevokerType.Holder,\n            };\n        } else if (revokerType == 2) {\n            const key = deserializeEd25519PublicKey(cursor);\n            revoker = {\n                type: CIS4.RevokerType.Other,\n                key,\n            };\n        } else {\n            throw new Error('Failed deserializing CIS-4 RevokeCredential event: Unknown revoker type');\n        }\n        const reason = deserializeReason(cursor);\n        return {\n            type: CIS4.EventType.RevokeCredential,\n            credentialPubKey,\n            revoker,\n            reason,\n        };\n    } else if (tag == 247) {\n        const metadataUrl = deserializeCIS2MetadataUrl(cursor);\n        return {\n            type: CIS4.EventType.IssuerMetadata,\n            metadataUrl,\n        };\n    } else if (tag == 246) {\n        const credentialPubKey = deserializeEd25519PublicKey(cursor);\n        const metadataUrl = deserializeCIS2MetadataUrl(cursor);\n        return {\n            type: CIS4.EventType.CredentialMetadata,\n            credentialPubKey,\n            metadataUrl,\n        };\n    } else if (tag == 245) {\n        const credentialType = deserializeCredentialType(cursor);\n        const schemaRef = deserializeCIS2MetadataUrl(cursor);\n        return {\n            type: CIS4.EventType.CredentialSchemaRef,\n            credentialType,\n            schemaRef,\n        };\n    } else if (tag == 244) {\n        const key = deserializeEd25519PublicKey(cursor);\n        const actionByte = cursor.read(1).readUInt8(0);\n        let action: CIS4.RevocationKeyAction;\n        if (actionByte == 0) {\n            action = CIS4.RevocationKeyAction.Register;\n        } else if (actionByte == 1) {\n            action = CIS4.RevocationKeyAction.Remove;\n        } else {\n            throw new Error('Failed deserializing CIS-4 RevocationKey event: Unknown revocation key action');\n        }\n        return {\n            type: CIS4.EventType.RevocationKey,\n            key,\n            action,\n        };\n    } else {\n        return {\n            type: CIS4.EventType.Custom,\n            data: event.buffer,\n        };\n    }\n}\n\n/**\n * Deserializes a successful contract invokation to a list of all CIS-4 events\n * (skipping custom events) according to the CIS-4 standard.\n *\n * @param {InvokeContractSuccessResult} result - The contract invokation result to deserialize\n *\n * @returns {CIS4.NonCustomEvent[]} The deserialized events\n */\nexport function deserializeCIS4EventsFromInvokationResult(result: InvokeContractSuccessResult): CIS4.NonCustomEvent[] {\n    return deserializeCIS4ContractTraceEvents(result.events.filter(isKnown));\n}\n\n/**\n * Deserializes all CIS-4 events (skipping custom events) from a {@linkcode BlockItemSummary}.\n *\n * @param {BlockItemSummary} summary - The summary to deserialize\n *\n * @returns {CIS4.NonCustomEvent[]} The deserialized events\n */\nexport function deserializeCIS4EventsFromSummary(summary: BlockItemSummary): CIS4.NonCustomEvent[] {\n    if (summary.type !== TransactionSummaryType.AccountTransaction) {\n        return [];\n    }\n\n    switch (summary.transactionType) {\n        case TransactionKindString.Update:\n            return deserializeCIS4ContractTraceEvents(summary.events.filter(isKnown));\n        case TransactionKindString.InitContract:\n            const deserializedEvents = [];\n            for (const event of summary.contractInitialized.events) {\n                const deserializedEvent = deserializeCIS4Event(ContractEvent.fromHexString(event));\n                if (deserializedEvent.type !== CIS4.EventType.Custom) {\n                    deserializedEvents.push(deserializedEvent);\n                }\n            }\n            return deserializedEvents;\n        default:\n            return [];\n    }\n}\n\n/**\n * Deserializes a list of {@linkcode ContractTraceEvent} into a list of CIS-4 events.\n * This function filters out any custom events.\n *\n * @param {ContractTraceEvent[]} events - The list of contract trace events to deserialize\n *\n * @returns {CIS4.NonCustomEvent[]} The deserialized CIS-4 events\n */\nfunction deserializeCIS4ContractTraceEvents(events: ContractTraceEvent[]): CIS4.NonCustomEvent[] {\n    const deserializedEvents = [];\n    for (const traceEvent of events) {\n        if (!('events' in traceEvent)) {\n            continue;\n        }\n        for (const event of traceEvent.events) {\n            const deserializedEvent = deserializeCIS4Event(event);\n            if (deserializedEvent.type !== CIS4.EventType.Custom) {\n                deserializedEvents.push(deserializedEvent);\n            }\n        }\n    }\n    return deserializedEvents;\n}\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","import { Buffer } from 'buffer/index.js';\n\nimport { Cursor } from './deserializationHelpers.js';\nimport { Cbor, TokenId, TokenOperationType } from './plt/index.js';\nimport { ContractAddress, ContractName, Energy, ModuleReference } from './pub/types.js';\nimport { serializeCredentialDeploymentInfo } from './serialization.js';\nimport {\n    encodeDataBlob,\n    encodeWord8,\n    encodeWord32,\n    encodeWord64,\n    packBufferWithWord8Length,\n    packBufferWithWord16Length,\n    packBufferWithWord32Length,\n    serializeConfigureBakerPayload,\n    serializeConfigureDelegationPayload,\n    serializeList,\n} from './serializationHelpers.js';\nimport {\n    AccountTransactionPayload,\n    AccountTransactionType,\n    BakerKeysWithProofs,\n    Base58String,\n    ConfigureBakerPayload,\n    ConfigureDelegationPayload,\n    DelegationTarget,\n    DelegationTargetType,\n    DeployModulePayload,\n    HexString,\n    InitContractPayload,\n    OpenStatus,\n    RegisterDataPayload,\n    SimpleTransferPayload,\n    SimpleTransferWithMemoPayload,\n    TokenUpdatePayload,\n    UpdateContractPayload,\n    UpdateCredentialsPayload,\n    UrlString,\n} from './types.js';\nimport * as AccountAddress from './types/AccountAddress.js';\nimport * as CcdAmount from './types/CcdAmount.js';\nimport { DataBlob } from './types/DataBlob.js';\nimport * as Parameter from './types/Parameter.js';\nimport * as ReceiveName from './types/ReceiveName.js';\n\n/**\n * A handler for a specific {@linkcode AccountTransactionType}.\n */\nexport interface AccountTransactionHandler<\n    PayloadType extends AccountTransactionPayload = AccountTransactionPayload,\n    JSONType = PayloadType,\n> {\n    /**\n     * Serializes the payload to a buffer.\n     * This does NOT include the serialized transaction type. To have this included, use {@linkcode serializeAccountTransactionPayload} instead.\n     *\n     * @param payload - The payload to serialize.\n     * @returns The serialized payload.\n     * @throws If serializing the type was not possible.\n     */\n    serialize: (payload: PayloadType) => Buffer;\n\n    /**\n     * Deserializes the serialized payload into the payload type.\n     * @param serializedPayload - The serialized payload to be deserialized.\n     * @returns The deserialized payload.\n     * @throws If deserializing the type was not possible.\n     */\n    deserialize: (serializedPayload: Cursor) => PayloadType;\n\n    /**\n     * Gets the base energy cost for the given payload.\n     * @param payload - The payload for which to get the base energy cost.\n     * @returns The base energy cost for the payload.\n     */\n    getBaseEnergyCost: (payload: PayloadType) => bigint;\n\n    /**\n     * Converts the payload into JSON format.\n     * @param payload - The payload to be converted into JSON.\n     * @returns The payload in JSON format.\n     */\n    toJSON: (payload: PayloadType) => JSONType;\n\n    /**\n     * Converts a JSON-serialized payload into the payload type.\n     * @param json - The JSON to be converted back into the payload.\n     * @returns The payload obtained from the JSON.\n     */\n    fromJSON: (json: JSONType) => PayloadType;\n}\n\nexport interface SimpleTransferPayloadJSON {\n    toAddress: Base58String;\n    amount: string;\n}\n\nexport class SimpleTransferHandler\n    implements AccountTransactionHandler<SimpleTransferPayload, SimpleTransferPayloadJSON>\n{\n    getBaseEnergyCost(): bigint {\n        return 300n;\n    }\n\n    serialize(transfer: SimpleTransferPayload): Buffer {\n        const serializedToAddress = AccountAddress.toBuffer(transfer.toAddress);\n        const serializedAmount = encodeWord64(transfer.amount.microCcdAmount);\n        return Buffer.concat([serializedToAddress, serializedAmount]);\n    }\n\n    deserialize(serializedPayload: Cursor): SimpleTransferPayload {\n        const toAddress = AccountAddress.fromBuffer(Buffer.from(serializedPayload.read(32)));\n        const amount = CcdAmount.fromMicroCcd(serializedPayload.read(8).readBigUInt64BE(0));\n        return {\n            toAddress,\n            amount,\n        };\n    }\n\n    toJSON(transfer: SimpleTransferPayload): SimpleTransferPayloadJSON {\n        return {\n            toAddress: transfer.toAddress.toJSON(),\n            amount: transfer.amount.toJSON(),\n        };\n    }\n\n    fromJSON(json: SimpleTransferPayloadJSON): SimpleTransferPayload {\n        return {\n            toAddress: AccountAddress.fromJSON(json.toAddress),\n            amount: CcdAmount.fromJSON(json.amount),\n        };\n    }\n}\n\nexport interface SimpleTransferWithMemoPayloadJSON extends SimpleTransferPayloadJSON {\n    memo: HexString;\n}\n\nexport class SimpleTransferWithMemoHandler\n    extends SimpleTransferHandler\n    implements AccountTransactionHandler<SimpleTransferWithMemoPayload, SimpleTransferWithMemoPayloadJSON>\n{\n    serialize(transfer: SimpleTransferWithMemoPayload): Buffer {\n        const serializedToAddress = AccountAddress.toBuffer(transfer.toAddress);\n        const serializedMemo = encodeDataBlob(transfer.memo);\n        const serializedAmount = encodeWord64(transfer.amount.microCcdAmount);\n        return Buffer.concat([serializedToAddress, serializedMemo, serializedAmount]);\n    }\n\n    deserialize(serializedPayload: Cursor): SimpleTransferWithMemoPayload {\n        const toAddress = AccountAddress.fromBuffer(Buffer.from(serializedPayload.read(32)));\n        const memoLength = serializedPayload.read(2).readUInt16BE(0);\n        const memo = new DataBlob(Buffer.from(serializedPayload.read(memoLength)));\n        const amount = CcdAmount.fromMicroCcd(serializedPayload.read(8).readBigUInt64BE(0));\n        return {\n            toAddress,\n            memo,\n            amount,\n        };\n    }\n\n    toJSON(transfer: SimpleTransferWithMemoPayload): SimpleTransferWithMemoPayloadJSON {\n        return {\n            toAddress: transfer.toAddress.toJSON(),\n            memo: transfer.memo.toJSON(),\n            amount: transfer.amount.toJSON(),\n        };\n    }\n\n    fromJSON(json: SimpleTransferWithMemoPayloadJSON): SimpleTransferWithMemoPayload {\n        return {\n            toAddress: AccountAddress.fromJSON(json.toAddress),\n            memo: DataBlob.fromJSON(json.memo),\n            amount: CcdAmount.fromJSON(json.amount),\n        };\n    }\n}\n\nexport interface DeployModulePayloadJSON {\n    source: HexString;\n    version?: number;\n}\n\nexport class DeployModuleHandler implements AccountTransactionHandler<DeployModulePayload, DeployModulePayloadJSON> {\n    getBaseEnergyCost(payload: DeployModulePayload): bigint {\n        let length = payload.source.byteLength;\n        if (payload.version === undefined) {\n            // Remove the 8 bytes from the embedded version and length.\n            length -= 8;\n        }\n        const cost = Math.floor(length / 10);\n        return BigInt(cost);\n    }\n\n    serialize(payload: DeployModulePayload): Buffer {\n        if (payload.version === undefined) {\n            // Assume the module has version and length embedded\n            return Buffer.from(payload.source);\n        } else {\n            // Assume the module is legacy build, which doesn't contain version and length\n            const serializedWasm = packBufferWithWord32Length(payload.source);\n            const serializedVersion = encodeWord32(payload.version);\n            return Buffer.concat([serializedVersion, serializedWasm]);\n        }\n    }\n\n    deserialize(): DeployModulePayload {\n        throw new Error('deserialize not supported');\n    }\n\n    toJSON(payload: DeployModulePayload): DeployModulePayloadJSON {\n        return {\n            source: Buffer.from(payload.source).toString('hex'),\n            version: payload.version,\n        };\n    }\n\n    fromJSON(json: DeployModulePayloadJSON): DeployModulePayload {\n        return {\n            source: Buffer.from(json.source, 'hex'),\n            version: json.version !== undefined ? Number(json.version) : undefined,\n        };\n    }\n}\n\nexport interface InitContractPayloadJSON {\n    amount: string;\n    moduleRef: HexString;\n    initName: string;\n    param: HexString;\n    maxContractExecutionEnergy: bigint;\n}\n\nexport class InitContractHandler implements AccountTransactionHandler<InitContractPayload, InitContractPayloadJSON> {\n    getBaseEnergyCost(payload: InitContractPayload): bigint {\n        return payload.maxContractExecutionEnergy.value;\n    }\n\n    serialize(payload: InitContractPayload): Buffer {\n        const serializedAmount = encodeWord64(payload.amount.microCcdAmount);\n        const initNameBuffer = Buffer.from('init_' + payload.initName.value, 'utf8');\n        const serializedInitName = packBufferWithWord16Length(initNameBuffer);\n        const serializedModuleRef = payload.moduleRef.decodedModuleRef;\n        const parameterBuffer = Parameter.toBuffer(payload.param);\n        const serializedParameters = packBufferWithWord16Length(parameterBuffer);\n        return Buffer.concat([serializedAmount, serializedModuleRef, serializedInitName, serializedParameters]);\n    }\n\n    deserialize(): InitContractPayload {\n        throw new Error('deserialize not supported');\n    }\n\n    toJSON(payload: InitContractPayload): InitContractPayloadJSON {\n        return {\n            amount: payload.amount.toJSON(),\n            moduleRef: payload.moduleRef.toJSON(),\n            initName: payload.initName.toJSON(),\n            param: payload.param.toJSON(),\n            maxContractExecutionEnergy: payload.maxContractExecutionEnergy.value,\n        };\n    }\n\n    fromJSON(json: InitContractPayloadJSON): InitContractPayload {\n        return {\n            amount: CcdAmount.fromJSON(json.amount),\n            moduleRef: ModuleReference.fromJSON(json.moduleRef),\n            initName: ContractName.fromJSON(json.initName),\n            param: Parameter.fromJSON(json.param),\n            maxContractExecutionEnergy: Energy.create(json.maxContractExecutionEnergy),\n        };\n    }\n}\n\nexport interface UpdateContractPayloadJSON {\n    amount: string;\n    address: ContractAddress.SchemaValue;\n    receiveName: string;\n    message: HexString;\n    maxContractExecutionEnergy: bigint;\n}\n\nexport class UpdateContractHandler\n    implements AccountTransactionHandler<UpdateContractPayload, UpdateContractPayloadJSON>\n{\n    getBaseEnergyCost(payload: UpdateContractPayload): bigint {\n        return payload.maxContractExecutionEnergy.value;\n    }\n\n    serialize(payload: UpdateContractPayload): Buffer {\n        const serializedAmount = encodeWord64(payload.amount.microCcdAmount);\n        const serializeIndex = encodeWord64(payload.address.index);\n        const serializeSubindex = encodeWord64(payload.address.subindex);\n        const serializedContractAddress = Buffer.concat([serializeIndex, serializeSubindex]);\n        const receiveNameBuffer = Buffer.from(payload.receiveName.toString(), 'utf8');\n        const serializedReceiveName = packBufferWithWord16Length(receiveNameBuffer);\n        const parameterBuffer = Parameter.toBuffer(payload.message);\n        const serializedParameters = packBufferWithWord16Length(parameterBuffer);\n        return Buffer.concat([\n            serializedAmount,\n            serializedContractAddress,\n            serializedReceiveName,\n            serializedParameters,\n        ]);\n    }\n\n    deserialize(): UpdateContractPayload {\n        throw new Error('deserialize not supported');\n    }\n\n    toJSON(payload: UpdateContractPayload): UpdateContractPayloadJSON {\n        return {\n            amount: payload.amount.toJSON(),\n            address: ContractAddress.toSchemaValue(payload.address),\n            receiveName: payload.receiveName.toJSON(),\n            message: payload.message.toJSON(),\n            maxContractExecutionEnergy: payload.maxContractExecutionEnergy.value,\n        };\n    }\n\n    fromJSON(json: UpdateContractPayloadJSON): UpdateContractPayload {\n        return {\n            amount: CcdAmount.fromJSON(json.amount),\n            address: ContractAddress.fromSchemaValue(json.address),\n            receiveName: ReceiveName.fromJSON(json.receiveName),\n            message: Parameter.fromJSON(json.message),\n            maxContractExecutionEnergy: Energy.create(json.maxContractExecutionEnergy),\n        };\n    }\n}\n\nexport class UpdateCredentialsHandler implements AccountTransactionHandler<UpdateCredentialsPayload> {\n    getBaseEnergyCost(updateCredentials: UpdateCredentialsPayload): bigint {\n        const newCredentialsCost = updateCredentials.newCredentials\n            .map((credential) => {\n                const numberOfKeys = BigInt(Object.keys(credential.cdi.credentialPublicKeys.keys).length);\n                return 54000n + 100n * numberOfKeys;\n            })\n            .reduce((prev, curr) => prev + curr, BigInt(0));\n\n        const currentCredentialsCost = 500n * updateCredentials.currentNumberOfCredentials;\n\n        return 500n + currentCredentialsCost + newCredentialsCost;\n    }\n\n    serialize(updateCredentials: UpdateCredentialsPayload): Buffer {\n        const serializedAddedCredentials = serializeList(\n            updateCredentials.newCredentials,\n            encodeWord8,\n            ({ index, cdi }) => Buffer.concat([encodeWord8(index), serializeCredentialDeploymentInfo(cdi)])\n        );\n\n        const serializedRemovedCredIds = serializeList(\n            updateCredentials.removeCredentialIds,\n            encodeWord8,\n            (credId: string) => Buffer.from(credId, 'hex')\n        );\n        const serializedThreshold = encodeWord8(updateCredentials.threshold);\n        return Buffer.concat([serializedAddedCredentials, serializedRemovedCredIds, serializedThreshold]);\n    }\n\n    deserialize(): UpdateCredentialsPayload {\n        throw new Error('deserialize not supported');\n    }\n\n    toJSON(updateCredentials: UpdateCredentialsPayload): UpdateCredentialsPayload {\n        return updateCredentials;\n    }\n\n    fromJSON(json: UpdateCredentialsPayload): UpdateCredentialsPayload {\n        return {\n            ...json,\n            currentNumberOfCredentials: BigInt(json.currentNumberOfCredentials),\n            threshold: Number(json.threshold),\n            newCredentials: json.newCredentials.map((nc) => ({\n                index: Number(nc.index),\n                cdi: {\n                    ...nc.cdi,\n                    credentialPublicKeys: {\n                        ...nc.cdi.credentialPublicKeys,\n                        threshold: Number(nc.cdi.credentialPublicKeys.threshold),\n                    },\n                    ipIdentity: Number(nc.cdi.ipIdentity),\n                    revocationThreshold: Number(nc.cdi.revocationThreshold),\n                },\n            })),\n        };\n    }\n}\n\nexport interface RegisterDataPayloadJSON {\n    data: HexString;\n}\n\nexport class RegisterDataHandler implements AccountTransactionHandler<RegisterDataPayload, RegisterDataPayloadJSON> {\n    getBaseEnergyCost(): bigint {\n        return 300n;\n    }\n\n    serialize(payload: RegisterDataPayload): Buffer {\n        return encodeDataBlob(payload.data);\n    }\n\n    deserialize(serializedPayload: Cursor): RegisterDataPayload {\n        const memoLength = serializedPayload.read(2).readUInt16BE(0);\n        return {\n            data: new DataBlob(Buffer.from(serializedPayload.read(memoLength))),\n        };\n    }\n\n    toJSON(payload: RegisterDataPayload): RegisterDataPayloadJSON {\n        return {\n            data: payload.data.toJSON(),\n        };\n    }\n\n    fromJSON(json: RegisterDataPayloadJSON): RegisterDataPayload {\n        return {\n            // The first 2 bytes are the length of the data buffer, so we need to remove them.\n            data: DataBlob.fromJSON(json.data),\n        };\n    }\n}\n\nexport interface ConfigureBakerPayloadJSON {\n    stake?: string;\n    restakeEarnings?: boolean;\n    openForDelegation?: OpenStatus;\n    keys?: BakerKeysWithProofs;\n    metadataUrl?: UrlString;\n    transactionFeeCommission?: number;\n    bakingRewardCommission?: number;\n    finalizationRewardCommission?: number;\n}\n\nexport class ConfigureBakerHandler\n    implements AccountTransactionHandler<ConfigureBakerPayload, ConfigureBakerPayloadJSON>\n{\n    getBaseEnergyCost(payload: ConfigureBakerPayload): bigint {\n        if (payload.keys) {\n            return 4050n;\n        } else {\n            return 300n;\n        }\n    }\n\n    serialize(payload: ConfigureBakerPayload): Buffer {\n        return serializeConfigureBakerPayload(payload);\n    }\n\n    deserialize(): ConfigureBakerPayload {\n        throw new Error('deserialize not supported');\n    }\n\n    toJSON(payload: ConfigureBakerPayload): ConfigureBakerPayloadJSON {\n        return {\n            ...payload,\n            stake: payload.stake?.toJSON(),\n        };\n    }\n\n    fromJSON(json: ConfigureBakerPayloadJSON): ConfigureBakerPayload {\n        return {\n            ...json,\n            stake: json.stake ? CcdAmount.fromJSON(json.stake) : undefined,\n            openForDelegation: json.openForDelegation !== undefined ? Number(json.openForDelegation) : undefined,\n            transactionFeeCommission:\n                json.transactionFeeCommission !== undefined ? Number(json.transactionFeeCommission) : undefined,\n            bakingRewardCommission:\n                json.bakingRewardCommission !== undefined ? Number(json.bakingRewardCommission) : undefined,\n            finalizationRewardCommission:\n                json.finalizationRewardCommission !== undefined ? Number(json.finalizationRewardCommission) : undefined,\n        };\n    }\n}\n\nexport interface ConfigureDelegationPayloadJSON {\n    stake?: string;\n    restakeEarnings?: boolean;\n    delegationTarget?: DelegationTarget;\n}\n\nexport class ConfigureDelegationHandler\n    implements AccountTransactionHandler<ConfigureDelegationPayload, ConfigureDelegationPayloadJSON>\n{\n    getBaseEnergyCost(): bigint {\n        return 300n;\n    }\n\n    serialize(payload: ConfigureDelegationPayload): Buffer {\n        return serializeConfigureDelegationPayload(payload);\n    }\n\n    deserialize(): ConfigureDelegationPayload {\n        throw new Error('deserialize not supported');\n    }\n\n    toJSON(payload: ConfigureDelegationPayload): ConfigureDelegationPayloadJSON {\n        return {\n            ...payload,\n            stake: payload.stake?.toJSON(),\n        };\n    }\n\n    fromJSON(json: ConfigureDelegationPayloadJSON): ConfigureDelegationPayload {\n        let result: ConfigureDelegationPayload = {\n            ...json,\n            stake: json.stake ? CcdAmount.fromJSON(json.stake) : undefined,\n        };\n\n        if (\n            json.delegationTarget === undefined ||\n            json.delegationTarget.delegateType === DelegationTargetType.PassiveDelegation\n        ) {\n            return result;\n        }\n\n        result.delegationTarget = { ...json.delegationTarget, bakerId: BigInt(json.delegationTarget.bakerId) };\n        return result;\n    }\n}\n\nexport type TokenUpdatePayloadJSON = {\n    tokenId: TokenId.JSON;\n    operations: Cbor.JSON;\n};\n\nexport class TokenUpdateHandler implements AccountTransactionHandler<TokenUpdatePayload, TokenUpdatePayloadJSON> {\n    serialize(payload: TokenUpdatePayload): Buffer {\n        const tokenId = packBufferWithWord8Length(TokenId.toBytes(payload.tokenId));\n        const ops = packBufferWithWord32Length(payload.operations.bytes);\n        return Buffer.concat([tokenId, ops]);\n    }\n    deserialize(serializedPayload: Cursor): TokenUpdatePayload {\n        let len = serializedPayload.read(1).readUInt8(0);\n        const tokenId = TokenId.fromBytes(serializedPayload.read(len));\n\n        len = serializedPayload.read(4).readUInt32BE(0);\n        const operations = Cbor.fromBuffer(serializedPayload.read(len));\n        return { tokenId, operations };\n    }\n    getBaseEnergyCost(payload: TokenUpdatePayload): bigint {\n        // TODO: update costs when finalized costs are determined.\n        const operations = Cbor.decode(payload.operations, 'TokenOperation[]');\n        // The base cost for a token transaction.\n        let energyCost = 300n;\n        // Additional cost of specific PLT operations\n        const PLT_TRANSFER_COST = 100n;\n        const PLT_MINT_COST = 50n;\n        const PLT_BURN_COST = 50n;\n        const PLT_LIST_UPDATE_COST = 50n;\n        const PLT_PAUSE_COST = 50n;\n\n        for (const operation of operations) {\n            switch (true) {\n                case TokenOperationType.Transfer in operation:\n                    energyCost += PLT_TRANSFER_COST;\n                    break;\n                case TokenOperationType.Mint in operation:\n                    energyCost += PLT_MINT_COST;\n                    break;\n                case TokenOperationType.Burn in operation:\n                    energyCost += PLT_BURN_COST;\n                    break;\n                case TokenOperationType.AddAllowList in operation:\n                case TokenOperationType.RemoveAllowList in operation:\n                case TokenOperationType.AddDenyList in operation:\n                case TokenOperationType.RemoveDenyList in operation:\n                    energyCost += PLT_LIST_UPDATE_COST;\n                    break;\n                case TokenOperationType.Pause in operation:\n                case TokenOperationType.Unpause in operation:\n                    energyCost += PLT_PAUSE_COST;\n                    break;\n            }\n        }\n\n        return energyCost;\n    }\n    toJSON(payload: TokenUpdatePayload): TokenUpdatePayloadJSON {\n        return {\n            tokenId: payload.tokenId.toJSON(),\n            operations: payload.operations.toJSON(),\n        };\n    }\n    fromJSON(json: TokenUpdatePayloadJSON): TokenUpdatePayload {\n        return {\n            tokenId: TokenId.fromJSON(json.tokenId),\n            operations: Cbor.fromJSON(json.operations),\n        };\n    }\n}\n\nexport type AccountTransactionPayloadJSON =\n    | SimpleTransferPayloadJSON\n    | SimpleTransferWithMemoPayloadJSON\n    | DeployModulePayloadJSON\n    | InitContractPayloadJSON\n    | UpdateContractPayloadJSON\n    | UpdateCredentialsPayload\n    | RegisterDataPayloadJSON\n    | ConfigureDelegationPayloadJSON\n    | ConfigureBakerPayloadJSON\n    | TokenUpdatePayloadJSON;\n\nexport function getAccountTransactionHandler(type: AccountTransactionType.Transfer): SimpleTransferHandler;\nexport function getAccountTransactionHandler(\n    type: AccountTransactionType.TransferWithMemo\n): SimpleTransferWithMemoHandler;\nexport function getAccountTransactionHandler(type: AccountTransactionType.UpdateCredentials): UpdateCredentialsHandler;\nexport function getAccountTransactionHandler(type: AccountTransactionType.DeployModule): DeployModuleHandler;\nexport function getAccountTransactionHandler(type: AccountTransactionType.InitContract): InitContractHandler;\nexport function getAccountTransactionHandler(type: AccountTransactionType.Update): UpdateContractHandler;\nexport function getAccountTransactionHandler(type: AccountTransactionType.RegisterData): RegisterDataHandler;\nexport function getAccountTransactionHandler(\n    type: AccountTransactionType.ConfigureDelegation\n): ConfigureDelegationHandler;\nexport function getAccountTransactionHandler(type: AccountTransactionType.ConfigureBaker): ConfigureBakerHandler;\nexport function getAccountTransactionHandler(type: AccountTransactionType.TokenUpdate): TokenUpdateHandler;\nexport function getAccountTransactionHandler(\n    type: AccountTransactionType\n): AccountTransactionHandler<AccountTransactionPayload, AccountTransactionPayloadJSON>;\nexport function getAccountTransactionHandler(\n    type: AccountTransactionType\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n    switch (type) {\n        case AccountTransactionType.Transfer:\n            return new SimpleTransferHandler();\n        case AccountTransactionType.TransferWithMemo:\n            return new SimpleTransferWithMemoHandler();\n        case AccountTransactionType.DeployModule:\n            return new DeployModuleHandler();\n        case AccountTransactionType.InitContract:\n            return new InitContractHandler();\n        case AccountTransactionType.Update:\n            return new UpdateContractHandler();\n        case AccountTransactionType.UpdateCredentials:\n            return new UpdateCredentialsHandler();\n        case AccountTransactionType.RegisterData:\n            return new RegisterDataHandler();\n        case AccountTransactionType.ConfigureDelegation:\n            return new ConfigureDelegationHandler();\n        case AccountTransactionType.ConfigureBaker:\n            return new ConfigureBakerHandler();\n        case AccountTransactionType.TokenUpdate:\n            return new TokenUpdateHandler();\n        default:\n            throw new Error('The provided type does not have a handler: ' + type);\n    }\n}\n","import * as Energy from './types/Energy.js';\n\nexport const DEFAULT_INVOKE_ENERGY: Energy.Type = Energy.create(1000000n);\nexport const MAX_U64 = 18446744073709551615n; // 2n ** 64n - 1n\nexport const MAX_U8 = 255; // 2 ** 8 - 1\n","// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size\n// @generated from protobuf file \"v2/concordium/types.proto\" (package \"concordium.v2\", syntax proto3)\n// tslint:disable\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { TokenCreationDetails } from \"./protocol-level-tokens.js\";\nimport { CreatePLT } from \"./protocol-level-tokens.js\";\nimport { Memo } from \"./kernel.js\";\nimport { TokenEffect } from \"./protocol-level-tokens.js\";\nimport { TokenModuleRejectReason } from \"./protocol-level-tokens.js\";\nimport { TokenAccountState } from \"./protocol-level-tokens.js\";\nimport { TokenState } from \"./protocol-level-tokens.js\";\nimport { TokenId } from \"./protocol-level-tokens.js\";\nimport { AccountAddress } from \"./kernel.js\";\n/**\n * A message that contains no information.\n *\n * @generated from protobuf message concordium.v2.Empty\n */\nexport interface Empty {\n}\n/**\n * Hash of a block. This is always 32 bytes long.\n *\n * @generated from protobuf message concordium.v2.BlockHash\n */\nexport interface BlockHash {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * A SHA256 hash. This is always 32 bytes long.\n *\n * @generated from protobuf message concordium.v2.Sha256Hash\n */\nexport interface Sha256Hash {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Hash of a transaction. This is always 32 bytes long.\n *\n * @generated from protobuf message concordium.v2.TransactionHash\n */\nexport interface TransactionHash {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Hash of the state after some block. This is always 32 bytes long.\n *\n * @generated from protobuf message concordium.v2.StateHash\n */\nexport interface StateHash {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * The absolute height of a block. This is the number of ancestors of a block\n * since the genesis block. In particular, the chain genesis block has absolute\n * height 0.\n *\n * @generated from protobuf message concordium.v2.AbsoluteBlockHeight\n */\nexport interface AbsoluteBlockHeight {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * The height of a block relative to the last genesis. This differs from the\n * absolute block height in that it counts height from the last protocol update.\n *\n * @generated from protobuf message concordium.v2.BlockHeight\n */\nexport interface BlockHeight {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * The ID of a baker, which is the index of its account.\n *\n * @generated from protobuf message concordium.v2.BakerId\n */\nexport interface BakerId {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * Index of the account in the account table. These are assigned sequentially\n * in the order of creation of accounts. The first account has index 0.\n *\n * @generated from protobuf message concordium.v2.AccountIndex\n */\nexport interface AccountIndex {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * A smart contract module reference. This is always 32 bytes long.\n *\n * @generated from protobuf message concordium.v2.ModuleRef\n */\nexport interface ModuleRef {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Source bytes of a versioned smart contract module.\n *\n * @generated from protobuf message concordium.v2.VersionedModuleSource\n */\nexport interface VersionedModuleSource {\n    /**\n     * @generated from protobuf oneof: module\n     */\n    module: {\n        oneofKind: \"v0\";\n        /**\n         * @generated from protobuf field: concordium.v2.VersionedModuleSource.ModuleSourceV0 v0 = 1;\n         */\n        v0: VersionedModuleSource_ModuleSourceV0;\n    } | {\n        oneofKind: \"v1\";\n        /**\n         * @generated from protobuf field: concordium.v2.VersionedModuleSource.ModuleSourceV1 v1 = 2;\n         */\n        v1: VersionedModuleSource_ModuleSourceV1;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Source bytes of a smart contract v0 module.\n *\n * @generated from protobuf message concordium.v2.VersionedModuleSource.ModuleSourceV0\n */\nexport interface VersionedModuleSource_ModuleSourceV0 {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Source bytes of a smart contract v1 module.\n *\n * @generated from protobuf message concordium.v2.VersionedModuleSource.ModuleSourceV1\n */\nexport interface VersionedModuleSource_ModuleSourceV1 {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Unix timestamp in milliseconds.\n *\n * @generated from protobuf message concordium.v2.Timestamp\n */\nexport interface Timestamp {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * An individual release of a locked balance.\n *\n * @generated from protobuf message concordium.v2.Release\n */\nexport interface Release {\n    /**\n     * Effective time of the release in milliseconds since unix epoch.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp timestamp = 1;\n     */\n    timestamp?: Timestamp;\n    /**\n     * Amount to be released.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 2;\n     */\n    amount?: Amount;\n    /**\n     * List of transaction hashes that contribute a balance to this release.\n     *\n     * @generated from protobuf field: repeated concordium.v2.TransactionHash transactions = 3;\n     */\n    transactions: TransactionHash[];\n}\n/**\n * A new individual release. Part of a single transfer with schedule transaction.\n *\n * @generated from protobuf message concordium.v2.NewRelease\n */\nexport interface NewRelease {\n    /**\n     * Effective time of the release in milliseconds since unix epoch.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp timestamp = 1;\n     */\n    timestamp?: Timestamp;\n    /**\n     * Amount to be released.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 2;\n     */\n    amount?: Amount;\n}\n/**\n * State of the account's release schedule. This is the balance of the account\n * that is owned by the account, but cannot be used until the release point.\n *\n * @generated from protobuf message concordium.v2.ReleaseSchedule\n */\nexport interface ReleaseSchedule {\n    /**\n     * Total amount locked in the release schedule.\n     *\n     * @generated from protobuf field: concordium.v2.Amount total = 1;\n     */\n    total?: Amount;\n    /**\n     * A list of releases, ordered by increasing timestamp.\n     *\n     * @generated from protobuf field: repeated concordium.v2.Release schedules = 2;\n     */\n    schedules: Release[];\n}\n/**\n * An encrypted amount, in two chunks in \"little endian limbs\". That is, the\n * first chunk represents the low 32 bits of an amount, and the second chunk\n * represents the high 32 bits. The chunks are serialized in order and\n * represented as a byte array.\n * Always 192 bytes.\n *\n * @generated from protobuf message concordium.v2.EncryptedAmount\n */\nexport interface EncryptedAmount {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * @generated from protobuf message concordium.v2.EncryptedBalance\n */\nexport interface EncryptedBalance {\n    /**\n     * Encrypted amount that is a result of this account's actions.\n     * In particular this list includes the aggregate of\n     *\n     * - remaining amounts that result when transferring to public balance\n     * - remaining amounts when transferring to another account\n     * - encrypted amounts that are transferred from public balance\n     *\n     * When a transfer is made all of these must always be used.\n     *\n     * @generated from protobuf field: concordium.v2.EncryptedAmount self_amount = 1;\n     */\n    selfAmount?: EncryptedAmount;\n    /**\n     * Starting index for incoming encrypted amounts. If an aggregated amount\n     * is present then this index is associated with such an amount and the\n     * list of incoming encrypted amounts starts at the index `start_index\n     * + 1`.\n     *\n     * @generated from protobuf field: uint64 start_index = 2;\n     */\n    startIndex: bigint;\n    /**\n     * If present, the amount that has resulted from aggregating other amounts\n     * If this field is present so is `num_aggregated`.\n     *\n     * @generated from protobuf field: optional concordium.v2.EncryptedAmount aggregated_amount = 3;\n     */\n    aggregatedAmount?: EncryptedAmount;\n    /**\n     * The number of aggregated amounts (must be at least 2 if present). This\n     * field is present if and only if `aggregated_amount` is present.\n     *\n     * @generated from protobuf field: optional uint32 num_aggregated = 4;\n     */\n    numAggregated?: number;\n    /**\n     * Amounts starting at `start_index` (or at `start_index + 1` if there is\n     * an aggregated amount present). They are assumed to be numbered\n     * sequentially. The length of this list is bounded by the maximum number\n     * of incoming amounts on the accounts, which is currently 32. After\n     * that aggregation kicks in.\n     *\n     * @generated from protobuf field: repeated concordium.v2.EncryptedAmount incoming_amounts = 5;\n     */\n    incomingAmounts: EncryptedAmount[];\n}\n/**\n * Entity to which the account delegates a portion of its stake.\n *\n * @generated from protobuf message concordium.v2.DelegationTarget\n */\nexport interface DelegationTarget {\n    /**\n     * @generated from protobuf oneof: target\n     */\n    target: {\n        oneofKind: \"passive\";\n        /**\n         * Delegate passively, i.e., to no specific baker.\n         *\n         * @generated from protobuf field: concordium.v2.Empty passive = 1;\n         */\n        passive: Empty;\n    } | {\n        oneofKind: \"baker\";\n        /**\n         * Delegate to a specific baker.\n         *\n         * @generated from protobuf field: concordium.v2.BakerId baker = 2;\n         */\n        baker: BakerId;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Baker's public key used to check whether they won the lottery or not.\n *\n * @generated from protobuf message concordium.v2.BakerElectionVerifyKey\n */\nexport interface BakerElectionVerifyKey {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Baker's public key used to check that they are indeed the ones who\n * produced the block.\n *\n * @generated from protobuf message concordium.v2.BakerSignatureVerifyKey\n */\nexport interface BakerSignatureVerifyKey {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Baker's public key used to check signatures on finalization records.\n * This is only used if the baker has sufficient stake to participate in\n * finalization.\n *\n * @generated from protobuf message concordium.v2.BakerAggregationVerifyKey\n */\nexport interface BakerAggregationVerifyKey {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Information about a baker.\n *\n * @generated from protobuf message concordium.v2.BakerInfo\n */\nexport interface BakerInfo {\n    /**\n     * Identity of the baker. This is actually the account index of\n     * the account controlling the baker.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * Baker's public key used to check whether they won the lottery or not.\n     *\n     * @generated from protobuf field: concordium.v2.BakerElectionVerifyKey election_key = 2;\n     */\n    electionKey?: BakerElectionVerifyKey;\n    /**\n     * Baker's public key used to check that they are indeed the ones who\n     * produced the block.\n     *\n     * @generated from protobuf field: concordium.v2.BakerSignatureVerifyKey signature_key = 3;\n     */\n    signatureKey?: BakerSignatureVerifyKey;\n    /**\n     * Baker's public key used to check signatures on finalization records.\n     * This is only used if the baker has sufficient stake to participate in\n     * finalization.\n     *\n     * @generated from protobuf field: concordium.v2.BakerAggregationVerifyKey aggregation_key = 4;\n     */\n    aggregationKey?: BakerAggregationVerifyKey;\n}\n/**\n * Pending change to the stake either of a baker or delegator.\n *\n * @generated from protobuf message concordium.v2.StakePendingChange\n */\nexport interface StakePendingChange {\n    /**\n     * @generated from protobuf oneof: change\n     */\n    change: {\n        oneofKind: \"reduce\";\n        /**\n         * @generated from protobuf field: concordium.v2.StakePendingChange.Reduce reduce = 1;\n         */\n        reduce: StakePendingChange_Reduce;\n    } | {\n        oneofKind: \"remove\";\n        /**\n         * Remove the stake. The value is a Unix timestamp of the effective time in\n         * milliseconds.\n         *\n         * @generated from protobuf field: concordium.v2.Timestamp remove = 2;\n         */\n        remove: Timestamp;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.StakePendingChange.Reduce\n */\nexport interface StakePendingChange_Reduce {\n    /**\n     * @generated from protobuf field: concordium.v2.Amount new_stake = 1;\n     */\n    newStake?: Amount;\n    /**\n     * Unix timestamp in milliseconds when the change takes effect.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp effective_time = 2;\n     */\n    effectiveTime?: Timestamp;\n}\n/**\n * A fraction of an amount with a precision of `1/100_000`.\n *\n * @generated from protobuf message concordium.v2.AmountFraction\n */\nexport interface AmountFraction {\n    /**\n     * Must not exceed 100000.\n     *\n     * @generated from protobuf field: uint32 parts_per_hundred_thousand = 1;\n     */\n    partsPerHundredThousand: number;\n}\n/**\n * Distribution of the rewards for the particular pool.\n *\n * @generated from protobuf message concordium.v2.CommissionRates\n */\nexport interface CommissionRates {\n    /**\n     * Fraction of finalization rewards charged by the pool owner.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction finalization = 1;\n     */\n    finalization?: AmountFraction;\n    /**\n     * Fraction of baking rewards charged by the pool owner.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction baking = 2;\n     */\n    baking?: AmountFraction;\n    /**\n     * Fraction of transaction rewards charged by the pool owner.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction transaction = 3;\n     */\n    transaction?: AmountFraction;\n}\n/**\n * Additional information about a baking pool.\n * This information is added with the introduction of delegation.\n *\n * @generated from protobuf message concordium.v2.BakerPoolInfo\n */\nexport interface BakerPoolInfo {\n    /**\n     * Whether the pool allows delegators.\n     *\n     * @generated from protobuf field: concordium.v2.OpenStatus open_status = 1;\n     */\n    openStatus: OpenStatus;\n    /**\n     * The URL that links to the metadata about the pool.\n     *\n     * @generated from protobuf field: string url = 2;\n     */\n    url: string;\n    /**\n     * The commission rates charged by the pool owner.\n     *\n     * @generated from protobuf field: concordium.v2.CommissionRates commission_rates = 3;\n     */\n    commissionRates?: CommissionRates;\n}\n/**\n * Information about the account stake, if the account is either a baker or a\n * delegator.\n *\n * @generated from protobuf message concordium.v2.AccountStakingInfo\n */\nexport interface AccountStakingInfo {\n    /**\n     * @generated from protobuf oneof: staking_info\n     */\n    stakingInfo: {\n        oneofKind: \"baker\";\n        /**\n         * The account is a baker.\n         *\n         * @generated from protobuf field: concordium.v2.AccountStakingInfo.Baker baker = 1;\n         */\n        baker: AccountStakingInfo_Baker;\n    } | {\n        oneofKind: \"delegator\";\n        /**\n         * The account is a delegator.\n         *\n         * @generated from protobuf field: concordium.v2.AccountStakingInfo.Delegator delegator = 2;\n         */\n        delegator: AccountStakingInfo_Delegator;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.AccountStakingInfo.Baker\n */\nexport interface AccountStakingInfo_Baker {\n    /**\n     * Amount staked at present.\n     *\n     * @generated from protobuf field: concordium.v2.Amount staked_amount = 1;\n     */\n    stakedAmount?: Amount;\n    /**\n     * A flag indicating whether rewards paid to the baker are automatically\n     * restaked or not.\n     *\n     * @generated from protobuf field: bool restake_earnings = 2;\n     */\n    restakeEarnings: boolean;\n    /**\n     * Information about the baker that is staking.\n     *\n     * @generated from protobuf field: concordium.v2.BakerInfo baker_info = 3;\n     */\n    bakerInfo?: BakerInfo;\n    /**\n     * If present, any pending change to the delegated stake.\n     *\n     * @generated from protobuf field: optional concordium.v2.StakePendingChange pending_change = 4;\n     */\n    pendingChange?: StakePendingChange;\n    /**\n     * Present if the account is currently a baker, i.e., it is in the baking\n     * committee of the current epoch.\n     *\n     * @generated from protobuf field: optional concordium.v2.BakerPoolInfo pool_info = 5;\n     */\n    poolInfo?: BakerPoolInfo;\n    /**\n     * A flag indicating whether the account is currently suspended or not. The\n     * flag has a meaning from protocol version 8 onwards. In protocol version 8\n     * it signals whether an account has been suspended and is not participating\n     * in the consensus algorithm. For protocol version < 8 the flag will always\n     * be set to false.\n     *\n     * @generated from protobuf field: bool is_suspended = 6;\n     */\n    isSuspended: boolean;\n}\n/**\n * @generated from protobuf message concordium.v2.AccountStakingInfo.Delegator\n */\nexport interface AccountStakingInfo_Delegator {\n    /**\n     * The amount that the account delegates.\n     *\n     * @generated from protobuf field: concordium.v2.Amount staked_amount = 1;\n     */\n    stakedAmount?: Amount;\n    /**\n     * Whether the earnings are automatically added to the staked amount.\n     *\n     * @generated from protobuf field: bool restake_earnings = 2;\n     */\n    restakeEarnings: boolean;\n    /**\n     * The entity to which the account delegates.\n     *\n     * @generated from protobuf field: concordium.v2.DelegationTarget target = 3;\n     */\n    target?: DelegationTarget;\n    /**\n     * If present, any pending change to the delegated stake.\n     *\n     * @generated from protobuf field: optional concordium.v2.StakePendingChange pending_change = 4;\n     */\n    pendingChange?: StakePendingChange;\n}\n/**\n * A sequence number that determines the ordering of transactions from the\n * account. The minimum sequence number is 1.\n *\n * @generated from protobuf message concordium.v2.SequenceNumber\n */\nexport interface SequenceNumber {\n    /**\n     * The sequence number.\n     *\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * A sequence number that determines the ordering of update transactions.\n * Equivalent to `SequenceNumber` for account transactions.\n * Update sequence numbers are per update type and the minimum value is 1.\n *\n * @generated from protobuf message concordium.v2.UpdateSequenceNumber\n */\nexport interface UpdateSequenceNumber {\n    /**\n     * The sequence number.\n     *\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * An amount of microCCD.\n *\n * @generated from protobuf message concordium.v2.Amount\n */\nexport interface Amount {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * Index of a credential on an account.\n *\n * @generated from protobuf message concordium.v2.CredentialIndex\n */\nexport interface CredentialIndex {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * The number of signatures required to sign.\n *\n * @generated from protobuf message concordium.v2.SignatureThreshold\n */\nexport interface SignatureThreshold {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * The number of credentials required to sign an account transaction.\n *\n * @generated from protobuf message concordium.v2.AccountThreshold\n */\nexport interface AccountThreshold {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * An account encryption key. Always 96 bytes.\n *\n * @generated from protobuf message concordium.v2.EncryptionKey\n */\nexport interface EncryptionKey {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * An address of either a contract or an account.\n *\n * @generated from protobuf message concordium.v2.Address\n */\nexport interface Address {\n    /**\n     * @generated from protobuf oneof: type\n     */\n    type: {\n        oneofKind: \"account\";\n        /**\n         * @generated from protobuf field: concordium.v2.AccountAddress account = 1;\n         */\n        account: AccountAddress;\n    } | {\n        oneofKind: \"contract\";\n        /**\n         * @generated from protobuf field: concordium.v2.ContractAddress contract = 2;\n         */\n        contract: ContractAddress;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * A public key used to verify transaction signatures from an account.\n *\n * @generated from protobuf message concordium.v2.AccountVerifyKey\n */\nexport interface AccountVerifyKey {\n    /**\n     * @generated from protobuf oneof: key\n     */\n    key: {\n        oneofKind: \"ed25519Key\";\n        /**\n         * @generated from protobuf field: bytes ed25519_key = 1;\n         */\n        ed25519Key: Uint8Array;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Public keys of a single credential.\n *\n * @generated from protobuf message concordium.v2.CredentialPublicKeys\n */\nexport interface CredentialPublicKeys {\n    /**\n     * @generated from protobuf field: map<uint32, concordium.v2.AccountVerifyKey> keys = 1;\n     */\n    keys: {\n        [key: number]: AccountVerifyKey;\n    };\n    /**\n     * @generated from protobuf field: concordium.v2.SignatureThreshold threshold = 2;\n     */\n    threshold?: SignatureThreshold;\n}\n/**\n * A registration ID of a credential, derived from the secret PRF key and a\n * nonce. This is always 48 bytes long.\n *\n * @generated from protobuf message concordium.v2.CredentialRegistrationId\n */\nexport interface CredentialRegistrationId {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * An index of the identity provider that identifies them uniquely in the\n * context of a specific chain.\n *\n * @generated from protobuf message concordium.v2.IdentityProviderIdentity\n */\nexport interface IdentityProviderIdentity {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * Representation of the pair of a year and month.\n *\n * @generated from protobuf message concordium.v2.YearMonth\n */\nexport interface YearMonth {\n    /**\n     * @generated from protobuf field: uint32 year = 1;\n     */\n    year: number;\n    /**\n     * @generated from protobuf field: uint32 month = 2;\n     */\n    month: number;\n}\n/**\n * Policy on a credential.\n *\n * @generated from protobuf message concordium.v2.Policy\n */\nexport interface Policy {\n    /**\n     * The year and month when the identity object from which the credential is\n     * derived was created.\n     *\n     * @generated from protobuf field: concordium.v2.YearMonth created_at = 1;\n     */\n    createdAt?: YearMonth;\n    /**\n     * The last year and month when the credential is still valid. After this\n     * expires an account can no longer be created from the credential.\n     *\n     * @generated from protobuf field: concordium.v2.YearMonth valid_to = 2;\n     */\n    validTo?: YearMonth;\n    /**\n     * Mapping from attribute tags to attribute values. Attribute tags are always\n     * representable in a single `u8`, attribute values are never more than 31\n     * bytes in length.\n     *\n     * @generated from protobuf field: map<uint32, bytes> attributes = 3;\n     */\n    attributes: {\n        [key: number]: Uint8Array;\n    };\n}\n/**\n * Values contained in an initial credential.\n *\n * @generated from protobuf message concordium.v2.InitialCredentialValues\n */\nexport interface InitialCredentialValues {\n    /**\n     * Public keys of the credential.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialPublicKeys keys = 1;\n     */\n    keys?: CredentialPublicKeys;\n    /**\n     * Its registration ID.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialRegistrationId cred_id = 2;\n     */\n    credId?: CredentialRegistrationId;\n    /**\n     * The identity provider who signed the identity object from which this\n     * credential is derived.\n     *\n     * @generated from protobuf field: concordium.v2.IdentityProviderIdentity ip_id = 3;\n     */\n    ipId?: IdentityProviderIdentity;\n    /**\n     * Policy of this credential.\n     *\n     * @generated from protobuf field: concordium.v2.Policy policy = 4;\n     */\n    policy?: Policy;\n}\n/**\n * Data relating to a single anonymity revoker sent by the account holder to\n * the chain.\n *\n * @generated from protobuf message concordium.v2.ChainArData\n */\nexport interface ChainArData {\n    /**\n     * Share of the encryption of IdCredPub.\n     *\n     * @generated from protobuf field: bytes enc_id_cred_pub_share = 1;\n     */\n    encIdCredPubShare: Uint8Array;\n}\n/**\n * The number of anonymity revokers needed to revoke anonymity of a credential\n * holder.\n *\n * @generated from protobuf message concordium.v2.ArThreshold\n */\nexport interface ArThreshold {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * A single commitment in the G1 group of the BLS curve. This is always 48 bytes\n * in length.\n *\n * @generated from protobuf message concordium.v2.Commitment\n */\nexport interface Commitment {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Commitments that are part of a normal credential.\n *\n * @generated from protobuf message concordium.v2.CredentialCommitments\n */\nexport interface CredentialCommitments {\n    /**\n     * Commitment to the PRF key.\n     *\n     * @generated from protobuf field: concordium.v2.Commitment prf = 1;\n     */\n    prf?: Commitment;\n    /**\n     * Commitment to the counter used to generate the credential registration id.\n     *\n     * @generated from protobuf field: concordium.v2.Commitment cred_counter = 2;\n     */\n    credCounter?: Commitment;\n    /**\n     * Commitment to the `max_accounts` value, which determines the maximum number\n     * of credentials that may be created from the identity object.\n     *\n     * @generated from protobuf field: concordium.v2.Commitment max_accounts = 3;\n     */\n    maxAccounts?: Commitment;\n    /**\n     * Commitments to the attributes which have not been revealed in the policy.\n     *\n     * @generated from protobuf field: map<uint32, concordium.v2.Commitment> attributes = 4;\n     */\n    attributes: {\n        [key: number]: Commitment;\n    };\n    /**\n     * List of commitments to the coefficients of the sharing polynomial. This\n     * polynomial is used in a shared encryption of `id_cred_pub` among the\n     * anonymity revokers.\n     *\n     * @generated from protobuf field: repeated concordium.v2.Commitment id_cred_sec_sharing_coeff = 5;\n     */\n    idCredSecSharingCoeff: Commitment[];\n}\n/**\n * Values contained in a normal (non-initial) credential.\n *\n * @generated from protobuf message concordium.v2.NormalCredentialValues\n */\nexport interface NormalCredentialValues {\n    /**\n     * Public keys of the credential.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialPublicKeys keys = 1;\n     */\n    keys?: CredentialPublicKeys;\n    /**\n     * Its registration ID.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialRegistrationId cred_id = 2;\n     */\n    credId?: CredentialRegistrationId;\n    /**\n     * The identity provider who signed the identity object from which this\n     * credential is derived.\n     *\n     * @generated from protobuf field: concordium.v2.IdentityProviderIdentity ip_id = 3;\n     */\n    ipId?: IdentityProviderIdentity;\n    /**\n     * Policy of this credential.\n     *\n     * @generated from protobuf field: concordium.v2.Policy policy = 4;\n     */\n    policy?: Policy;\n    /**\n     * The number of anonymity revokers that must work together to revoke the\n     * anonymity of the credential holder.\n     *\n     * @generated from protobuf field: concordium.v2.ArThreshold ar_threshold = 5;\n     */\n    arThreshold?: ArThreshold;\n    /**\n     * Mapping from anonymity revoker identities to revocation data for the given anonymity revoker.\n     *\n     * @generated from protobuf field: map<uint32, concordium.v2.ChainArData> ar_data = 6;\n     */\n    arData: {\n        [key: number]: ChainArData;\n    };\n    /**\n     * Commitments to attributes which have not been revealed.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialCommitments commitments = 7;\n     */\n    commitments?: CredentialCommitments;\n}\n/**\n * Credential that is part of an account.\n *\n * @generated from protobuf message concordium.v2.AccountCredential\n */\nexport interface AccountCredential {\n    /**\n     * @generated from protobuf oneof: credential_values\n     */\n    credentialValues: {\n        oneofKind: \"initial\";\n        /**\n         * @generated from protobuf field: concordium.v2.InitialCredentialValues initial = 1;\n         */\n        initial: InitialCredentialValues;\n    } | {\n        oneofKind: \"normal\";\n        /**\n         * @generated from protobuf field: concordium.v2.NormalCredentialValues normal = 2;\n         */\n        normal: NormalCredentialValues;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.Cooldown\n */\nexport interface Cooldown {\n    /**\n     * The time in milliseconds since the Unix epoch when the cooldown period\n     * ends.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp end_time = 1;\n     */\n    endTime?: Timestamp;\n    /**\n     * The amount that is in cooldown and set to be released at the end of the\n     * cooldown period.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 2;\n     */\n    amount?: Amount;\n    /**\n     * The status of the cooldown.\n     *\n     * @generated from protobuf field: concordium.v2.Cooldown.CooldownStatus status = 3;\n     */\n    status: Cooldown_CooldownStatus;\n}\n/**\n * The status of a cooldown. When stake is removed from a baker or delegator\n * (from protocol version 7) it first enters the pre-pre-cooldown state.\n * The next time the stake snaphot is taken (at the epoch transition before\n * a payday) it enters the pre-cooldown state. At the subsequent payday, it\n * enters the cooldown state. At the payday after the end of the cooldown\n * period, the stake is finally released.\n *\n * @generated from protobuf enum concordium.v2.Cooldown.CooldownStatus\n */\nexport enum Cooldown_CooldownStatus {\n    /**\n     * The amount is in cooldown and will expire at the specified time, becoming available\n     * at the subsequent pay day.\n     *\n     * @generated from protobuf enum value: COOLDOWN = 0;\n     */\n    COOLDOWN = 0,\n    /**\n     * The amount will enter cooldown at the next pay day. The specified end time is\n     * projected to be the end of the cooldown period, but the actual end time will be\n     * determined at the payday, and may be different if the global cooldown period\n     * changes.\n     *\n     * @generated from protobuf enum value: PRE_COOLDOWN = 1;\n     */\n    PRE_COOLDOWN = 1,\n    /**\n     * The amount will enter pre-cooldown at the next snapshot epoch (i.e. the epoch\n     * transition before a pay day transition). As with pre-cooldown, the specified\n     * end time is projected, but the actual end time will be determined later.\n     *\n     * @generated from protobuf enum value: PRE_PRE_COOLDOWN = 2;\n     */\n    PRE_PRE_COOLDOWN = 2\n}\n/**\n * The token state at the block level.\n *\n * @generated from protobuf message concordium.v2.TokenInfo\n */\nexport interface TokenInfo {\n    /**\n     * The unique token id.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenId token_id = 1;\n     */\n    tokenId?: TokenId;\n    /**\n     * The associated block level state.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenState token_state = 2;\n     */\n    tokenState?: TokenState;\n}\n/**\n * Information about the account at a particular point in time.\n *\n * @generated from protobuf message concordium.v2.AccountInfo\n */\nexport interface AccountInfo {\n    /**\n     * Next sequence number to be used for transactions signed from this account.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber sequence_number = 1;\n     */\n    sequenceNumber?: SequenceNumber;\n    /**\n     * Current (unencrypted) balance of the account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 2;\n     */\n    amount?: Amount;\n    /**\n     * Release schedule for any locked up amount. This could be an empty\n     * release schedule.\n     *\n     * @generated from protobuf field: concordium.v2.ReleaseSchedule schedule = 3;\n     */\n    schedule?: ReleaseSchedule;\n    /**\n     * Map of all currently active credentials on the account.\n     * This includes public keys that can sign for the given credentials, as\n     * well as any revealed attributes. This map always contains a credential\n     * with index 0.\n     *\n     * @generated from protobuf field: map<uint32, concordium.v2.AccountCredential> creds = 4;\n     */\n    creds: {\n        [key: number]: AccountCredential;\n    };\n    /**\n     * Lower bound on how many credentials must sign any given transaction from\n     * this account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountThreshold threshold = 5;\n     */\n    threshold?: AccountThreshold;\n    /**\n     * The encrypted balance of the account.\n     *\n     * @generated from protobuf field: concordium.v2.EncryptedBalance encrypted_balance = 6;\n     */\n    encryptedBalance?: EncryptedBalance;\n    /**\n     * The public key for sending encrypted balances to the account.\n     *\n     * @generated from protobuf field: concordium.v2.EncryptionKey encryption_key = 7;\n     */\n    encryptionKey?: EncryptionKey;\n    /**\n     * Internal index of the account. Accounts on the chain get sequential\n     * indices. These should generally not be used outside of the chain,\n     * the account address is meant to be used to refer to accounts,\n     * however the account index serves the role of the baker id, if the\n     * account is a baker. Hence it is exposed here as well.\n     *\n     * @generated from protobuf field: concordium.v2.AccountIndex index = 8;\n     */\n    index?: AccountIndex;\n    /**\n     * Present if the account is a baker or delegator. In that case\n     * it is the information about the baker or delegator.\n     *\n     * @generated from protobuf field: optional concordium.v2.AccountStakingInfo stake = 9;\n     */\n    stake?: AccountStakingInfo;\n    /**\n     * Canonical address of the account. This is derived from the first credential\n     * that created the account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress address = 10;\n     */\n    address?: AccountAddress;\n    /**\n     * The stake on the account that is in cooldown.\n     * There can be multiple amounts in cooldown that expire at different times.\n     * This was introduced in protocol version 7, and so is not present in\n     * earlier protocol versions.\n     *\n     * @generated from protobuf field: repeated concordium.v2.Cooldown cooldowns = 11;\n     */\n    cooldowns: Cooldown[];\n    /**\n     * The available (unencrypted) balance of CCD's of the account (i.e. that\n     * can be transferred or used to pay for transactions). This is the balance\n     * minus the locked amount. The locked amount is the maximum of the amount\n     * in the release schedule and the total amount that is actively staked or in\n     * cooldown (inactive stake). This was introduced in node version 7.0.\n     *\n     * @generated from protobuf field: concordium.v2.Amount available_balance = 12;\n     */\n    availableBalance?: Amount;\n    /**\n     * The protocol level tokens (PLT) held by the account.\n     *\n     * @generated from protobuf field: repeated concordium.v2.AccountInfo.Token tokens = 13;\n     */\n    tokens: AccountInfo_Token[];\n}\n/**\n * Protocol level token (PLT).\n *\n * @generated from protobuf message concordium.v2.AccountInfo.Token\n */\nexport interface AccountInfo_Token {\n    /**\n     * The unique token id\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenId token_id = 1;\n     */\n    tokenId?: TokenId;\n    /**\n     * The associated token account level state\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenAccountState token_account_state = 2;\n     */\n    tokenAccountState?: TokenAccountState;\n}\n/**\n * Input to queries which take a block as a parameter.\n *\n * @generated from protobuf message concordium.v2.BlockHashInput\n */\nexport interface BlockHashInput {\n    /**\n     * @generated from protobuf oneof: block_hash_input\n     */\n    blockHashInput: {\n        oneofKind: \"best\";\n        /**\n         * Query for the best block.\n         *\n         * @generated from protobuf field: concordium.v2.Empty best = 1;\n         */\n        best: Empty;\n    } | {\n        oneofKind: \"lastFinal\";\n        /**\n         * Query for the last finalized block.\n         *\n         * @generated from protobuf field: concordium.v2.Empty last_final = 2;\n         */\n        lastFinal: Empty;\n    } | {\n        oneofKind: \"given\";\n        /**\n         * Query for the block specified by the hash. This hash should always be 32 bytes.\n         *\n         * @generated from protobuf field: concordium.v2.BlockHash given = 3;\n         */\n        given: BlockHash;\n    } | {\n        oneofKind: \"absoluteHeight\";\n        /**\n         * Query for a block at absolute height, if a unique block can be identified at that height.\n         *\n         * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight absolute_height = 4;\n         */\n        absoluteHeight: AbsoluteBlockHeight;\n    } | {\n        oneofKind: \"relativeHeight\";\n        /**\n         * Query for a block at height relative to a genesis index.\n         *\n         * @generated from protobuf field: concordium.v2.BlockHashInput.RelativeHeight relative_height = 5;\n         */\n        relativeHeight: BlockHashInput_RelativeHeight;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Request using a relative block height.\n *\n * @generated from protobuf message concordium.v2.BlockHashInput.RelativeHeight\n */\nexport interface BlockHashInput_RelativeHeight {\n    /**\n     * Genesis index to start from.\n     *\n     * @generated from protobuf field: concordium.v2.GenesisIndex genesis_index = 1;\n     */\n    genesisIndex?: GenesisIndex;\n    /**\n     * Height starting from the genesis block at the genesis index.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHeight height = 2;\n     */\n    height?: BlockHeight;\n    /**\n     * Whether to return results only from the specified genesis index (`true`),\n     * or allow results from more recent genesis indices as well (`false`).\n     *\n     * @generated from protobuf field: bool restrict = 3;\n     */\n    restrict: boolean;\n}\n/**\n * Input to queries which take an epoch as a parameter.\n *\n * @generated from protobuf message concordium.v2.EpochRequest\n */\nexport interface EpochRequest {\n    /**\n     * @generated from protobuf oneof: epoch_request_input\n     */\n    epochRequestInput: {\n        oneofKind: \"relativeEpoch\";\n        /**\n         * Query by genesis index and epoch number.\n         *\n         * @generated from protobuf field: concordium.v2.EpochRequest.RelativeEpoch relative_epoch = 1;\n         */\n        relativeEpoch: EpochRequest_RelativeEpoch;\n    } | {\n        oneofKind: \"blockHash\";\n        /**\n         * Query for the epoch of a specified block.\n         *\n         * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 2;\n         */\n        blockHash: BlockHashInput;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Request an epoch by number at a given genesis index.\n *\n * @generated from protobuf message concordium.v2.EpochRequest.RelativeEpoch\n */\nexport interface EpochRequest_RelativeEpoch {\n    /**\n     * The genesis index to query at. The query is restricted to this genesis index, and\n     * will not return results for other indices even if the epoch number is out of bounds.\n     *\n     * @generated from protobuf field: concordium.v2.GenesisIndex genesis_index = 1;\n     */\n    genesisIndex?: GenesisIndex;\n    /**\n     * The epoch number to query at.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch epoch = 2;\n     */\n    epoch?: Epoch;\n}\n/**\n * Input to queries which take an account as a parameter.\n *\n * @generated from protobuf message concordium.v2.AccountIdentifierInput\n */\nexport interface AccountIdentifierInput {\n    /**\n     * @generated from protobuf oneof: account_identifier_input\n     */\n    accountIdentifierInput: {\n        oneofKind: \"address\";\n        /**\n         * Identify the account by the address of the account.\n         *\n         * @generated from protobuf field: concordium.v2.AccountAddress address = 1;\n         */\n        address: AccountAddress;\n    } | {\n        oneofKind: \"credId\";\n        /**\n         * Identify the account by the credential that belongs or has belonged to it.\n         *\n         * @generated from protobuf field: concordium.v2.CredentialRegistrationId cred_id = 2;\n         */\n        credId: CredentialRegistrationId;\n    } | {\n        oneofKind: \"accountIndex\";\n        /**\n         * Identify the account via its index.\n         *\n         * @generated from protobuf field: concordium.v2.AccountIndex account_index = 3;\n         */\n        accountIndex: AccountIndex;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Request for account information.\n *\n * @generated from protobuf message concordium.v2.AccountInfoRequest\n */\nexport interface AccountInfoRequest {\n    /**\n     * Block in which to query the account information.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;\n     */\n    blockHash?: BlockHashInput;\n    /**\n     * Specification of the account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountIdentifierInput account_identifier = 2;\n     */\n    accountIdentifier?: AccountIdentifierInput;\n}\n/**\n * Request for token information.\n *\n * @generated from protobuf message concordium.v2.TokenInfoRequest\n */\nexport interface TokenInfoRequest {\n    /**\n     * Block in which to query the token information.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;\n     */\n    blockHash?: BlockHashInput;\n    /**\n     * Specification of the token identifier.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenId token_id = 2;\n     */\n    tokenId?: TokenId;\n}\n/**\n * Information about a finalized block that is part of the streaming response.\n *\n * @generated from protobuf message concordium.v2.FinalizedBlockInfo\n */\nexport interface FinalizedBlockInfo {\n    /**\n     * Hash of the block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash hash = 1;\n     */\n    hash?: BlockHash;\n    /**\n     * Absolute height of the block, height 0 is the genesis block.\n     *\n     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight height = 2;\n     */\n    height?: AbsoluteBlockHeight;\n}\n/**\n * Request the ancestors for the given block.\n *\n * @generated from protobuf message concordium.v2.AncestorsRequest\n */\nexport interface AncestorsRequest {\n    /**\n     * The block to get ancestors of.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;\n     */\n    blockHash?: BlockHashInput;\n    /**\n     * The maximum number of ancestors returned.\n     *\n     * @generated from protobuf field: uint64 amount = 2;\n     */\n    amount: bigint;\n}\n/**\n * Request for getting the source of a smart contract module.\n *\n * @generated from protobuf message concordium.v2.ModuleSourceRequest\n */\nexport interface ModuleSourceRequest {\n    /**\n     * The block to be used for the query.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;\n     */\n    blockHash?: BlockHashInput;\n    /**\n     * The reference of the module.\n     *\n     * @generated from protobuf field: concordium.v2.ModuleRef module_ref = 2;\n     */\n    moduleRef?: ModuleRef;\n}\n/**\n * Address of a smart contract instance.\n *\n * @generated from protobuf message concordium.v2.ContractAddress\n */\nexport interface ContractAddress {\n    /**\n     * The index of the smart contract.\n     *\n     * @generated from protobuf field: uint64 index = 1;\n     */\n    index: bigint;\n    /**\n     * The subindex of the smart contract instance.\n     * Currently not used, so it is always 0.\n     *\n     * @generated from protobuf field: uint64 subindex = 2;\n     */\n    subindex: bigint;\n}\n/**\n * Request for getting information about a smart contract instance.\n *\n * @generated from protobuf message concordium.v2.InstanceInfoRequest\n */\nexport interface InstanceInfoRequest {\n    /**\n     * The block to be used for the query.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;\n     */\n    blockHash?: BlockHashInput;\n    /**\n     * The address of the smart contract instance.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress address = 2;\n     */\n    address?: ContractAddress;\n}\n/**\n * Information about a smart contract instance.\n *\n * @generated from protobuf message concordium.v2.InstanceInfo\n */\nexport interface InstanceInfo {\n    /**\n     * @generated from protobuf oneof: version\n     */\n    version: {\n        oneofKind: \"v0\";\n        /**\n         * @generated from protobuf field: concordium.v2.InstanceInfo.V0 v0 = 1;\n         */\n        v0: InstanceInfo_V0;\n    } | {\n        oneofKind: \"v1\";\n        /**\n         * @generated from protobuf field: concordium.v2.InstanceInfo.V1 v1 = 2;\n         */\n        v1: InstanceInfo_V1;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Version 0 smart contract instance information.\n *\n * @generated from protobuf message concordium.v2.InstanceInfo.V0\n */\nexport interface InstanceInfo_V0 {\n    /**\n     * The state of the instance.\n     *\n     * @generated from protobuf field: concordium.v2.ContractStateV0 model = 1;\n     */\n    model?: ContractStateV0;\n    /**\n     * The account address which deployed the instance.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress owner = 2;\n     */\n    owner?: AccountAddress;\n    /**\n     * The amount of CCD tokens in the balance of the instance.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 3;\n     */\n    amount?: Amount;\n    /**\n     * A list of endpoints exposed by the instance.\n     *\n     * @generated from protobuf field: repeated concordium.v2.ReceiveName methods = 4;\n     */\n    methods: ReceiveName[];\n    /**\n     * The name of the smart contract of the instance.\n     *\n     * @generated from protobuf field: concordium.v2.InitName name = 5;\n     */\n    name?: InitName;\n    /**\n     * The module reference for the smart contract module of the instance.\n     *\n     * @generated from protobuf field: concordium.v2.ModuleRef source_module = 6;\n     */\n    sourceModule?: ModuleRef;\n}\n/**\n * Version 1 smart contract instance information.\n *\n * @generated from protobuf message concordium.v2.InstanceInfo.V1\n */\nexport interface InstanceInfo_V1 {\n    /**\n     * The account address which deployed the instance.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress owner = 2;\n     */\n    owner?: AccountAddress;\n    /**\n     * The amount of CCD tokens in the balance of the instance.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 3;\n     */\n    amount?: Amount;\n    /**\n     * A list of endpoints exposed by the instance.\n     *\n     * @generated from protobuf field: repeated concordium.v2.ReceiveName methods = 4;\n     */\n    methods: ReceiveName[];\n    /**\n     * The name of the smart contract of the instance.\n     *\n     * @generated from protobuf field: concordium.v2.InitName name = 5;\n     */\n    name?: InitName;\n    /**\n     * The module reference for the smart contract module of the instance.\n     *\n     * @generated from protobuf field: concordium.v2.ModuleRef source_module = 6;\n     */\n    sourceModule?: ModuleRef;\n}\n/**\n * A smart contract instance key-value pair.\n *\n * @generated from protobuf message concordium.v2.InstanceStateKVPair\n */\nexport interface InstanceStateKVPair {\n    /**\n     * @generated from protobuf field: bytes key = 1;\n     */\n    key: Uint8Array;\n    /**\n     * @generated from protobuf field: bytes value = 2;\n     */\n    value: Uint8Array;\n}\n/**\n * Request for a specific key of a smart contract instance state.\n *\n * @generated from protobuf message concordium.v2.InstanceStateLookupRequest\n */\nexport interface InstanceStateLookupRequest {\n    /**\n     * The block to be used for the query.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;\n     */\n    blockHash?: BlockHashInput;\n    /**\n     * The address of the smart contract instance.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress address = 2;\n     */\n    address?: ContractAddress;\n    /**\n     * Key to look up. If the instance is a V0 instance then this will not be used.\n     *\n     * @generated from protobuf field: bytes key = 3;\n     */\n    key: Uint8Array;\n}\n/**\n * Value at the requested key of a smart contract instance state. For V0\n * contracts this will always be the entire state of the contract.\n *\n * @generated from protobuf message concordium.v2.InstanceStateValueAtKey\n */\nexport interface InstanceStateValueAtKey {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * The receive name of a smart contract function. Expected format:\n * `<contract_name>.<func_name>`. It must only consist of atmost 100 ASCII\n * alphanumeric or punctuation characters, and must contain a '.'.\n *\n * @generated from protobuf message concordium.v2.ReceiveName\n */\nexport interface ReceiveName {\n    /**\n     * @generated from protobuf field: string value = 1;\n     */\n    value: string;\n}\n/**\n * The init name of a smart contract function. Expected format:\n * `init_<contract_name>`. It must only consist of atmost 100 ASCII alphanumeric\n * or punctuation characters, must not contain a '.' and must start with\n * 'init_'.\n *\n * @generated from protobuf message concordium.v2.InitName\n */\nexport interface InitName {\n    /**\n     * @generated from protobuf field: string value = 1;\n     */\n    value: string;\n}\n/**\n * Parameter to a smart contract initialization or invocation.\n *\n * @generated from protobuf message concordium.v2.Parameter\n */\nexport interface Parameter {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * A smart contract v0 state.\n *\n * @generated from protobuf message concordium.v2.ContractStateV0\n */\nexport interface ContractStateV0 {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Status of a block item known to the node.\n *\n * @generated from protobuf message concordium.v2.BlockItemStatus\n */\nexport interface BlockItemStatus {\n    /**\n     * @generated from protobuf oneof: status\n     */\n    status: {\n        oneofKind: \"received\";\n        /**\n         * Block item is received, but not yet in any blocks.\n         *\n         * @generated from protobuf field: concordium.v2.Empty received = 1;\n         */\n        received: Empty;\n    } | {\n        oneofKind: \"committed\";\n        /**\n         * Block item is committed to one or more blocks. The outcomes are listed\n         * for each block. Note that in the vast majority of cases the outcome of a\n         * transaction should not be dependent on the block it is in, but this\n         * can in principle happen.\n         *\n         * @generated from protobuf field: concordium.v2.BlockItemStatus.Committed committed = 2;\n         */\n        committed: BlockItemStatus_Committed;\n    } | {\n        oneofKind: \"finalized\";\n        /**\n         * Block item is finalized in the given block, with the given summary.\n         *\n         * @generated from protobuf field: concordium.v2.BlockItemStatus.Finalized finalized = 3;\n         */\n        finalized: BlockItemStatus_Finalized;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.BlockItemStatus.Committed\n */\nexport interface BlockItemStatus_Committed {\n    /**\n     * @generated from protobuf field: repeated concordium.v2.BlockItemSummaryInBlock outcomes = 1;\n     */\n    outcomes: BlockItemSummaryInBlock[];\n}\n/**\n * @generated from protobuf message concordium.v2.BlockItemStatus.Finalized\n */\nexport interface BlockItemStatus_Finalized {\n    /**\n     * @generated from protobuf field: concordium.v2.BlockItemSummaryInBlock outcome = 1;\n     */\n    outcome?: BlockItemSummaryInBlock;\n}\n/**\n * A block item summary together with a block hash. Used in BlockItemStatus.\n *\n * @generated from protobuf message concordium.v2.BlockItemSummaryInBlock\n */\nexport interface BlockItemSummaryInBlock {\n    /**\n     * The block hash.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash block_hash = 1;\n     */\n    blockHash?: BlockHash;\n    /**\n     * The block item summary.\n     *\n     * @generated from protobuf field: concordium.v2.BlockItemSummary outcome = 2;\n     */\n    outcome?: BlockItemSummary;\n}\n/**\n * Energy is used to count exact execution cost.\n * This cost is then converted to CCD amounts.\n *\n * @generated from protobuf message concordium.v2.Energy\n */\nexport interface Energy {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * A number representing a slot for baking a block.\n *\n * @generated from protobuf message concordium.v2.Slot\n */\nexport interface Slot {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * The response for getNextAccountSequenceNumber.\n *\n * @generated from protobuf message concordium.v2.NextAccountSequenceNumber\n */\nexport interface NextAccountSequenceNumber {\n    /**\n     * The best guess for the available account sequence number.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber sequence_number = 1;\n     */\n    sequenceNumber?: SequenceNumber;\n    /**\n     * Whether the guess relies on any non-finalized transactions. If true all of the relevant transactions are finalized.\n     *\n     * @generated from protobuf field: bool all_final = 2;\n     */\n    allFinal: boolean;\n}\n/**\n * A duration of milliseconds.\n *\n * @generated from protobuf message concordium.v2.Duration\n */\nexport interface Duration {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * A reason for why a transaction was rejected. Rejected means included in a\n * block, but the desired action was not achieved. The only effect of a\n * rejected transaction is payment.\n *\n * @generated from protobuf message concordium.v2.RejectReason\n */\nexport interface RejectReason {\n    /**\n     * @generated from protobuf oneof: reason\n     */\n    reason: {\n        oneofKind: \"moduleNotWf\";\n        /**\n         * Raised while validating a Wasm module that is not well formed.\n         *\n         * @generated from protobuf field: concordium.v2.Empty module_not_wf = 1;\n         */\n        moduleNotWf: Empty;\n    } | {\n        oneofKind: \"moduleHashAlreadyExists\";\n        /**\n         * The smart contract module hash already exists.\n         *\n         * @generated from protobuf field: concordium.v2.ModuleRef module_hash_already_exists = 2;\n         */\n        moduleHashAlreadyExists: ModuleRef;\n    } | {\n        oneofKind: \"invalidAccountReference\";\n        /**\n         * Account does not exist.\n         *\n         * @generated from protobuf field: concordium.v2.AccountAddress invalid_account_reference = 3;\n         */\n        invalidAccountReference: AccountAddress;\n    } | {\n        oneofKind: \"invalidInitMethod\";\n        /**\n         * Reference to a non-existing contract init method.\n         *\n         * @generated from protobuf field: concordium.v2.RejectReason.InvalidInitMethod invalid_init_method = 4;\n         */\n        invalidInitMethod: RejectReason_InvalidInitMethod;\n    } | {\n        oneofKind: \"invalidReceiveMethod\";\n        /**\n         * Reference to a non-existing contract receive method.\n         *\n         * @generated from protobuf field: concordium.v2.RejectReason.InvalidReceiveMethod invalid_receive_method = 5;\n         */\n        invalidReceiveMethod: RejectReason_InvalidReceiveMethod;\n    } | {\n        oneofKind: \"invalidModuleReference\";\n        /**\n         * Reference to a non-existing smart contract module.\n         *\n         * @generated from protobuf field: concordium.v2.ModuleRef invalid_module_reference = 6;\n         */\n        invalidModuleReference: ModuleRef;\n    } | {\n        oneofKind: \"invalidContractAddress\";\n        /**\n         * Contract instance does not exist.\n         *\n         * @generated from protobuf field: concordium.v2.ContractAddress invalid_contract_address = 7;\n         */\n        invalidContractAddress: ContractAddress;\n    } | {\n        oneofKind: \"runtimeFailure\";\n        /**\n         * Runtime exception occurred when running either the init or receive\n         * method.\n         *\n         * @generated from protobuf field: concordium.v2.Empty runtime_failure = 8;\n         */\n        runtimeFailure: Empty;\n    } | {\n        oneofKind: \"amountTooLarge\";\n        /**\n         * When one wishes to transfer an amount from A to B but there\n         * are not enough funds on account/contract A to make this\n         * possible. The data are the from address and the amount to transfer.\n         *\n         * @generated from protobuf field: concordium.v2.RejectReason.AmountTooLarge amount_too_large = 9;\n         */\n        amountTooLarge: RejectReason_AmountTooLarge;\n    } | {\n        oneofKind: \"serializationFailure\";\n        /**\n         * Serialization of the body failed.\n         *\n         * @generated from protobuf field: concordium.v2.Empty serialization_failure = 10;\n         */\n        serializationFailure: Empty;\n    } | {\n        oneofKind: \"outOfEnergy\";\n        /**\n         * We ran of out energy to process this transaction.\n         *\n         * @generated from protobuf field: concordium.v2.Empty out_of_energy = 11;\n         */\n        outOfEnergy: Empty;\n    } | {\n        oneofKind: \"rejectedInit\";\n        /**\n         * Rejected due to contract logic in init function of a contract.\n         *\n         * @generated from protobuf field: concordium.v2.RejectReason.RejectedInit rejected_init = 12;\n         */\n        rejectedInit: RejectReason_RejectedInit;\n    } | {\n        oneofKind: \"rejectedReceive\";\n        /**\n         * Rejected due to contract logic in receive function of a contract.\n         *\n         * @generated from protobuf field: concordium.v2.RejectReason.RejectedReceive rejected_receive = 13;\n         */\n        rejectedReceive: RejectReason_RejectedReceive;\n    } | {\n        oneofKind: \"invalidProof\";\n        /**\n         * Proof that the baker owns relevant private keys is not valid.\n         *\n         * @generated from protobuf field: concordium.v2.Empty invalid_proof = 14;\n         */\n        invalidProof: Empty;\n    } | {\n        oneofKind: \"alreadyABaker\";\n        /**\n         * Tried to add baker for an account that already has a baker.\n         *\n         * @generated from protobuf field: concordium.v2.BakerId already_a_baker = 15;\n         */\n        alreadyABaker: BakerId;\n    } | {\n        oneofKind: \"notABaker\";\n        /**\n         * Tried to remove a baker for an account that has no baker.\n         *\n         * @generated from protobuf field: concordium.v2.AccountAddress not_a_baker = 16;\n         */\n        notABaker: AccountAddress;\n    } | {\n        oneofKind: \"insufficientBalanceForBakerStake\";\n        /**\n         * The amount on the account was insufficient to cover the proposed stake.\n         *\n         * @generated from protobuf field: concordium.v2.Empty insufficient_balance_for_baker_stake = 17;\n         */\n        insufficientBalanceForBakerStake: Empty;\n    } | {\n        oneofKind: \"stakeUnderMinimumThresholdForBaking\";\n        /**\n         * The amount provided is under the threshold required for becoming a baker.\n         *\n         * @generated from protobuf field: concordium.v2.Empty stake_under_minimum_threshold_for_baking = 18;\n         */\n        stakeUnderMinimumThresholdForBaking: Empty;\n    } | {\n        oneofKind: \"bakerInCooldown\";\n        /**\n         * The change could not be made because the baker is in cooldown for\n         * another change.\n         *\n         * @generated from protobuf field: concordium.v2.Empty baker_in_cooldown = 19;\n         */\n        bakerInCooldown: Empty;\n    } | {\n        oneofKind: \"duplicateAggregationKey\";\n        /**\n         * A baker with the given aggregation key already exists.\n         *\n         * @generated from protobuf field: concordium.v2.BakerAggregationVerifyKey duplicate_aggregation_key = 20;\n         */\n        duplicateAggregationKey: BakerAggregationVerifyKey;\n    } | {\n        oneofKind: \"nonExistentCredentialId\";\n        /**\n         * Encountered credential ID that does not exist.\n         *\n         * @generated from protobuf field: concordium.v2.Empty non_existent_credential_id = 21;\n         */\n        nonExistentCredentialId: Empty;\n    } | {\n        oneofKind: \"keyIndexAlreadyInUse\";\n        /**\n         * Attempted to add an account key to a key index already in use.\n         *\n         * @generated from protobuf field: concordium.v2.Empty key_index_already_in_use = 22;\n         */\n        keyIndexAlreadyInUse: Empty;\n    } | {\n        oneofKind: \"invalidAccountThreshold\";\n        /**\n         * When the account threshold is updated, it must not exceed the amount of\n         * existing keys.\n         *\n         * @generated from protobuf field: concordium.v2.Empty invalid_account_threshold = 23;\n         */\n        invalidAccountThreshold: Empty;\n    } | {\n        oneofKind: \"invalidCredentialKeySignThreshold\";\n        /**\n         * When the credential key threshold is updated, it must not exceed the\n         * amount of existing keys.\n         *\n         * @generated from protobuf field: concordium.v2.Empty invalid_credential_key_sign_threshold = 24;\n         */\n        invalidCredentialKeySignThreshold: Empty;\n    } | {\n        oneofKind: \"invalidEncryptedAmountTransferProof\";\n        /**\n         * Proof for an encrypted amount transfer did not validate.\n         *\n         * @generated from protobuf field: concordium.v2.Empty invalid_encrypted_amount_transfer_proof = 25;\n         */\n        invalidEncryptedAmountTransferProof: Empty;\n    } | {\n        oneofKind: \"invalidTransferToPublicProof\";\n        /**\n         * Proof for a secret to public transfer did not validate.\n         *\n         * @generated from protobuf field: concordium.v2.Empty invalid_transfer_to_public_proof = 26;\n         */\n        invalidTransferToPublicProof: Empty;\n    } | {\n        oneofKind: \"encryptedAmountSelfTransfer\";\n        /**\n         * Account tried to transfer an encrypted amount to itself, that's not\n         * allowed.\n         *\n         * @generated from protobuf field: concordium.v2.AccountAddress encrypted_amount_self_transfer = 27;\n         */\n        encryptedAmountSelfTransfer: AccountAddress;\n    } | {\n        oneofKind: \"invalidIndexOnEncryptedTransfer\";\n        /**\n         * The provided index is below the start index or above `startIndex +\n         * length incomingAmounts`.\n         *\n         * @generated from protobuf field: concordium.v2.Empty invalid_index_on_encrypted_transfer = 28;\n         */\n        invalidIndexOnEncryptedTransfer: Empty;\n    } | {\n        oneofKind: \"zeroScheduledAmount\";\n        /**\n         * The transfer with schedule is going to send 0 tokens.\n         *\n         * @generated from protobuf field: concordium.v2.Empty zero_scheduledAmount = 29;\n         */\n        zeroScheduledAmount: Empty;\n    } | {\n        oneofKind: \"nonIncreasingSchedule\";\n        /**\n         * The transfer with schedule has a non strictly increasing schedule.\n         *\n         * @generated from protobuf field: concordium.v2.Empty non_increasing_schedule = 30;\n         */\n        nonIncreasingSchedule: Empty;\n    } | {\n        oneofKind: \"firstScheduledReleaseExpired\";\n        /**\n         * The first scheduled release in a transfer with schedule has already\n         * expired.\n         *\n         * @generated from protobuf field: concordium.v2.Empty first_scheduled_release_expired = 31;\n         */\n        firstScheduledReleaseExpired: Empty;\n    } | {\n        oneofKind: \"scheduledSelfTransfer\";\n        /**\n         * Account tried to transfer with schedule to itself, that's not allowed.\n         *\n         * @generated from protobuf field: concordium.v2.AccountAddress scheduled_self_transfer = 32;\n         */\n        scheduledSelfTransfer: AccountAddress;\n    } | {\n        oneofKind: \"invalidCredentials\";\n        /**\n         * At least one of the credentials was either malformed or its proof was\n         * incorrect.\n         *\n         * @generated from protobuf field: concordium.v2.Empty invalid_credentials = 33;\n         */\n        invalidCredentials: Empty;\n    } | {\n        oneofKind: \"duplicateCredIds\";\n        /**\n         * Some of the credential IDs already exist or are duplicated in the\n         * transaction.\n         *\n         * @generated from protobuf field: concordium.v2.RejectReason.DuplicateCredIds duplicate_cred_ids = 34;\n         */\n        duplicateCredIds: RejectReason_DuplicateCredIds;\n    } | {\n        oneofKind: \"nonExistentCredIds\";\n        /**\n         * A credential id that was to be removed is not part of the account.\n         *\n         * @generated from protobuf field: concordium.v2.RejectReason.NonExistentCredIds non_existent_cred_ids = 35;\n         */\n        nonExistentCredIds: RejectReason_NonExistentCredIds;\n    } | {\n        oneofKind: \"removeFirstCredential\";\n        /**\n         * Attemp to remove the first credential.\n         *\n         * @generated from protobuf field: concordium.v2.Empty remove_first_credential = 36;\n         */\n        removeFirstCredential: Empty;\n    } | {\n        oneofKind: \"credentialHolderDidNotSign\";\n        /**\n         * The credential holder of the keys to be updated did not sign the\n         * transaction.\n         *\n         * @generated from protobuf field: concordium.v2.Empty credential_holder_did_not_sign = 37;\n         */\n        credentialHolderDidNotSign: Empty;\n    } | {\n        oneofKind: \"notAllowedMultipleCredentials\";\n        /**\n         * Account is not allowed to have multiple credentials because it contains\n         * a non-zero encrypted transfer.\n         *\n         * @generated from protobuf field: concordium.v2.Empty not_allowed_multiple_credentials = 38;\n         */\n        notAllowedMultipleCredentials: Empty;\n    } | {\n        oneofKind: \"notAllowedToReceiveEncrypted\";\n        /**\n         * The account is not allowed to receive encrypted transfers because it has\n         * multiple credentials.\n         *\n         * @generated from protobuf field: concordium.v2.Empty not_allowed_to_receive_encrypted = 39;\n         */\n        notAllowedToReceiveEncrypted: Empty;\n    } | {\n        oneofKind: \"notAllowedToHandleEncrypted\";\n        /**\n         * The account is not allowed to send encrypted transfers (or transfer\n         * from/to public to/from encrypted).\n         *\n         * @generated from protobuf field: concordium.v2.Empty not_allowed_to_handle_encrypted = 40;\n         */\n        notAllowedToHandleEncrypted: Empty;\n    } | {\n        oneofKind: \"missingBakerAddParameters\";\n        /**\n         * A configure baker transaction is missing one or more arguments in order\n         * to add a baker.\n         *\n         * @generated from protobuf field: concordium.v2.Empty missing_baker_add_parameters = 41;\n         */\n        missingBakerAddParameters: Empty;\n    } | {\n        oneofKind: \"finalizationRewardCommissionNotInRange\";\n        /**\n         * Finalization reward commission is not in the valid range for a baker.\n         *\n         * @generated from protobuf field: concordium.v2.Empty finalization_reward_commission_not_in_range = 42;\n         */\n        finalizationRewardCommissionNotInRange: Empty;\n    } | {\n        oneofKind: \"bakingRewardCommissionNotInRange\";\n        /**\n         * Baking reward commission is not in the valid range for a baker.\n         *\n         * @generated from protobuf field: concordium.v2.Empty baking_reward_commission_not_in_range = 43;\n         */\n        bakingRewardCommissionNotInRange: Empty;\n    } | {\n        oneofKind: \"transactionFeeCommissionNotInRange\";\n        /**\n         * Transaction fee commission is not in the valid range for a baker.\n         *\n         * @generated from protobuf field: concordium.v2.Empty transaction_fee_commission_not_in_range = 44;\n         */\n        transactionFeeCommissionNotInRange: Empty;\n    } | {\n        oneofKind: \"alreadyADelegator\";\n        /**\n         * Tried to add baker for an account that already has a delegator.\n         *\n         * @generated from protobuf field: concordium.v2.Empty already_a_delegator = 45;\n         */\n        alreadyADelegator: Empty;\n    } | {\n        oneofKind: \"insufficientBalanceForDelegationStake\";\n        /**\n         * The amount on the account was insufficient to cover the proposed stake.\n         *\n         * @generated from protobuf field: concordium.v2.Empty insufficient_balance_for_delegation_stake = 46;\n         */\n        insufficientBalanceForDelegationStake: Empty;\n    } | {\n        oneofKind: \"missingDelegationAddParameters\";\n        /**\n         * A configure delegation transaction is missing one or more arguments in\n         * order to add a delegator.\n         *\n         * @generated from protobuf field: concordium.v2.Empty missing_delegation_add_parameters = 47;\n         */\n        missingDelegationAddParameters: Empty;\n    } | {\n        oneofKind: \"insufficientDelegationStake\";\n        /**\n         * Delegation stake when adding a delegator was 0.\n         *\n         * @generated from protobuf field: concordium.v2.Empty insufficient_delegation_stake = 48;\n         */\n        insufficientDelegationStake: Empty;\n    } | {\n        oneofKind: \"delegatorInCooldown\";\n        /**\n         * Account is not a delegation account.\n         *\n         * @generated from protobuf field: concordium.v2.Empty delegator_in_cooldown = 49;\n         */\n        delegatorInCooldown: Empty;\n    } | {\n        oneofKind: \"notADelegator\";\n        /**\n         * Account is not a delegation account.\n         *\n         * @generated from protobuf field: concordium.v2.AccountAddress not_a_delegator = 50;\n         */\n        notADelegator: AccountAddress;\n    } | {\n        oneofKind: \"delegationTargetNotABaker\";\n        /**\n         * Delegation target is not a baker\n         *\n         * @generated from protobuf field: concordium.v2.BakerId delegation_target_not_a_baker = 51;\n         */\n        delegationTargetNotABaker: BakerId;\n    } | {\n        oneofKind: \"stakeOverMaximumThresholdForPool\";\n        /**\n         * The amount would result in pool capital higher than the maximum\n         * threshold.\n         *\n         * @generated from protobuf field: concordium.v2.Empty stake_over_maximum_threshold_for_pool = 52;\n         */\n        stakeOverMaximumThresholdForPool: Empty;\n    } | {\n        oneofKind: \"poolWouldBecomeOverDelegated\";\n        /**\n         * The amount would result in pool with a too high fraction of delegated\n         * capital.\n         *\n         * @generated from protobuf field: concordium.v2.Empty pool_would_become_over_delegated = 53;\n         */\n        poolWouldBecomeOverDelegated: Empty;\n    } | {\n        oneofKind: \"poolClosed\";\n        /**\n         * The pool is not open to delegators.\n         *\n         * @generated from protobuf field: concordium.v2.Empty pool_closed = 54;\n         */\n        poolClosed: Empty;\n    } | {\n        oneofKind: \"nonExistentTokenId\";\n        /**\n         * The provided identifier does not match a token currently on chain.\n         * Introduced in protocol version 9.\n         *\n         * @generated from protobuf field: concordium.v2.plt.TokenId non_existent_token_id = 55;\n         */\n        nonExistentTokenId: TokenId;\n    } | {\n        oneofKind: \"tokenUpdateTransactionFailed\";\n        /**\n         * The token update transaction failed.\n         * Introduced in protocol version 9.\n         *\n         * @generated from protobuf field: concordium.v2.plt.TokenModuleRejectReason token_update_transaction_failed = 56;\n         */\n        tokenUpdateTransactionFailed: TokenModuleRejectReason;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.RejectReason.InvalidInitMethod\n */\nexport interface RejectReason_InvalidInitMethod {\n    /**\n     * @generated from protobuf field: concordium.v2.ModuleRef module_ref = 1;\n     */\n    moduleRef?: ModuleRef;\n    /**\n     * @generated from protobuf field: concordium.v2.InitName init_name = 2;\n     */\n    initName?: InitName;\n}\n/**\n * @generated from protobuf message concordium.v2.RejectReason.InvalidReceiveMethod\n */\nexport interface RejectReason_InvalidReceiveMethod {\n    /**\n     * @generated from protobuf field: concordium.v2.ModuleRef module_ref = 1;\n     */\n    moduleRef?: ModuleRef;\n    /**\n     * @generated from protobuf field: concordium.v2.ReceiveName receive_name = 2;\n     */\n    receiveName?: ReceiveName;\n}\n/**\n * @generated from protobuf message concordium.v2.RejectReason.AmountTooLarge\n */\nexport interface RejectReason_AmountTooLarge {\n    /**\n     * @generated from protobuf field: concordium.v2.Address address = 1;\n     */\n    address?: Address;\n    /**\n     * @generated from protobuf field: concordium.v2.Amount amount = 2;\n     */\n    amount?: Amount;\n}\n/**\n * @generated from protobuf message concordium.v2.RejectReason.RejectedInit\n */\nexport interface RejectReason_RejectedInit {\n    /**\n     * @generated from protobuf field: int32 reject_reason = 1;\n     */\n    rejectReason: number;\n}\n/**\n * @generated from protobuf message concordium.v2.RejectReason.RejectedReceive\n */\nexport interface RejectReason_RejectedReceive {\n    /**\n     * @generated from protobuf field: int32 reject_reason = 1;\n     */\n    rejectReason: number;\n    /**\n     * @generated from protobuf field: concordium.v2.ContractAddress contract_address = 2;\n     */\n    contractAddress?: ContractAddress;\n    /**\n     * @generated from protobuf field: concordium.v2.ReceiveName receive_name = 3;\n     */\n    receiveName?: ReceiveName;\n    /**\n     * @generated from protobuf field: concordium.v2.Parameter parameter = 4;\n     */\n    parameter?: Parameter;\n}\n/**\n * @generated from protobuf message concordium.v2.RejectReason.DuplicateCredIds\n */\nexport interface RejectReason_DuplicateCredIds {\n    /**\n     * @generated from protobuf field: repeated concordium.v2.CredentialRegistrationId ids = 1;\n     */\n    ids: CredentialRegistrationId[];\n}\n/**\n * @generated from protobuf message concordium.v2.RejectReason.NonExistentCredIds\n */\nexport interface RejectReason_NonExistentCredIds {\n    /**\n     * @generated from protobuf field: repeated concordium.v2.CredentialRegistrationId ids = 1;\n     */\n    ids: CredentialRegistrationId[];\n}\n/**\n * Data generated as part of initializing a single contract instance.\n *\n * @generated from protobuf message concordium.v2.ContractInitializedEvent\n */\nexport interface ContractInitializedEvent {\n    /**\n     * Contract version.\n     *\n     * @generated from protobuf field: concordium.v2.ContractVersion contract_version = 1;\n     */\n    contractVersion: ContractVersion;\n    /**\n     * Module with the source code of the contract.\n     *\n     * @generated from protobuf field: concordium.v2.ModuleRef origin_ref = 2;\n     */\n    originRef?: ModuleRef;\n    /**\n     * The newly assigned address of the contract.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress address = 3;\n     */\n    address?: ContractAddress;\n    /**\n     * The amount the instance was initialized with.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 4;\n     */\n    amount?: Amount;\n    /**\n     * The name of the contract.\n     *\n     * @generated from protobuf field: concordium.v2.InitName init_name = 5;\n     */\n    initName?: InitName;\n    /**\n     * Any contract events that might have been genereated by the contract initialization.\n     *\n     * @generated from protobuf field: repeated concordium.v2.ContractEvent events = 6;\n     */\n    events: ContractEvent[];\n    /**\n     * The parameter passed to the initializer.\n     *\n     * @generated from protobuf field: concordium.v2.Parameter parameter = 7;\n     */\n    parameter?: Parameter;\n}\n/**\n * An event generated by a smart contract.\n *\n * @generated from protobuf message concordium.v2.ContractEvent\n */\nexport interface ContractEvent {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Data generated as part of updating a single contract instance.\n * In general a single Update transaction will\n * generate one or more of these events, together with possibly some transfers.\n *\n * @generated from protobuf message concordium.v2.InstanceUpdatedEvent\n */\nexport interface InstanceUpdatedEvent {\n    /**\n     * Contract version.\n     *\n     * @generated from protobuf field: concordium.v2.ContractVersion contract_version = 1;\n     */\n    contractVersion: ContractVersion;\n    /**\n     * Address of the affected instance.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress address = 2;\n     */\n    address?: ContractAddress;\n    /**\n     * The origin of the message to the smart contract. This can be\n     * either an account or a smart contract.\n     *\n     * @generated from protobuf field: concordium.v2.Address instigator = 3;\n     */\n    instigator?: Address;\n    /**\n     * The amount the method was invoked with.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 4;\n     */\n    amount?: Amount;\n    /**\n     * The parameter passed to the method.\n     *\n     * @generated from protobuf field: concordium.v2.Parameter parameter = 5;\n     */\n    parameter?: Parameter;\n    /**\n     * The name of the method that was executed.\n     *\n     * @generated from protobuf field: concordium.v2.ReceiveName receive_name = 6;\n     */\n    receiveName?: ReceiveName;\n    /**\n     * Any contract events that might have been generated by the contract execution.\n     *\n     * @generated from protobuf field: repeated concordium.v2.ContractEvent events = 7;\n     */\n    events: ContractEvent[];\n}\n/**\n * Effects produced by successful smart contract invocations.\n * A single invocation will produce a sequence of these effects.\n *\n * @generated from protobuf message concordium.v2.ContractTraceElement\n */\nexport interface ContractTraceElement {\n    /**\n     * @generated from protobuf oneof: element\n     */\n    element: {\n        oneofKind: \"updated\";\n        /**\n         * A contract instance was updated.\n         *\n         * @generated from protobuf field: concordium.v2.InstanceUpdatedEvent updated = 1;\n         */\n        updated: InstanceUpdatedEvent;\n    } | {\n        oneofKind: \"transferred\";\n        /**\n         * A contract transferred an amount to an account.\n         *\n         * @generated from protobuf field: concordium.v2.ContractTraceElement.Transferred transferred = 2;\n         */\n        transferred: ContractTraceElement_Transferred;\n    } | {\n        oneofKind: \"interrupted\";\n        /**\n         * A contract was interrupted.\n         * This occurs when a contract invokes another contract or makes a transfer to an account.\n         *\n         * @generated from protobuf field: concordium.v2.ContractTraceElement.Interrupted interrupted = 3;\n         */\n        interrupted: ContractTraceElement_Interrupted;\n    } | {\n        oneofKind: \"resumed\";\n        /**\n         * A previously interrupted contract was resumed.\n         *\n         * @generated from protobuf field: concordium.v2.ContractTraceElement.Resumed resumed = 4;\n         */\n        resumed: ContractTraceElement_Resumed;\n    } | {\n        oneofKind: \"upgraded\";\n        /**\n         * A contract was upgraded.\n         *\n         * @generated from protobuf field: concordium.v2.ContractTraceElement.Upgraded upgraded = 5;\n         */\n        upgraded: ContractTraceElement_Upgraded;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * A contract transferred an amount to an account.\n *\n * @generated from protobuf message concordium.v2.ContractTraceElement.Transferred\n */\nexport interface ContractTraceElement_Transferred {\n    /**\n     * Sender contract.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress sender = 1;\n     */\n    sender?: ContractAddress;\n    /**\n     * Amount transferred.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 2;\n     */\n    amount?: Amount;\n    /**\n     * Receiver account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 3;\n     */\n    receiver?: AccountAddress;\n}\n/**\n * A contract was interrupted.\n * This occurs when a contract invokes another contract or makes a transfer to an account.\n *\n * @generated from protobuf message concordium.v2.ContractTraceElement.Interrupted\n */\nexport interface ContractTraceElement_Interrupted {\n    /**\n     * The contract interrupted.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress address = 1;\n     */\n    address?: ContractAddress;\n    /**\n     * The events generated up until the interruption.\n     *\n     * @generated from protobuf field: repeated concordium.v2.ContractEvent events = 2;\n     */\n    events: ContractEvent[];\n}\n/**\n * A previously interrupted contract was resumed.\n *\n * @generated from protobuf message concordium.v2.ContractTraceElement.Resumed\n */\nexport interface ContractTraceElement_Resumed {\n    /**\n     * The contract resumed.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress address = 1;\n     */\n    address?: ContractAddress;\n    /**\n     * Whether the action that caused the interruption (invoke contract or make transfer) was successful or not.\n     *\n     * @generated from protobuf field: bool success = 2;\n     */\n    success: boolean;\n}\n/**\n * A previously interrupted contract was resumed.\n *\n * @generated from protobuf message concordium.v2.ContractTraceElement.Upgraded\n */\nexport interface ContractTraceElement_Upgraded {\n    /**\n     * The that was upgraded.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress address = 1;\n     */\n    address?: ContractAddress;\n    /**\n     * The module from which the contract was upgraded.\n     *\n     * @generated from protobuf field: concordium.v2.ModuleRef from = 2;\n     */\n    from?: ModuleRef;\n    /**\n     * The module to which it was upgraded.\n     *\n     * @generated from protobuf field: concordium.v2.ModuleRef to = 3;\n     */\n    to?: ModuleRef;\n}\n/**\n * Result of a successful change of baker keys.\n *\n * @generated from protobuf message concordium.v2.BakerKeysEvent\n */\nexport interface BakerKeysEvent {\n    /**\n     * ID of the baker whose keys were changed.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * Account address of the baker.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 2;\n     */\n    account?: AccountAddress;\n    /**\n     * The new public key for verifying block signatures.\n     *\n     * @generated from protobuf field: concordium.v2.BakerSignatureVerifyKey sign_key = 3;\n     */\n    signKey?: BakerSignatureVerifyKey;\n    /**\n     * The new public key for verifying whether the baker won the block\n     * lottery.\n     *\n     * @generated from protobuf field: concordium.v2.BakerElectionVerifyKey election_key = 4;\n     */\n    electionKey?: BakerElectionVerifyKey;\n    /**\n     * The new public key for verifying finalization records.\n     *\n     * @generated from protobuf field: concordium.v2.BakerAggregationVerifyKey aggregation_key = 5;\n     */\n    aggregationKey?: BakerAggregationVerifyKey;\n}\n/**\n * @generated from protobuf message concordium.v2.BakerStakeUpdatedData\n */\nexport interface BakerStakeUpdatedData {\n    /**\n     * Affected baker.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * New stake.\n     *\n     * @generated from protobuf field: concordium.v2.Amount new_stake = 2;\n     */\n    newStake?: Amount;\n    /**\n     * A boolean which indicates whether it increased\n     * (`true`) or decreased (`false`).\n     *\n     * @generated from protobuf field: bool increased = 3;\n     */\n    increased: boolean;\n}\n/**\n * Event generated when one or more encrypted amounts are consumed from the account.\n *\n * @generated from protobuf message concordium.v2.EncryptedAmountRemovedEvent\n */\nexport interface EncryptedAmountRemovedEvent {\n    /**\n     * The affected account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;\n     */\n    account?: AccountAddress;\n    /**\n     * The new self encrypted amount on the affected account.\n     *\n     * @generated from protobuf field: concordium.v2.EncryptedAmount new_amount = 2;\n     */\n    newAmount?: EncryptedAmount;\n    /**\n     * The input encrypted amount that was removed.\n     *\n     * @generated from protobuf field: concordium.v2.EncryptedAmount input_amount = 3;\n     */\n    inputAmount?: EncryptedAmount;\n    /**\n     * The index indicating which amounts were used.\n     *\n     * @generated from protobuf field: uint64 up_to_index = 4;\n     */\n    upToIndex: bigint;\n}\n/**\n * Event generated when an account receives a new encrypted amount.\n *\n * @generated from protobuf message concordium.v2.NewEncryptedAmountEvent\n */\nexport interface NewEncryptedAmountEvent {\n    /**\n     * The account onto which the amount was added.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 1;\n     */\n    receiver?: AccountAddress;\n    /**\n     * The index the amount was assigned.\n     *\n     * @generated from protobuf field: uint64 new_index = 2;\n     */\n    newIndex: bigint;\n    /**\n     * The encrypted amount that was added.\n     *\n     * @generated from protobuf field: concordium.v2.EncryptedAmount encrypted_amount = 3;\n     */\n    encryptedAmount?: EncryptedAmount;\n}\n/**\n * @generated from protobuf message concordium.v2.EncryptedSelfAmountAddedEvent\n */\nexport interface EncryptedSelfAmountAddedEvent {\n    /**\n     * The affected account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;\n     */\n    account?: AccountAddress;\n    /**\n     * The new self encrypted amount of the account.\n     *\n     * @generated from protobuf field: concordium.v2.EncryptedAmount new_amount = 2;\n     */\n    newAmount?: EncryptedAmount;\n    /**\n     * The amount that was transferred from public to encrypted balance.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 3;\n     */\n    amount?: Amount;\n}\n/**\n * Data registered on the chain with a register data transaction.\n *\n * @generated from protobuf message concordium.v2.RegisteredData\n */\nexport interface RegisteredData {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Events that may result from the ConfigureBaker transaction.\n *\n * @generated from protobuf message concordium.v2.BakerEvent\n */\nexport interface BakerEvent {\n    /**\n     * @generated from protobuf oneof: event\n     */\n    event: {\n        oneofKind: \"bakerAdded\";\n        /**\n         * A baker was added.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerAdded baker_added = 1;\n         */\n        bakerAdded: BakerEvent_BakerAdded;\n    } | {\n        oneofKind: \"bakerRemoved\";\n        /**\n         * A baker was removed.\n         *\n         * @generated from protobuf field: concordium.v2.BakerId baker_removed = 2;\n         */\n        bakerRemoved: BakerId;\n    } | {\n        oneofKind: \"bakerStakeIncreased\";\n        /**\n         * The baker's stake was increased.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerStakeIncreased baker_stake_increased = 3;\n         */\n        bakerStakeIncreased: BakerEvent_BakerStakeIncreased;\n    } | {\n        oneofKind: \"bakerStakeDecreased\";\n        /**\n         * The baker's stake was decreased.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerStakeDecreased baker_stake_decreased = 4;\n         */\n        bakerStakeDecreased: BakerEvent_BakerStakeDecreased;\n    } | {\n        oneofKind: \"bakerRestakeEarningsUpdated\";\n        /**\n         * The baker's setting for restaking earnings was updated.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerRestakeEarningsUpdated baker_restake_earnings_updated = 5;\n         */\n        bakerRestakeEarningsUpdated: BakerEvent_BakerRestakeEarningsUpdated;\n    } | {\n        oneofKind: \"bakerKeysUpdated\";\n        /**\n         * Baker keys were updated.\n         *\n         * @generated from protobuf field: concordium.v2.BakerKeysEvent baker_keys_updated = 6;\n         */\n        bakerKeysUpdated: BakerKeysEvent;\n    } | {\n        oneofKind: \"bakerSetOpenStatus\";\n        /**\n         * The baker's open status was updated.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSetOpenStatus baker_set_open_status = 7;\n         */\n        bakerSetOpenStatus: BakerEvent_BakerSetOpenStatus;\n    } | {\n        oneofKind: \"bakerSetMetadataUrl\";\n        /**\n         * The baker's metadata URL was updated.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSetMetadataUrl baker_set_metadata_url = 8;\n         */\n        bakerSetMetadataUrl: BakerEvent_BakerSetMetadataUrl;\n    } | {\n        oneofKind: \"bakerSetTransactionFeeCommission\";\n        /**\n         * The baker's transaction fee commission was updated.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSetTransactionFeeCommission baker_set_transaction_fee_commission = 9;\n         */\n        bakerSetTransactionFeeCommission: BakerEvent_BakerSetTransactionFeeCommission;\n    } | {\n        oneofKind: \"bakerSetBakingRewardCommission\";\n        /**\n         * The baker's baking reward commission was updated.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSetBakingRewardCommission baker_set_baking_reward_commission = 10;\n         */\n        bakerSetBakingRewardCommission: BakerEvent_BakerSetBakingRewardCommission;\n    } | {\n        oneofKind: \"bakerSetFinalizationRewardCommission\";\n        /**\n         * The baker's finalization reward commission was updated.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission baker_set_finalization_reward_commission = 11;\n         */\n        bakerSetFinalizationRewardCommission: BakerEvent_BakerSetFinalizationRewardCommission;\n    } | {\n        oneofKind: \"delegationRemoved\";\n        /**\n         * An existing delegator was removed.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.DelegationRemoved delegation_removed = 12;\n         */\n        delegationRemoved: BakerEvent_DelegationRemoved;\n    } | {\n        oneofKind: \"bakerSuspended\";\n        /**\n         * The baker's account has been suspended.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerSuspended baker_suspended = 13;\n         */\n        bakerSuspended: BakerEvent_BakerSuspended;\n    } | {\n        oneofKind: \"bakerResumed\";\n        /**\n         * The baker's account has been suspended.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerResumed baker_resumed = 14;\n         */\n        bakerResumed: BakerEvent_BakerResumed;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * A baker was added.\n *\n * @generated from protobuf message concordium.v2.BakerEvent.BakerAdded\n */\nexport interface BakerEvent_BakerAdded {\n    /**\n     * The keys with which the baker registered.\n     *\n     * @generated from protobuf field: concordium.v2.BakerKeysEvent keys_event = 1;\n     */\n    keysEvent?: BakerKeysEvent;\n    /**\n     * The amount the account staked to become a baker. This amount is\n     * locked.\n     *\n     * @generated from protobuf field: concordium.v2.Amount stake = 2;\n     */\n    stake?: Amount;\n    /**\n     * Whether the baker will automatically add earnings to their stake or\n     * not.\n     *\n     * @generated from protobuf field: bool restake_earnings = 3;\n     */\n    restakeEarnings: boolean;\n}\n/**\n * Baker stake increased.\n *\n * @generated from protobuf message concordium.v2.BakerEvent.BakerStakeIncreased\n */\nexport interface BakerEvent_BakerStakeIncreased {\n    /**\n     * Baker's id.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * The new stake.\n     *\n     * @generated from protobuf field: concordium.v2.Amount new_stake = 2;\n     */\n    newStake?: Amount;\n}\n/**\n * @generated from protobuf message concordium.v2.BakerEvent.BakerStakeDecreased\n */\nexport interface BakerEvent_BakerStakeDecreased {\n    /**\n     * Baker's id.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * The new stake.\n     *\n     * @generated from protobuf field: concordium.v2.Amount new_stake = 2;\n     */\n    newStake?: Amount;\n}\n/**\n * @generated from protobuf message concordium.v2.BakerEvent.BakerRestakeEarningsUpdated\n */\nexport interface BakerEvent_BakerRestakeEarningsUpdated {\n    /**\n     * Baker's id.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * The new value of the flag.\n     *\n     * @generated from protobuf field: bool restake_earnings = 2;\n     */\n    restakeEarnings: boolean;\n}\n/**\n * Updated open status for a baker pool.\n *\n * @generated from protobuf message concordium.v2.BakerEvent.BakerSetOpenStatus\n */\nexport interface BakerEvent_BakerSetOpenStatus {\n    /**\n     * Baker's id.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * The new open status.\n     *\n     * @generated from protobuf field: concordium.v2.OpenStatus open_status = 2;\n     */\n    openStatus: OpenStatus;\n}\n/**\n * Updated metadata url for a baker pool.\n *\n * @generated from protobuf message concordium.v2.BakerEvent.BakerSetMetadataUrl\n */\nexport interface BakerEvent_BakerSetMetadataUrl {\n    /**\n     * Baker's id.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * The URL.\n     *\n     * @generated from protobuf field: string url = 2;\n     */\n    url: string;\n}\n/**\n * Updated transaction fee commission for a baker pool.\n *\n * @generated from protobuf message concordium.v2.BakerEvent.BakerSetTransactionFeeCommission\n */\nexport interface BakerEvent_BakerSetTransactionFeeCommission {\n    /**\n     * Baker's id.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * The transaction fee commission.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction transaction_fee_commission = 2;\n     */\n    transactionFeeCommission?: AmountFraction;\n}\n/**\n * Updated baking reward commission for baker pool\n *\n * @generated from protobuf message concordium.v2.BakerEvent.BakerSetBakingRewardCommission\n */\nexport interface BakerEvent_BakerSetBakingRewardCommission {\n    /**\n     * Baker's id\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * The baking reward commission\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction baking_reward_commission = 2;\n     */\n    bakingRewardCommission?: AmountFraction;\n}\n/**\n * Updated finalization reward commission for baker pool\n *\n * @generated from protobuf message concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission\n */\nexport interface BakerEvent_BakerSetFinalizationRewardCommission {\n    /**\n     * Baker's id\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * The finalization reward commission\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction finalization_reward_commission = 2;\n     */\n    finalizationRewardCommission?: AmountFraction;\n}\n/**\n * Removed an existing delegator.\n *\n * @generated from protobuf message concordium.v2.BakerEvent.DelegationRemoved\n */\nexport interface BakerEvent_DelegationRemoved {\n    /**\n     * Delegator's id.\n     *\n     * @generated from protobuf field: concordium.v2.DelegatorId delegator_id = 1;\n     */\n    delegatorId?: DelegatorId;\n}\n/**\n * A baker has been suspended.\n *\n * @generated from protobuf message concordium.v2.BakerEvent.BakerSuspended\n */\nexport interface BakerEvent_BakerSuspended {\n    /**\n     * Suspended baker's id\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n}\n/**\n * A baker has been resumed.\n *\n * @generated from protobuf message concordium.v2.BakerEvent.BakerResumed\n */\nexport interface BakerEvent_BakerResumed {\n    /**\n     * The resumed baker's id\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n}\n/**\n * The identifier for a delegator.\n *\n * @generated from protobuf message concordium.v2.DelegatorId\n */\nexport interface DelegatorId {\n    /**\n     * @generated from protobuf field: concordium.v2.AccountIndex id = 1;\n     */\n    id?: AccountIndex;\n}\n/**\n * @generated from protobuf message concordium.v2.DelegationEvent\n */\nexport interface DelegationEvent {\n    /**\n     * @generated from protobuf oneof: event\n     */\n    event: {\n        oneofKind: \"delegationStakeIncreased\";\n        /**\n         * The delegator's stake increased.\n         *\n         * @generated from protobuf field: concordium.v2.DelegationEvent.DelegationStakeIncreased delegation_stake_increased = 1;\n         */\n        delegationStakeIncreased: DelegationEvent_DelegationStakeIncreased;\n    } | {\n        oneofKind: \"delegationStakeDecreased\";\n        /**\n         * The delegator's stake decreased.\n         *\n         * @generated from protobuf field: concordium.v2.DelegationEvent.DelegationStakeDecreased delegation_stake_decreased = 2;\n         */\n        delegationStakeDecreased: DelegationEvent_DelegationStakeDecreased;\n    } | {\n        oneofKind: \"delegationSetRestakeEarnings\";\n        /**\n         * The delegator's restaking setting was updated.\n         *\n         * @generated from protobuf field: concordium.v2.DelegationEvent.DelegationSetRestakeEarnings delegation_set_restake_earnings = 3;\n         */\n        delegationSetRestakeEarnings: DelegationEvent_DelegationSetRestakeEarnings;\n    } | {\n        oneofKind: \"delegationSetDelegationTarget\";\n        /**\n         * The delegator's delegation target was updated.\n         *\n         * @generated from protobuf field: concordium.v2.DelegationEvent.DelegationSetDelegationTarget delegation_set_delegation_target = 4;\n         */\n        delegationSetDelegationTarget: DelegationEvent_DelegationSetDelegationTarget;\n    } | {\n        oneofKind: \"delegationAdded\";\n        /**\n         * A delegator was added.\n         *\n         * @generated from protobuf field: concordium.v2.DelegatorId delegation_added = 5;\n         */\n        delegationAdded: DelegatorId;\n    } | {\n        oneofKind: \"delegationRemoved\";\n        /**\n         * A delegator was removed.\n         *\n         * @generated from protobuf field: concordium.v2.DelegatorId delegation_removed = 6;\n         */\n        delegationRemoved: DelegatorId;\n    } | {\n        oneofKind: \"bakerRemoved\";\n        /**\n         * An existing baker was removed.\n         *\n         * @generated from protobuf field: concordium.v2.DelegationEvent.BakerRemoved baker_removed = 7;\n         */\n        bakerRemoved: DelegationEvent_BakerRemoved;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.DelegationEvent.DelegationStakeIncreased\n */\nexport interface DelegationEvent_DelegationStakeIncreased {\n    /**\n     * Delegator's id\n     *\n     * @generated from protobuf field: concordium.v2.DelegatorId delegator_id = 1;\n     */\n    delegatorId?: DelegatorId;\n    /**\n     * New stake\n     *\n     * @generated from protobuf field: concordium.v2.Amount new_stake = 2;\n     */\n    newStake?: Amount;\n}\n/**\n * @generated from protobuf message concordium.v2.DelegationEvent.DelegationStakeDecreased\n */\nexport interface DelegationEvent_DelegationStakeDecreased {\n    /**\n     * Delegator's id\n     *\n     * @generated from protobuf field: concordium.v2.DelegatorId delegator_id = 1;\n     */\n    delegatorId?: DelegatorId;\n    /**\n     * New stake\n     *\n     * @generated from protobuf field: concordium.v2.Amount new_stake = 2;\n     */\n    newStake?: Amount;\n}\n/**\n * @generated from protobuf message concordium.v2.DelegationEvent.DelegationSetRestakeEarnings\n */\nexport interface DelegationEvent_DelegationSetRestakeEarnings {\n    /**\n     * Delegator's id\n     *\n     * @generated from protobuf field: concordium.v2.DelegatorId delegator_id = 1;\n     */\n    delegatorId?: DelegatorId;\n    /**\n     * Whether earnings will be restaked\n     *\n     * @generated from protobuf field: bool restake_earnings = 2;\n     */\n    restakeEarnings: boolean;\n}\n/**\n * @generated from protobuf message concordium.v2.DelegationEvent.DelegationSetDelegationTarget\n */\nexport interface DelegationEvent_DelegationSetDelegationTarget {\n    /**\n     * Delegator's id\n     *\n     * @generated from protobuf field: concordium.v2.DelegatorId delegator_id = 1;\n     */\n    delegatorId?: DelegatorId;\n    /**\n     * New delegation target\n     *\n     * @generated from protobuf field: concordium.v2.DelegationTarget delegation_target = 2;\n     */\n    delegationTarget?: DelegationTarget;\n}\n/**\n * @generated from protobuf message concordium.v2.DelegationEvent.BakerRemoved\n */\nexport interface DelegationEvent_BakerRemoved {\n    /**\n     * Baker's id\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n}\n/**\n * Effects of an account transaction. All variants except `None`\n * correspond to a unique transaction that was successful.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects\n */\nexport interface AccountTransactionEffects {\n    /**\n     * @generated from protobuf oneof: effect\n     */\n    effect: {\n        oneofKind: \"none\";\n        /**\n         * No effects other than payment from this transaction.\n         * The rejection reason indicates why the transaction failed.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.None none = 1;\n         */\n        none: AccountTransactionEffects_None;\n    } | {\n        oneofKind: \"moduleDeployed\";\n        /**\n         * A smart contract module with the attached reference was deployed.\n         *\n         * @generated from protobuf field: concordium.v2.ModuleRef module_deployed = 2;\n         */\n        moduleDeployed: ModuleRef;\n    } | {\n        oneofKind: \"contractInitialized\";\n        /**\n         * A smart contract was initialized.\n         *\n         * @generated from protobuf field: concordium.v2.ContractInitializedEvent contract_initialized = 3;\n         */\n        contractInitialized: ContractInitializedEvent;\n    } | {\n        oneofKind: \"contractUpdateIssued\";\n        /**\n         * A smart contract instance updated was issued.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.ContractUpdateIssued contract_update_issued = 4;\n         */\n        contractUpdateIssued: AccountTransactionEffects_ContractUpdateIssued;\n    } | {\n        oneofKind: \"accountTransfer\";\n        /**\n         * A simple account to account transfer occurred.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.AccountTransfer account_transfer = 5;\n         */\n        accountTransfer: AccountTransactionEffects_AccountTransfer;\n    } | {\n        oneofKind: \"bakerAdded\";\n        /**\n         * A baker was added.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerAdded baker_added = 6;\n         */\n        bakerAdded: BakerEvent_BakerAdded;\n    } | {\n        oneofKind: \"bakerRemoved\";\n        /**\n         * A baker was removed.\n         *\n         * @generated from protobuf field: concordium.v2.BakerId baker_removed = 7;\n         */\n        bakerRemoved: BakerId;\n    } | {\n        oneofKind: \"bakerStakeUpdated\";\n        /**\n         * A baker's stake was updated.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.BakerStakeUpdated baker_stake_updated = 8;\n         */\n        bakerStakeUpdated: AccountTransactionEffects_BakerStakeUpdated;\n    } | {\n        oneofKind: \"bakerRestakeEarningsUpdated\";\n        /**\n         * A baker's restake earnings setting was updated.\n         *\n         * @generated from protobuf field: concordium.v2.BakerEvent.BakerRestakeEarningsUpdated baker_restake_earnings_updated = 9;\n         */\n        bakerRestakeEarningsUpdated: BakerEvent_BakerRestakeEarningsUpdated;\n    } | {\n        oneofKind: \"bakerKeysUpdated\";\n        /**\n         * A baker's keys were updated.\n         *\n         * @generated from protobuf field: concordium.v2.BakerKeysEvent baker_keys_updated = 10;\n         */\n        bakerKeysUpdated: BakerKeysEvent;\n    } | {\n        oneofKind: \"encryptedAmountTransferred\";\n        /**\n         * An encrypted amount was transferred.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred encrypted_amount_transferred = 11;\n         */\n        encryptedAmountTransferred: AccountTransactionEffects_EncryptedAmountTransferred;\n    } | {\n        oneofKind: \"transferredToEncrypted\";\n        /**\n         * An account transferred part of its public balance to its encrypted\n         * balance.\n         *\n         * @generated from protobuf field: concordium.v2.EncryptedSelfAmountAddedEvent transferred_to_encrypted = 12;\n         */\n        transferredToEncrypted: EncryptedSelfAmountAddedEvent;\n    } | {\n        oneofKind: \"transferredToPublic\";\n        /**\n         * An account transferred part of its encrypted balance to its public balance.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.TransferredToPublic transferred_to_public = 13;\n         */\n        transferredToPublic: AccountTransactionEffects_TransferredToPublic;\n    } | {\n        oneofKind: \"transferredWithSchedule\";\n        /**\n         * A transfer with a release schedule was made.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.TransferredWithSchedule transferred_with_schedule = 14;\n         */\n        transferredWithSchedule: AccountTransactionEffects_TransferredWithSchedule;\n    } | {\n        oneofKind: \"credentialKeysUpdated\";\n        /**\n         * Keys of a specific credential were updated.\n         *\n         * @generated from protobuf field: concordium.v2.CredentialRegistrationId credential_keys_updated = 15;\n         */\n        credentialKeysUpdated: CredentialRegistrationId;\n    } | {\n        oneofKind: \"credentialsUpdated\";\n        /**\n         * Account credentials were updated.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.CredentialsUpdated credentials_updated = 16;\n         */\n        credentialsUpdated: AccountTransactionEffects_CredentialsUpdated;\n    } | {\n        oneofKind: \"dataRegistered\";\n        /**\n         * Some data was registered on the chain.\n         *\n         * @generated from protobuf field: concordium.v2.RegisteredData data_registered = 17;\n         */\n        dataRegistered: RegisteredData;\n    } | {\n        oneofKind: \"bakerConfigured\";\n        /**\n         * A baker was configured. The details of what happened are contained in a list of BakerEvents.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.BakerConfigured baker_configured = 18;\n         */\n        bakerConfigured: AccountTransactionEffects_BakerConfigured;\n    } | {\n        oneofKind: \"delegationConfigured\";\n        /**\n         * A delegator was configured. The details of what happened are contained in a list of DelegatorEvents.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionEffects.DelegationConfigured delegation_configured = 19;\n         */\n        delegationConfigured: AccountTransactionEffects_DelegationConfigured;\n    } | {\n        oneofKind: \"tokenUpdateEffect\";\n        /**\n         * Token update transaction effect.\n         *\n         * @generated from protobuf field: concordium.v2.plt.TokenEffect token_update_effect = 20;\n         */\n        tokenUpdateEffect: TokenEffect;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * No effects other than payment from this transaction.\n * The rejection reason indicates why the transaction failed.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects.None\n */\nexport interface AccountTransactionEffects_None {\n    /**\n     * Transaction type of a failed transaction, if known.\n     * In case of serialization failure this will not be set.\n     *\n     * @generated from protobuf field: optional concordium.v2.TransactionType transaction_type = 1;\n     */\n    transactionType?: TransactionType;\n    /**\n     * Reason for rejection of the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.RejectReason reject_reason = 2;\n     */\n    rejectReason?: RejectReason;\n}\n/**\n * A contract update transaction was issued and produced the given trace.\n * This is the result of Update transaction.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects.ContractUpdateIssued\n */\nexport interface AccountTransactionEffects_ContractUpdateIssued {\n    /**\n     * @generated from protobuf field: repeated concordium.v2.ContractTraceElement effects = 1;\n     */\n    effects: ContractTraceElement[];\n}\n/**\n * A simple account to account transfer occurred. This is the result of a\n * successful Transfer transaction.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects.AccountTransfer\n */\nexport interface AccountTransactionEffects_AccountTransfer {\n    /**\n     * Amount that was transferred.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 1;\n     */\n    amount?: Amount;\n    /**\n     * Receiver account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 2;\n     */\n    receiver?: AccountAddress;\n    /**\n     * Memo.\n     *\n     * @generated from protobuf field: optional concordium.v2.Memo memo = 3;\n     */\n    memo?: Memo;\n}\n/**\n * An account was deregistered as a baker. This is the result of a\n * successful UpdateBakerStake transaction.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects.BakerStakeUpdated\n */\nexport interface AccountTransactionEffects_BakerStakeUpdated {\n    /**\n     * If the stake was updated (that is, it changed and did not stay the\n     * same) then this is present, otherwise it is not present.\n     *\n     * @generated from protobuf field: optional concordium.v2.BakerStakeUpdatedData update = 1;\n     */\n    update?: BakerStakeUpdatedData;\n}\n/**\n * An encrypted amount was transferred. This is the result of a successful\n * EncryptedAmountTransfer transaction.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred\n */\nexport interface AccountTransactionEffects_EncryptedAmountTransferred {\n    /**\n     * @generated from protobuf field: concordium.v2.EncryptedAmountRemovedEvent removed = 1;\n     */\n    removed?: EncryptedAmountRemovedEvent;\n    /**\n     * @generated from protobuf field: concordium.v2.NewEncryptedAmountEvent added = 2;\n     */\n    added?: NewEncryptedAmountEvent;\n    /**\n     * @generated from protobuf field: optional concordium.v2.Memo memo = 3;\n     */\n    memo?: Memo;\n}\n/**\n * An account transferred part of its encrypted balance to its public\n * balance. This is the result of a successful TransferToPublic transaction.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects.TransferredToPublic\n */\nexport interface AccountTransactionEffects_TransferredToPublic {\n    /**\n     * @generated from protobuf field: concordium.v2.EncryptedAmountRemovedEvent removed = 1;\n     */\n    removed?: EncryptedAmountRemovedEvent;\n    /**\n     * @generated from protobuf field: concordium.v2.Amount amount = 2;\n     */\n    amount?: Amount;\n}\n/**\n * A transfer with schedule was performed. This is the result of a\n * successful TransferWithSchedule transaction.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects.TransferredWithSchedule\n */\nexport interface AccountTransactionEffects_TransferredWithSchedule {\n    /**\n     * Receiver account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 1;\n     */\n    receiver?: AccountAddress;\n    /**\n     * The list of releases. Ordered by increasing timestamp.\n     *\n     * @generated from protobuf field: repeated concordium.v2.NewRelease amount = 2;\n     */\n    amount: NewRelease[];\n    /**\n     * Optional memo.\n     *\n     * @generated from protobuf field: optional concordium.v2.Memo memo = 3;\n     */\n    memo?: Memo;\n}\n/**\n * Account's credentials were updated. This is the result of a\n * successful UpdateCredentials transaction.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects.CredentialsUpdated\n */\nexport interface AccountTransactionEffects_CredentialsUpdated {\n    /**\n     * The credential ids that were added.\n     *\n     * @generated from protobuf field: repeated concordium.v2.CredentialRegistrationId new_cred_ids = 1;\n     */\n    newCredIds: CredentialRegistrationId[];\n    /**\n     * The credentials that were removed.\n     *\n     * @generated from protobuf field: repeated concordium.v2.CredentialRegistrationId removed_cred_ids = 2;\n     */\n    removedCredIds: CredentialRegistrationId[];\n    /**\n     * The (possibly) updated account threshold.\n     *\n     * @generated from protobuf field: concordium.v2.AccountThreshold new_threshold = 3;\n     */\n    newThreshold?: AccountThreshold;\n}\n/**\n * A baker was configured. The details of what happened are contained in\n * the list of BakerEvents.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects.BakerConfigured\n */\nexport interface AccountTransactionEffects_BakerConfigured {\n    /**\n     * @generated from protobuf field: repeated concordium.v2.BakerEvent events = 1;\n     */\n    events: BakerEvent[];\n}\n/**\n * An account configured delegation. The details of what happened are\n * contained in the list of DelegationEvents.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionEffects.DelegationConfigured\n */\nexport interface AccountTransactionEffects_DelegationConfigured {\n    /**\n     * @generated from protobuf field: repeated concordium.v2.DelegationEvent events = 1;\n     */\n    events: DelegationEvent[];\n}\n/**\n * Election difficulty parameter.\n *\n * @generated from protobuf message concordium.v2.ElectionDifficulty\n */\nexport interface ElectionDifficulty {\n    /**\n     * @generated from protobuf field: concordium.v2.AmountFraction value = 1;\n     */\n    value?: AmountFraction;\n}\n/**\n * Parameters that determine timeouts in the consensus protocol used from protocol version 6.\n *\n * @generated from protobuf message concordium.v2.TimeoutParameters\n */\nexport interface TimeoutParameters {\n    /**\n     * The base value for triggering a timeout\n     *\n     * @generated from protobuf field: concordium.v2.Duration timeout_base = 1;\n     */\n    timeoutBase?: Duration;\n    /**\n     * Factor for increasing the timeout. Must be greater than 1.\n     *\n     * @generated from protobuf field: concordium.v2.Ratio timeout_increase = 2;\n     */\n    timeoutIncrease?: Ratio;\n    /**\n     * Factor for decreasing the timeout. Must be between 0 and 1.\n     *\n     * @generated from protobuf field: concordium.v2.Ratio timeout_decrease = 3;\n     */\n    timeoutDecrease?: Ratio;\n}\n/**\n * Finalization committee parameters used from protocol version 6\n *\n * @generated from protobuf message concordium.v2.FinalizationCommitteeParameters\n */\nexport interface FinalizationCommitteeParameters {\n    /**\n     * The minimum size of a finalization committee before `finalizer_relative_stake_threshold` takes effect.\n     *\n     * @generated from protobuf field: uint32 minimum_finalizers = 1;\n     */\n    minimumFinalizers: number;\n    /**\n     * The maximum size of a finalization committee.\n     *\n     * @generated from protobuf field: uint32 maximum_finalizers = 2;\n     */\n    maximumFinalizers: number;\n    /**\n     * The threshold for determining the stake required for being eligible the finalization committee.\n     * The amount is given by `total stake in pools * finalizer_relative_stake_threshold`\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction finalizer_relative_stake_threshold = 3;\n     */\n    finalizerRelativeStakeThreshold?: AmountFraction;\n}\n/**\n * @generated from protobuf message concordium.v2.ValidatorScoreParameters\n */\nexport interface ValidatorScoreParameters {\n    /**\n     * The maximal number of missed rounds before a validator gets suspended.\n     *\n     * @generated from protobuf field: uint64 maximum_missed_rounds = 1;\n     */\n    maximumMissedRounds: bigint;\n}\n/**\n * Parameters for the consensus protocol used from protocol version 6.\n *\n * @generated from protobuf message concordium.v2.ConsensusParametersV1\n */\nexport interface ConsensusParametersV1 {\n    /**\n     * Parameters controlling round timeouts.\n     *\n     * @generated from protobuf field: concordium.v2.TimeoutParameters timeout_parameters = 1;\n     */\n    timeoutParameters?: TimeoutParameters;\n    /**\n     * Minimum time interval between blocks.\n     *\n     * @generated from protobuf field: concordium.v2.Duration min_block_time = 2;\n     */\n    minBlockTime?: Duration;\n    /**\n     * Maximum energy allowed per block.\n     *\n     * @generated from protobuf field: concordium.v2.Energy block_energy_limit = 3;\n     */\n    blockEnergyLimit?: Energy;\n}\n/**\n * Represents an exchange rate.\n *\n * @generated from protobuf message concordium.v2.ExchangeRate\n */\nexport interface ExchangeRate {\n    /**\n     * @generated from protobuf field: concordium.v2.Ratio value = 1;\n     */\n    value?: Ratio;\n}\n/**\n * Represents a ratio, i.e., 'numerator / denominator'.\n *\n * @generated from protobuf message concordium.v2.Ratio\n */\nexport interface Ratio {\n    /**\n     * The numerator.\n     *\n     * @generated from protobuf field: uint64 numerator = 1;\n     */\n    numerator: bigint;\n    /**\n     * The denominator.\n     *\n     * @generated from protobuf field: uint64 denominator = 2;\n     */\n    denominator: bigint;\n}\n/**\n * A public key used for chain updates.\n *\n * @generated from protobuf message concordium.v2.UpdatePublicKey\n */\nexport interface UpdatePublicKey {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * The threshold for how many UpdatePublicKeys are need to make a certain chain update.\n *\n * @generated from protobuf message concordium.v2.UpdateKeysThreshold\n */\nexport interface UpdateKeysThreshold {\n    /**\n     * Is ensured to be within between 1 and 2^16.\n     *\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * Index of a key in an authorizations update payload.\n *\n * @generated from protobuf message concordium.v2.UpdateKeysIndex\n */\nexport interface UpdateKeysIndex {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * Represents root or level 1 keys.\n *\n * @generated from protobuf message concordium.v2.HigherLevelKeys\n */\nexport interface HigherLevelKeys {\n    /**\n     * The keys.\n     *\n     * @generated from protobuf field: repeated concordium.v2.UpdatePublicKey keys = 1;\n     */\n    keys: UpdatePublicKey[];\n    /**\n     * The number of keys needed to make a chain update.\n     *\n     * @generated from protobuf field: concordium.v2.UpdateKeysThreshold threshold = 2;\n     */\n    threshold?: UpdateKeysThreshold;\n}\n/**\n * An access structure which specifies which UpdatePublicKeys in a HigherLevelKeys that are allowed\n * to make chain update of a specific type. The threshold defines the minimum number of allowed keys needed\n * to make the actual update.\n *\n * @generated from protobuf message concordium.v2.AccessStructure\n */\nexport interface AccessStructure {\n    /**\n     * Unique indexes into the set of keys in AuthorizationV0.\n     *\n     * @generated from protobuf field: repeated concordium.v2.UpdateKeysIndex access_public_keys = 1;\n     */\n    accessPublicKeys: UpdateKeysIndex[];\n    /**\n     * Number of keys requred to authorize an update.\n     *\n     * @generated from protobuf field: concordium.v2.UpdateKeysThreshold access_threshold = 2;\n     */\n    accessThreshold?: UpdateKeysThreshold;\n}\n/**\n * The set of keys authorized for chain updates, together with access structures\n * determining which keys are authorized for which update types.\n * This is the payload of an update to authorization.\n *\n * @generated from protobuf message concordium.v2.AuthorizationsV0\n */\nexport interface AuthorizationsV0 {\n    /**\n     * The set of keys authorized for chain updates.\n     *\n     * @generated from protobuf field: repeated concordium.v2.UpdatePublicKey keys = 1;\n     */\n    keys: UpdatePublicKey[];\n    /**\n     * New emergency keys.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure emergency = 2;\n     */\n    emergency?: AccessStructure;\n    /**\n     * New protocol update keys.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure protocol = 3;\n     */\n    protocol?: AccessStructure;\n    /**\n     * Access structure for updating the consensus parameters.\n     * Previously, this was the election difficulty.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure parameter_consensus = 4;\n     */\n    parameterConsensus?: AccessStructure;\n    /**\n     * Access structure for updating the euro per energy.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure parameter_euro_per_energy = 5;\n     */\n    parameterEuroPerEnergy?: AccessStructure;\n    /**\n     * Access structure for updating the micro CCD per euro.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure parameter_micro_CCD_per_euro = 6;\n     */\n    parameterMicroCCDPerEuro?: AccessStructure;\n    /**\n     * Access structure for updating the foundation account.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure parameter_foundation_account = 7;\n     */\n    parameterFoundationAccount?: AccessStructure;\n    /**\n     * Access structure for updating the mint distribution.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure parameter_mint_distribution = 8;\n     */\n    parameterMintDistribution?: AccessStructure;\n    /**\n     * Access structure for updating the transaction fee distribution.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure parameter_transaction_fee_distribution = 9;\n     */\n    parameterTransactionFeeDistribution?: AccessStructure;\n    /**\n     * Access structure for updating the gas rewards.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure parameter_gas_rewards = 10;\n     */\n    parameterGasRewards?: AccessStructure;\n    /**\n     * Access structure for updating the pool parameters. For V0 this is only\n     * the baker stake threshold, for V1 there are more.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure pool_parameters = 11;\n     */\n    poolParameters?: AccessStructure;\n    /**\n     * Access structure for adding new anonymity revokers.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure add_anonymity_revoker = 12;\n     */\n    addAnonymityRevoker?: AccessStructure;\n    /**\n     * Access structure for adding new identity providers.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure add_identity_provider = 13;\n     */\n    addIdentityProvider?: AccessStructure;\n}\n/**\n * The set of keys authorized for chain updates, together with access structures\n * determining which keys are authorized for which update types.\n * This is the payload of an update to authorization.\n *\n * @generated from protobuf message concordium.v2.AuthorizationsV1\n */\nexport interface AuthorizationsV1 {\n    /**\n     * @generated from protobuf field: concordium.v2.AuthorizationsV0 v0 = 1;\n     */\n    v0?: AuthorizationsV0;\n    /**\n     * Access structure for updating the cooldown periods related to baking and delegation.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure parameter_cooldown = 2;\n     */\n    parameterCooldown?: AccessStructure;\n    /**\n     * Access structure for updating the length of the reward period.\n     *\n     * @generated from protobuf field: concordium.v2.AccessStructure parameter_time = 3;\n     */\n    parameterTime?: AccessStructure;\n    /**\n     * Access structure for creating a protocol level token.\n     * This is present from protocol version 9.\n     *\n     * @generated from protobuf field: optional concordium.v2.AccessStructure create_plt = 4;\n     */\n    createPlt?: AccessStructure;\n}\n/**\n * Description either of an anonymity revoker or identity provider.\n * Metadata that should be visible on the chain.\n *\n * @generated from protobuf message concordium.v2.Description\n */\nexport interface Description {\n    /**\n     * The name.\n     *\n     * @generated from protobuf field: string name = 1;\n     */\n    name: string;\n    /**\n     * A link to more information about the anonymity revoker or identity provider.\n     *\n     * @generated from protobuf field: string url = 2;\n     */\n    url: string;\n    /**\n     * A free form description of the revoker or provider.\n     *\n     * @generated from protobuf field: string description = 3;\n     */\n    description: string;\n}\n/**\n * Information on a single anonymity revoker help by the identity provider.\n * Typically an identity provider will hold more than one.\n *\n * @generated from protobuf message concordium.v2.ArInfo\n */\nexport interface ArInfo {\n    /**\n     * Unique identifier of the anonymity revoker.\n     *\n     * @generated from protobuf field: concordium.v2.ArInfo.ArIdentity identity = 1;\n     */\n    identity?: ArInfo_ArIdentity;\n    /**\n     * Description of the anonymity revoker.\n     *\n     * @generated from protobuf field: concordium.v2.Description description = 2;\n     */\n    description?: Description;\n    /**\n     * Elgamal encryption key of the anonymity revoker.\n     *\n     * @generated from protobuf field: concordium.v2.ArInfo.ArPublicKey public_key = 3;\n     */\n    publicKey?: ArInfo_ArPublicKey;\n}\n/**\n * Identity of the anonymity revoker on the chain. This defines their\n * evaluateion point for secret sharing, and thus it cannot be 0.\n *\n * @generated from protobuf message concordium.v2.ArInfo.ArIdentity\n */\nexport interface ArInfo_ArIdentity {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * Public key of an anonymity revoker.\n *\n * @generated from protobuf message concordium.v2.ArInfo.ArPublicKey\n */\nexport interface ArInfo_ArPublicKey {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * A succinct identifier of an identity provider on the chain.\n * In credential deployments, and other interactions with the chain this is\n * used to identify which identity provider is meant.\n *\n * @generated from protobuf message concordium.v2.IpIdentity\n */\nexport interface IpIdentity {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * Public information about an identity provider.\n *\n * @generated from protobuf message concordium.v2.IpInfo\n */\nexport interface IpInfo {\n    /**\n     * Unique identifier of the identity provider.\n     *\n     * @generated from protobuf field: concordium.v2.IpIdentity identity = 1;\n     */\n    identity?: IpIdentity;\n    /**\n     * Description of the identity provider.\n     *\n     * @generated from protobuf field: concordium.v2.Description description = 2;\n     */\n    description?: Description;\n    /**\n     * Pointcheval-Sanders public key of the identity provider.\n     *\n     * @generated from protobuf field: concordium.v2.IpInfo.IpVerifyKey verify_key = 3;\n     */\n    verifyKey?: IpInfo_IpVerifyKey;\n    /**\n     * Ed25519 public key of the identity provider.\n     *\n     * @generated from protobuf field: concordium.v2.IpInfo.IpCdiVerifyKey cdi_verify_key = 4;\n     */\n    cdiVerifyKey?: IpInfo_IpCdiVerifyKey;\n}\n/**\n * Pointcheval-Sanders public key of the identity provider.\n *\n * @generated from protobuf message concordium.v2.IpInfo.IpVerifyKey\n */\nexport interface IpInfo_IpVerifyKey {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Ed25519 public key of the identity provider.\n *\n * @generated from protobuf message concordium.v2.IpInfo.IpCdiVerifyKey\n */\nexport interface IpInfo_IpCdiVerifyKey {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * A duration in seconds.\n *\n * @generated from protobuf message concordium.v2.DurationSeconds\n */\nexport interface DurationSeconds {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * Inclusive range of amount fractions.\n *\n * @generated from protobuf message concordium.v2.InclusiveRangeAmountFraction\n */\nexport interface InclusiveRangeAmountFraction {\n    /**\n     * @generated from protobuf field: concordium.v2.AmountFraction min = 1;\n     */\n    min?: AmountFraction;\n    /**\n     * @generated from protobuf field: concordium.v2.AmountFraction max_ = 2;\n     */\n    max?: AmountFraction;\n}\n/**\n * Ranges of allowed commission values that pools may choose from.\n *\n * @generated from protobuf message concordium.v2.CommissionRanges\n */\nexport interface CommissionRanges {\n    /**\n     * The range of allowed finalization commissions.\n     *\n     * @generated from protobuf field: concordium.v2.InclusiveRangeAmountFraction finalization = 1;\n     */\n    finalization?: InclusiveRangeAmountFraction;\n    /**\n     * The range of allowed baker commissions.\n     *\n     * @generated from protobuf field: concordium.v2.InclusiveRangeAmountFraction baking = 2;\n     */\n    baking?: InclusiveRangeAmountFraction;\n    /**\n     * The range of allowed transaction commissions.\n     *\n     * @generated from protobuf field: concordium.v2.InclusiveRangeAmountFraction transaction = 3;\n     */\n    transaction?: InclusiveRangeAmountFraction;\n}\n/**\n * A bound on the relative share of the total staked capital that a baker can\n * have as its stake. This is required to be greater than 0.\n *\n * @generated from protobuf message concordium.v2.CapitalBound\n */\nexport interface CapitalBound {\n    /**\n     * @generated from protobuf field: concordium.v2.AmountFraction value = 1;\n     */\n    value?: AmountFraction;\n}\n/**\n * A leverage factor.\n *\n * @generated from protobuf message concordium.v2.LeverageFactor\n */\nexport interface LeverageFactor {\n    /**\n     * @generated from protobuf field: concordium.v2.Ratio value = 1;\n     */\n    value?: Ratio;\n}\n/**\n * A chain epoch.\n *\n * @generated from protobuf message concordium.v2.Epoch\n */\nexport interface Epoch {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * A round.\n *\n * @generated from protobuf message concordium.v2.Round\n */\nexport interface Round {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * Length of a reward period in epochs.\n * Must always be a strictly positive number.\n *\n * @generated from protobuf message concordium.v2.RewardPeriodLength\n */\nexport interface RewardPeriodLength {\n    /**\n     * @generated from protobuf field: concordium.v2.Epoch value = 1;\n     */\n    value?: Epoch;\n}\n/**\n * A minting rate of CCD.\n * The value is `mantissa * 10^(-exponent)`.\n *\n * @generated from protobuf message concordium.v2.MintRate\n */\nexport interface MintRate {\n    /**\n     * @generated from protobuf field: uint32 mantissa = 1;\n     */\n    mantissa: number;\n    /**\n     * This will never exceed 255 and can thus be stored in a single byte.\n     *\n     * @generated from protobuf field: uint32 exponent = 2;\n     */\n    exponent: number;\n}\n/**\n * @generated from protobuf message concordium.v2.CooldownParametersCpv1\n */\nexport interface CooldownParametersCpv1 {\n    /**\n     * Number of seconds that pool owners must cooldown\n     * when reducing their equity capital or closing the pool.\n     *\n     * @generated from protobuf field: concordium.v2.DurationSeconds pool_owner_cooldown = 1;\n     */\n    poolOwnerCooldown?: DurationSeconds;\n    /**\n     * Number of seconds that a delegator must cooldown\n     * when reducing their delegated stake.\n     *\n     * @generated from protobuf field: concordium.v2.DurationSeconds delegator_cooldown = 2;\n     */\n    delegatorCooldown?: DurationSeconds;\n}\n/**\n * Parameters related to staking pools.\n *\n * @generated from protobuf message concordium.v2.PoolParametersCpv1\n */\nexport interface PoolParametersCpv1 {\n    /**\n     * Fraction of finalization rewards charged by the passive delegation.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction passive_finalization_commission = 1;\n     */\n    passiveFinalizationCommission?: AmountFraction;\n    /**\n     * Fraction of baking rewards charged by the passive delegation.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction passive_baking_commission = 2;\n     */\n    passiveBakingCommission?: AmountFraction;\n    /**\n     * Fraction of transaction rewards charged by the L-pool.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction passive_transaction_commission = 3;\n     */\n    passiveTransactionCommission?: AmountFraction;\n    /**\n     * Bounds on the commission rates that may be charged by bakers.\n     *\n     * @generated from protobuf field: concordium.v2.CommissionRanges commission_bounds = 4;\n     */\n    commissionBounds?: CommissionRanges;\n    /**\n     * Minimum equity capital required for a new baker.\n     *\n     * @generated from protobuf field: concordium.v2.Amount minimum_equity_capital = 5;\n     */\n    minimumEquityCapital?: Amount;\n    /**\n     * Maximum fraction of the total staked capital of that a new baker can\n     * have.\n     *\n     * @generated from protobuf field: concordium.v2.CapitalBound capital_bound = 6;\n     */\n    capitalBound?: CapitalBound;\n    /**\n     * The maximum leverage that a baker can have as a ratio of total stake\n     * to equity capital.\n     *\n     * @generated from protobuf field: concordium.v2.LeverageFactor leverage_bound = 7;\n     */\n    leverageBound?: LeverageFactor;\n}\n/**\n * The time parameters are introduced as of protocol version 4, and consist of\n * the reward period length and the mint rate per payday. These are coupled as\n * a change to either affects the overall rate of minting.\n *\n * @generated from protobuf message concordium.v2.TimeParametersCpv1\n */\nexport interface TimeParametersCpv1 {\n    /**\n     * @generated from protobuf field: concordium.v2.RewardPeriodLength reward_period_length = 1;\n     */\n    rewardPeriodLength?: RewardPeriodLength;\n    /**\n     * @generated from protobuf field: concordium.v2.MintRate mint_per_payday = 2;\n     */\n    mintPerPayday?: MintRate;\n}\n/**\n * Mint distribution payload as it looks in protocol version 4 and onward.\n *\n * @generated from protobuf message concordium.v2.MintDistributionCpv1\n */\nexport interface MintDistributionCpv1 {\n    /**\n     * @generated from protobuf field: concordium.v2.AmountFraction baking_reward = 1;\n     */\n    bakingReward?: AmountFraction;\n    /**\n     * @generated from protobuf field: concordium.v2.AmountFraction finalization_reward = 2;\n     */\n    finalizationReward?: AmountFraction;\n}\n/**\n * @generated from protobuf message concordium.v2.ProtocolUpdate\n */\nexport interface ProtocolUpdate {\n    /**\n     * A brief message about the update.\n     *\n     * @generated from protobuf field: string message_ = 1;\n     */\n    message: string;\n    /**\n     * A URL of a document describing the update.\n     *\n     * @generated from protobuf field: string specification_url = 2;\n     */\n    specificationUrl: string;\n    /**\n     * SHA256 hash of the specification document.\n     *\n     * @generated from protobuf field: concordium.v2.Sha256Hash specificationHash = 3;\n     */\n    specificationHash?: Sha256Hash;\n    /**\n     * Auxiliary data whose interpretation is defined by the new specification.\n     *\n     * @generated from protobuf field: bytes specification_auxiliary_data = 4;\n     */\n    specificationAuxiliaryData: Uint8Array;\n}\n/**\n * The minting rate and the distribution of newly-minted CCD among bakers,\n * finalizers, and the foundation account. It must be the case that\n * baking_reward + finalization_reward <= 1. The remaining amount is the\n * platform development charge.\n *\n * @generated from protobuf message concordium.v2.MintDistributionCpv0\n */\nexport interface MintDistributionCpv0 {\n    /**\n     * Mint rate per slot.\n     *\n     * @generated from protobuf field: concordium.v2.MintRate mint_per_slot = 1;\n     */\n    mintPerSlot?: MintRate;\n    /**\n     * The fraction of newly created CCD allocated to baker rewards.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction baking_reward = 2;\n     */\n    bakingReward?: AmountFraction;\n    /**\n     * The fraction of newly created CCD allocated to finalization rewards.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction finalization_reward = 3;\n     */\n    finalizationReward?: AmountFraction;\n}\n/**\n * Parameters determining the distribution of transaction fees.\n *\n * @generated from protobuf message concordium.v2.TransactionFeeDistribution\n */\nexport interface TransactionFeeDistribution {\n    /**\n     * The fraction allocated to the baker.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction baker = 1;\n     */\n    baker?: AmountFraction;\n    /**\n     * The fraction allocated to the GAS account.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction gas_account = 2;\n     */\n    gasAccount?: AmountFraction;\n}\n/**\n * Distribution of gas rewards for chain parameters version 0 and 1.\n *\n * @generated from protobuf message concordium.v2.GasRewards\n */\nexport interface GasRewards {\n    /**\n     * The fraction paid to the baker.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction baker = 1;\n     */\n    baker?: AmountFraction;\n    /**\n     * Fraction paid for including a finalization proof in a block.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction finalization_proof = 2;\n     */\n    finalizationProof?: AmountFraction;\n    /**\n     * Fraction paid for including each account creation transaction in a block.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction account_creation = 3;\n     */\n    accountCreation?: AmountFraction;\n    /**\n     * Fraction paid for including an update transaction in a block.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction chain_update = 4;\n     */\n    chainUpdate?: AmountFraction;\n}\n/**\n * Distribution of gas rewards for chain parameters version 2.\n *\n * @generated from protobuf message concordium.v2.GasRewardsCpv2\n */\nexport interface GasRewardsCpv2 {\n    /**\n     * The fraction paid to the baker.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction baker = 1;\n     */\n    baker?: AmountFraction;\n    /**\n     * Fraction paid for including each account creation transaction in a block.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction account_creation = 3;\n     */\n    accountCreation?: AmountFraction;\n    /**\n     * Fraction paid for including an update transaction in a block.\n     *\n     * @generated from protobuf field: concordium.v2.AmountFraction chain_update = 4;\n     */\n    chainUpdate?: AmountFraction;\n}\n/**\n * Minimum stake needed to become a baker. This only applies to protocol version\n * 1-3.\n *\n * @generated from protobuf message concordium.v2.BakerStakeThreshold\n */\nexport interface BakerStakeThreshold {\n    /**\n     * Minimum threshold required for registering as a baker.\n     *\n     * @generated from protobuf field: concordium.v2.Amount baker_stake_threshold = 1;\n     */\n    bakerStakeThreshold?: Amount;\n}\n/**\n * Root updates are the highest kind of key updates. They can update every other set of keys,\n * even themselves. They can only be performed by Root level keys.\n *\n * @generated from protobuf message concordium.v2.RootUpdate\n */\nexport interface RootUpdate {\n    /**\n     * @generated from protobuf oneof: update_type\n     */\n    updateType: {\n        oneofKind: \"rootKeysUpdate\";\n        /**\n         * The root keys were updated.\n         *\n         * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys_update = 1;\n         */\n        rootKeysUpdate: HigherLevelKeys;\n    } | {\n        oneofKind: \"level1KeysUpdate\";\n        /**\n         * The level 1 keys were updated.\n         *\n         * @generated from protobuf field: concordium.v2.HigherLevelKeys level_1_keys_update = 2;\n         */\n        level1KeysUpdate: HigherLevelKeys;\n    } | {\n        oneofKind: \"level2KeysUpdateV0\";\n        /**\n         * The level 2 keys were updated.\n         *\n         * @generated from protobuf field: concordium.v2.AuthorizationsV0 level_2_keys_update_v0 = 3;\n         */\n        level2KeysUpdateV0: AuthorizationsV0;\n    } | {\n        oneofKind: \"level2KeysUpdateV1\";\n        /**\n         * The level 2 keys were updated. This is similar to `level_2_keys_update_v0` except that a few more keys can be updated.\n         *\n         * @generated from protobuf field: concordium.v2.AuthorizationsV1 level_2_keys_update_v1 = 4;\n         */\n        level2KeysUpdateV1: AuthorizationsV1;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Level 1 updates are the intermediate update kind.\n * They can update themselves or level 2 keys. They can only be performed by level 1 keys.\n *\n * @generated from protobuf message concordium.v2.Level1Update\n */\nexport interface Level1Update {\n    /**\n     * @generated from protobuf oneof: update_type\n     */\n    updateType: {\n        oneofKind: \"level1KeysUpdate\";\n        /**\n         * The level 1 keys were updated.\n         *\n         * @generated from protobuf field: concordium.v2.HigherLevelKeys level_1_keys_update = 1;\n         */\n        level1KeysUpdate: HigherLevelKeys;\n    } | {\n        oneofKind: \"level2KeysUpdateV0\";\n        /**\n         * The level 2 keys were updated.\n         *\n         * @generated from protobuf field: concordium.v2.AuthorizationsV0 level_2_keys_update_v0 = 2;\n         */\n        level2KeysUpdateV0: AuthorizationsV0;\n    } | {\n        oneofKind: \"level2KeysUpdateV1\";\n        /**\n         * The level 2 keys were updated. This is similar to `level_2_keys_update_v0` except that a few more keys can be updated.\n         *\n         * @generated from protobuf field: concordium.v2.AuthorizationsV1 level_2_keys_update_v1 = 3;\n         */\n        level2KeysUpdateV1: AuthorizationsV1;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * The payload of a chain update.\n *\n * @generated from protobuf message concordium.v2.UpdatePayload\n */\nexport interface UpdatePayload {\n    /**\n     * @generated from protobuf oneof: payload\n     */\n    payload: {\n        oneofKind: \"protocolUpdate\";\n        /**\n         * The protocol version was updated.\n         *\n         * @generated from protobuf field: concordium.v2.ProtocolUpdate protocol_update = 1;\n         */\n        protocolUpdate: ProtocolUpdate;\n    } | {\n        oneofKind: \"electionDifficultyUpdate\";\n        /**\n         * The election difficulty was updated.\n         *\n         * @generated from protobuf field: concordium.v2.ElectionDifficulty election_difficulty_update = 2;\n         */\n        electionDifficultyUpdate: ElectionDifficulty;\n    } | {\n        oneofKind: \"euroPerEnergyUpdate\";\n        /**\n         * The euro per energy exchange rate was updated.\n         *\n         * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy_update = 3;\n         */\n        euroPerEnergyUpdate: ExchangeRate;\n    } | {\n        oneofKind: \"microCcdPerEuroUpdate\";\n        /**\n         * The microCCD per euro exchange rate was updated.\n         *\n         * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro_update = 4;\n         */\n        microCcdPerEuroUpdate: ExchangeRate;\n    } | {\n        oneofKind: \"foundationAccountUpdate\";\n        /**\n         * The foundation account address was updated.\n         *\n         * @generated from protobuf field: concordium.v2.AccountAddress foundation_account_update = 5;\n         */\n        foundationAccountUpdate: AccountAddress;\n    } | {\n        oneofKind: \"mintDistributionUpdate\";\n        /**\n         * The mint distribution was updated.\n         *\n         * @generated from protobuf field: concordium.v2.MintDistributionCpv0 mint_distribution_update = 6;\n         */\n        mintDistributionUpdate: MintDistributionCpv0;\n    } | {\n        oneofKind: \"transactionFeeDistributionUpdate\";\n        /**\n         * The transaction fee distribtuion was updated.\n         *\n         * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution_update = 7;\n         */\n        transactionFeeDistributionUpdate: TransactionFeeDistribution;\n    } | {\n        oneofKind: \"gasRewardsUpdate\";\n        /**\n         * The gas rewards were updated.\n         *\n         * @generated from protobuf field: concordium.v2.GasRewards gas_rewards_update = 8;\n         */\n        gasRewardsUpdate: GasRewards;\n    } | {\n        oneofKind: \"bakerStakeThresholdUpdate\";\n        /**\n         * The minimum amount of CCD needed to be come a baker was updated.\n         *\n         * @generated from protobuf field: concordium.v2.BakerStakeThreshold baker_stake_threshold_update = 9;\n         */\n        bakerStakeThresholdUpdate: BakerStakeThreshold;\n    } | {\n        oneofKind: \"rootUpdate\";\n        /**\n         * The root keys were updated.\n         *\n         * @generated from protobuf field: concordium.v2.RootUpdate root_update = 10;\n         */\n        rootUpdate: RootUpdate;\n    } | {\n        oneofKind: \"level1Update\";\n        /**\n         * The level 1 keys were updated.\n         *\n         * @generated from protobuf field: concordium.v2.Level1Update level_1_update = 11;\n         */\n        level1Update: Level1Update;\n    } | {\n        oneofKind: \"addAnonymityRevokerUpdate\";\n        /**\n         * An anonymity revoker was added.\n         *\n         * @generated from protobuf field: concordium.v2.ArInfo add_anonymity_revoker_update = 12;\n         */\n        addAnonymityRevokerUpdate: ArInfo;\n    } | {\n        oneofKind: \"addIdentityProviderUpdate\";\n        /**\n         * An identity provider was added.\n         *\n         * @generated from protobuf field: concordium.v2.IpInfo add_identity_provider_update = 13;\n         */\n        addIdentityProviderUpdate: IpInfo;\n    } | {\n        oneofKind: \"cooldownParametersCpv1Update\";\n        /**\n         * The cooldown parameters were updated.\n         *\n         * @generated from protobuf field: concordium.v2.CooldownParametersCpv1 cooldown_parameters_cpv_1_update = 14;\n         */\n        cooldownParametersCpv1Update: CooldownParametersCpv1;\n    } | {\n        oneofKind: \"poolParametersCpv1Update\";\n        /**\n         * The pool parameters were updated.\n         *\n         * @generated from protobuf field: concordium.v2.PoolParametersCpv1 pool_parameters_cpv_1_update = 15;\n         */\n        poolParametersCpv1Update: PoolParametersCpv1;\n    } | {\n        oneofKind: \"timeParametersCpv1Update\";\n        /**\n         * The time parameters were updated.\n         *\n         * @generated from protobuf field: concordium.v2.TimeParametersCpv1 time_parameters_cpv_1_update = 16;\n         */\n        timeParametersCpv1Update: TimeParametersCpv1;\n    } | {\n        oneofKind: \"mintDistributionCpv1Update\";\n        /**\n         * The mint distribution was updated.\n         *\n         * @generated from protobuf field: concordium.v2.MintDistributionCpv1 mint_distribution_cpv_1_update = 17;\n         */\n        mintDistributionCpv1Update: MintDistributionCpv1;\n    } | {\n        oneofKind: \"gasRewardsCpv2Update\";\n        /**\n         * The gas rewards were updated (chain parameters version 2).\n         *\n         * @generated from protobuf field: concordium.v2.GasRewardsCpv2 gas_rewards_cpv_2_update = 18;\n         */\n        gasRewardsCpv2Update: GasRewardsCpv2;\n    } | {\n        oneofKind: \"timeoutParametersUpdate\";\n        /**\n         * The consensus timeouts were updated (chain parameters version 2).\n         *\n         * @generated from protobuf field: concordium.v2.TimeoutParameters timeout_parameters_update = 19;\n         */\n        timeoutParametersUpdate: TimeoutParameters;\n    } | {\n        oneofKind: \"minBlockTimeUpdate\";\n        /**\n         * The minimum time between blocks was updated (chain parameters version 2).\n         *\n         * @generated from protobuf field: concordium.v2.Duration min_block_time_update = 20;\n         */\n        minBlockTimeUpdate: Duration;\n    } | {\n        oneofKind: \"blockEnergyLimitUpdate\";\n        /**\n         * The block energy limit was updated (chain parameters version 2).\n         *\n         * @generated from protobuf field: concordium.v2.Energy block_energy_limit_update = 21;\n         */\n        blockEnergyLimitUpdate: Energy;\n    } | {\n        oneofKind: \"finalizationCommitteeParametersUpdate\";\n        /**\n         * Finalization committee parameters (chain parameters version 2).\n         *\n         * @generated from protobuf field: concordium.v2.FinalizationCommitteeParameters finalization_committee_parameters_update = 22;\n         */\n        finalizationCommitteeParametersUpdate: FinalizationCommitteeParameters;\n    } | {\n        oneofKind: \"validatorScoreParametersUpdate\";\n        /**\n         * Validator score parameters (chain parameters version 3)\n         *\n         * @generated from protobuf field: concordium.v2.ValidatorScoreParameters validator_score_parameters_update = 23;\n         */\n        validatorScoreParametersUpdate: ValidatorScoreParameters;\n    } | {\n        oneofKind: \"createPltUpdate\";\n        /**\n         * Create a new protocol-level token.\n         *\n         * @generated from protobuf field: concordium.v2.plt.CreatePLT create_plt_update = 24;\n         */\n        createPltUpdate: CreatePLT;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Details about an account transaction.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionDetails\n */\nexport interface AccountTransactionDetails {\n    /**\n     * The cost of the transaction. Paid by the sender.\n     *\n     * @generated from protobuf field: concordium.v2.Amount cost = 1;\n     */\n    cost?: Amount;\n    /**\n     * The sender of the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress sender = 2;\n     */\n    sender?: AccountAddress;\n    /**\n     * The effects of the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.AccountTransactionEffects effects = 3;\n     */\n    effects?: AccountTransactionEffects;\n}\n/**\n * Details of an account creation. These transactions are free, and we only\n * ever get a response for them if the account is created, hence no failure\n * cases.\n *\n * @generated from protobuf message concordium.v2.AccountCreationDetails\n */\nexport interface AccountCreationDetails {\n    /**\n     * Whether this is an initial or normal account.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialType credential_type = 1;\n     */\n    credentialType: CredentialType;\n    /**\n     * Address of the newly created account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress address = 2;\n     */\n    address?: AccountAddress;\n    /**\n     * Credential registration ID of the first credential.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialRegistrationId reg_id = 3;\n     */\n    regId?: CredentialRegistrationId;\n}\n/**\n * Transaction time specified as seconds since unix epoch.\n *\n * @generated from protobuf message concordium.v2.TransactionTime\n */\nexport interface TransactionTime {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * Details of an successful update instruction. These are free, and we only ever get a\n * response for them if the update is successfully enqueued, hence no failure\n * cases.\n *\n * @generated from protobuf message concordium.v2.UpdateDetails\n */\nexport interface UpdateDetails {\n    /**\n     * The time at which the update will be effective.\n     *\n     * @generated from protobuf field: concordium.v2.TransactionTime effective_time = 1;\n     */\n    effectiveTime?: TransactionTime;\n    /**\n     * The payload for the update.\n     *\n     * @generated from protobuf field: concordium.v2.UpdatePayload payload = 2;\n     */\n    payload?: UpdatePayload;\n}\n/**\n * Summary of the outcome of a block item in structured form.\n * The summary determines which transaction type it was.\n *\n * @generated from protobuf message concordium.v2.BlockItemSummary\n */\nexport interface BlockItemSummary {\n    /**\n     * Index of the transaction in the block where it is included.\n     *\n     * @generated from protobuf field: concordium.v2.BlockItemSummary.TransactionIndex index = 1;\n     */\n    index?: BlockItemSummary_TransactionIndex;\n    /**\n     * The amount of NRG the transaction cost.\n     *\n     * @generated from protobuf field: concordium.v2.Energy energy_cost = 2;\n     */\n    energyCost?: Energy;\n    /**\n     * Hash of the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.TransactionHash hash = 3;\n     */\n    hash?: TransactionHash;\n    /**\n     * @generated from protobuf oneof: details\n     */\n    details: {\n        oneofKind: \"accountTransaction\";\n        /**\n         * Details about an account transaction.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransactionDetails account_transaction = 4;\n         */\n        accountTransaction: AccountTransactionDetails;\n    } | {\n        oneofKind: \"accountCreation\";\n        /**\n         * Details about an account creation.\n         *\n         * @generated from protobuf field: concordium.v2.AccountCreationDetails account_creation = 5;\n         */\n        accountCreation: AccountCreationDetails;\n    } | {\n        oneofKind: \"update\";\n        /**\n         * Details about a successful chain update.\n         *\n         * @generated from protobuf field: concordium.v2.UpdateDetails update = 6;\n         */\n        update: UpdateDetails;\n    } | {\n        oneofKind: \"tokenCreation\";\n        /**\n         * Details about the creation of a protocol-level token.\n         *\n         * @generated from protobuf field: concordium.v2.plt.TokenCreationDetails token_creation = 7;\n         */\n        tokenCreation: TokenCreationDetails;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.BlockItemSummary.TransactionIndex\n */\nexport interface BlockItemSummary_TransactionIndex {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * The number of chain restarts via a protocol update. An effected\n * protocol update instruction might not change the protocol version\n * specified in the previous field, but it always increments the genesis\n * index.\n *\n * @generated from protobuf message concordium.v2.GenesisIndex\n */\nexport interface GenesisIndex {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * The response for GetConsensusInfo.\n *\n * @generated from protobuf message concordium.v2.ConsensusInfo\n */\nexport interface ConsensusInfo {\n    /**\n     * Hash of the current best block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash best_block = 1;\n     */\n    bestBlock?: BlockHash;\n    /**\n     * Hash of the (original) genesis block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash genesis_block = 2;\n     */\n    genesisBlock?: BlockHash;\n    /**\n     * Time of the (original) genesis block.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp genesis_time = 3;\n     */\n    genesisTime?: Timestamp;\n    /**\n     * (Current) slot duration in milliseconds. Present only in protocol versions 1-5.\n     *\n     * @generated from protobuf field: optional concordium.v2.Duration slot_duration = 4;\n     */\n    slotDuration?: Duration;\n    /**\n     * (Current) epoch duration in milliseconds.\n     *\n     * @generated from protobuf field: concordium.v2.Duration epoch_duration = 5;\n     */\n    epochDuration?: Duration;\n    /**\n     * Hash of the last finalized block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash last_finalized_block = 6;\n     */\n    lastFinalizedBlock?: BlockHash;\n    /**\n     * Absolute height of the best block.\n     *\n     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight best_block_height = 7;\n     */\n    bestBlockHeight?: AbsoluteBlockHeight;\n    /**\n     * Absolute height of the last finalized block.\n     *\n     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight last_finalized_block_height = 8;\n     */\n    lastFinalizedBlockHeight?: AbsoluteBlockHeight;\n    /**\n     * Total number of blocks received.\n     *\n     * @generated from protobuf field: uint32 blocks_received_count = 9;\n     */\n    blocksReceivedCount: number;\n    /**\n     * The last time a block was received.\n     *\n     * @generated from protobuf field: optional concordium.v2.Timestamp block_last_received_time = 10;\n     */\n    blockLastReceivedTime?: Timestamp;\n    /**\n     * Exponential moving average latency between a block's slot time and received time.\n     *\n     * @generated from protobuf field: double block_receive_latency_ema = 11;\n     */\n    blockReceiveLatencyEma: number;\n    /**\n     * Standard deviation of exponential moving average latency between a block's slot time and received time.\n     *\n     * @generated from protobuf field: double block_receive_latency_emsd = 12;\n     */\n    blockReceiveLatencyEmsd: number;\n    /**\n     * Exponential moving average time between receiving blocks.\n     *\n     * @generated from protobuf field: optional double block_receive_period_ema = 13;\n     */\n    blockReceivePeriodEma?: number;\n    /**\n     * Standard deviation of exponential moving average time between receiving blocks.\n     *\n     * @generated from protobuf field: optional double block_receive_period_emsd = 14;\n     */\n    blockReceivePeriodEmsd?: number;\n    /**\n     * Total number of blocks received and verified.\n     *\n     * @generated from protobuf field: uint32 blocks_verified_count = 15;\n     */\n    blocksVerifiedCount: number;\n    /**\n     * The last time a block was verified (added to the tree).\n     *\n     * @generated from protobuf field: optional concordium.v2.Timestamp block_last_arrived_time = 16;\n     */\n    blockLastArrivedTime?: Timestamp;\n    /**\n     * Exponential moving average latency between a block's slot time and its arrival.\n     *\n     * @generated from protobuf field: double block_arrive_latency_ema = 17;\n     */\n    blockArriveLatencyEma: number;\n    /**\n     * Standard deviation of exponential moving average latency between a block's slot time and its arrival.\n     *\n     * @generated from protobuf field: double block_arrive_latency_emsd = 18;\n     */\n    blockArriveLatencyEmsd: number;\n    /**\n     * Exponential moving average time between block arrivals.\n     *\n     * @generated from protobuf field: optional double block_arrive_period_ema = 19;\n     */\n    blockArrivePeriodEma?: number;\n    /**\n     * Standard deviation of exponential moving average time between block arrivals.\n     *\n     * @generated from protobuf field: optional double block_arrive_period_emsd = 20;\n     */\n    blockArrivePeriodEmsd?: number;\n    /**\n     * Exponential moving average number of transactions per block.\n     *\n     * @generated from protobuf field: double transactions_per_block_ema = 21;\n     */\n    transactionsPerBlockEma: number;\n    /**\n     * Standard deviation of exponential moving average number of transactions per block.\n     *\n     * @generated from protobuf field: double transactions_per_block_emsd = 22;\n     */\n    transactionsPerBlockEmsd: number;\n    /**\n     * Number of finalizations.\n     *\n     * @generated from protobuf field: uint32 finalization_count = 23;\n     */\n    finalizationCount: number;\n    /**\n     * Time of last verified finalization.\n     *\n     * @generated from protobuf field: optional concordium.v2.Timestamp last_finalized_time = 24;\n     */\n    lastFinalizedTime?: Timestamp;\n    /**\n     * Exponential moving average time between finalizations.\n     *\n     * @generated from protobuf field: optional double finalization_period_ema = 25;\n     */\n    finalizationPeriodEma?: number;\n    /**\n     * Standard deviation of exponential moving average time between finalizations.\n     *\n     * @generated from protobuf field: optional double finalization_period_emsd = 26;\n     */\n    finalizationPeriodEmsd?: number;\n    /**\n     * Currently active protocol version.\n     *\n     * @generated from protobuf field: concordium.v2.ProtocolVersion protocol_version = 27;\n     */\n    protocolVersion: ProtocolVersion;\n    /**\n     * The number of chain restarts via a protocol update. A completed\n     * protocol update instruction might not change the protocol version\n     * specified in the previous field, but it always increments the genesis\n     * index.\n     *\n     * @generated from protobuf field: concordium.v2.GenesisIndex genesis_index = 28;\n     */\n    genesisIndex?: GenesisIndex;\n    /**\n     * Block hash of the genesis block of current era, i.e., since the last protocol update.\n     * Initially this is equal to 'genesis_block'.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash current_era_genesis_block = 29;\n     */\n    currentEraGenesisBlock?: BlockHash;\n    /**\n     * Time when the current era started.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp current_era_genesis_time = 30;\n     */\n    currentEraGenesisTime?: Timestamp;\n    /**\n     * The current duration to wait before a round times out. Present from protocol version 6.\n     *\n     * @generated from protobuf field: optional concordium.v2.Duration current_timeout_duration = 31;\n     */\n    currentTimeoutDuration?: Duration;\n    /**\n     * The current round. Present from protocol version 6.\n     *\n     * @generated from protobuf field: optional concordium.v2.Round current_round = 32;\n     */\n    currentRound?: Round;\n    /**\n     * The current epoch. Present from protocol version 6.\n     *\n     * @generated from protobuf field: optional concordium.v2.Epoch current_epoch = 33;\n     */\n    currentEpoch?: Epoch;\n    /**\n     * The first block in the epoch with timestamp at least this is considered to be the trigger block\n     * for the epoch transition. Present from protocol version 6.\n     *\n     * @generated from protobuf field: optional concordium.v2.Timestamp trigger_block_time = 34;\n     */\n    triggerBlockTime?: Timestamp;\n}\n/**\n * Information about an arrived block that is part of the streaming response.\n *\n * @generated from protobuf message concordium.v2.ArrivedBlockInfo\n */\nexport interface ArrivedBlockInfo {\n    /**\n     * Hash of the block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash hash = 1;\n     */\n    hash?: BlockHash;\n    /**\n     * Absolute height of the block, height 0 is the genesis block.\n     *\n     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight height = 2;\n     */\n    height?: AbsoluteBlockHeight;\n}\n/**\n * The response for GetCryptographicParameters.\n *\n * @generated from protobuf message concordium.v2.CryptographicParameters\n */\nexport interface CryptographicParameters {\n    /**\n     * A free-form string used to distinguish between different chains even if they share other parameters.\n     *\n     * @generated from protobuf field: string genesis_string = 1;\n     */\n    genesisString: string;\n    /**\n     * Generators for the bulletproofs.\n     * It is a serialized list of 256 group elements in the G1 group of the BLS12-381 curve.\n     *\n     * @generated from protobuf field: bytes bulletproof_generators = 2;\n     */\n    bulletproofGenerators: Uint8Array;\n    /**\n     * A shared commitment key known to the chain and the account holder (and therefore it is public).\n     * The account holder uses this commitment key to generate commitments to values in the attribute list.\n     * It is a serialized pair of group elements  in the G1 group of the BLS12-381 curve.\n     *\n     * @generated from protobuf field: bytes on_chain_commitment_key = 3;\n     */\n    onChainCommitmentKey: Uint8Array;\n}\n/**\n * The response for GetBlockInfo.\n *\n * @generated from protobuf message concordium.v2.BlockInfo\n */\nexport interface BlockInfo {\n    /**\n     * Hash of the block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash hash = 1;\n     */\n    hash?: BlockHash;\n    /**\n     * Absolute height of the block, height 0 is the genesis block.\n     *\n     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight height = 2;\n     */\n    height?: AbsoluteBlockHeight;\n    /**\n     * The parent block hash. For a re-genesis block, this will be the terminal block of the\n     * previous chain. For the initial genesis block, this will be the hash of the block itself.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash parent_block = 3;\n     */\n    parentBlock?: BlockHash;\n    /**\n     * The last finalized block when this block was baked.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash last_finalized_block = 4;\n     */\n    lastFinalizedBlock?: BlockHash;\n    /**\n     * The genesis index for this block. This counts the number of protocol updates that have\n     * preceded this block, and defines the era of the block.\n     *\n     * @generated from protobuf field: concordium.v2.GenesisIndex genesis_index = 5;\n     */\n    genesisIndex?: GenesisIndex;\n    /**\n     * The height of this block relative to the (re)genesis block of its era.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHeight era_block_height = 6;\n     */\n    eraBlockHeight?: BlockHeight;\n    /**\n     * The time the block was received.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp receive_time = 7;\n     */\n    receiveTime?: Timestamp;\n    /**\n     * The time the block was verified.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp arrive_time = 8;\n     */\n    arriveTime?: Timestamp;\n    /**\n     * The slot number in which the block was baked. Present in protocol versions 1-5.\n     *\n     * @generated from protobuf field: optional concordium.v2.Slot slot_number = 9;\n     */\n    slotNumber?: Slot;\n    /**\n     * The time of the slot in which the block was baked.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp slot_time = 10;\n     */\n    slotTime?: Timestamp;\n    /**\n     * The baker id of account baking this block. Not provided for a genesis block.\n     *\n     * @generated from protobuf field: optional concordium.v2.BakerId baker = 11;\n     */\n    baker?: BakerId;\n    /**\n     * Whether the block is finalized.\n     *\n     * @generated from protobuf field: bool finalized = 12;\n     */\n    finalized: boolean;\n    /**\n     * The number of transactions in the block.\n     *\n     * @generated from protobuf field: uint32 transaction_count = 13;\n     */\n    transactionCount: number;\n    /**\n     * The energy cost of the transactions in the block.\n     *\n     * @generated from protobuf field: concordium.v2.Energy transactions_energy_cost = 14;\n     */\n    transactionsEnergyCost?: Energy;\n    /**\n     * The total byte size of all transactions in the block.\n     *\n     * @generated from protobuf field: uint32 transactions_size = 15;\n     */\n    transactionsSize: number;\n    /**\n     * The hash of the block state after this block.\n     *\n     * @generated from protobuf field: concordium.v2.StateHash state_hash = 16;\n     */\n    stateHash?: StateHash;\n    /**\n     * Protocol version to which the block belongs.\n     *\n     * @generated from protobuf field: concordium.v2.ProtocolVersion protocol_version = 17;\n     */\n    protocolVersion: ProtocolVersion;\n    /**\n     * Block round. Present from protocol version 6.\n     *\n     * @generated from protobuf field: optional concordium.v2.Round round = 18;\n     */\n    round?: Round;\n    /**\n     * Block epoch. Present from protocol version 6.\n     *\n     * @generated from protobuf field: optional concordium.v2.Epoch epoch = 19;\n     */\n    epoch?: Epoch;\n}\n/**\n * Request for GetPoolInfo.\n *\n * @generated from protobuf message concordium.v2.PoolInfoRequest\n */\nexport interface PoolInfoRequest {\n    /**\n     * Block in which to query the pool information.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;\n     */\n    blockHash?: BlockHashInput;\n    /**\n     * The 'BakerId' of the pool owner.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker = 2;\n     */\n    baker?: BakerId;\n}\n/**\n * A pending change to a baker pool.\n *\n * @generated from protobuf message concordium.v2.PoolPendingChange\n */\nexport interface PoolPendingChange {\n    /**\n     * @generated from protobuf oneof: change\n     */\n    change: {\n        oneofKind: \"reduce\";\n        /**\n         * @generated from protobuf field: concordium.v2.PoolPendingChange.Reduce reduce = 1;\n         */\n        reduce: PoolPendingChange_Reduce;\n    } | {\n        oneofKind: \"remove\";\n        /**\n         * @generated from protobuf field: concordium.v2.PoolPendingChange.Remove remove = 2;\n         */\n        remove: PoolPendingChange_Remove;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * A reduction in baker equity capital is pending.\n *\n * @generated from protobuf message concordium.v2.PoolPendingChange.Reduce\n */\nexport interface PoolPendingChange_Reduce {\n    /**\n     * New baker equity capital.\n     *\n     * @generated from protobuf field: concordium.v2.Amount reduced_equity_capital = 1;\n     */\n    reducedEquityCapital?: Amount;\n    /**\n     * Timestamp when the change takes effect.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp effective_time = 2;\n     */\n    effectiveTime?: Timestamp;\n}\n/**\n * Removal of the pool is pending.\n *\n * @generated from protobuf message concordium.v2.PoolPendingChange.Remove\n */\nexport interface PoolPendingChange_Remove {\n    /**\n     * Timestamp when the change takes effect.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp effective_time = 1;\n     */\n    effectiveTime?: Timestamp;\n}\n/**\n * Information about a baker pool in the current reward period.\n *\n * @generated from protobuf message concordium.v2.PoolCurrentPaydayInfo\n */\nexport interface PoolCurrentPaydayInfo {\n    /**\n     * The number of blocks baked in the current reward period.\n     *\n     * @generated from protobuf field: uint64 blocks_baked = 1;\n     */\n    blocksBaked: bigint;\n    /**\n     * Whether the baker has contributed a finalization proof in the current reward period.\n     *\n     * @generated from protobuf field: bool finalization_live = 2;\n     */\n    finalizationLive: boolean;\n    /**\n     * The transaction fees accruing to the pool in the current reward period.\n     *\n     * @generated from protobuf field: concordium.v2.Amount transaction_fees_earned = 3;\n     */\n    transactionFeesEarned?: Amount;\n    /**\n     * The effective stake of the baker in the current reward period.\n     *\n     * @generated from protobuf field: concordium.v2.Amount effective_stake = 4;\n     */\n    effectiveStake?: Amount;\n    /**\n     * The lottery power of the baker in the current reward period.\n     *\n     * @generated from protobuf field: double lottery_power = 5;\n     */\n    lotteryPower: number;\n    /**\n     * The effective equity capital of the baker for the current reward period.\n     *\n     * @generated from protobuf field: concordium.v2.Amount baker_equity_capital = 6;\n     */\n    bakerEquityCapital?: Amount;\n    /**\n     * The effective delegated capital to the pool for the current reward period.\n     *\n     * @generated from protobuf field: concordium.v2.Amount delegated_capital = 7;\n     */\n    delegatedCapital?: Amount;\n    /**\n     * The commission rates that apply for the current reward period.\n     *\n     * @generated from protobuf field: concordium.v2.CommissionRates commission_rates = 8;\n     */\n    commissionRates?: CommissionRates;\n    /**\n     * A flag indicating whether the pool owner is primed for suspension.\n     * Absent if the protocol version does not support validator suspension.\n     *\n     * @generated from protobuf field: optional bool is_primed_for_suspension = 9;\n     */\n    isPrimedForSuspension?: boolean;\n    /**\n     * The number of missed rounds in the current reward period.\n     * Absent if the protocol version does not support validator suspension.\n     *\n     * @generated from protobuf field: optional uint64 missed_rounds = 10;\n     */\n    missedRounds?: bigint;\n}\n/**\n * Type for the response of GetPoolInfo.\n * Contains information about a given pool at the end of a given block.\n * From protocol version 7, pool removal has immediate effect, however, the\n * pool may still be present for the current (and possibly next) reward period.\n * In this case, the `current_payday_info` field will be set, but the\n * `equity_capital`, `delegated_capital`, `delegated_capital_cap` and,\n * `pool_info` fields will all be absent. The `equity_pending_change` field\n * will also be absent, as stake changes are immediate.\n *\n * @generated from protobuf message concordium.v2.PoolInfoResponse\n */\nexport interface PoolInfoResponse {\n    /**\n     * The 'BakerId' of the pool owner.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker = 1;\n     */\n    baker?: BakerId;\n    /**\n     * The account address of the pool owner.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress address = 2;\n     */\n    address?: AccountAddress;\n    /**\n     * The equity capital provided by the pool owner. Absent if the pool is removed.\n     *\n     * @generated from protobuf field: optional concordium.v2.Amount equity_capital = 3;\n     */\n    equityCapital?: Amount;\n    /**\n     * The capital delegated to the pool by other accounts. Absent if the pool is removed.\n     *\n     * @generated from protobuf field: optional concordium.v2.Amount delegated_capital = 4;\n     */\n    delegatedCapital?: Amount;\n    /**\n     * The maximum amount that may be delegated to the pool, accounting for leverage and stake limits.\n     * Absent if the pool is removed.\n     *\n     * @generated from protobuf field: optional concordium.v2.Amount delegated_capital_cap = 5;\n     */\n    delegatedCapitalCap?: Amount;\n    /**\n     * The pool info associated with the pool: open status, metadata URL and commission rates.\n     * Absent if the pool is removed.\n     *\n     * @generated from protobuf field: optional concordium.v2.BakerPoolInfo pool_info = 6;\n     */\n    poolInfo?: BakerPoolInfo;\n    /**\n     * Any pending change to the equity capital.\n     * This is not used from protocol version 7 onwards, as stake changes are immediate.\n     *\n     * @generated from protobuf field: optional concordium.v2.PoolPendingChange equity_pending_change = 7;\n     */\n    equityPendingChange?: PoolPendingChange;\n    /**\n     * Information of the pool in the current reward period.\n     *\n     * @generated from protobuf field: optional concordium.v2.PoolCurrentPaydayInfo current_payday_info = 8;\n     */\n    currentPaydayInfo?: PoolCurrentPaydayInfo;\n    /**\n     * Total capital staked across all pools, including passive delegation.\n     *\n     * @generated from protobuf field: concordium.v2.Amount all_pool_total_capital = 9;\n     */\n    allPoolTotalCapital?: Amount;\n    /**\n     * A flag indicating whether the pool owner is suspended.\n     * Absent if the protocol version does not support validator suspension or the pool is removed.\n     *\n     * @generated from protobuf field: optional bool is_suspended = 10;\n     */\n    isSuspended?: boolean;\n}\n/**\n * Type for the response of GetPassiveDelegationInfo.\n * Contains information about passive delegators at the end of a given block.\n *\n * @generated from protobuf message concordium.v2.PassiveDelegationInfo\n */\nexport interface PassiveDelegationInfo {\n    /**\n     * The total capital delegated passively.\n     *\n     * @generated from protobuf field: concordium.v2.Amount delegated_capital = 1;\n     */\n    delegatedCapital?: Amount;\n    /**\n     * The passive delegation commission rates.\n     *\n     * @generated from protobuf field: concordium.v2.CommissionRates commission_rates = 2;\n     */\n    commissionRates?: CommissionRates;\n    /**\n     * The transaction fees accruing to the passive delegators in the current reward period.\n     *\n     * @generated from protobuf field: concordium.v2.Amount current_payday_transaction_fees_earned = 3;\n     */\n    currentPaydayTransactionFeesEarned?: Amount;\n    /**\n     * The effective delegated capital of passive delegators for the current reward period.\n     *\n     * @generated from protobuf field: concordium.v2.Amount current_payday_delegated_capital = 4;\n     */\n    currentPaydayDelegatedCapital?: Amount;\n    /**\n     * Total capital staked across all pools, including passive delegation.\n     *\n     * @generated from protobuf field: concordium.v2.Amount all_pool_total_capital = 5;\n     */\n    allPoolTotalCapital?: Amount;\n}\n/**\n * Request for GetBlocksAtHeight.\n *\n * @generated from protobuf message concordium.v2.BlocksAtHeightRequest\n */\nexport interface BlocksAtHeightRequest {\n    /**\n     * @generated from protobuf oneof: blocks_at_height\n     */\n    blocksAtHeight: {\n        oneofKind: \"absolute\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlocksAtHeightRequest.Absolute absolute = 1;\n         */\n        absolute: BlocksAtHeightRequest_Absolute;\n    } | {\n        oneofKind: \"relative\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlocksAtHeightRequest.Relative relative = 2;\n         */\n        relative: BlocksAtHeightRequest_Relative;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Request using an absolute block height.\n *\n * @generated from protobuf message concordium.v2.BlocksAtHeightRequest.Absolute\n */\nexport interface BlocksAtHeightRequest_Absolute {\n    /**\n     * The absolute block height.\n     *\n     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight height = 1;\n     */\n    height?: AbsoluteBlockHeight;\n}\n/**\n * Request using a relative block height.\n *\n * @generated from protobuf message concordium.v2.BlocksAtHeightRequest.Relative\n */\nexport interface BlocksAtHeightRequest_Relative {\n    /**\n     * Genesis index to start from.\n     *\n     * @generated from protobuf field: concordium.v2.GenesisIndex genesis_index = 1;\n     */\n    genesisIndex?: GenesisIndex;\n    /**\n     * Height starting from the genesis block at the genesis index.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHeight height = 2;\n     */\n    height?: BlockHeight;\n    /**\n     * Whether to return results only from the specified genesis index (`true`),\n     * or allow results from more recent genesis indices as well (`false`).\n     *\n     * @generated from protobuf field: bool restrict = 3;\n     */\n    restrict: boolean;\n}\n/**\n * Response for GetBlocksAtHeight.\n *\n * @generated from protobuf message concordium.v2.BlocksAtHeightResponse\n */\nexport interface BlocksAtHeightResponse {\n    /**\n     * Live blocks at the given height.\n     *\n     * @generated from protobuf field: repeated concordium.v2.BlockHash blocks = 1;\n     */\n    blocks: BlockHash[];\n}\n/**\n * Type for the response of GetTokenomicsInfo.\n * Contains information related to tokenomics at the end of a given block.\n *\n * @generated from protobuf message concordium.v2.TokenomicsInfo\n */\nexport interface TokenomicsInfo {\n    /**\n     * @generated from protobuf oneof: tokenomics\n     */\n    tokenomics: {\n        oneofKind: \"v0\";\n        /**\n         * @generated from protobuf field: concordium.v2.TokenomicsInfo.V0 v0 = 1;\n         */\n        v0: TokenomicsInfo_V0;\n    } | {\n        oneofKind: \"v1\";\n        /**\n         * @generated from protobuf field: concordium.v2.TokenomicsInfo.V1 v1 = 2;\n         */\n        v1: TokenomicsInfo_V1;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Version 0 tokenomics.\n *\n * @generated from protobuf message concordium.v2.TokenomicsInfo.V0\n */\nexport interface TokenomicsInfo_V0 {\n    /**\n     * The total CCD in existence.\n     *\n     * @generated from protobuf field: concordium.v2.Amount total_amount = 1;\n     */\n    totalAmount?: Amount;\n    /**\n     * The total CCD in encrypted balances.\n     *\n     * @generated from protobuf field: concordium.v2.Amount total_encrypted_amount = 2;\n     */\n    totalEncryptedAmount?: Amount;\n    /**\n     * The amount in the baking reward account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount baking_reward_account = 3;\n     */\n    bakingRewardAccount?: Amount;\n    /**\n     * The amount in the finalization reward account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount finalization_reward_account = 4;\n     */\n    finalizationRewardAccount?: Amount;\n    /**\n     * The amount in the GAS account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount gas_account = 5;\n     */\n    gasAccount?: Amount;\n    /**\n     * The protocol version.\n     *\n     * @generated from protobuf field: concordium.v2.ProtocolVersion protocol_version = 6;\n     */\n    protocolVersion: ProtocolVersion;\n}\n/**\n * Version 1 tokenomics.\n *\n * @generated from protobuf message concordium.v2.TokenomicsInfo.V1\n */\nexport interface TokenomicsInfo_V1 {\n    /**\n     * The total CCD in existence.\n     *\n     * @generated from protobuf field: concordium.v2.Amount total_amount = 1;\n     */\n    totalAmount?: Amount;\n    /**\n     * The total CCD in encrypted balances.\n     *\n     * @generated from protobuf field: concordium.v2.Amount total_encrypted_amount = 2;\n     */\n    totalEncryptedAmount?: Amount;\n    /**\n     * The amount in the baking reward account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount baking_reward_account = 3;\n     */\n    bakingRewardAccount?: Amount;\n    /**\n     * The amount in the finalization reward account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount finalization_reward_account = 4;\n     */\n    finalizationRewardAccount?: Amount;\n    /**\n     * The amount in the GAS account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount gas_account = 5;\n     */\n    gasAccount?: Amount;\n    /**\n     * The transaction reward fraction accruing to the foundation (to be paid at next payday).\n     *\n     * @generated from protobuf field: concordium.v2.Amount foundation_transaction_rewards = 6;\n     */\n    foundationTransactionRewards?: Amount;\n    /**\n     * The time of the next payday.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp next_payday_time = 7;\n     */\n    nextPaydayTime?: Timestamp;\n    /**\n     * The rate at which CCD will be minted (as a proportion of the total supply) at the next payday.\n     *\n     * @generated from protobuf field: concordium.v2.MintRate next_payday_mint_rate = 8;\n     */\n    nextPaydayMintRate?: MintRate;\n    /**\n     * The total capital put up as stake by bakers and delegators.\n     *\n     * @generated from protobuf field: concordium.v2.Amount total_staked_capital = 9;\n     */\n    totalStakedCapital?: Amount;\n    /**\n     * The protocol version.\n     *\n     * @generated from protobuf field: concordium.v2.ProtocolVersion protocol_version = 10;\n     */\n    protocolVersion: ProtocolVersion;\n}\n/**\n * Request for InvokeInstance.\n *\n * @generated from protobuf message concordium.v2.InvokeInstanceRequest\n */\nexport interface InvokeInstanceRequest {\n    /**\n     * Block to invoke the contract. The invocation will be at the end of the given block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;\n     */\n    blockHash?: BlockHashInput;\n    /**\n     * Invoker of the contract. If this is not supplied then the contract will be\n     * invoked by an account with address 0, no credentials and sufficient amount\n     * of CCD to cover the transfer amount. If given, the relevant address (either\n     * account or contract) must exist in the blockstate.\n     *\n     * @generated from protobuf field: optional concordium.v2.Address invoker = 2;\n     */\n    invoker?: Address;\n    /**\n     * Address of the contract instance to invoke.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress instance = 3;\n     */\n    instance?: ContractAddress;\n    /**\n     * Amount to invoke the smart contract instance with.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 4;\n     */\n    amount?: Amount;\n    /**\n     * The entrypoint of the smart contract instance to invoke.\n     *\n     * @generated from protobuf field: concordium.v2.ReceiveName entrypoint = 5;\n     */\n    entrypoint?: ReceiveName;\n    /**\n     * The parameter bytes to include in the invocation of the entrypoint.\n     *\n     * @generated from protobuf field: concordium.v2.Parameter parameter = 6;\n     */\n    parameter?: Parameter;\n    /**\n     * And what amount of energy to allow for execution. This cannot exceed\n     * `100_000_000_000`, but in practice it should be much less. The maximum\n     * block energy is typically in the range of a few million.\n     *\n     * @generated from protobuf field: concordium.v2.Energy energy = 7;\n     */\n    energy?: Energy;\n}\n/**\n * Response type for InvokeInstance.\n *\n * @generated from protobuf message concordium.v2.InvokeInstanceResponse\n */\nexport interface InvokeInstanceResponse {\n    /**\n     * @generated from protobuf oneof: result\n     */\n    result: {\n        oneofKind: \"success\";\n        /**\n         * @generated from protobuf field: concordium.v2.InvokeInstanceResponse.Success success = 1;\n         */\n        success: InvokeInstanceResponse_Success;\n    } | {\n        oneofKind: \"failure\";\n        /**\n         * @generated from protobuf field: concordium.v2.InvokeInstanceResponse.Failure failure = 2;\n         */\n        failure: InvokeInstanceResponse_Failure;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Contract execution failed.\n *\n * @generated from protobuf message concordium.v2.InvokeInstanceResponse.Failure\n */\nexport interface InvokeInstanceResponse_Failure {\n    /**\n     * If invoking a V0 contract this is not provided, otherwise it is\n     * potentially return value produced by the call unless the call failed with\n     * out of energy or runtime error. If the V1 contract terminated with a\n     * logic error then the return value is present.\n     *\n     * @generated from protobuf field: optional bytes return_value = 1;\n     */\n    returnValue?: Uint8Array;\n    /**\n     * Energy used by the execution.\n     *\n     * @generated from protobuf field: concordium.v2.Energy used_energy = 2;\n     */\n    usedEnergy?: Energy;\n    /**\n     * Contract execution failed for the given reason.\n     *\n     * @generated from protobuf field: concordium.v2.RejectReason reason = 3;\n     */\n    reason?: RejectReason;\n}\n/**\n * Contract execution succeeded.\n *\n * @generated from protobuf message concordium.v2.InvokeInstanceResponse.Success\n */\nexport interface InvokeInstanceResponse_Success {\n    /**\n     * If invoking a V0 contract this is absent. Otherwise it is the return\n     * value produced by the contract.\n     *\n     * @generated from protobuf field: optional bytes return_value = 1;\n     */\n    returnValue?: Uint8Array;\n    /**\n     * Energy used by the execution.\n     *\n     * @generated from protobuf field: concordium.v2.Energy used_energy = 2;\n     */\n    usedEnergy?: Energy;\n    /**\n     * Effects produced by contract execution.\n     *\n     * @generated from protobuf field: repeated concordium.v2.ContractTraceElement effects = 3;\n     */\n    effects: ContractTraceElement[];\n}\n/**\n * Request for GetPoolDelegators and GetPoolDelegatorsRewardPeriod.\n *\n * @generated from protobuf message concordium.v2.GetPoolDelegatorsRequest\n */\nexport interface GetPoolDelegatorsRequest {\n    /**\n     * Block in which to query the delegators.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHashInput block_hash = 1;\n     */\n    blockHash?: BlockHashInput;\n    /**\n     * The 'BakerId' of the pool owner.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker = 2;\n     */\n    baker?: BakerId;\n}\n/**\n * Stream item for GetPoolDelegators and GetPassiveDelegators.\n *\n * @generated from protobuf message concordium.v2.DelegatorInfo\n */\nexport interface DelegatorInfo {\n    /**\n     * The delegator account address.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;\n     */\n    account?: AccountAddress;\n    /**\n     * The amount of stake currently staked to the pool.\n     *\n     * @generated from protobuf field: concordium.v2.Amount stake = 2;\n     */\n    stake?: Amount;\n    /**\n     * Pending change to the current stake of the delegator.\n     *\n     * @generated from protobuf field: optional concordium.v2.StakePendingChange pending_change = 3;\n     */\n    pendingChange?: StakePendingChange;\n}\n/**\n * Stream item for GetPoolDelegatorsRewardPeriod and GetPassiveDelegatorsRewardPeriod.\n *\n * @generated from protobuf message concordium.v2.DelegatorRewardPeriodInfo\n */\nexport interface DelegatorRewardPeriodInfo {\n    /**\n     * The delegator account address.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;\n     */\n    account?: AccountAddress;\n    /**\n     * The amount of stake currently staked to the pool.\n     *\n     * @generated from protobuf field: concordium.v2.Amount stake = 2;\n     */\n    stake?: Amount;\n}\n/**\n * Response type for GetBranches.\n *\n * @generated from protobuf message concordium.v2.Branch\n */\nexport interface Branch {\n    /**\n     * The hash of the block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash block_hash = 1;\n     */\n    blockHash?: BlockHash;\n    /**\n     * Further blocks branching of this block.\n     *\n     * @generated from protobuf field: repeated concordium.v2.Branch children = 2;\n     */\n    children: Branch[];\n}\n/**\n * The leadership election nonce is an unpredictable value updated once an\n * epoch to make sure that bakers cannot predict too far in the future when\n * they will win the right to bake blocks.\n *\n * @generated from protobuf message concordium.v2.LeadershipElectionNonce\n */\nexport interface LeadershipElectionNonce {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * Response type for GetElectionInfo.\n * Contains information related to baker election for a perticular block.\n *\n * @generated from protobuf message concordium.v2.ElectionInfo\n */\nexport interface ElectionInfo {\n    /**\n     * Baking lottery election difficulty. Present only in protocol versions 1-5.\n     *\n     * @generated from protobuf field: optional concordium.v2.ElectionDifficulty election_difficulty = 1;\n     */\n    electionDifficulty?: ElectionDifficulty;\n    /**\n     * Current leadership election nonce for the lottery.\n     *\n     * @generated from protobuf field: concordium.v2.LeadershipElectionNonce election_nonce = 2;\n     */\n    electionNonce?: LeadershipElectionNonce;\n    /**\n     * List of the currently eligible bakers.\n     *\n     * @generated from protobuf field: repeated concordium.v2.ElectionInfo.Baker baker_election_info = 3;\n     */\n    bakerElectionInfo: ElectionInfo_Baker[];\n}\n/**\n * @generated from protobuf message concordium.v2.ElectionInfo.Baker\n */\nexport interface ElectionInfo_Baker {\n    /**\n     * The ID of the baker.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker = 1;\n     */\n    baker?: BakerId;\n    /**\n     * The account address of the baker.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 2;\n     */\n    account?: AccountAddress;\n    /**\n     * The lottery power of the baker, rounded to the nearest representable \"double\".\n     *\n     * @generated from protobuf field: double lottery_power = 3;\n     */\n    lotteryPower: number;\n}\n/**\n * A protocol generated event that is not directly caused by a transaction. This\n * includes minting new CCD, rewarding different bakers and delegators, etc.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent\n */\nexport interface BlockSpecialEvent {\n    /**\n     * @generated from protobuf oneof: event\n     */\n    event: {\n        oneofKind: \"bakingRewards\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.BakingRewards baking_rewards = 1;\n         */\n        bakingRewards: BlockSpecialEvent_BakingRewards;\n    } | {\n        oneofKind: \"mint\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.Mint mint = 2;\n         */\n        mint: BlockSpecialEvent_Mint;\n    } | {\n        oneofKind: \"finalizationRewards\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.FinalizationRewards finalization_rewards = 3;\n         */\n        finalizationRewards: BlockSpecialEvent_FinalizationRewards;\n    } | {\n        oneofKind: \"blockReward\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.BlockReward block_reward = 4;\n         */\n        blockReward: BlockSpecialEvent_BlockReward;\n    } | {\n        oneofKind: \"paydayFoundationReward\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.PaydayFoundationReward payday_foundation_reward = 5;\n         */\n        paydayFoundationReward: BlockSpecialEvent_PaydayFoundationReward;\n    } | {\n        oneofKind: \"paydayAccountReward\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.PaydayAccountReward payday_account_reward = 6;\n         */\n        paydayAccountReward: BlockSpecialEvent_PaydayAccountReward;\n    } | {\n        oneofKind: \"blockAccrueReward\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.BlockAccrueReward block_accrue_reward = 7;\n         */\n        blockAccrueReward: BlockSpecialEvent_BlockAccrueReward;\n    } | {\n        oneofKind: \"paydayPoolReward\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.PaydayPoolReward payday_pool_reward = 8;\n         */\n        paydayPoolReward: BlockSpecialEvent_PaydayPoolReward;\n    } | {\n        oneofKind: \"validatorSuspended\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.ValidatorSuspended validator_suspended = 9;\n         */\n        validatorSuspended: BlockSpecialEvent_ValidatorSuspended;\n    } | {\n        oneofKind: \"validatorPrimedForSuspension\";\n        /**\n         * @generated from protobuf field: concordium.v2.BlockSpecialEvent.ValidatorPrimedForSuspension validator_primed_for_suspension = 10;\n         */\n        validatorPrimedForSuspension: BlockSpecialEvent_ValidatorPrimedForSuspension;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * A representation of a mapping from an account address to an amount.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.AccountAmounts\n */\nexport interface BlockSpecialEvent_AccountAmounts {\n    /**\n     * @generated from protobuf field: repeated concordium.v2.BlockSpecialEvent.AccountAmounts.Entry entries = 1;\n     */\n    entries: BlockSpecialEvent_AccountAmounts_Entry[];\n}\n/**\n * The entry for the map.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.AccountAmounts.Entry\n */\nexport interface BlockSpecialEvent_AccountAmounts_Entry {\n    /**\n     * The key type\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;\n     */\n    account?: AccountAddress;\n    /**\n     * The value type\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 2;\n     */\n    amount?: Amount;\n}\n/**\n * Payment to each baker of a previous epoch, in proportion to the number\n * of blocks they contributed.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.BakingRewards\n */\nexport interface BlockSpecialEvent_BakingRewards {\n    /**\n     * The amount awarded to each baker.\n     *\n     * @generated from protobuf field: concordium.v2.BlockSpecialEvent.AccountAmounts baker_rewards = 1;\n     */\n    bakerRewards?: BlockSpecialEvent_AccountAmounts;\n    /**\n     * The remaining balance of the baker reward account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount remainder = 2;\n     */\n    remainder?: Amount;\n}\n/**\n * Minting of new CCD.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.Mint\n */\nexport interface BlockSpecialEvent_Mint {\n    /**\n     * The amount allocated to the banking reward account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount mint_baking_reward = 1;\n     */\n    mintBakingReward?: Amount;\n    /**\n     * The amount allocated to the finalization reward account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount mint_finalization_reward = 2;\n     */\n    mintFinalizationReward?: Amount;\n    /**\n     * The amount allocated as the platform development charge.\n     *\n     * @generated from protobuf field: concordium.v2.Amount mint_platform_development_charge = 3;\n     */\n    mintPlatformDevelopmentCharge?: Amount;\n    /**\n     * The account to which the platform development charge is paid.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 4;\n     */\n    foundationAccount?: AccountAddress;\n}\n/**\n * Payment to each finalizer on inclusion of a finalization record in a block.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.FinalizationRewards\n */\nexport interface BlockSpecialEvent_FinalizationRewards {\n    /**\n     * The amount awarded to each finalizer.\n     *\n     * @generated from protobuf field: concordium.v2.BlockSpecialEvent.AccountAmounts finalization_rewards = 1;\n     */\n    finalizationRewards?: BlockSpecialEvent_AccountAmounts;\n    /**\n     * The remaining balance of the finalization reward account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount remainder = 2;\n     */\n    remainder?: Amount;\n}\n/**\n * Disbursement of fees from a block between the GAS account,\n * the baker, and the foundation. It should always be that:\n *\n * ```transaction_fees + old_gas_account = new_gas_account + baker_reward + foundation_charge```\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.BlockReward\n */\nexport interface BlockSpecialEvent_BlockReward {\n    /**\n     * The total fees paid for transactions in the block.\n     *\n     * @generated from protobuf field: concordium.v2.Amount transaction_fees = 1;\n     */\n    transactionFees?: Amount;\n    /**\n     * The old balance of the GAS account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount old_gas_account = 2;\n     */\n    oldGasAccount?: Amount;\n    /**\n     * The new balance of the GAS account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount new_gas_account = 3;\n     */\n    newGasAccount?: Amount;\n    /**\n     * The amount awarded to the baker.\n     *\n     * @generated from protobuf field: concordium.v2.Amount baker_reward = 4;\n     */\n    bakerReward?: Amount;\n    /**\n     * The amount awarded to the foundation.\n     *\n     * @generated from protobuf field: concordium.v2.Amount foundation_charge = 5;\n     */\n    foundationCharge?: Amount;\n    /**\n     * The baker of the block, who receives the award.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress baker = 6;\n     */\n    baker?: AccountAddress;\n    /**\n     * The foundation account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 7;\n     */\n    foundationAccount?: AccountAddress;\n}\n/**\n * Foundation tax.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.PaydayFoundationReward\n */\nexport interface BlockSpecialEvent_PaydayFoundationReward {\n    /**\n     * The account that got rewarded.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 1;\n     */\n    foundationAccount?: AccountAddress;\n    /**\n     * The transaction fee reward at payday to the account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount development_charge = 2;\n     */\n    developmentCharge?: Amount;\n}\n/**\n * Reward payment to the given account.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.PaydayAccountReward\n */\nexport interface BlockSpecialEvent_PaydayAccountReward {\n    /**\n     * The account that got rewarded.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;\n     */\n    account?: AccountAddress;\n    /**\n     * The transaction fee reward at payday to the account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount transaction_fees = 2;\n     */\n    transactionFees?: Amount;\n    /**\n     * The baking reward at payday to the account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount baker_reward = 3;\n     */\n    bakerReward?: Amount;\n    /**\n     * The finalization reward at payday to the account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount finalization_reward = 4;\n     */\n    finalizationReward?: Amount;\n}\n/**\n * Amounts accrued to accounts for each baked block.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.BlockAccrueReward\n */\nexport interface BlockSpecialEvent_BlockAccrueReward {\n    /**\n     * The total fees paid for transactions in the block.\n     *\n     * @generated from protobuf field: concordium.v2.Amount transaction_fees = 1;\n     */\n    transactionFees?: Amount;\n    /**\n     * The old balance of the GAS account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount old_gas_account = 2;\n     */\n    oldGasAccount?: Amount;\n    /**\n     * The new balance of the GAS account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount new_gas_account = 3;\n     */\n    newGasAccount?: Amount;\n    /**\n     * The amount awarded to the baker.\n     *\n     * @generated from protobuf field: concordium.v2.Amount baker_reward = 4;\n     */\n    bakerReward?: Amount;\n    /**\n     * The amount awarded to the passive delegators.\n     *\n     * @generated from protobuf field: concordium.v2.Amount passive_reward = 5;\n     */\n    passiveReward?: Amount;\n    /**\n     * The amount awarded to the foundation.\n     *\n     * @generated from protobuf field: concordium.v2.Amount foundation_charge = 6;\n     */\n    foundationCharge?: Amount;\n    /**\n     * The baker of the block, who will receive the award.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker = 7;\n     */\n    baker?: BakerId;\n}\n/**\n * Payment distributed to a pool or passive delegators.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.PaydayPoolReward\n */\nexport interface BlockSpecialEvent_PaydayPoolReward {\n    /**\n     * The pool owner (passive delegators when not present).\n     *\n     * @generated from protobuf field: optional concordium.v2.BakerId pool_owner = 1;\n     */\n    poolOwner?: BakerId;\n    /**\n     * Accrued transaction fees for pool.\n     *\n     * @generated from protobuf field: concordium.v2.Amount transaction_fees = 2;\n     */\n    transactionFees?: Amount;\n    /**\n     * Accrued baking rewards for pool.\n     *\n     * @generated from protobuf field: concordium.v2.Amount baker_reward = 3;\n     */\n    bakerReward?: Amount;\n    /**\n     * Accrued finalization rewards for pool.\n     *\n     * @generated from protobuf field: concordium.v2.Amount finalization_reward = 4;\n     */\n    finalizationReward?: Amount;\n}\n/**\n * The id of a validator that got suspended due to too many missed rounds.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.ValidatorSuspended\n */\nexport interface BlockSpecialEvent_ValidatorSuspended {\n    /**\n     * The id of the suspended validator.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId bakerId = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * The account of the suspended validator.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 2;\n     */\n    account?: AccountAddress;\n}\n/**\n * The id of a validator that is primed for suspension at the next snapshot\n * epoch due to too many missed rounds.\n *\n * @generated from protobuf message concordium.v2.BlockSpecialEvent.ValidatorPrimedForSuspension\n */\nexport interface BlockSpecialEvent_ValidatorPrimedForSuspension {\n    /**\n     * The id of the primed validator.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId bakerId = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * The account of the primed validator.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 2;\n     */\n    account?: AccountAddress;\n}\n/**\n * A pending update.\n *\n * @generated from protobuf message concordium.v2.PendingUpdate\n */\nexport interface PendingUpdate {\n    /**\n     * The effective time of the update.\n     *\n     * @generated from protobuf field: concordium.v2.TransactionTime effective_time = 1;\n     */\n    effectiveTime?: TransactionTime;\n    /**\n     * @generated from protobuf oneof: effect\n     */\n    effect: {\n        oneofKind: \"rootKeys\";\n        /**\n         * Updates to the root keys.\n         *\n         * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys = 2;\n         */\n        rootKeys: HigherLevelKeys;\n    } | {\n        oneofKind: \"level1Keys\";\n        /**\n         * Updates to the level 1 keys.\n         *\n         * @generated from protobuf field: concordium.v2.HigherLevelKeys level1_keys = 3;\n         */\n        level1Keys: HigherLevelKeys;\n    } | {\n        oneofKind: \"level2KeysCpv0\";\n        /**\n         * Updates to the level 2 keys.\n         *\n         * @generated from protobuf field: concordium.v2.AuthorizationsV0 level2_keys_cpv_0 = 4;\n         */\n        level2KeysCpv0: AuthorizationsV0;\n    } | {\n        oneofKind: \"level2KeysCpv1\";\n        /**\n         * Updates to the level 2 keys.\n         *\n         * @generated from protobuf field: concordium.v2.AuthorizationsV1 level2_keys_cpv_1 = 5;\n         */\n        level2KeysCpv1: AuthorizationsV1;\n    } | {\n        oneofKind: \"protocol\";\n        /**\n         * Protocol updates.\n         *\n         * @generated from protobuf field: concordium.v2.ProtocolUpdate protocol = 6;\n         */\n        protocol: ProtocolUpdate;\n    } | {\n        oneofKind: \"electionDifficulty\";\n        /**\n         * Updates to the election difficulty parameter.\n         *\n         * @generated from protobuf field: concordium.v2.ElectionDifficulty election_difficulty = 7;\n         */\n        electionDifficulty: ElectionDifficulty;\n    } | {\n        oneofKind: \"euroPerEnergy\";\n        /**\n         * Updates to the euro:energy exchange rate.\n         *\n         * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy = 8;\n         */\n        euroPerEnergy: ExchangeRate;\n    } | {\n        oneofKind: \"microCcdPerEuro\";\n        /**\n         * Updates to the CCD:EUR exchange rate.\n         *\n         * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro = 9;\n         */\n        microCcdPerEuro: ExchangeRate;\n    } | {\n        oneofKind: \"foundationAccount\";\n        /**\n         * Updates to the foundation account.\n         *\n         * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 10;\n         */\n        foundationAccount: AccountAddress;\n    } | {\n        oneofKind: \"mintDistributionCpv0\";\n        /**\n         * Updates to the mint distribution. Is only relevant prior to protocol version 4.\n         *\n         * @generated from protobuf field: concordium.v2.MintDistributionCpv0 mint_distribution_cpv_0 = 11;\n         */\n        mintDistributionCpv0: MintDistributionCpv0;\n    } | {\n        oneofKind: \"mintDistributionCpv1\";\n        /**\n         * The mint distribution was updated. Introduced in protocol version 4.\n         *\n         * @generated from protobuf field: concordium.v2.MintDistributionCpv1 mint_distribution_cpv_1 = 12;\n         */\n        mintDistributionCpv1: MintDistributionCpv1;\n    } | {\n        oneofKind: \"transactionFeeDistribution\";\n        /**\n         * Updates to the transaction fee distribution.\n         *\n         * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution = 13;\n         */\n        transactionFeeDistribution: TransactionFeeDistribution;\n    } | {\n        oneofKind: \"gasRewards\";\n        /**\n         * Updates to the GAS rewards.\n         *\n         * @generated from protobuf field: concordium.v2.GasRewards gas_rewards = 14;\n         */\n        gasRewards: GasRewards;\n    } | {\n        oneofKind: \"poolParametersCpv0\";\n        /**\n         * Updates baker stake threshold. Is only relevant prior to protocol version 4.\n         *\n         * @generated from protobuf field: concordium.v2.BakerStakeThreshold pool_parameters_cpv_0 = 15;\n         */\n        poolParametersCpv0: BakerStakeThreshold;\n    } | {\n        oneofKind: \"poolParametersCpv1\";\n        /**\n         * Updates pool parameters. Introduced in protocol version 4.\n         *\n         * @generated from protobuf field: concordium.v2.PoolParametersCpv1 pool_parameters_cpv_1 = 16;\n         */\n        poolParametersCpv1: PoolParametersCpv1;\n    } | {\n        oneofKind: \"addAnonymityRevoker\";\n        /**\n         * Adds a new anonymity revoker.\n         *\n         * @generated from protobuf field: concordium.v2.ArInfo add_anonymity_revoker = 17;\n         */\n        addAnonymityRevoker: ArInfo;\n    } | {\n        oneofKind: \"addIdentityProvider\";\n        /**\n         * Adds a new identity provider.\n         *\n         * @generated from protobuf field: concordium.v2.IpInfo add_identity_provider = 18;\n         */\n        addIdentityProvider: IpInfo;\n    } | {\n        oneofKind: \"cooldownParameters\";\n        /**\n         * Updates to cooldown parameters for chain parameters version 1 introduced in protocol version 4.\n         *\n         * @generated from protobuf field: concordium.v2.CooldownParametersCpv1 cooldown_parameters = 19;\n         */\n        cooldownParameters: CooldownParametersCpv1;\n    } | {\n        oneofKind: \"timeParameters\";\n        /**\n         * Updates to time parameters for chain parameters version 1 introduced in protocol version 4.\n         *\n         * @generated from protobuf field: concordium.v2.TimeParametersCpv1 time_parameters = 20;\n         */\n        timeParameters: TimeParametersCpv1;\n    } | {\n        oneofKind: \"gasRewardsCpv2\";\n        /**\n         * Updates to the GAS rewards effective from protocol version 6 (chain parameters version 2).\n         *\n         * @generated from protobuf field: concordium.v2.GasRewardsCpv2 gas_rewards_cpv_2 = 21;\n         */\n        gasRewardsCpv2: GasRewardsCpv2;\n    } | {\n        oneofKind: \"timeoutParameters\";\n        /**\n         * Updates to the consensus timeouts for chain parameters version 2.\n         *\n         * @generated from protobuf field: concordium.v2.TimeoutParameters timeout_parameters = 22;\n         */\n        timeoutParameters: TimeoutParameters;\n    } | {\n        oneofKind: \"minBlockTime\";\n        /**\n         * Updates to the the minimum time between blocks for chain parameters version 2.\n         *\n         * @generated from protobuf field: concordium.v2.Duration min_block_time = 23;\n         */\n        minBlockTime: Duration;\n    } | {\n        oneofKind: \"blockEnergyLimit\";\n        /**\n         * Updates to the block energy limit for chain parameters version 2.\n         *\n         * @generated from protobuf field: concordium.v2.Energy block_energy_limit = 24;\n         */\n        blockEnergyLimit: Energy;\n    } | {\n        oneofKind: \"finalizationCommitteeParameters\";\n        /**\n         * Updates to the finalization committee for for chain parameters version 2.\n         *\n         * @generated from protobuf field: concordium.v2.FinalizationCommitteeParameters finalization_committee_parameters = 25;\n         */\n        finalizationCommitteeParameters: FinalizationCommitteeParameters;\n    } | {\n        oneofKind: \"validatorScoreParameters\";\n        /**\n         * Updates to the validator score parameters for chain parameters version 3.\n         *\n         * @generated from protobuf field: concordium.v2.ValidatorScoreParameters validator_score_parameters = 26;\n         */\n        validatorScoreParameters: ValidatorScoreParameters;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * The response for `GetNextUpdateSequenceNumbers`.\n *\n * @generated from protobuf message concordium.v2.NextUpdateSequenceNumbers\n */\nexport interface NextUpdateSequenceNumbers {\n    /**\n     * Updates to the root keys.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber root_keys = 1;\n     */\n    rootKeys?: SequenceNumber;\n    /**\n     * Updates to the level 1 keys.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber level1_keys = 2;\n     */\n    level1Keys?: SequenceNumber;\n    /**\n     * Updates to the level 2 keys.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber level2_keys = 3;\n     */\n    level2Keys?: SequenceNumber;\n    /**\n     * Protocol updates.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber protocol = 4;\n     */\n    protocol?: SequenceNumber;\n    /**\n     * Updates to the election difficulty parameter.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber election_difficulty = 5;\n     */\n    electionDifficulty?: SequenceNumber;\n    /**\n     * Updates to the euro:energy exchange rate.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber euro_per_energy = 6;\n     */\n    euroPerEnergy?: SequenceNumber;\n    /**\n     * Updates to the CCD:EUR exchange rate.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber micro_ccd_per_euro = 7;\n     */\n    microCcdPerEuro?: SequenceNumber;\n    /**\n     * Updates to the foundation account.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber foundation_account = 8;\n     */\n    foundationAccount?: SequenceNumber;\n    /**\n     * Updates to the mint distribution.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber mint_distribution = 9;\n     */\n    mintDistribution?: SequenceNumber;\n    /**\n     * Updates to the transaction fee distribution.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber transaction_fee_distribution = 10;\n     */\n    transactionFeeDistribution?: SequenceNumber;\n    /**\n     * Updates to the GAS rewards.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber gas_rewards = 11;\n     */\n    gasRewards?: SequenceNumber;\n    /**\n     * Updates pool parameters.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber pool_parameters = 12;\n     */\n    poolParameters?: SequenceNumber;\n    /**\n     * Adds a new anonymity revoker.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber add_anonymity_revoker = 13;\n     */\n    addAnonymityRevoker?: SequenceNumber;\n    /**\n     * Adds a new identity provider.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber add_identity_provider = 14;\n     */\n    addIdentityProvider?: SequenceNumber;\n    /**\n     * Updates to cooldown parameters for chain parameters version 1 introduced in protocol version 4.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber cooldown_parameters = 15;\n     */\n    cooldownParameters?: SequenceNumber;\n    /**\n     * Updates to time parameters for chain parameters version 1 introduced in protocol version 4.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber time_parameters = 16;\n     */\n    timeParameters?: SequenceNumber;\n    /**\n     * Updates to the timeout parameters\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber timeout_parameters = 17;\n     */\n    timeoutParameters?: SequenceNumber;\n    /**\n     * Updates to the the minimum time between blocks for chain parameters version 2.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber min_block_time = 18;\n     */\n    minBlockTime?: SequenceNumber;\n    /**\n     * Updates to the block energy limit for chain parameters version 2.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber block_energy_limit = 19;\n     */\n    blockEnergyLimit?: SequenceNumber;\n    /**\n     * Updates to the finalization committee parameters\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber finalization_committee_parameters = 20;\n     */\n    finalizationCommitteeParameters?: SequenceNumber;\n    /**\n     * Updates to the validator score parameters for chain parameters version 3.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber validator_score_parameters = 21;\n     */\n    validatorScoreParameters?: SequenceNumber;\n    /**\n     * Updates to the protocol level tokens. Introduced in protocol version 9.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber protocol_level_tokens = 22;\n     */\n    protocolLevelTokens?: SequenceNumber;\n}\n/**\n * A request to send a new block item to the chain.\n * An IP address\n *\n * @generated from protobuf message concordium.v2.IpAddress\n */\nexport interface IpAddress {\n    /**\n     * @generated from protobuf field: string value = 1;\n     */\n    value: string;\n}\n/**\n * A port\n * Valid port numbers are expected thus\n * the value is expected to be in the range (0..u16::MAX).\n *\n * @generated from protobuf message concordium.v2.Port\n */\nexport interface Port {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * A socket address consisting of\n * an IP + port.\n *\n * @generated from protobuf message concordium.v2.IpSocketAddress\n */\nexport interface IpSocketAddress {\n    /**\n     * @generated from protobuf field: concordium.v2.IpAddress ip = 1;\n     */\n    ip?: IpAddress;\n    /**\n     * @generated from protobuf field: concordium.v2.Port port = 2;\n     */\n    port?: Port;\n}\n/**\n * A peer id\n * An identifier that the peer wants to be\n * be recoknized by.\n * The underlying value is simply a u64.\n * Note. There is no authenticity of the peer id and\n * as such it is only used for logging purposes.\n *\n * @generated from protobuf message concordium.v2.PeerId\n */\nexport interface PeerId {\n    /**\n     * @generated from protobuf field: string value = 1;\n     */\n    value: string;\n}\n/**\n * A banned peer\n *\n * @generated from protobuf message concordium.v2.BannedPeer\n */\nexport interface BannedPeer {\n    /**\n     * The IP address of the banned peer.\n     *\n     * @generated from protobuf field: concordium.v2.IpAddress ip_address = 1;\n     */\n    ipAddress?: IpAddress;\n}\n/**\n * The banned peers given by\n * their IP addresses.\n *\n * @generated from protobuf message concordium.v2.BannedPeers\n */\nexport interface BannedPeers {\n    /**\n     * @generated from protobuf field: repeated concordium.v2.BannedPeer peers = 1;\n     */\n    peers: BannedPeer[];\n}\n/**\n * A peer to ban specified by its IP.\n * Note. This will ban all peers located behind the\n * specified IP even though they are using different ports.\n *\n * @generated from protobuf message concordium.v2.PeerToBan\n */\nexport interface PeerToBan {\n    /**\n     * @generated from protobuf field: concordium.v2.IpAddress ip_address = 1;\n     */\n    ipAddress?: IpAddress;\n}\n/**\n * Request to enable dumping of network packages.\n *\n * @generated from protobuf message concordium.v2.DumpRequest\n */\nexport interface DumpRequest {\n    /**\n     * Which file to dump the packages into.\n     * Requires a valid path.\n     *\n     * @generated from protobuf field: string file = 1;\n     */\n    file: string;\n    /**\n     * Whether the node should dump raw packages.\n     *\n     * @generated from protobuf field: bool raw = 2;\n     */\n    raw: boolean;\n}\n/**\n * Peers and their associated network related statistics\n *\n * @generated from protobuf message concordium.v2.PeersInfo\n */\nexport interface PeersInfo {\n    /**\n     * @generated from protobuf field: repeated concordium.v2.PeersInfo.Peer peers = 1;\n     */\n    peers: PeersInfo_Peer[];\n}\n/**\n * A peer that the node is connected to.\n *\n * @generated from protobuf message concordium.v2.PeersInfo.Peer\n */\nexport interface PeersInfo_Peer {\n    /**\n     * The identifier of the peer that it\n     * wishes to be identified by.\n     *\n     * @generated from protobuf field: concordium.v2.PeerId peer_id = 1;\n     */\n    peerId?: PeerId;\n    /**\n     * The port of the peer.\n     *\n     * @generated from protobuf field: concordium.v2.IpSocketAddress socket_address = 2;\n     */\n    socketAddress?: IpSocketAddress;\n    /**\n     * Network related statistics for the peer.\n     *\n     * @generated from protobuf field: concordium.v2.PeersInfo.Peer.NetworkStats network_stats = 3;\n     */\n    networkStats?: PeersInfo_Peer_NetworkStats;\n    /**\n     * @generated from protobuf oneof: consensus_info\n     */\n    consensusInfo: {\n        oneofKind: \"bootstrapper\";\n        /**\n         * The peer is of type `Bootstrapper` is not participating in consensus\n         * and thus has no catchup status.\n         *\n         * @generated from protobuf field: concordium.v2.Empty bootstrapper = 4;\n         */\n        bootstrapper: Empty;\n    } | {\n        oneofKind: \"nodeCatchupStatus\";\n        /**\n         * The peer is a regular node and have\n         * an associated catchup status.\n         *\n         * @generated from protobuf field: concordium.v2.PeersInfo.Peer.CatchupStatus node_catchup_status = 5;\n         */\n        nodeCatchupStatus: PeersInfo_Peer_CatchupStatus;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Network statistics for the peer\n *\n * @generated from protobuf message concordium.v2.PeersInfo.Peer.NetworkStats\n */\nexport interface PeersInfo_Peer_NetworkStats {\n    /**\n     * The number of messages sent to the peer.\n     * Packets are blocks, transactions, catchup messages, finalization records\n     * and network messages such as pings and peer requests.\n     *\n     * @generated from protobuf field: uint64 packets_sent = 2;\n     */\n    packetsSent: bigint;\n    /**\n     * The number of messages received from the peer.\n     * Packets are blocks, transactions, catchup messages, finalization records\n     * and network messages such as pings and peer requests.\n     *\n     * @generated from protobuf field: uint64 packets_received = 3;\n     */\n    packetsReceived: bigint;\n    /**\n     * The connection latency (i.e., ping time) in milliseconds.\n     *\n     * @generated from protobuf field: uint64 latency = 4;\n     */\n    latency: bigint;\n}\n/**\n * @generated from protobuf enum concordium.v2.PeersInfo.Peer.CatchupStatus\n */\nexport enum PeersInfo_Peer_CatchupStatus {\n    /**\n     * The peer does not have any data unknown to us. If we receive a message from the\n     * peer that refers to unknown data (e.g., an unknown block) the peer is marked as pending.\n     *\n     * @generated from protobuf enum value: UPTODATE = 0;\n     */\n    UPTODATE = 0,\n    /**\n     * The peer might have some data unknown to us. A peer can be in this state either because\n     * it sent a message that refers to data unknown to us, or before we have established a baseline with it.\n     * The latter happens during node startup, as well as upon protocol updates until the initial catchup handshake\n     * completes.\n     *\n     * @generated from protobuf enum value: PENDING = 1;\n     */\n    PENDING = 1,\n    /**\n     * The node is currently catching up by requesting blocks from this peer.\n     * There will be at most one peer with this status at a time.\n     * Once the peer has responded to the request, its status will be changed to:\n     * - 'UPTODATE' if the peer has no more data that is not known to us\n     * - 'PENDING' if the node has more data that is unknown to us.\n     *\n     * @generated from protobuf enum value: CATCHINGUP = 2;\n     */\n    CATCHINGUP = 2\n}\n/**\n * Node info response\n * Contains various information of the\n * enquired node.\n *\n * @generated from protobuf message concordium.v2.NodeInfo\n */\nexport interface NodeInfo {\n    /**\n     * The version of the node.\n     *\n     * @generated from protobuf field: string peer_version = 1;\n     */\n    peerVersion: string;\n    /**\n     * local time of the node.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp local_time = 3;\n     */\n    localTime?: Timestamp;\n    /**\n     * Number of milliseconds that the node\n     * has been alive.\n     *\n     * @generated from protobuf field: concordium.v2.Duration peer_uptime = 4;\n     */\n    peerUptime?: Duration;\n    /**\n     * Information related to the p2p protocol.\n     *\n     * @generated from protobuf field: concordium.v2.NodeInfo.NetworkInfo network_info = 5;\n     */\n    networkInfo?: NodeInfo_NetworkInfo;\n    /**\n     * @generated from protobuf oneof: details\n     */\n    details: {\n        oneofKind: \"bootstrapper\";\n        /**\n         * The node is a bootstrapper and is not running consensus.\n         *\n         * @generated from protobuf field: concordium.v2.Empty bootstrapper = 6;\n         */\n        bootstrapper: Empty;\n    } | {\n        oneofKind: \"node\";\n        /**\n         * The node is a regular node and runs the consensus\n         * protocol.\n         *\n         * @generated from protobuf field: concordium.v2.NodeInfo.Node node = 7;\n         */\n        node: NodeInfo_Node;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Network related information of the node.\n *\n * @generated from protobuf message concordium.v2.NodeInfo.NetworkInfo\n */\nexport interface NodeInfo_NetworkInfo {\n    /**\n     * The node id.\n     *\n     * @generated from protobuf field: concordium.v2.PeerId node_id = 1;\n     */\n    nodeId?: PeerId;\n    /**\n     * Total number of packets sent by the node.\n     *\n     * @generated from protobuf field: uint64 peer_total_sent = 2;\n     */\n    peerTotalSent: bigint;\n    /**\n     * Total number of packets received by the node.\n     *\n     * @generated from protobuf field: uint64 peer_total_received = 3;\n     */\n    peerTotalReceived: bigint;\n    /**\n     * Average outbound throughput in bytes per second.\n     *\n     * @generated from protobuf field: uint64 avg_bps_in = 4;\n     */\n    avgBpsIn: bigint;\n    /**\n     * Average inbound throughput in bytes per second.\n     *\n     * @generated from protobuf field: uint64 avg_bps_out = 5;\n     */\n    avgBpsOut: bigint;\n}\n/**\n * Consensus info for a node configured with baker keys.\n *\n * @generated from protobuf message concordium.v2.NodeInfo.BakerConsensusInfo\n */\nexport interface NodeInfo_BakerConsensusInfo {\n    /**\n     * @generated from protobuf field: concordium.v2.BakerId baker_id = 1;\n     */\n    bakerId?: BakerId;\n    /**\n     * @generated from protobuf oneof: status\n     */\n    status: {\n        oneofKind: \"passiveCommitteeInfo\";\n        /**\n         * The node is currently not baking.\n         *\n         * @generated from protobuf field: concordium.v2.NodeInfo.BakerConsensusInfo.PassiveCommitteeInfo passive_committee_info = 2;\n         */\n        passiveCommitteeInfo: NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo;\n    } | {\n        oneofKind: \"activeBakerCommitteeInfo\";\n        /**\n         * The node is configured with baker keys and\n         * is member of the baking committee.\n         *\n         * @generated from protobuf field: concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo active_baker_committee_info = 3;\n         */\n        activeBakerCommitteeInfo: NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo;\n    } | {\n        oneofKind: \"activeFinalizerCommitteeInfo\";\n        /**\n         * The node is configured with baker keys and\n         * is member of the baking and finalization committees.\n         *\n         * @generated from protobuf field: concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo active_finalizer_committee_info = 4;\n         */\n        activeFinalizerCommitteeInfo: NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Tagging message type for a node that\n * is configured with baker keys and active in\n * the current baking committee\n *\n * @generated from protobuf message concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo\n */\nexport interface NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo {\n}\n/**\n * Tagging message type for a node that\n * is configured with baker keys and active in\n * the current finalizer committee (and also baking committee).\n *\n * @generated from protobuf message concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo\n */\nexport interface NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo {\n}\n/**\n * The committee information of a node configured with\n * baker keys but somehow the node is _not_ part of the\n * current baking committee.\n *\n * @generated from protobuf enum concordium.v2.NodeInfo.BakerConsensusInfo.PassiveCommitteeInfo\n */\nexport enum NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo {\n    /**\n     * The node is started with baker keys however it is currently not in the baking committee.\n     * The node is __not__ baking.\n     *\n     * @generated from protobuf enum value: NOT_IN_COMMITTEE = 0;\n     */\n    NOT_IN_COMMITTEE = 0,\n    /**\n     * The account is registered as a baker but not in the current `Epoch`.\n     * The node is __not__ baking.\n     *\n     * @generated from protobuf enum value: ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE = 1;\n     */\n    ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE = 1,\n    /**\n     * The node has configured invalid baker keys i.e., the configured\n     * baker keys do not match the current keys on the baker account.\n     * The node is __not__ baking.\n     *\n     * @generated from protobuf enum value: ADDED_BUT_WRONG_KEYS = 2;\n     */\n    ADDED_BUT_WRONG_KEYS = 2\n}\n/**\n * The node is a regular node.\n *\n * @generated from protobuf message concordium.v2.NodeInfo.Node\n */\nexport interface NodeInfo_Node {\n    /**\n     * @generated from protobuf oneof: consensus_status\n     */\n    consensusStatus: {\n        oneofKind: \"notRunning\";\n        /**\n         * The node is not running consensus.\n         * This is the case only when the node is\n         * not supporting the protocol on the chain.\n         * The node does not process blocks.\n         *\n         * @generated from protobuf field: concordium.v2.Empty not_running = 1;\n         */\n        notRunning: Empty;\n    } | {\n        oneofKind: \"passive\";\n        /**\n         * Consensus info for a node that is\n         * not configured with baker keys.\n         * The node is only processing blocks and\n         * relaying blocks and transactions and responding to\n         * catchup messages.\n         *\n         * @generated from protobuf field: concordium.v2.Empty passive = 2;\n         */\n        passive: Empty;\n    } | {\n        oneofKind: \"active\";\n        /**\n         * The node is configured with baker credentials and consensus is running.\n         *\n         * @generated from protobuf field: concordium.v2.NodeInfo.BakerConsensusInfo active = 3;\n         */\n        active: NodeInfo_BakerConsensusInfo;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.SendBlockItemRequest\n */\nexport interface SendBlockItemRequest {\n    /**\n     * @generated from protobuf oneof: block_item\n     */\n    blockItem: {\n        oneofKind: \"accountTransaction\";\n        /**\n         * Account transactions are messages which are signed and paid for by an account.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransaction account_transaction = 1;\n         */\n        accountTransaction: AccountTransaction;\n    } | {\n        oneofKind: \"credentialDeployment\";\n        /**\n         * Credential deployments create new accounts. They are not paid for\n         * directly by the sender. Instead, bakers are rewarded by the protocol for\n         * including them.\n         *\n         * @generated from protobuf field: concordium.v2.CredentialDeployment credential_deployment = 2;\n         */\n        credentialDeployment: CredentialDeployment;\n    } | {\n        oneofKind: \"updateInstruction\";\n        /**\n         * Update instructions are messages which can update the chain parameters. Including which keys are allowed\n         * to make future update instructions.\n         *\n         * @generated from protobuf field: concordium.v2.UpdateInstruction update_instruction = 3;\n         */\n        updateInstruction: UpdateInstruction;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Credential deployments create new accounts. They are not paid for\n * directly by the sender. Instead, bakers are rewarded by the protocol for\n * including them.\n *\n * @generated from protobuf message concordium.v2.CredentialDeployment\n */\nexport interface CredentialDeployment {\n    /**\n     * @generated from protobuf field: concordium.v2.TransactionTime message_expiry = 1;\n     */\n    messageExpiry?: TransactionTime;\n    /**\n     * @generated from protobuf oneof: payload\n     */\n    payload: {\n        oneofKind: \"rawPayload\";\n        /**\n         * A raw payload, which is just the encoded payload.\n         * A typed variant might be added in the future.\n         *\n         * @generated from protobuf field: bytes raw_payload = 2;\n         */\n        rawPayload: Uint8Array;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * A single signature. Used when sending block items to a node with\n * `SendBlockItem`.\n *\n * @generated from protobuf message concordium.v2.Signature\n */\nexport interface Signature {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * A signature on an update instruction.\n * The type `UpdateKeysIndex` is not used directly, as messages cannot be keys in maps.\n *\n * @generated from protobuf message concordium.v2.SignatureMap\n */\nexport interface SignatureMap {\n    /**\n     * @generated from protobuf field: map<uint32, concordium.v2.Signature> signatures = 1;\n     */\n    signatures: {\n        [key: number]: Signature;\n    };\n}\n/**\n * Wrapper for a map from indexes to signatures.\n * Needed because protobuf doesn't allow nested maps directly.\n * The keys in the SignatureMap must not exceed 2^8.\n *\n * @generated from protobuf message concordium.v2.AccountSignatureMap\n */\nexport interface AccountSignatureMap {\n    /**\n     * @generated from protobuf field: map<uint32, concordium.v2.Signature> signatures = 1;\n     */\n    signatures: {\n        [key: number]: Signature;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.AccountTransactionSignature\n */\nexport interface AccountTransactionSignature {\n    /**\n     * A map from `CredentialIndex` to `SignatureMap`s.\n     * The type `CredentialIndex` is not used directly, as messages cannot be keys in maps.\n     * The map cannot contain more than 2^8 signatures.\n     *\n     * @generated from protobuf field: map<uint32, concordium.v2.AccountSignatureMap> signatures = 1;\n     */\n    signatures: {\n        [key: number]: AccountSignatureMap;\n    };\n}\n/**\n * Header of an account transaction that contains basic data to check whether\n * the sender and the transaction are valid. The header is shared by all transaction types.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionHeader\n */\nexport interface AccountTransactionHeader {\n    /**\n     * Sender of the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress sender = 1;\n     */\n    sender?: AccountAddress;\n    /**\n     * Sequence number of the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.SequenceNumber sequence_number = 2;\n     */\n    sequenceNumber?: SequenceNumber;\n    /**\n     * Maximum amount of energy the transaction can take to execute.\n     *\n     * @generated from protobuf field: concordium.v2.Energy energy_amount = 3;\n     */\n    energyAmount?: Energy;\n    /**\n     * Latest time the transaction can included in a block.\n     *\n     * @generated from protobuf field: concordium.v2.TransactionTime expiry = 5;\n     */\n    expiry?: TransactionTime;\n}\n/**\n * Data required to initialize a new contract instance.\n *\n * @generated from protobuf message concordium.v2.InitContractPayload\n */\nexport interface InitContractPayload {\n    /**\n     * Amount of CCD to send to the instance.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 1;\n     */\n    amount?: Amount;\n    /**\n     * Reference to the module from which the instance will be created.\n     *\n     * @generated from protobuf field: concordium.v2.ModuleRef module_ref = 2;\n     */\n    moduleRef?: ModuleRef;\n    /**\n     * Name of the contract to initialize. This is expected to be in the format\n     * `init_name`.\n     *\n     * @generated from protobuf field: concordium.v2.InitName init_name = 3;\n     */\n    initName?: InitName;\n    /**\n     * Parameter to call the `init` of the contract with.\n     *\n     * @generated from protobuf field: concordium.v2.Parameter parameter = 4;\n     */\n    parameter?: Parameter;\n}\n/**\n * Data required to update a contract instance.\n *\n * @generated from protobuf message concordium.v2.UpdateContractPayload\n */\nexport interface UpdateContractPayload {\n    /**\n     * Amount of CCD to send to the instance.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 1;\n     */\n    amount?: Amount;\n    /**\n     * Address of the instance to update.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress address = 2;\n     */\n    address?: ContractAddress;\n    /**\n     * Name of the entrypoint to call to update the instance.\n     * This is expected to be in the format `contractName.entrypointName`.\n     *\n     * @generated from protobuf field: concordium.v2.ReceiveName receive_name = 3;\n     */\n    receiveName?: ReceiveName;\n    /**\n     * Parameter to pass to the entrypoint.\n     *\n     * @generated from protobuf field: concordium.v2.Parameter parameter = 4;\n     */\n    parameter?: Parameter;\n}\n/**\n * Payload of a transfer between two accounts.\n *\n * @generated from protobuf message concordium.v2.TransferPayload\n */\nexport interface TransferPayload {\n    /**\n     * Amount of CCD to send.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 1;\n     */\n    amount?: Amount;\n    /**\n     * Receiver address.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 2;\n     */\n    receiver?: AccountAddress;\n}\n/**\n * Payload of a transfer between two accounts with a memo.\n *\n * @generated from protobuf message concordium.v2.TransferWithMemoPayload\n */\nexport interface TransferWithMemoPayload {\n    /**\n     * Amount of CCD to send.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 1;\n     */\n    amount?: Amount;\n    /**\n     * Receiver address.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress receiver = 2;\n     */\n    receiver?: AccountAddress;\n    /**\n     * Memo to include with the transfer.\n     *\n     * @generated from protobuf field: concordium.v2.Memo memo = 3;\n     */\n    memo?: Memo;\n}\n/**\n * The payload for an account transaction.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionPayload\n */\nexport interface AccountTransactionPayload {\n    /**\n     * @generated from protobuf oneof: payload\n     */\n    payload: {\n        oneofKind: \"rawPayload\";\n        /**\n         * A pre-serialized payload in the binary serialization format defined\n         * by the protocol.\n         *\n         * @generated from protobuf field: bytes raw_payload = 1;\n         */\n        rawPayload: Uint8Array;\n    } | {\n        oneofKind: \"deployModule\";\n        /**\n         * A transfer between two accounts. With an optional memo.\n         *\n         * @generated from protobuf field: concordium.v2.VersionedModuleSource deploy_module = 2;\n         */\n        deployModule: VersionedModuleSource;\n    } | {\n        oneofKind: \"initContract\";\n        /**\n         * @generated from protobuf field: concordium.v2.InitContractPayload init_contract = 3;\n         */\n        initContract: InitContractPayload;\n    } | {\n        oneofKind: \"updateContract\";\n        /**\n         * @generated from protobuf field: concordium.v2.UpdateContractPayload update_contract = 4;\n         */\n        updateContract: UpdateContractPayload;\n    } | {\n        oneofKind: \"transfer\";\n        /**\n         * @generated from protobuf field: concordium.v2.TransferPayload transfer = 5;\n         */\n        transfer: TransferPayload;\n    } | {\n        oneofKind: \"transferWithMemo\";\n        /**\n         * @generated from protobuf field: concordium.v2.TransferWithMemoPayload transfer_with_memo = 6;\n         */\n        transferWithMemo: TransferWithMemoPayload;\n    } | {\n        oneofKind: \"registerData\";\n        /**\n         * @generated from protobuf field: concordium.v2.RegisteredData register_data = 7;\n         */\n        registerData: RegisteredData;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * An unsigned account transaction. This is used with the\n * `GetTransactionSignHash` endpoint to obtain the message to sign.\n *\n * @generated from protobuf message concordium.v2.PreAccountTransaction\n */\nexport interface PreAccountTransaction {\n    /**\n     * @generated from protobuf field: concordium.v2.AccountTransactionHeader header = 1;\n     */\n    header?: AccountTransactionHeader;\n    /**\n     * @generated from protobuf field: concordium.v2.AccountTransactionPayload payload = 2;\n     */\n    payload?: AccountTransactionPayload;\n}\n/**\n * Account transactions are messages which are signed and paid for by the sender\n * account.\n *\n * @generated from protobuf message concordium.v2.AccountTransaction\n */\nexport interface AccountTransaction {\n    /**\n     * @generated from protobuf field: concordium.v2.AccountTransactionSignature signature = 1;\n     */\n    signature?: AccountTransactionSignature;\n    /**\n     * @generated from protobuf field: concordium.v2.AccountTransactionHeader header = 2;\n     */\n    header?: AccountTransactionHeader;\n    /**\n     * @generated from protobuf field: concordium.v2.AccountTransactionPayload payload = 3;\n     */\n    payload?: AccountTransactionPayload;\n}\n/**\n * @generated from protobuf message concordium.v2.UpdateInstructionHeader\n */\nexport interface UpdateInstructionHeader {\n    /**\n     * @generated from protobuf field: concordium.v2.UpdateSequenceNumber sequence_number = 1;\n     */\n    sequenceNumber?: UpdateSequenceNumber;\n    /**\n     * @generated from protobuf field: concordium.v2.TransactionTime effective_time = 2;\n     */\n    effectiveTime?: TransactionTime;\n    /**\n     * @generated from protobuf field: concordium.v2.TransactionTime timeout = 3;\n     */\n    timeout?: TransactionTime;\n}\n/**\n * The payload for an UpdateInstruction.\n *\n * @generated from protobuf message concordium.v2.UpdateInstructionPayload\n */\nexport interface UpdateInstructionPayload {\n    /**\n     * @generated from protobuf oneof: payload\n     */\n    payload: {\n        oneofKind: \"rawPayload\";\n        /**\n         * A raw payload encoded according to the format defined by the protocol.\n         *\n         * @generated from protobuf field: bytes raw_payload = 3;\n         */\n        rawPayload: Uint8Array;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.UpdateInstruction\n */\nexport interface UpdateInstruction {\n    /**\n     * A map from `UpdateKeysIndex` to `Signature`. Keys must not exceed 2^16.\n     *\n     * @generated from protobuf field: concordium.v2.SignatureMap signatures = 1;\n     */\n    signatures?: SignatureMap;\n    /**\n     * @generated from protobuf field: concordium.v2.UpdateInstructionHeader header = 2;\n     */\n    header?: UpdateInstructionHeader;\n    /**\n     * @generated from protobuf field: concordium.v2.UpdateInstructionPayload payload = 3;\n     */\n    payload?: UpdateInstructionPayload;\n}\n/**\n * Signature on an account transaction is defined to be the signature on the\n * hash of the `PreAccountTransaction`.\n *\n * @generated from protobuf message concordium.v2.AccountTransactionSignHash\n */\nexport interface AccountTransactionSignHash {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * The number of credential deployments allowed in a block. This in effect\n * determines the number of accounts that can be created in a block.\n *\n * @generated from protobuf message concordium.v2.CredentialsPerBlockLimit\n */\nexport interface CredentialsPerBlockLimit {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * Updatable chain parameters that apply to protocol versions 1-3.\n *\n * @generated from protobuf message concordium.v2.ChainParametersV0\n */\nexport interface ChainParametersV0 {\n    /**\n     * Election difficulty for consensus lottery.\n     *\n     * @generated from protobuf field: concordium.v2.ElectionDifficulty election_difficulty = 1;\n     */\n    electionDifficulty?: ElectionDifficulty;\n    /**\n     * Euro per energy exchange rate.\n     *\n     * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy = 2;\n     */\n    euroPerEnergy?: ExchangeRate;\n    /**\n     * Micro CCD per euro exchange rate.\n     *\n     * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro = 3;\n     */\n    microCcdPerEuro?: ExchangeRate;\n    /**\n     * Extra number of epochs before reduction in stake, or baker\n     * deregistration is completed.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch baker_cooldown_epochs = 4;\n     */\n    bakerCooldownEpochs?: Epoch;\n    /**\n     * The limit for the number of account creations in a block.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialsPerBlockLimit account_creation_limit = 5;\n     */\n    accountCreationLimit?: CredentialsPerBlockLimit;\n    /**\n     * Current mint distribution\n     *\n     * @generated from protobuf field: concordium.v2.MintDistributionCpv0 mint_distribution = 6;\n     */\n    mintDistribution?: MintDistributionCpv0;\n    /**\n     * Current transaction fee distribution.\n     *\n     * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution = 7;\n     */\n    transactionFeeDistribution?: TransactionFeeDistribution;\n    /**\n     * Current gas reward parameters.\n     *\n     * @generated from protobuf field: concordium.v2.GasRewards gas_rewards = 8;\n     */\n    gasRewards?: GasRewards;\n    /**\n     * The foundation account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 9;\n     */\n    foundationAccount?: AccountAddress;\n    /**\n     * Minimum threshold for becoming a baker.\n     *\n     * @generated from protobuf field: concordium.v2.Amount minimum_threshold_for_baking = 10;\n     */\n    minimumThresholdForBaking?: Amount;\n    /**\n     * Keys allowed to do root updates.\n     *\n     * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys = 11;\n     */\n    rootKeys?: HigherLevelKeys;\n    /**\n     * Keys allowed to do level1 updates;\n     *\n     * @generated from protobuf field: concordium.v2.HigherLevelKeys level1_keys = 12;\n     */\n    level1Keys?: HigherLevelKeys;\n    /**\n     * Keys allowed to do parameter updates.\n     *\n     * @generated from protobuf field: concordium.v2.AuthorizationsV0 level2_keys = 13;\n     */\n    level2Keys?: AuthorizationsV0;\n}\n/**\n * Updatable chain parameters that apply to protocol versions 4-5.\n *\n * @generated from protobuf message concordium.v2.ChainParametersV1\n */\nexport interface ChainParametersV1 {\n    /**\n     * Election difficulty for consensus lottery.\n     *\n     * @generated from protobuf field: concordium.v2.ElectionDifficulty election_difficulty = 1;\n     */\n    electionDifficulty?: ElectionDifficulty;\n    /**\n     * Euro per energy exchange rate.\n     *\n     * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy = 2;\n     */\n    euroPerEnergy?: ExchangeRate;\n    /**\n     * Micro CCD per euro exchange rate.\n     *\n     * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro = 3;\n     */\n    microCcdPerEuro?: ExchangeRate;\n    /**\n     * Extra number of epochs before reduction in stake, or baker\n     * deregistration is completed.\n     *\n     * @generated from protobuf field: concordium.v2.CooldownParametersCpv1 cooldown_parameters = 4;\n     */\n    cooldownParameters?: CooldownParametersCpv1;\n    /**\n     * Current time parameters.\n     * The time parameters indicates the mint rate and the\n     * reward period length, i.e. the time between paydays.\n     *\n     * @generated from protobuf field: concordium.v2.TimeParametersCpv1 time_parameters = 5;\n     */\n    timeParameters?: TimeParametersCpv1;\n    /**\n     * The limit for the number of account creations in a block.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialsPerBlockLimit account_creation_limit = 6;\n     */\n    accountCreationLimit?: CredentialsPerBlockLimit;\n    /**\n     * Current mint distribution\n     *\n     * @generated from protobuf field: concordium.v2.MintDistributionCpv1 mint_distribution = 7;\n     */\n    mintDistribution?: MintDistributionCpv1;\n    /**\n     * Current transaction fee distribution.\n     *\n     * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution = 8;\n     */\n    transactionFeeDistribution?: TransactionFeeDistribution;\n    /**\n     * Current gas reward parameters.\n     *\n     * @generated from protobuf field: concordium.v2.GasRewards gas_rewards = 9;\n     */\n    gasRewards?: GasRewards;\n    /**\n     * The foundation account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 10;\n     */\n    foundationAccount?: AccountAddress;\n    /**\n     * Parameters governing baking pools and their commissions.\n     *\n     * @generated from protobuf field: concordium.v2.PoolParametersCpv1 pool_parameters = 11;\n     */\n    poolParameters?: PoolParametersCpv1;\n    /**\n     * Keys allowed to do root updates.\n     *\n     * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys = 12;\n     */\n    rootKeys?: HigherLevelKeys;\n    /**\n     * Keys allowed to do level1 updates;\n     *\n     * @generated from protobuf field: concordium.v2.HigherLevelKeys level1_keys = 13;\n     */\n    level1Keys?: HigherLevelKeys;\n    /**\n     * Keys allowed to do parameter updates.\n     *\n     * @generated from protobuf field: concordium.v2.AuthorizationsV1 level2_keys = 14;\n     */\n    level2Keys?: AuthorizationsV1;\n}\n/**\n * Updatable chain parameters that apply to protocol versions 6.\n *\n * @generated from protobuf message concordium.v2.ChainParametersV2\n */\nexport interface ChainParametersV2 {\n    /**\n     * Consensus parameters.\n     *\n     * @generated from protobuf field: concordium.v2.ConsensusParametersV1 consensus_parameters = 1;\n     */\n    consensusParameters?: ConsensusParametersV1;\n    /**\n     * Euro per energy exchange rate.\n     *\n     * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy = 2;\n     */\n    euroPerEnergy?: ExchangeRate;\n    /**\n     * Micro CCD per euro exchange rate.\n     *\n     * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro = 3;\n     */\n    microCcdPerEuro?: ExchangeRate;\n    /**\n     * Extra number of epochs before reduction in stake, or baker\n     * deregistration is completed.\n     *\n     * @generated from protobuf field: concordium.v2.CooldownParametersCpv1 cooldown_parameters = 4;\n     */\n    cooldownParameters?: CooldownParametersCpv1;\n    /**\n     * Current time parameters.\n     * The time parameters indicates the mint rate and the\n     * reward period length, i.e. the time between paydays.\n     *\n     * @generated from protobuf field: concordium.v2.TimeParametersCpv1 time_parameters = 5;\n     */\n    timeParameters?: TimeParametersCpv1;\n    /**\n     * The limit for the number of account creations in a block.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialsPerBlockLimit account_creation_limit = 6;\n     */\n    accountCreationLimit?: CredentialsPerBlockLimit;\n    /**\n     * Current mint distribution\n     *\n     * @generated from protobuf field: concordium.v2.MintDistributionCpv1 mint_distribution = 7;\n     */\n    mintDistribution?: MintDistributionCpv1;\n    /**\n     * Current transaction fee distribution.\n     *\n     * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution = 8;\n     */\n    transactionFeeDistribution?: TransactionFeeDistribution;\n    /**\n     * Current gas reward parameters.\n     *\n     * @generated from protobuf field: concordium.v2.GasRewardsCpv2 gas_rewards = 9;\n     */\n    gasRewards?: GasRewardsCpv2;\n    /**\n     * The foundation account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 10;\n     */\n    foundationAccount?: AccountAddress;\n    /**\n     * Parameters governing baking pools and their commissions.\n     *\n     * @generated from protobuf field: concordium.v2.PoolParametersCpv1 pool_parameters = 11;\n     */\n    poolParameters?: PoolParametersCpv1;\n    /**\n     * Keys allowed to do root updates.\n     *\n     * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys = 12;\n     */\n    rootKeys?: HigherLevelKeys;\n    /**\n     * Keys allowed to do level1 updates;\n     *\n     * @generated from protobuf field: concordium.v2.HigherLevelKeys level1_keys = 13;\n     */\n    level1Keys?: HigherLevelKeys;\n    /**\n     * Keys allowed to do parameter updates.\n     *\n     * @generated from protobuf field: concordium.v2.AuthorizationsV1 level2_keys = 14;\n     */\n    level2Keys?: AuthorizationsV1;\n    /**\n     * Finalization committee parameters\n     *\n     * @generated from protobuf field: concordium.v2.FinalizationCommitteeParameters finalization_committee_parameters = 15;\n     */\n    finalizationCommitteeParameters?: FinalizationCommitteeParameters;\n}\n/**\n * Updatable chain parameters that apply to protocol versions 8.\n *\n * @generated from protobuf message concordium.v2.ChainParametersV3\n */\nexport interface ChainParametersV3 {\n    /**\n     * Consensus parameters.\n     *\n     * @generated from protobuf field: concordium.v2.ConsensusParametersV1 consensus_parameters = 1;\n     */\n    consensusParameters?: ConsensusParametersV1;\n    /**\n     * Euro per energy exchange rate.\n     *\n     * @generated from protobuf field: concordium.v2.ExchangeRate euro_per_energy = 2;\n     */\n    euroPerEnergy?: ExchangeRate;\n    /**\n     * Micro CCD per euro exchange rate.\n     *\n     * @generated from protobuf field: concordium.v2.ExchangeRate micro_ccd_per_euro = 3;\n     */\n    microCcdPerEuro?: ExchangeRate;\n    /**\n     * Extra number of epochs before reduction in stake, or baker\n     * deregistration is completed.\n     *\n     * @generated from protobuf field: concordium.v2.CooldownParametersCpv1 cooldown_parameters = 4;\n     */\n    cooldownParameters?: CooldownParametersCpv1;\n    /**\n     * Current time parameters.\n     * The time parameters indicates the mint rate and the\n     * reward period length, i.e. the time between paydays.\n     *\n     * @generated from protobuf field: concordium.v2.TimeParametersCpv1 time_parameters = 5;\n     */\n    timeParameters?: TimeParametersCpv1;\n    /**\n     * The limit for the number of account creations in a block.\n     *\n     * @generated from protobuf field: concordium.v2.CredentialsPerBlockLimit account_creation_limit = 6;\n     */\n    accountCreationLimit?: CredentialsPerBlockLimit;\n    /**\n     * Current mint distribution\n     *\n     * @generated from protobuf field: concordium.v2.MintDistributionCpv1 mint_distribution = 7;\n     */\n    mintDistribution?: MintDistributionCpv1;\n    /**\n     * Current transaction fee distribution.\n     *\n     * @generated from protobuf field: concordium.v2.TransactionFeeDistribution transaction_fee_distribution = 8;\n     */\n    transactionFeeDistribution?: TransactionFeeDistribution;\n    /**\n     * Current gas reward parameters.\n     *\n     * @generated from protobuf field: concordium.v2.GasRewardsCpv2 gas_rewards = 9;\n     */\n    gasRewards?: GasRewardsCpv2;\n    /**\n     * The foundation account.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress foundation_account = 10;\n     */\n    foundationAccount?: AccountAddress;\n    /**\n     * Parameters governing baking pools and their commissions.\n     *\n     * @generated from protobuf field: concordium.v2.PoolParametersCpv1 pool_parameters = 11;\n     */\n    poolParameters?: PoolParametersCpv1;\n    /**\n     * Keys allowed to do root updates.\n     *\n     * @generated from protobuf field: concordium.v2.HigherLevelKeys root_keys = 12;\n     */\n    rootKeys?: HigherLevelKeys;\n    /**\n     * Keys allowed to do level1 updates;\n     *\n     * @generated from protobuf field: concordium.v2.HigherLevelKeys level1_keys = 13;\n     */\n    level1Keys?: HigherLevelKeys;\n    /**\n     * Keys allowed to do parameter updates.\n     *\n     * @generated from protobuf field: concordium.v2.AuthorizationsV1 level2_keys = 14;\n     */\n    level2Keys?: AuthorizationsV1;\n    /**\n     * Finalization committee parameters\n     *\n     * @generated from protobuf field: concordium.v2.FinalizationCommitteeParameters finalization_committee_parameters = 15;\n     */\n    finalizationCommitteeParameters?: FinalizationCommitteeParameters;\n    /**\n     * Validator score parameters\n     *\n     * @generated from protobuf field: concordium.v2.ValidatorScoreParameters validator_score_parameters = 16;\n     */\n    validatorScoreParameters?: ValidatorScoreParameters;\n}\n/**\n * Chain parameters.\n *\n * @generated from protobuf message concordium.v2.ChainParameters\n */\nexport interface ChainParameters {\n    /**\n     * @generated from protobuf oneof: parameters\n     */\n    parameters: {\n        oneofKind: \"v0\";\n        /**\n         * Chain parameters that apply when the block is a protocol version 1-3 block.\n         *\n         * @generated from protobuf field: concordium.v2.ChainParametersV0 v0 = 1;\n         */\n        v0: ChainParametersV0;\n    } | {\n        oneofKind: \"v1\";\n        /**\n         * Chain parameters that apply when the block is a protocol version 4-5 block.\n         *\n         * @generated from protobuf field: concordium.v2.ChainParametersV1 v1 = 2;\n         */\n        v1: ChainParametersV1;\n    } | {\n        oneofKind: \"v2\";\n        /**\n         * Chain parameters that apply when the block is a protocol version 6-7 block.\n         *\n         * @generated from protobuf field: concordium.v2.ChainParametersV2 v2 = 3;\n         */\n        v2: ChainParametersV2;\n    } | {\n        oneofKind: \"v3\";\n        /**\n         * Chain parameters that apply when the block is a protocol version 8- block.\n         *\n         * @generated from protobuf field: concordium.v2.ChainParametersV3 v3 = 4;\n         */\n        v3: ChainParametersV3;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Details about a finalizer for the finalization round.\n *\n * @generated from protobuf message concordium.v2.FinalizationSummaryParty\n */\nexport interface FinalizationSummaryParty {\n    /**\n     * Baker ID. Every finalizer is in particular a baker.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker = 1;\n     */\n    baker?: BakerId;\n    /**\n     * The weight of the finalizer in the committee. This is an \"absolute\" weight.\n     *\n     * @generated from protobuf field: uint64 weight = 2;\n     */\n    weight: bigint;\n    /**\n     * Whether the finalizer's signature was present on the particular finalization record.\n     *\n     * @generated from protobuf field: bool signed = 3;\n     */\n    signed: boolean;\n}\n/**\n * Index of the finalization round. This increases on each successfully\n * completed finalization.\n *\n * @generated from protobuf message concordium.v2.FinalizationIndex\n */\nexport interface FinalizationIndex {\n    /**\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n}\n/**\n * Details about a finalization record included in a block.\n *\n * @generated from protobuf message concordium.v2.FinalizationSummary\n */\nexport interface FinalizationSummary {\n    /**\n     * Block that was finalized by the finalization record.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash block = 1;\n     */\n    block?: BlockHash;\n    /**\n     * Index of the finalization round that finalized the block.\n     *\n     * @generated from protobuf field: concordium.v2.FinalizationIndex index = 2;\n     */\n    index?: FinalizationIndex;\n    /**\n     * Finalization delay used for the finalization round.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHeight delay = 3;\n     */\n    delay?: BlockHeight;\n    /**\n     * List of all finalizers with information about whether they signed the\n     * finalization record or not.\n     *\n     * @generated from protobuf field: repeated concordium.v2.FinalizationSummaryParty finalizers = 4;\n     */\n    finalizers: FinalizationSummaryParty[];\n}\n/**\n * Finalization summary that may or may not be part of the block.\n *\n * @generated from protobuf message concordium.v2.BlockFinalizationSummary\n */\nexport interface BlockFinalizationSummary {\n    /**\n     * @generated from protobuf oneof: summary\n     */\n    summary: {\n        oneofKind: \"none\";\n        /**\n         * There is no finalization data in the block.\n         *\n         * @generated from protobuf field: concordium.v2.Empty none = 1;\n         */\n        none: Empty;\n    } | {\n        oneofKind: \"record\";\n        /**\n         * There is a single finalization record with the block.\n         *\n         * @generated from protobuf field: concordium.v2.FinalizationSummary record = 2;\n         */\n        record: FinalizationSummary;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message concordium.v2.BlockItem\n */\nexport interface BlockItem {\n    /**\n     * The hash of the block item that identifies it to the chain.\n     *\n     * @generated from protobuf field: concordium.v2.TransactionHash hash = 1;\n     */\n    hash?: TransactionHash;\n    /**\n     * @generated from protobuf oneof: block_item\n     */\n    blockItem: {\n        oneofKind: \"accountTransaction\";\n        /**\n         * Account transactions are messages which are signed and paid for by an account.\n         *\n         * @generated from protobuf field: concordium.v2.AccountTransaction account_transaction = 2;\n         */\n        accountTransaction: AccountTransaction;\n    } | {\n        oneofKind: \"credentialDeployment\";\n        /**\n         * Credential deployments create new accounts. They are not paid for\n         * directly by the sender. Instead, bakers are rewarded by the protocol for\n         * including them.\n         *\n         * @generated from protobuf field: concordium.v2.CredentialDeployment credential_deployment = 3;\n         */\n        credentialDeployment: CredentialDeployment;\n    } | {\n        oneofKind: \"updateInstruction\";\n        /**\n         * Update instructions are messages which can update the chain parameters. Including which keys are allowed\n         * to make future update instructions.\n         *\n         * @generated from protobuf field: concordium.v2.UpdateInstruction update_instruction = 4;\n         */\n        updateInstruction: UpdateInstruction;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Information about a particular baker with respect to\n * the current reward period.\n *\n * @generated from protobuf message concordium.v2.BakerRewardPeriodInfo\n */\nexport interface BakerRewardPeriodInfo {\n    /**\n     * The baker id and public keys for the baker.\n     *\n     * @generated from protobuf field: concordium.v2.BakerInfo baker = 1;\n     */\n    baker?: BakerInfo;\n    /**\n     * The effective stake of the baker for the consensus protocol.\n     * The returned amount accounts for delegation, capital bounds and leverage bounds.\n     *\n     * @generated from protobuf field: concordium.v2.Amount effective_stake = 2;\n     */\n    effectiveStake?: Amount;\n    /**\n     * The effective commission rate for the baker that applies for the reward period.\n     *\n     * @generated from protobuf field: concordium.v2.CommissionRates commission_rates = 3;\n     */\n    commissionRates?: CommissionRates;\n    /**\n     * The amount staked by the baker itself.\n     *\n     * @generated from protobuf field: concordium.v2.Amount equity_capital = 4;\n     */\n    equityCapital?: Amount;\n    /**\n     * The total amount of capital delegated to this baker pool.\n     *\n     * @generated from protobuf field: concordium.v2.Amount delegated_capital = 5;\n     */\n    delegatedCapital?: Amount;\n    /**\n     * Whether the baker is a finalizer or not.\n     *\n     * @generated from protobuf field: bool is_finalizer = 6;\n     */\n    isFinalizer: boolean;\n}\n/**\n * The signature of a 'QuorumCertificate' or 'QuorumMessage'.\n *\n * @generated from protobuf message concordium.v2.QuorumSignature\n */\nexport interface QuorumSignature {\n    /**\n     * The bytes representing the raw aggregate signature.\n     * The bytes have a fixed length of 48 bytes.\n     *\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * A quorum certificate is the certificate that the\n * finalization comittee issues in order to certify a block.\n * A block must be certified before it will be part of the\n * authorative part of the chain.\n *\n * @generated from protobuf message concordium.v2.QuorumCertificate\n */\nexport interface QuorumCertificate {\n    /**\n     * The hash of the block that the quorum certificate refers to.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash block_hash = 1;\n     */\n    blockHash?: BlockHash;\n    /**\n     * The round of the block.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 2;\n     */\n    round?: Round;\n    /**\n     * The epoch of the block.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch epoch = 3;\n     */\n    epoch?: Epoch;\n    /**\n     * The aggregated signature by the finalization committee on the block.\n     *\n     * @generated from protobuf field: concordium.v2.QuorumSignature aggregate_signature = 4;\n     */\n    aggregateSignature?: QuorumSignature;\n    /**\n     * A list of the finalizers that formed the quorum certificate\n     * i.e., the ones who have contributed to the 'aggregate_siganture'.\n     * The finalizers are identified by their baker id as this is stable\n     * across protocols and epochs.\n     *\n     * @generated from protobuf field: repeated concordium.v2.BakerId signatories = 5;\n     */\n    signatories: BakerId[];\n}\n/**\n * The finalizer round is a map from a 'Round'\n * to the list of finalizers (identified by their 'BakerId') that signed\n * off the round.\n *\n * @generated from protobuf message concordium.v2.FinalizerRound\n */\nexport interface FinalizerRound {\n    /**\n     * The round that was signed off.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 1;\n     */\n    round?: Round;\n    /**\n     * The finalizers (identified by their 'BakerId' that\n     * signed off the in 'round'.\n     *\n     * @generated from protobuf field: repeated concordium.v2.BakerId finalizers = 2;\n     */\n    finalizers: BakerId[];\n}\n/**\n * The signature of a 'TimeoutCertificate'.\n *\n * @generated from protobuf message concordium.v2.TimeoutSignature\n */\nexport interface TimeoutSignature {\n    /**\n     * The bytes representing the raw aggregate signature.\n     * The bytes have a fixed length of 48 bytes.\n     *\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * A timeout certificate is the certificate that the\n * finalization committee issues when a round times out,\n * thus making it possible for the protocol to proceed to the\n * next round.\n *\n * @generated from protobuf message concordium.v2.TimeoutCertificate\n */\nexport interface TimeoutCertificate {\n    /**\n     * The round that timed out.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 1;\n     */\n    round?: Round;\n    /**\n     * The minimum epoch of which signatures are included\n     * in the 'aggregate_signature'.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch min_epoch = 2;\n     */\n    minEpoch?: Epoch;\n    /**\n     * The rounds of which finalizers have their best\n     * QCs in the 'min_epoch'.\n     *\n     * @generated from protobuf field: repeated concordium.v2.FinalizerRound qc_rounds_first_epoch = 3;\n     */\n    qcRoundsFirstEpoch: FinalizerRound[];\n    /**\n     * The rounds of which finalizers have their best\n     * QCs in the epoch 'min_epoch' + 1.\n     *\n     * @generated from protobuf field: repeated concordium.v2.FinalizerRound qc_rounds_second_epoch = 4;\n     */\n    qcRoundsSecondEpoch: FinalizerRound[];\n    /**\n     * The aggregated signature by the finalization committee that witnessed\n     * the 'round' timed out.\n     *\n     * @generated from protobuf field: concordium.v2.TimeoutSignature aggregate_signature = 5;\n     */\n    aggregateSignature?: TimeoutSignature;\n}\n/**\n * A proof that establishes that the successor block of\n * a 'EpochFinalizationEntry' is the immediate successor of\n * the finalized block.\n *\n * @generated from protobuf message concordium.v2.SuccessorProof\n */\nexport interface SuccessorProof {\n    /**\n     * The proof represented as raw bytes.\n     * The bytes have a fixed length of 32 bytes.\n     *\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * The epoch finalization entry is the proof that\n * makes the protocol able to advance to a new epoch.\n * I.e. the 'EpochFinalizationEntry' is present if and only if\n * the block is the first block of a new 'Epoch'.\n *\n * @generated from protobuf message concordium.v2.EpochFinalizationEntry\n */\nexport interface EpochFinalizationEntry {\n    /**\n     * The quorum certificate for the finalized block.\n     *\n     * @generated from protobuf field: concordium.v2.QuorumCertificate finalized_qc = 1;\n     */\n    finalizedQc?: QuorumCertificate;\n    /**\n     * The quorum certificate for the block that finalizes\n     * the block that 'finalized_qc' points to.\n     *\n     * @generated from protobuf field: concordium.v2.QuorumCertificate successor_qc = 2;\n     */\n    successorQc?: QuorumCertificate;\n    /**\n     * A proof that the successor block is an immediate\n     * successor of the finalized block.\n     *\n     * @generated from protobuf field: concordium.v2.SuccessorProof successor_proof = 3;\n     */\n    successorProof?: SuccessorProof;\n}\n/**\n * Certificates for a block for protocols supporting\n * ConcordiumBFT.\n *\n * @generated from protobuf message concordium.v2.BlockCertificates\n */\nexport interface BlockCertificates {\n    /**\n     * The quorum certificate. Is present if and only if the block is\n     * not a genesis block.\n     *\n     * @generated from protobuf field: optional concordium.v2.QuorumCertificate quorum_certificate = 1;\n     */\n    quorumCertificate?: QuorumCertificate;\n    /**\n     * The timeout certificate. Is present only if the round prior to the\n     * round of the block timed out.\n     *\n     * @generated from protobuf field: optional concordium.v2.TimeoutCertificate timeout_certificate = 2;\n     */\n    timeoutCertificate?: TimeoutCertificate;\n    /**\n     * The epoch finalization entry. Is present only if the block initiates\n     * a new epoch.\n     *\n     * @generated from protobuf field: optional concordium.v2.EpochFinalizationEntry epoch_finalization_entry = 3;\n     */\n    epochFinalizationEntry?: EpochFinalizationEntry;\n}\n/**\n * Details of which baker won the lottery in a given round in consensus version 1.\n *\n * @generated from protobuf message concordium.v2.WinningBaker\n */\nexport interface WinningBaker {\n    /**\n     * The round number.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 1;\n     */\n    round?: Round;\n    /**\n     * The baker that won the round.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId winner = 2;\n     */\n    winner?: BakerId;\n    /**\n     * True if the baker produced a block in this round on the finalized chain, and False otherwise.\n     *\n     * @generated from protobuf field: bool present = 3;\n     */\n    present: boolean;\n}\n/**\n * An operation to dry run.  The first operation in a dry-run sequence should be\n * `load_block_state`: any other operation will be met with `NoState` until a\n * state is successfully loaded.\n *\n * @generated from protobuf message concordium.v2.DryRunRequest\n */\nexport interface DryRunRequest {\n    /**\n     * @generated from protobuf oneof: request\n     */\n    request: {\n        oneofKind: \"loadBlockState\";\n        /**\n         * Load the state of the specified block to use for subsequent requests.\n         * The state is taken at the end of execution of the block, and the block’s\n         * timestamp is used as the current timestamp.\n         *\n         * The energy cost for this operation is 2000.\n         *\n         * @generated from protobuf field: concordium.v2.BlockHashInput load_block_state = 1;\n         */\n        loadBlockState: BlockHashInput;\n    } | {\n        oneofKind: \"stateQuery\";\n        /**\n         * Run a query on the state.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunStateQuery state_query = 2;\n         */\n        stateQuery: DryRunStateQuery;\n    } | {\n        oneofKind: \"stateOperation\";\n        /**\n         * Run a (non-transaction) operation to modify the state.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunStateOperation state_operation = 3;\n         */\n        stateOperation: DryRunStateOperation;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Run a query as part of a dry run. Queries do not update the block state.\n *\n * @generated from protobuf message concordium.v2.DryRunStateQuery\n */\nexport interface DryRunStateQuery {\n    /**\n     * @generated from protobuf oneof: query\n     */\n    query: {\n        oneofKind: \"getAccountInfo\";\n        /**\n         * Look up information on a particular account.\n         *\n         * The energy cost for this query is 200.\n         *\n         * @generated from protobuf field: concordium.v2.AccountIdentifierInput get_account_info = 1;\n         */\n        getAccountInfo: AccountIdentifierInput;\n    } | {\n        oneofKind: \"getInstanceInfo\";\n        /**\n         * Look up information about a particular smart contract.\n         *\n         * The energy cost for this query is 200.\n         *\n         * @generated from protobuf field: concordium.v2.ContractAddress get_instance_info = 2;\n         */\n        getInstanceInfo: ContractAddress;\n    } | {\n        oneofKind: \"invokeInstance\";\n        /**\n         * Invoke an entrypoint on a smart contract instance.\n         * No changes made to the state are retained at the completion of the operation.\n         *\n         * The energy cost for this query is 200 plus the energy used by the smart contract\n         * execution.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunInvokeInstance invoke_instance = 3;\n         */\n        invokeInstance: DryRunInvokeInstance;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Invoke an entrypoint on a smart contract instance.\n *\n * @generated from protobuf message concordium.v2.DryRunInvokeInstance\n */\nexport interface DryRunInvokeInstance {\n    /**\n     * Invoker of the contract. If this is not supplied then the contract will be\n     * invoked by an account with address 0, no credentials and sufficient amount\n     * of CCD to cover the transfer amount. If given, the relevant address (either\n     * account or contract) must exist in the blockstate.\n     *\n     * @generated from protobuf field: optional concordium.v2.Address invoker = 1;\n     */\n    invoker?: Address;\n    /**\n     * Address of the contract instance to invoke.\n     *\n     * @generated from protobuf field: concordium.v2.ContractAddress instance = 2;\n     */\n    instance?: ContractAddress;\n    /**\n     * Amount to invoke the smart contract instance with.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 3;\n     */\n    amount?: Amount;\n    /**\n     * The entrypoint of the smart contract instance to invoke.\n     *\n     * @generated from protobuf field: concordium.v2.ReceiveName entrypoint = 4;\n     */\n    entrypoint?: ReceiveName;\n    /**\n     * The parameter bytes to include in the invocation of the entrypoint.\n     *\n     * @generated from protobuf field: concordium.v2.Parameter parameter = 5;\n     */\n    parameter?: Parameter;\n    /**\n     * The maximum energy to allow for the invocation. Note that the node imposes an energy\n     * quota that is enforced in addition to this limit.\n     *\n     * @generated from protobuf field: concordium.v2.Energy energy = 6;\n     */\n    energy?: Energy;\n}\n/**\n * An operation that can update the state as part of a dry run.\n *\n * @generated from protobuf message concordium.v2.DryRunStateOperation\n */\nexport interface DryRunStateOperation {\n    /**\n     * @generated from protobuf oneof: operation\n     */\n    operation: {\n        oneofKind: \"setTimestamp\";\n        /**\n         * Sets the current block time to the given timestamp for the purposes of future\n         * transactions.\n         *\n         * The energy cost of this operation is 50.\n         *\n         * @generated from protobuf field: concordium.v2.Timestamp set_timestamp = 1;\n         */\n        setTimestamp: Timestamp;\n    } | {\n        oneofKind: \"mintToAccount\";\n        /**\n         * Add a specified amount of newly-minted CCDs to a specified account.\n         * The amount cannot cause the total circulating supply to overflow.\n         *\n         * The energy cost of this operation is 400.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunMintToAccount mint_to_account = 2;\n         */\n        mintToAccount: DryRunMintToAccount;\n    } | {\n        oneofKind: \"runTransaction\";\n        /**\n         * Dry run a transaction, updating the state if it succeeds.\n         *\n         * The energy cost of this operation is 400 plus the energy used by executing the\n         * transaction.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunTransaction run_transaction = 3;\n         */\n        runTransaction: DryRunTransaction;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Mint a specified amount and credit it to the specified account as part of a dry run.\n *\n * @generated from protobuf message concordium.v2.DryRunMintToAccount\n */\nexport interface DryRunMintToAccount {\n    /**\n     * The account to mint to.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress account = 1;\n     */\n    account?: AccountAddress;\n    /**\n     * The amount to mint and credit to the account.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount = 2;\n     */\n    amount?: Amount;\n}\n/**\n * Dry run an account transaction\n *\n * @generated from protobuf message concordium.v2.DryRunTransaction\n */\nexport interface DryRunTransaction {\n    /**\n     * The account to use as the sender of the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.AccountAddress sender = 1;\n     */\n    sender?: AccountAddress;\n    /**\n     * The energy limit set for executing the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.Energy energy_amount = 2;\n     */\n    energyAmount?: Energy;\n    /**\n     * The payload of the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.AccountTransactionPayload payload = 3;\n     */\n    payload?: AccountTransactionPayload;\n    /**\n     * Which credentials and keys should be treated as having signed the transaction.\n     * If none is given, then the transaction is treated as having one signature for credential 0,\n     * key 0. Therefore, this is only required when the transaction is from a multi-signature\n     * account. There are two reasons why you might want to specify signatures:\n     *   * The cost of the transaction depends on the number of signatures, so if you want to\n     *     get the correct cost for a multi-signature transaction, then specifying the signatures\n     *     supports this.\n     *   * When changing account keys on a multi-credential account, the transaction must be signed\n     *     by the credential whose keys are being changed.\n     *\n     * Note that the signature thresholds are not checked as part of the dry run. Duplicated\n     * signatures are only counted once.\n     *\n     * @generated from protobuf field: repeated concordium.v2.DryRunSignature signatures = 4;\n     */\n    signatures: DryRunSignature[];\n}\n/**\n * A dry run signature is a pair of a credential index and key index, identifying the credential\n * and key that is presumed to have signed the transaction. No actual cryptographic signature is\n * included.\n *\n * @generated from protobuf message concordium.v2.DryRunSignature\n */\nexport interface DryRunSignature {\n    /**\n     * Credential index. Must not exceed 255.\n     *\n     * @generated from protobuf field: uint32 credential = 1;\n     */\n    credential: number;\n    /**\n     * Key index. Must not exceed 255.\n     *\n     * @generated from protobuf field: uint32 key = 2;\n     */\n    key: number;\n}\n/**\n * A response to a `DryRunRequest`.\n *\n * @generated from protobuf message concordium.v2.DryRunResponse\n */\nexport interface DryRunResponse {\n    /**\n     * @generated from protobuf oneof: response\n     */\n    response: {\n        oneofKind: \"error\";\n        /**\n         * The request produced an error. The request otherwise has no effect on the state.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunErrorResponse error = 1;\n         */\n        error: DryRunErrorResponse;\n    } | {\n        oneofKind: \"success\";\n        /**\n         * The request was successful.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse success = 2;\n         */\n        success: DryRunSuccessResponse;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * The remaining available energy quota after the dry run operation.\n     *\n     * @generated from protobuf field: concordium.v2.Energy quota_remaining = 3;\n     */\n    quotaRemaining?: Energy;\n}\n/**\n * @generated from protobuf message concordium.v2.DryRunErrorResponse\n */\nexport interface DryRunErrorResponse {\n    /**\n     * @generated from protobuf oneof: error\n     */\n    error: {\n        oneofKind: \"noState\";\n        /**\n         * The current block state is undefined. It should be initialized with\n         * a 'load_block_state' request before any other operations.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.NoState no_state = 1;\n         */\n        noState: DryRunErrorResponse_NoState;\n    } | {\n        oneofKind: \"blockNotFound\";\n        /**\n         * The requested block was not found, so its state could not be loaded.\n         * Response to 'load_block_state'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.BlockNotFound block_not_found = 2;\n         */\n        blockNotFound: DryRunErrorResponse_BlockNotFound;\n    } | {\n        oneofKind: \"accountNotFound\";\n        /**\n         * The specified account was not found.\n         * Response to 'get_account_info', 'mint_to_account' and 'run_transaction'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.AccountNotFound account_not_found = 3;\n         */\n        accountNotFound: DryRunErrorResponse_AccountNotFound;\n    } | {\n        oneofKind: \"instanceNotFound\";\n        /**\n         * The specified instance was not found.\n         * Response to 'get_instance_info'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.InstanceNotFound instance_not_found = 4;\n         */\n        instanceNotFound: DryRunErrorResponse_InstanceNotFound;\n    } | {\n        oneofKind: \"amountOverLimit\";\n        /**\n         * The amount to mint would overflow the total CCD supply.\n         * Response to 'mint_to_account'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.AmountOverLimit amount_over_limit = 5;\n         */\n        amountOverLimit: DryRunErrorResponse_AmountOverLimit;\n    } | {\n        oneofKind: \"balanceInsufficient\";\n        /**\n         * The balance of the sender account is not sufficient to pay for the operation.\n         * Response to 'run_transaction'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.BalanceInsufficient balance_insufficient = 6;\n         */\n        balanceInsufficient: DryRunErrorResponse_BalanceInsufficient;\n    } | {\n        oneofKind: \"energyInsufficient\";\n        /**\n         * The energy supplied for the transaction was not sufficient to perform the basic checks.\n         * Response to 'run_transaction'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.EnergyInsufficient energy_insufficient = 8;\n         */\n        energyInsufficient: DryRunErrorResponse_EnergyInsufficient;\n    } | {\n        oneofKind: \"invokeFailed\";\n        /**\n         * The contract invocation failed.\n         * Response to 'invoke_instance'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunErrorResponse.InvokeFailure invoke_failed = 9;\n         */\n        invokeFailed: DryRunErrorResponse_InvokeFailure;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * The current block state is undefined. It should be initialized with\n * a 'load_block_state' request before any other operations.\n *\n * @generated from protobuf message concordium.v2.DryRunErrorResponse.NoState\n */\nexport interface DryRunErrorResponse_NoState {\n}\n/**\n * The requested block was not found, so its state could not be loaded.\n *\n * @generated from protobuf message concordium.v2.DryRunErrorResponse.BlockNotFound\n */\nexport interface DryRunErrorResponse_BlockNotFound {\n}\n/**\n * The specified account was not found.\n *\n * @generated from protobuf message concordium.v2.DryRunErrorResponse.AccountNotFound\n */\nexport interface DryRunErrorResponse_AccountNotFound {\n}\n/**\n * The specified instance was not found.\n *\n * @generated from protobuf message concordium.v2.DryRunErrorResponse.InstanceNotFound\n */\nexport interface DryRunErrorResponse_InstanceNotFound {\n}\n/**\n * The amount that was requested to be minted would overflow the total supply.\n *\n * @generated from protobuf message concordium.v2.DryRunErrorResponse.AmountOverLimit\n */\nexport interface DryRunErrorResponse_AmountOverLimit {\n    /**\n     * The maximum amount that can be minted without overflowing the supply.\n     *\n     * @generated from protobuf field: concordium.v2.Amount amount_limit = 1;\n     */\n    amountLimit?: Amount;\n}\n/**\n * The sender account for the transaction has insufficient balance to pay the preliminary fees\n * for the transaction to be included in a block.\n *\n * @generated from protobuf message concordium.v2.DryRunErrorResponse.BalanceInsufficient\n */\nexport interface DryRunErrorResponse_BalanceInsufficient {\n    /**\n     * The minimum balance required to perform the operation.\n     *\n     * @generated from protobuf field: concordium.v2.Amount required_amount = 1;\n     */\n    requiredAmount?: Amount;\n    /**\n     * The currently-available balance on the account to pay for the operation.\n     *\n     * @generated from protobuf field: concordium.v2.Amount available_amount = 2;\n     */\n    availableAmount?: Amount;\n}\n/**\n * The energy made available for the transaction is insufficient to cover the basic processing\n * required to include a transaction in a block.\n *\n * @generated from protobuf message concordium.v2.DryRunErrorResponse.EnergyInsufficient\n */\nexport interface DryRunErrorResponse_EnergyInsufficient {\n    /**\n     * The minimum energy required for the transaction to be included in the chain.\n     * Note that, even if the energy supplied for the transaction is enough to prevent a\n     * `EnergyInsufficient`, the transaction can still be rejected for having\n     * insufficient energy. In that case, a `TransactionExecuted` response will be\n     * produced, but indicate the transaction was rejected.\n     *\n     * @generated from protobuf field: concordium.v2.Energy energy_required = 1;\n     */\n    energyRequired?: Energy;\n}\n/**\n * Invoking the smart contract instance failed.\n *\n * @generated from protobuf message concordium.v2.DryRunErrorResponse.InvokeFailure\n */\nexport interface DryRunErrorResponse_InvokeFailure {\n    /**\n     * If invoking a V0 contract this is not provided, otherwise it is\n     * potentially return value produced by the call unless the call failed with\n     * out of energy or runtime error. If the V1 contract terminated with a\n     * logic error then the return value is present.\n     *\n     * @generated from protobuf field: optional bytes return_value = 1;\n     */\n    returnValue?: Uint8Array;\n    /**\n     * Energy used by the execution.\n     *\n     * @generated from protobuf field: concordium.v2.Energy used_energy = 2;\n     */\n    usedEnergy?: Energy;\n    /**\n     * Contract execution failed for the given reason.\n     *\n     * @generated from protobuf field: concordium.v2.RejectReason reason = 3;\n     */\n    reason?: RejectReason;\n}\n/**\n * The dry run operation completed successfully.\n *\n * @generated from protobuf message concordium.v2.DryRunSuccessResponse\n */\nexport interface DryRunSuccessResponse {\n    /**\n     * @generated from protobuf oneof: response\n     */\n    response: {\n        oneofKind: \"blockStateLoaded\";\n        /**\n         * The state from the specified block was successfully loaded.\n         * Response to 'load_block_state'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse.BlockStateLoaded block_state_loaded = 1;\n         */\n        blockStateLoaded: DryRunSuccessResponse_BlockStateLoaded;\n    } | {\n        oneofKind: \"accountInfo\";\n        /**\n         * Details of the requested account.\n         * Response to 'get_account_info'.\n         *\n         * @generated from protobuf field: concordium.v2.AccountInfo account_info = 2;\n         */\n        accountInfo: AccountInfo;\n    } | {\n        oneofKind: \"instanceInfo\";\n        /**\n         * Details of the requested smart contract instance.\n         * Response to 'get_instance_info'.\n         *\n         * @generated from protobuf field: concordium.v2.InstanceInfo instance_info = 3;\n         */\n        instanceInfo: InstanceInfo;\n    } | {\n        oneofKind: \"invokeSucceeded\";\n        /**\n         * The smart contract instance was invoked successfully.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse.InvokeSuccess invoke_succeeded = 4;\n         */\n        invokeSucceeded: DryRunSuccessResponse_InvokeSuccess;\n    } | {\n        oneofKind: \"timestampSet\";\n        /**\n         * The current timestamp was set successfully.\n         * Response to 'set_timestamp'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse.TimestampSet timestamp_set = 5;\n         */\n        timestampSet: DryRunSuccessResponse_TimestampSet;\n    } | {\n        oneofKind: \"mintedToAccount\";\n        /**\n         * The specified amount was minted and credited to the account.\n         * Response to 'mint_to_account'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse.MintedToAccount minted_to_account = 6;\n         */\n        mintedToAccount: DryRunSuccessResponse_MintedToAccount;\n    } | {\n        oneofKind: \"transactionExecuted\";\n        /**\n         * The specified transaction was executed. Note that the transaction could still have\n         * been rejected.\n         * Response to 'run_transaction'.\n         *\n         * @generated from protobuf field: concordium.v2.DryRunSuccessResponse.TransactionExecuted transaction_executed = 7;\n         */\n        transactionExecuted: DryRunSuccessResponse_TransactionExecuted;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * The block state at the specified block was successfully loaded.\n *\n * @generated from protobuf message concordium.v2.DryRunSuccessResponse.BlockStateLoaded\n */\nexport interface DryRunSuccessResponse_BlockStateLoaded {\n    /**\n     * The timestamp of the block, taken to be the current timestamp.\n     *\n     * @generated from protobuf field: concordium.v2.Timestamp current_timestamp = 1;\n     */\n    currentTimestamp?: Timestamp;\n    /**\n     * The hash of the block that was loaded.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash block_hash = 2;\n     */\n    blockHash?: BlockHash;\n    /**\n     * The protocol version at the specified block. The behavior of operations can vary across\n     * protocol versions.\n     *\n     * @generated from protobuf field: concordium.v2.ProtocolVersion protocol_version = 3;\n     */\n    protocolVersion: ProtocolVersion;\n}\n/**\n * The current apparent timestamp was updated to the specified value.\n *\n * @generated from protobuf message concordium.v2.DryRunSuccessResponse.TimestampSet\n */\nexport interface DryRunSuccessResponse_TimestampSet {\n}\n/**\n * The specified amount was minted to the specified account.\n *\n * @generated from protobuf message concordium.v2.DryRunSuccessResponse.MintedToAccount\n */\nexport interface DryRunSuccessResponse_MintedToAccount {\n}\n/**\n * The transaction was executed.\n *\n * @generated from protobuf message concordium.v2.DryRunSuccessResponse.TransactionExecuted\n */\nexport interface DryRunSuccessResponse_TransactionExecuted {\n    /**\n     * The amount of energy actually expended in executing the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.Energy energy_cost = 1;\n     */\n    energyCost?: Energy;\n    /**\n     * The details of the outcome of the transaction.\n     *\n     * @generated from protobuf field: concordium.v2.AccountTransactionDetails details = 2;\n     */\n    details?: AccountTransactionDetails;\n    /**\n     * If this is an invocation of a V1 contract that produced a return value, this is that\n     * value. Otherwise it is absent.\n     *\n     * @generated from protobuf field: optional bytes return_value = 3;\n     */\n    returnValue?: Uint8Array;\n}\n/**\n * The smart contract instance was invoked successfully.\n *\n * @generated from protobuf message concordium.v2.DryRunSuccessResponse.InvokeSuccess\n */\nexport interface DryRunSuccessResponse_InvokeSuccess {\n    /**\n     * If invoking a V0 contract this is absent. Otherwise it is the return\n     * value produced by the contract.\n     *\n     * @generated from protobuf field: optional bytes return_value = 1;\n     */\n    returnValue?: Uint8Array;\n    /**\n     * Energy used by the execution.\n     *\n     * @generated from protobuf field: concordium.v2.Energy used_energy = 2;\n     */\n    usedEnergy?: Energy;\n    /**\n     * Effects produced by contract execution.\n     *\n     * @generated from protobuf field: repeated concordium.v2.ContractTraceElement effects = 3;\n     */\n    effects: ContractTraceElement[];\n}\n/**\n * The index of a particular finalizer in the finalization committee.\n *\n * @generated from protobuf message concordium.v2.FinalizerIndex\n */\nexport interface FinalizerIndex {\n    /**\n     * @generated from protobuf field: uint32 value = 1;\n     */\n    value: number;\n}\n/**\n * The message that is multicast by a finalizer when validating and signing a block.\n *\n * @generated from protobuf message concordium.v2.QuorumMessage\n */\nexport interface QuorumMessage {\n    /**\n     * Signature on the relevant quorum signature message.\n     *\n     * @generated from protobuf field: concordium.v2.QuorumSignature signature = 1;\n     */\n    signature?: QuorumSignature;\n    /**\n     * Hash of the block that is signed.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash block = 2;\n     */\n    block?: BlockHash;\n    /**\n     * Index of the finalizer signing the message.\n     *\n     * @generated from protobuf field: concordium.v2.FinalizerIndex finalizer = 3;\n     */\n    finalizer?: FinalizerIndex;\n    /**\n     * Round of the block.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 4;\n     */\n    round?: Round;\n    /**\n     * Epoch of the block.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch epoch = 5;\n     */\n    epoch?: Epoch;\n}\n/**\n * @generated from protobuf message concordium.v2.RawQuorumCertificate\n */\nexport interface RawQuorumCertificate {\n    /**\n     * The hash of the block that the quorum certificate refers to.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash block_hash = 1;\n     */\n    blockHash?: BlockHash;\n    /**\n     * The round of the block.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 2;\n     */\n    round?: Round;\n    /**\n     * The epoch of the block.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch epoch = 3;\n     */\n    epoch?: Epoch;\n    /**\n     * The aggregated signature by the finalization committee on the block.\n     *\n     * @generated from protobuf field: concordium.v2.QuorumSignature aggregate_signature = 4;\n     */\n    aggregateSignature?: QuorumSignature;\n    /**\n     * A list of the finalizers that formed the quorum certificate\n     * i.e., the ones who have contributed to the 'aggregate_signature'.\n     * The finalizers are identified by their finalizer index, which refers to the\n     * finalization committee for the epoch.\n     *\n     * @generated from protobuf field: repeated concordium.v2.FinalizerIndex signatories = 5;\n     */\n    signatories: FinalizerIndex[];\n}\n/**\n * A (non-aggregate) signature of a validator. This is used to sign blocks produced by\n * the validator as well as some finalization messages.\n *\n * @generated from protobuf message concordium.v2.BlockSignature\n */\nexport interface BlockSignature {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * A timeout message including the sender's signature.\n *\n * @generated from protobuf message concordium.v2.TimeoutMessage\n */\nexport interface TimeoutMessage {\n    /**\n     * Index of the finalizer signing the message.\n     *\n     * @generated from protobuf field: concordium.v2.FinalizerIndex finalizer = 1;\n     */\n    finalizer?: FinalizerIndex;\n    /**\n     * Round which timed out.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 2;\n     */\n    round?: Round;\n    /**\n     * Current epoch number of the finalizer sending the timeout message.\n     * This can be different from the epoch of the quorum certificate.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch epoch = 3;\n     */\n    epoch?: Epoch;\n    /**\n     * Highest quorum certificate known to the finalizer at the time of timeout.\n     *\n     * @generated from protobuf field: concordium.v2.RawQuorumCertificate quorum_certificate = 4;\n     */\n    quorumCertificate?: RawQuorumCertificate;\n    /**\n     * Signature on the appropriate timeout signature message.\n     *\n     * @generated from protobuf field: concordium.v2.TimeoutSignature signature = 5;\n     */\n    signature?: TimeoutSignature;\n    /**\n     * Signature of the finalizer on the timeout message as a whole.\n     *\n     * @generated from protobuf field: concordium.v2.BlockSignature message_signature = 6;\n     */\n    messageSignature?: BlockSignature;\n}\n/**\n * @generated from protobuf message concordium.v2.RawFinalizerRound\n */\nexport interface RawFinalizerRound {\n    /**\n     * The round that was signed off.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 1;\n     */\n    round?: Round;\n    /**\n     * The finalizers (identified by their 'FinalizerIndex') that\n     * signed off in 'round'.\n     *\n     * @generated from protobuf field: repeated concordium.v2.FinalizerIndex finalizers = 2;\n     */\n    finalizers: FinalizerIndex[];\n}\n/**\n * A timeout certificate is the certificate that the\n * finalization committee issues when a round times out,\n * thus making it possible for the protocol to proceed to the\n * next round.\n *\n * @generated from protobuf message concordium.v2.RawTimeoutCertificate\n */\nexport interface RawTimeoutCertificate {\n    /**\n     * The round that timed out.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 1;\n     */\n    round?: Round;\n    /**\n     * The minimum epoch of which signatures are included\n     * in the 'aggregate_signature'.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch min_epoch = 2;\n     */\n    minEpoch?: Epoch;\n    /**\n     * The rounds of which finalizers have their best\n     * QCs in the 'min_epoch'.\n     *\n     * @generated from protobuf field: repeated concordium.v2.RawFinalizerRound qc_rounds_first_epoch = 3;\n     */\n    qcRoundsFirstEpoch: RawFinalizerRound[];\n    /**\n     * The rounds of which finalizers have their best\n     * QCs in the epoch 'min_epoch' + 1.\n     *\n     * @generated from protobuf field: repeated concordium.v2.RawFinalizerRound qc_rounds_second_epoch = 4;\n     */\n    qcRoundsSecondEpoch: RawFinalizerRound[];\n    /**\n     * The aggregated signature by the finalization committee that witnessed\n     * the 'round' timed out.\n     *\n     * @generated from protobuf field: concordium.v2.TimeoutSignature aggregate_signature = 5;\n     */\n    aggregateSignature?: TimeoutSignature;\n}\n/**\n * @generated from protobuf message concordium.v2.PersistentRoundStatus\n */\nexport interface PersistentRoundStatus {\n    /**\n     * The last signed quorum message by the node.\n     *\n     * @generated from protobuf field: optional concordium.v2.QuorumMessage last_signed_quorum_message = 1;\n     */\n    lastSignedQuorumMessage?: QuorumMessage;\n    /**\n     * The last signed timeout message by the node.\n     *\n     * @generated from protobuf field: optional concordium.v2.TimeoutMessage last_signed_timeout_message = 2;\n     */\n    lastSignedTimeoutMessage?: TimeoutMessage;\n    /**\n     * The last round the node baked in.\n     *\n     * @generated from protobuf field: concordium.v2.Round last_baked_round = 3;\n     */\n    lastBakedRound?: Round;\n    /**\n     * The latest timeout certificate seen by the node. May be absent if the node has seen a\n     * quorum certificate for a more recent round.\n     *\n     * @generated from protobuf field: optional concordium.v2.RawTimeoutCertificate latest_timeout = 4;\n     */\n    latestTimeout?: RawTimeoutCertificate;\n}\n/**\n * @generated from protobuf message concordium.v2.RoundTimeout\n */\nexport interface RoundTimeout {\n    /**\n     * Timeout certificate for the round that timed out.\n     *\n     * @generated from protobuf field: concordium.v2.RawTimeoutCertificate timeout_certificate = 1;\n     */\n    timeoutCertificate?: RawTimeoutCertificate;\n    /**\n     * The highest known quorum certificate when the round timed out.\n     *\n     * @generated from protobuf field: concordium.v2.RawQuorumCertificate quorum_certificate = 2;\n     */\n    quorumCertificate?: RawQuorumCertificate;\n}\n/**\n * @generated from protobuf message concordium.v2.RawFinalizationEntry\n */\nexport interface RawFinalizationEntry {\n    /**\n     * The quorum certificate for the finalized block.\n     *\n     * @generated from protobuf field: concordium.v2.RawQuorumCertificate finalized_qc = 1;\n     */\n    finalizedQc?: RawQuorumCertificate;\n    /**\n     * The quorum certificate for the block that finalizes\n     * the block that 'finalized_qc' points to.\n     *\n     * @generated from protobuf field: concordium.v2.RawQuorumCertificate successor_qc = 2;\n     */\n    successorQc?: RawQuorumCertificate;\n    /**\n     * A proof that the successor block is an immediate\n     * successor of the finalized block.\n     *\n     * @generated from protobuf field: concordium.v2.SuccessorProof successor_proof = 3;\n     */\n    successorProof?: SuccessorProof;\n}\n/**\n * The current round status.\n *\n * @generated from protobuf message concordium.v2.RoundStatus\n */\nexport interface RoundStatus {\n    /**\n     * The current round from the perspective of the node.\n     * This should always be higher than the round of the highest certified block.\n     * If the previous round did not timeout, it should be one more than the round of\n     * the `highest_certified_block`. Otherwise, it should be one more than the round of\n     * the `previous_round_timeout`.\n     *\n     * @generated from protobuf field: concordium.v2.Round current_round = 1;\n     */\n    currentRound?: Round;\n    /**\n     * The quorum certificate for the highest certified block.\n     *\n     * @generated from protobuf field: concordium.v2.RawQuorumCertificate highest_certified_block = 2;\n     */\n    highestCertifiedBlock?: RawQuorumCertificate;\n    /**\n     * If the last round timed out, this is the timeout certificate for that round and\n     * the highest quorum certificate at the time the round timed out.\n     *\n     * @generated from protobuf field: optional concordium.v2.RoundTimeout previous_round_timeout = 3;\n     */\n    previousRoundTimeout?: RoundTimeout;\n    /**\n     * Flag indicating whether the node should attempt to bake in the current round.\n     * This is set to true when the round is advanced, and set to false once the node has\n     * attempted to bake for the round.\n     *\n     * @generated from protobuf field: bool round_eligible_to_bake = 4;\n     */\n    roundEligibleToBake: boolean;\n    /**\n     * The current epoch. This should either be the same as the epoch of the last finalized\n     * block (if its timestamp is before the trigger block time) or the next epoch from the last\n     * finalized block (if its timestamp is at least the trigger block time).\n     *\n     * @generated from protobuf field: concordium.v2.Epoch current_epoch = 5;\n     */\n    currentEpoch?: Epoch;\n    /**\n     * If present, an epoch finalization entry for the epoch before `current_epoch`.\n     * An entry must be present if the current epoch is greater than the epoch of the last\n     * finalized block.\n     *\n     * @generated from protobuf field: optional concordium.v2.RawFinalizationEntry last_epoch_finalization_entry = 6;\n     */\n    lastEpochFinalizationEntry?: RawFinalizationEntry;\n    /**\n     * The current duration the node will wait before a round times out.\n     *\n     * @generated from protobuf field: concordium.v2.Duration current_timeout = 7;\n     */\n    currentTimeout?: Duration;\n}\n/**\n * @generated from protobuf message concordium.v2.BlockTableSummary\n */\nexport interface BlockTableSummary {\n    /**\n     * The number of blocks in the dead block cache.\n     *\n     * @generated from protobuf field: uint64 dead_block_cache_size = 1;\n     */\n    deadBlockCacheSize: bigint;\n    /**\n     * The blocks that are currently live (not dead and not finalized).\n     *\n     * @generated from protobuf field: repeated concordium.v2.BlockHash live_blocks = 2;\n     */\n    liveBlocks: BlockHash[];\n}\n/**\n * A list of block hashes at a particular branch height.\n *\n * @generated from protobuf message concordium.v2.BranchBlocks\n */\nexport interface BranchBlocks {\n    /**\n     * @generated from protobuf field: repeated concordium.v2.BlockHash blocks_at_branch_height = 1;\n     */\n    blocksAtBranchHeight: BlockHash[];\n}\n/**\n * @generated from protobuf message concordium.v2.RoundExistingBlock\n */\nexport interface RoundExistingBlock {\n    /**\n     * The round for which the node saw a block.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 1;\n     */\n    round?: Round;\n    /**\n     * The baker that baked the block.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker = 2;\n     */\n    baker?: BakerId;\n    /**\n     * The hash of the block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash block = 3;\n     */\n    block?: BlockHash;\n}\n/**\n * @generated from protobuf message concordium.v2.RoundExistingQC\n */\nexport interface RoundExistingQC {\n    /**\n     * The round for which a QC was seen.\n     *\n     * @generated from protobuf field: concordium.v2.Round round = 1;\n     */\n    round?: Round;\n    /**\n     * The epoch of the QC.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch epoch = 2;\n     */\n    epoch?: Epoch;\n}\n/**\n * The keys an stake of a specific baker.\n *\n * @generated from protobuf message concordium.v2.FullBakerInfo\n */\nexport interface FullBakerInfo {\n    /**\n     * The baker's identity.\n     *\n     * @generated from protobuf field: concordium.v2.BakerId baker_identity = 1;\n     */\n    bakerIdentity?: BakerId;\n    /**\n     * The baker's election verify key.\n     *\n     * @generated from protobuf field: concordium.v2.BakerElectionVerifyKey election_verify_key = 2;\n     */\n    electionVerifyKey?: BakerElectionVerifyKey;\n    /**\n     * The baker's signature verify key.\n     *\n     * @generated from protobuf field: concordium.v2.BakerSignatureVerifyKey signature_verify_key = 3;\n     */\n    signatureVerifyKey?: BakerSignatureVerifyKey;\n    /**\n     * The baker's aggregation verify key.\n     *\n     * @generated from protobuf field: concordium.v2.BakerAggregationVerifyKey aggregation_verify_key = 4;\n     */\n    aggregationVerifyKey?: BakerAggregationVerifyKey;\n    /**\n     * The stake of the baker.\n     *\n     * @generated from protobuf field: concordium.v2.Amount stake = 5;\n     */\n    stake?: Amount;\n}\n/**\n * The hash of the finalization committee, derived from the weights and aggregation\n * keys of the finalizers.\n *\n * @generated from protobuf message concordium.v2.FinalizationCommitteeHash\n */\nexport interface FinalizationCommitteeHash {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * @generated from protobuf message concordium.v2.BakersAndFinalizers\n */\nexport interface BakersAndFinalizers {\n    /**\n     * The set of bakers.\n     *\n     * @generated from protobuf field: repeated concordium.v2.FullBakerInfo bakers = 1;\n     */\n    bakers: FullBakerInfo[];\n    /**\n     * The IDs of the bakers that are finalizers.\n     * The order determines the finalizer index.\n     *\n     * @generated from protobuf field: repeated concordium.v2.BakerId finalizers = 2;\n     */\n    finalizers: BakerId[];\n    /**\n     * The total effective stake of the bakers.\n     *\n     * @generated from protobuf field: concordium.v2.Amount baker_total_stake = 3;\n     */\n    bakerTotalStake?: Amount;\n    /**\n     * The total effective stake of the finalizers.\n     *\n     * @generated from protobuf field: concordium.v2.Amount finalizer_total_stake = 4;\n     */\n    finalizerTotalStake?: Amount;\n    /**\n     * The hash of the finalization committee.\n     *\n     * @generated from protobuf field: concordium.v2.FinalizationCommitteeHash finalization_committee_hash = 5;\n     */\n    finalizationCommitteeHash?: FinalizationCommitteeHash;\n}\n/**\n * @generated from protobuf message concordium.v2.EpochBakers\n */\nexport interface EpochBakers {\n    /**\n     * The bakers and finalizers for the previous epoch.\n     * If the current epoch is 0, then this is the same as the bakers for the current epoch.\n     *\n     * @generated from protobuf field: concordium.v2.BakersAndFinalizers previous_epoch_bakers = 1;\n     */\n    previousEpochBakers?: BakersAndFinalizers;\n    /**\n     * The bakers and finalizers for the current epoch.\n     * If this is absent, it should be treated as the same as the bakers for the previous epoch.\n     *\n     * @generated from protobuf field: optional concordium.v2.BakersAndFinalizers current_epoch_bakers = 2;\n     */\n    currentEpochBakers?: BakersAndFinalizers;\n    /**\n     * The bakers and finalizers for the next epoch.\n     * If this is absent, it should be treated as the same as the bakers for the current epoch.\n     *\n     * @generated from protobuf field: optional concordium.v2.BakersAndFinalizers next_epoch_bakers = 3;\n     */\n    nextEpochBakers?: BakersAndFinalizers;\n    /**\n     * The first epoch of the next payday.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch next_payday = 4;\n     */\n    nextPayday?: Epoch;\n}\n/**\n * @generated from protobuf message concordium.v2.TimeoutMessages\n */\nexport interface TimeoutMessages {\n    /**\n     * The first epoch for which timeout messages are present.\n     *\n     * @generated from protobuf field: concordium.v2.Epoch first_epoch = 1;\n     */\n    firstEpoch?: Epoch;\n    /**\n     * The timeout messages for the first epoch.\n     * There should always be at least one.\n     *\n     * @generated from protobuf field: repeated concordium.v2.TimeoutMessage first_epoch_timeouts = 2;\n     */\n    firstEpochTimeouts: TimeoutMessage[];\n    /**\n     * The timeout messages for `first_epoch + 1`.\n     *\n     * @generated from protobuf field: repeated concordium.v2.TimeoutMessage second_epoch_timeouts = 3;\n     */\n    secondEpochTimeouts: TimeoutMessage[];\n}\n/**\n * @generated from protobuf message concordium.v2.AggregatedSignatures\n */\nexport interface AggregatedSignatures {\n    /**\n     * The block hash for which the signatures are aggregated.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash signed_block = 1;\n     */\n    signedBlock?: BlockHash;\n    /**\n     * The total weight of the finalizers that signed the block.\n     *\n     * @generated from protobuf field: concordium.v2.Amount signature_weight = 2;\n     */\n    signatureWeight?: Amount;\n    /**\n     * The aggregate signature of the finalizers.\n     *\n     * @generated from protobuf field: concordium.v2.QuorumSignature aggregate_signature = 3;\n     */\n    aggregateSignature?: QuorumSignature;\n    /**\n     * The set of finalizers that have signed.\n     *\n     * @generated from protobuf field: repeated concordium.v2.FinalizerIndex signatories = 4;\n     */\n    signatories: FinalizerIndex[];\n}\n/**\n * @generated from protobuf message concordium.v2.QuorumMessages\n */\nexport interface QuorumMessages {\n    /**\n     * The collected quorum messages for the current round.\n     *\n     * @generated from protobuf field: repeated concordium.v2.QuorumMessage quorum_messages = 1;\n     */\n    quorumMessages: QuorumMessage[];\n    /**\n     * The current aggregate of the valid quorum messages.\n     *\n     * @generated from protobuf field: repeated concordium.v2.AggregatedSignatures aggregated_signatures = 2;\n     */\n    aggregatedSignatures: AggregatedSignatures[];\n}\n/**\n * @generated from protobuf message concordium.v2.ConsensusDetailedStatusQuery\n */\nexport interface ConsensusDetailedStatusQuery {\n    /**\n     * If specified, this determines the genesis index to get status for.\n     * If not specified, the status is returned for the latest genesis index.\n     *\n     * @generated from protobuf field: optional concordium.v2.GenesisIndex genesis_index = 1;\n     */\n    genesisIndex?: GenesisIndex;\n}\n/**\n * @generated from protobuf message concordium.v2.ConsensusDetailedStatus\n */\nexport interface ConsensusDetailedStatus {\n    /**\n     * The hash of the genesis block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash genesis_block = 1;\n     */\n    genesisBlock?: BlockHash;\n    /**\n     * The persisted elements of the round status.\n     *\n     * @generated from protobuf field: concordium.v2.PersistentRoundStatus persistent_round_status = 2;\n     */\n    persistentRoundStatus?: PersistentRoundStatus;\n    /**\n     * The status of the current round.\n     *\n     * @generated from protobuf field: concordium.v2.RoundStatus round_status = 3;\n     */\n    roundStatus?: RoundStatus;\n    /**\n     * The number of non-finalized transactions.\n     *\n     * @generated from protobuf field: uint64 non_finalized_transaction_count = 4;\n     */\n    nonFinalizedTransactionCount: bigint;\n    /**\n     * The purge counter for the transaction table.\n     *\n     * @generated from protobuf field: int64 transaction_table_purge_counter = 5;\n     */\n    transactionTablePurgeCounter: bigint;\n    /**\n     * Summary of the block table.\n     *\n     * @generated from protobuf field: concordium.v2.BlockTableSummary block_table = 6;\n     */\n    blockTable?: BlockTableSummary;\n    /**\n     * The live blocks organized by height after the last finalized block.\n     *\n     * @generated from protobuf field: repeated concordium.v2.BranchBlocks branches = 7;\n     */\n    branches: BranchBlocks[];\n    /**\n     * Which bakers the node has seen legally-signed blocks with live parents from in\n     * non-finalized rounds.\n     *\n     * @generated from protobuf field: repeated concordium.v2.RoundExistingBlock round_existing_blocks = 8;\n     */\n    roundExistingBlocks: RoundExistingBlock[];\n    /**\n     * Which non-finalized rounds the node has seen quorum certificates for.\n     *\n     * @generated from protobuf field: repeated concordium.v2.RoundExistingQC round_existing_qcs = 9;\n     */\n    roundExistingQcs: RoundExistingQC[];\n    /**\n     * The absolute block height of the genesis block of the era.\n     *\n     * @generated from protobuf field: concordium.v2.AbsoluteBlockHeight genesis_block_height = 10;\n     */\n    genesisBlockHeight?: AbsoluteBlockHeight;\n    /**\n     * The hash of the last finalized block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHash last_finalized_block = 11;\n     */\n    lastFinalizedBlock?: BlockHash;\n    /**\n     * The height of the last finalized block.\n     *\n     * @generated from protobuf field: concordium.v2.BlockHeight last_finalized_block_height = 12;\n     */\n    lastFinalizedBlockHeight?: BlockHeight;\n    /**\n     * Unless the last finalized block is the genesis block, this should be a finalization\n     * entry for the last finalized block.\n     * As this includes a quorum certificate for the last finalized block, that can be used\n     * to determine the epoch and round of the last finalized block.\n     *\n     * @generated from protobuf field: optional concordium.v2.RawFinalizationEntry latest_finalization_entry = 13;\n     */\n    latestFinalizationEntry?: RawFinalizationEntry;\n    /**\n     * The bakers and finalizers for the previous, current and next epoch, relative to the last\n     * finalized block.\n     *\n     * @generated from protobuf field: concordium.v2.EpochBakers epoch_bakers = 14;\n     */\n    epochBakers?: EpochBakers;\n    /**\n     * The timeout messages collected by the node for the current round.\n     *\n     * @generated from protobuf field: optional concordium.v2.TimeoutMessages timeout_messages = 15;\n     */\n    timeoutMessages?: TimeoutMessages;\n    /**\n     * If a protocol update has occurred, this is the hash of the terminal block.\n     *\n     * @generated from protobuf field: optional concordium.v2.BlockHash terminal_block = 16;\n     */\n    terminalBlock?: BlockHash;\n}\n/**\n * Indicates that an account is pending -- either a scheduled release or a cooldown -- and\n * when the first release or cooldown will elapse.\n *\n * @generated from protobuf message concordium.v2.AccountPending\n */\nexport interface AccountPending {\n    /**\n     * @generated from protobuf field: concordium.v2.AccountIndex account_index = 1;\n     */\n    accountIndex?: AccountIndex;\n    /**\n     * @generated from protobuf field: concordium.v2.Timestamp first_timestamp = 2;\n     */\n    firstTimestamp?: Timestamp;\n}\n/**\n * Information about how open the pool is to new delegators.\n *\n * @generated from protobuf enum concordium.v2.OpenStatus\n */\nexport enum OpenStatus {\n    /**\n     * @generated from protobuf enum value: OPEN_STATUS_OPEN_FOR_ALL = 0;\n     */\n    OPEN_FOR_ALL = 0,\n    /**\n     * @generated from protobuf enum value: OPEN_STATUS_CLOSED_FOR_NEW = 1;\n     */\n    CLOSED_FOR_NEW = 1,\n    /**\n     * @generated from protobuf enum value: OPEN_STATUS_CLOSED_FOR_ALL = 2;\n     */\n    CLOSED_FOR_ALL = 2\n}\n/**\n * Version of smart contract.\n *\n * @generated from protobuf enum concordium.v2.ContractVersion\n */\nexport enum ContractVersion {\n    /**\n     * @generated from protobuf enum value: V0 = 0;\n     */\n    V0 = 0,\n    /**\n     * @generated from protobuf enum value: V1 = 1;\n     */\n    V1 = 1\n}\n/**\n * The type of a credential.\n *\n * @generated from protobuf enum concordium.v2.CredentialType\n */\nexport enum CredentialType {\n    /**\n     * An initial credential created by the identity provider.\n     *\n     * @generated from protobuf enum value: CREDENTIAL_TYPE_INITIAL = 0;\n     */\n    INITIAL = 0,\n    /**\n     * A normal credential type created by the account.\n     *\n     * @generated from protobuf enum value: CREDENTIAL_TYPE_NORMAL = 1;\n     */\n    NORMAL = 1\n}\n/**\n * The type of chain update.\n *\n * @generated from protobuf enum concordium.v2.UpdateType\n */\nexport enum UpdateType {\n    /**\n     * @generated from protobuf enum value: UPDATE_PROTOCOL = 0;\n     */\n    UPDATE_PROTOCOL = 0,\n    /**\n     * @generated from protobuf enum value: UPDATE_ELECTION_DIFFICULTY = 1;\n     */\n    UPDATE_ELECTION_DIFFICULTY = 1,\n    /**\n     * @generated from protobuf enum value: UPDATE_EURO_PER_ENERGY = 2;\n     */\n    UPDATE_EURO_PER_ENERGY = 2,\n    /**\n     * @generated from protobuf enum value: UPDATE_MICRO_CCD_PER_EURO = 3;\n     */\n    UPDATE_MICRO_CCD_PER_EURO = 3,\n    /**\n     * @generated from protobuf enum value: UPDATE_FOUNDATION_ACCOUNT = 4;\n     */\n    UPDATE_FOUNDATION_ACCOUNT = 4,\n    /**\n     * @generated from protobuf enum value: UPDATE_MINT_DISTRIBUTION = 5;\n     */\n    UPDATE_MINT_DISTRIBUTION = 5,\n    /**\n     * @generated from protobuf enum value: UPDATE_TRANSACTION_FEE_DISTRIBUTION = 6;\n     */\n    UPDATE_TRANSACTION_FEE_DISTRIBUTION = 6,\n    /**\n     * @generated from protobuf enum value: UPDATE_GAS_REWARDS = 7;\n     */\n    UPDATE_GAS_REWARDS = 7,\n    /**\n     * @generated from protobuf enum value: UPDATE_POOL_PARAMETERS = 8;\n     */\n    UPDATE_POOL_PARAMETERS = 8,\n    /**\n     * @generated from protobuf enum value: ADD_ANONYMITY_REVOKER = 9;\n     */\n    ADD_ANONYMITY_REVOKER = 9,\n    /**\n     * @generated from protobuf enum value: ADD_IDENTITY_PROVIDER = 10;\n     */\n    ADD_IDENTITY_PROVIDER = 10,\n    /**\n     * @generated from protobuf enum value: UPDATE_ROOT_KEYS = 11;\n     */\n    UPDATE_ROOT_KEYS = 11,\n    /**\n     * @generated from protobuf enum value: UPDATE_LEVEL1_KEYS = 12;\n     */\n    UPDATE_LEVEL1_KEYS = 12,\n    /**\n     * @generated from protobuf enum value: UPDATE_LEVEL2_KEYS = 13;\n     */\n    UPDATE_LEVEL2_KEYS = 13,\n    /**\n     * @generated from protobuf enum value: UPDATE_COOLDOWN_PARAMETERS = 14;\n     */\n    UPDATE_COOLDOWN_PARAMETERS = 14,\n    /**\n     * @generated from protobuf enum value: UPDATE_TIME_PARAMETERS = 15;\n     */\n    UPDATE_TIME_PARAMETERS = 15,\n    /**\n     * @generated from protobuf enum value: UPDATE_TIMEOUT_PARAMETERS = 16;\n     */\n    UPDATE_TIMEOUT_PARAMETERS = 16,\n    /**\n     * @generated from protobuf enum value: UPDATE_MIN_BLOCK_TIME = 17;\n     */\n    UPDATE_MIN_BLOCK_TIME = 17,\n    /**\n     * @generated from protobuf enum value: UPDATE_BLOCK_ENERGY_LIMIT = 18;\n     */\n    UPDATE_BLOCK_ENERGY_LIMIT = 18,\n    /**\n     * @generated from protobuf enum value: UPDATE_FINALIZATION_COMMITTEE_PARAMETERS = 19;\n     */\n    UPDATE_FINALIZATION_COMMITTEE_PARAMETERS = 19,\n    /**\n     * @generated from protobuf enum value: UPDATE_VALIDATOR_SCORE_PARAMETERS = 20;\n     */\n    UPDATE_VALIDATOR_SCORE_PARAMETERS = 20,\n    /**\n     * @generated from protobuf enum value: UPDATE_CREATE_PLT = 21;\n     */\n    UPDATE_CREATE_PLT = 21\n}\n/**\n * The type of transaction.\n *\n * @generated from protobuf enum concordium.v2.TransactionType\n */\nexport enum TransactionType {\n    /**\n     * @generated from protobuf enum value: DEPLOY_MODULE = 0;\n     */\n    DEPLOY_MODULE = 0,\n    /**\n     * @generated from protobuf enum value: INIT_CONTRACT = 1;\n     */\n    INIT_CONTRACT = 1,\n    /**\n     * @generated from protobuf enum value: UPDATE = 2;\n     */\n    UPDATE = 2,\n    /**\n     * @generated from protobuf enum value: TRANSFER = 3;\n     */\n    TRANSFER = 3,\n    /**\n     * @generated from protobuf enum value: ADD_BAKER = 4;\n     */\n    ADD_BAKER = 4,\n    /**\n     * @generated from protobuf enum value: REMOVE_BAKER = 5;\n     */\n    REMOVE_BAKER = 5,\n    /**\n     * @generated from protobuf enum value: UPDATE_BAKER_STAKE = 6;\n     */\n    UPDATE_BAKER_STAKE = 6,\n    /**\n     * @generated from protobuf enum value: UPDATE_BAKER_RESTAKE_EARNINGS = 7;\n     */\n    UPDATE_BAKER_RESTAKE_EARNINGS = 7,\n    /**\n     * @generated from protobuf enum value: UPDATE_BAKER_KEYS = 8;\n     */\n    UPDATE_BAKER_KEYS = 8,\n    /**\n     * @generated from protobuf enum value: UPDATE_CREDENTIAL_KEYS = 9;\n     */\n    UPDATE_CREDENTIAL_KEYS = 9,\n    /**\n     * @generated from protobuf enum value: ENCRYPTED_AMOUNT_TRANSFER = 10;\n     */\n    ENCRYPTED_AMOUNT_TRANSFER = 10,\n    /**\n     * @generated from protobuf enum value: TRANSFER_TO_ENCRYPTED = 11;\n     */\n    TRANSFER_TO_ENCRYPTED = 11,\n    /**\n     * @generated from protobuf enum value: TRANSFER_TO_PUBLIC = 12;\n     */\n    TRANSFER_TO_PUBLIC = 12,\n    /**\n     * @generated from protobuf enum value: TRANSFER_WITH_SCHEDULE = 13;\n     */\n    TRANSFER_WITH_SCHEDULE = 13,\n    /**\n     * @generated from protobuf enum value: UPDATE_CREDENTIALS = 14;\n     */\n    UPDATE_CREDENTIALS = 14,\n    /**\n     * @generated from protobuf enum value: REGISTER_DATA = 15;\n     */\n    REGISTER_DATA = 15,\n    /**\n     * @generated from protobuf enum value: TRANSFER_WITH_MEMO = 16;\n     */\n    TRANSFER_WITH_MEMO = 16,\n    /**\n     * @generated from protobuf enum value: ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO = 17;\n     */\n    ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO = 17,\n    /**\n     * @generated from protobuf enum value: TRANSFER_WITH_SCHEDULE_AND_MEMO = 18;\n     */\n    TRANSFER_WITH_SCHEDULE_AND_MEMO = 18,\n    /**\n     * @generated from protobuf enum value: CONFIGURE_BAKER = 19;\n     */\n    CONFIGURE_BAKER = 19,\n    /**\n     * @generated from protobuf enum value: CONFIGURE_DELEGATION = 20;\n     */\n    CONFIGURE_DELEGATION = 20,\n    /**\n     * Introduced in protocol version 9.\n     *\n     * @generated from protobuf enum value: TOKEN_UPDATE = 21;\n     */\n    TOKEN_UPDATE = 21\n}\n/**\n * The different versions of the protocol.\n *\n * @generated from protobuf enum concordium.v2.ProtocolVersion\n */\nexport enum ProtocolVersion {\n    /**\n     * @generated from protobuf enum value: PROTOCOL_VERSION_1 = 0;\n     */\n    PROTOCOL_VERSION_1 = 0,\n    /**\n     * @generated from protobuf enum value: PROTOCOL_VERSION_2 = 1;\n     */\n    PROTOCOL_VERSION_2 = 1,\n    /**\n     * @generated from protobuf enum value: PROTOCOL_VERSION_3 = 2;\n     */\n    PROTOCOL_VERSION_3 = 2,\n    /**\n     * @generated from protobuf enum value: PROTOCOL_VERSION_4 = 3;\n     */\n    PROTOCOL_VERSION_4 = 3,\n    /**\n     * @generated from protobuf enum value: PROTOCOL_VERSION_5 = 4;\n     */\n    PROTOCOL_VERSION_5 = 4,\n    /**\n     * @generated from protobuf enum value: PROTOCOL_VERSION_6 = 5;\n     */\n    PROTOCOL_VERSION_6 = 5,\n    /**\n     * @generated from protobuf enum value: PROTOCOL_VERSION_7 = 6;\n     */\n    PROTOCOL_VERSION_7 = 6,\n    /**\n     * @generated from protobuf enum value: PROTOCOL_VERSION_8 = 7;\n     */\n    PROTOCOL_VERSION_8 = 7,\n    /**\n     * @generated from protobuf enum value: PROTOCOL_VERSION_9 = 8;\n     */\n    PROTOCOL_VERSION_9 = 8\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Empty$Type extends MessageType<Empty> {\n    constructor() {\n        super(\"concordium.v2.Empty\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Empty\n */\nexport const Empty = new Empty$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockHash$Type extends MessageType<BlockHash> {\n    constructor() {\n        super(\"concordium.v2.BlockHash\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockHash\n */\nexport const BlockHash = new BlockHash$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Sha256Hash$Type extends MessageType<Sha256Hash> {\n    constructor() {\n        super(\"concordium.v2.Sha256Hash\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Sha256Hash\n */\nexport const Sha256Hash = new Sha256Hash$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionHash$Type extends MessageType<TransactionHash> {\n    constructor() {\n        super(\"concordium.v2.TransactionHash\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TransactionHash\n */\nexport const TransactionHash = new TransactionHash$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StateHash$Type extends MessageType<StateHash> {\n    constructor() {\n        super(\"concordium.v2.StateHash\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.StateHash\n */\nexport const StateHash = new StateHash$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AbsoluteBlockHeight$Type extends MessageType<AbsoluteBlockHeight> {\n    constructor() {\n        super(\"concordium.v2.AbsoluteBlockHeight\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AbsoluteBlockHeight\n */\nexport const AbsoluteBlockHeight = new AbsoluteBlockHeight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockHeight$Type extends MessageType<BlockHeight> {\n    constructor() {\n        super(\"concordium.v2.BlockHeight\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockHeight\n */\nexport const BlockHeight = new BlockHeight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerId$Type extends MessageType<BakerId> {\n    constructor() {\n        super(\"concordium.v2.BakerId\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerId\n */\nexport const BakerId = new BakerId$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountIndex$Type extends MessageType<AccountIndex> {\n    constructor() {\n        super(\"concordium.v2.AccountIndex\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountIndex\n */\nexport const AccountIndex = new AccountIndex$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ModuleRef$Type extends MessageType<ModuleRef> {\n    constructor() {\n        super(\"concordium.v2.ModuleRef\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ModuleRef\n */\nexport const ModuleRef = new ModuleRef$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VersionedModuleSource$Type extends MessageType<VersionedModuleSource> {\n    constructor() {\n        super(\"concordium.v2.VersionedModuleSource\", [\n            { no: 1, name: \"v0\", kind: \"message\", oneof: \"module\", T: () => VersionedModuleSource_ModuleSourceV0 },\n            { no: 2, name: \"v1\", kind: \"message\", oneof: \"module\", T: () => VersionedModuleSource_ModuleSourceV1 }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.VersionedModuleSource\n */\nexport const VersionedModuleSource = new VersionedModuleSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VersionedModuleSource_ModuleSourceV0$Type extends MessageType<VersionedModuleSource_ModuleSourceV0> {\n    constructor() {\n        super(\"concordium.v2.VersionedModuleSource.ModuleSourceV0\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.VersionedModuleSource.ModuleSourceV0\n */\nexport const VersionedModuleSource_ModuleSourceV0 = new VersionedModuleSource_ModuleSourceV0$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VersionedModuleSource_ModuleSourceV1$Type extends MessageType<VersionedModuleSource_ModuleSourceV1> {\n    constructor() {\n        super(\"concordium.v2.VersionedModuleSource.ModuleSourceV1\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.VersionedModuleSource.ModuleSourceV1\n */\nexport const VersionedModuleSource_ModuleSourceV1 = new VersionedModuleSource_ModuleSourceV1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Timestamp$Type extends MessageType<Timestamp> {\n    constructor() {\n        super(\"concordium.v2.Timestamp\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Timestamp\n */\nexport const Timestamp = new Timestamp$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Release$Type extends MessageType<Release> {\n    constructor() {\n        super(\"concordium.v2.Release\", [\n            { no: 1, name: \"timestamp\", kind: \"message\", T: () => Timestamp },\n            { no: 2, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"transactions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TransactionHash }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Release\n */\nexport const Release = new Release$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NewRelease$Type extends MessageType<NewRelease> {\n    constructor() {\n        super(\"concordium.v2.NewRelease\", [\n            { no: 1, name: \"timestamp\", kind: \"message\", T: () => Timestamp },\n            { no: 2, name: \"amount\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NewRelease\n */\nexport const NewRelease = new NewRelease$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ReleaseSchedule$Type extends MessageType<ReleaseSchedule> {\n    constructor() {\n        super(\"concordium.v2.ReleaseSchedule\", [\n            { no: 1, name: \"total\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"schedules\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Release }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ReleaseSchedule\n */\nexport const ReleaseSchedule = new ReleaseSchedule$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncryptedAmount$Type extends MessageType<EncryptedAmount> {\n    constructor() {\n        super(\"concordium.v2.EncryptedAmount\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.EncryptedAmount\n */\nexport const EncryptedAmount = new EncryptedAmount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncryptedBalance$Type extends MessageType<EncryptedBalance> {\n    constructor() {\n        super(\"concordium.v2.EncryptedBalance\", [\n            { no: 1, name: \"self_amount\", kind: \"message\", T: () => EncryptedAmount },\n            { no: 2, name: \"start_index\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"aggregated_amount\", kind: \"message\", T: () => EncryptedAmount },\n            { no: 4, name: \"num_aggregated\", kind: \"scalar\", opt: true, T: 13 /*ScalarType.UINT32*/ },\n            { no: 5, name: \"incoming_amounts\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => EncryptedAmount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.EncryptedBalance\n */\nexport const EncryptedBalance = new EncryptedBalance$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DelegationTarget$Type extends MessageType<DelegationTarget> {\n    constructor() {\n        super(\"concordium.v2.DelegationTarget\", [\n            { no: 1, name: \"passive\", kind: \"message\", oneof: \"target\", T: () => Empty },\n            { no: 2, name: \"baker\", kind: \"message\", oneof: \"target\", T: () => BakerId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DelegationTarget\n */\nexport const DelegationTarget = new DelegationTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerElectionVerifyKey$Type extends MessageType<BakerElectionVerifyKey> {\n    constructor() {\n        super(\"concordium.v2.BakerElectionVerifyKey\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerElectionVerifyKey\n */\nexport const BakerElectionVerifyKey = new BakerElectionVerifyKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerSignatureVerifyKey$Type extends MessageType<BakerSignatureVerifyKey> {\n    constructor() {\n        super(\"concordium.v2.BakerSignatureVerifyKey\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerSignatureVerifyKey\n */\nexport const BakerSignatureVerifyKey = new BakerSignatureVerifyKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerAggregationVerifyKey$Type extends MessageType<BakerAggregationVerifyKey> {\n    constructor() {\n        super(\"concordium.v2.BakerAggregationVerifyKey\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerAggregationVerifyKey\n */\nexport const BakerAggregationVerifyKey = new BakerAggregationVerifyKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerInfo$Type extends MessageType<BakerInfo> {\n    constructor() {\n        super(\"concordium.v2.BakerInfo\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"election_key\", kind: \"message\", T: () => BakerElectionVerifyKey },\n            { no: 3, name: \"signature_key\", kind: \"message\", T: () => BakerSignatureVerifyKey },\n            { no: 4, name: \"aggregation_key\", kind: \"message\", T: () => BakerAggregationVerifyKey }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerInfo\n */\nexport const BakerInfo = new BakerInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StakePendingChange$Type extends MessageType<StakePendingChange> {\n    constructor() {\n        super(\"concordium.v2.StakePendingChange\", [\n            { no: 1, name: \"reduce\", kind: \"message\", oneof: \"change\", T: () => StakePendingChange_Reduce },\n            { no: 2, name: \"remove\", kind: \"message\", oneof: \"change\", T: () => Timestamp }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.StakePendingChange\n */\nexport const StakePendingChange = new StakePendingChange$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StakePendingChange_Reduce$Type extends MessageType<StakePendingChange_Reduce> {\n    constructor() {\n        super(\"concordium.v2.StakePendingChange.Reduce\", [\n            { no: 1, name: \"new_stake\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"effective_time\", kind: \"message\", T: () => Timestamp }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.StakePendingChange.Reduce\n */\nexport const StakePendingChange_Reduce = new StakePendingChange_Reduce$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AmountFraction$Type extends MessageType<AmountFraction> {\n    constructor() {\n        super(\"concordium.v2.AmountFraction\", [\n            { no: 1, name: \"parts_per_hundred_thousand\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AmountFraction\n */\nexport const AmountFraction = new AmountFraction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CommissionRates$Type extends MessageType<CommissionRates> {\n    constructor() {\n        super(\"concordium.v2.CommissionRates\", [\n            { no: 1, name: \"finalization\", kind: \"message\", T: () => AmountFraction },\n            { no: 2, name: \"baking\", kind: \"message\", T: () => AmountFraction },\n            { no: 3, name: \"transaction\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CommissionRates\n */\nexport const CommissionRates = new CommissionRates$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerPoolInfo$Type extends MessageType<BakerPoolInfo> {\n    constructor() {\n        super(\"concordium.v2.BakerPoolInfo\", [\n            { no: 1, name: \"open_status\", kind: \"enum\", T: () => [\"concordium.v2.OpenStatus\", OpenStatus, \"OPEN_STATUS_\"] },\n            { no: 2, name: \"url\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"commission_rates\", kind: \"message\", T: () => CommissionRates }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerPoolInfo\n */\nexport const BakerPoolInfo = new BakerPoolInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountStakingInfo$Type extends MessageType<AccountStakingInfo> {\n    constructor() {\n        super(\"concordium.v2.AccountStakingInfo\", [\n            { no: 1, name: \"baker\", kind: \"message\", oneof: \"stakingInfo\", T: () => AccountStakingInfo_Baker },\n            { no: 2, name: \"delegator\", kind: \"message\", oneof: \"stakingInfo\", T: () => AccountStakingInfo_Delegator }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountStakingInfo\n */\nexport const AccountStakingInfo = new AccountStakingInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountStakingInfo_Baker$Type extends MessageType<AccountStakingInfo_Baker> {\n    constructor() {\n        super(\"concordium.v2.AccountStakingInfo.Baker\", [\n            { no: 1, name: \"staked_amount\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"restake_earnings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"baker_info\", kind: \"message\", T: () => BakerInfo },\n            { no: 4, name: \"pending_change\", kind: \"message\", T: () => StakePendingChange },\n            { no: 5, name: \"pool_info\", kind: \"message\", T: () => BakerPoolInfo },\n            { no: 6, name: \"is_suspended\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountStakingInfo.Baker\n */\nexport const AccountStakingInfo_Baker = new AccountStakingInfo_Baker$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountStakingInfo_Delegator$Type extends MessageType<AccountStakingInfo_Delegator> {\n    constructor() {\n        super(\"concordium.v2.AccountStakingInfo.Delegator\", [\n            { no: 1, name: \"staked_amount\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"restake_earnings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"target\", kind: \"message\", T: () => DelegationTarget },\n            { no: 4, name: \"pending_change\", kind: \"message\", T: () => StakePendingChange }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountStakingInfo.Delegator\n */\nexport const AccountStakingInfo_Delegator = new AccountStakingInfo_Delegator$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SequenceNumber$Type extends MessageType<SequenceNumber> {\n    constructor() {\n        super(\"concordium.v2.SequenceNumber\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.SequenceNumber\n */\nexport const SequenceNumber = new SequenceNumber$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSequenceNumber$Type extends MessageType<UpdateSequenceNumber> {\n    constructor() {\n        super(\"concordium.v2.UpdateSequenceNumber\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.UpdateSequenceNumber\n */\nexport const UpdateSequenceNumber = new UpdateSequenceNumber$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Amount$Type extends MessageType<Amount> {\n    constructor() {\n        super(\"concordium.v2.Amount\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Amount\n */\nexport const Amount = new Amount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CredentialIndex$Type extends MessageType<CredentialIndex> {\n    constructor() {\n        super(\"concordium.v2.CredentialIndex\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CredentialIndex\n */\nexport const CredentialIndex = new CredentialIndex$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SignatureThreshold$Type extends MessageType<SignatureThreshold> {\n    constructor() {\n        super(\"concordium.v2.SignatureThreshold\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.SignatureThreshold\n */\nexport const SignatureThreshold = new SignatureThreshold$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountThreshold$Type extends MessageType<AccountThreshold> {\n    constructor() {\n        super(\"concordium.v2.AccountThreshold\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountThreshold\n */\nexport const AccountThreshold = new AccountThreshold$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncryptionKey$Type extends MessageType<EncryptionKey> {\n    constructor() {\n        super(\"concordium.v2.EncryptionKey\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.EncryptionKey\n */\nexport const EncryptionKey = new EncryptionKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Address$Type extends MessageType<Address> {\n    constructor() {\n        super(\"concordium.v2.Address\", [\n            { no: 1, name: \"account\", kind: \"message\", oneof: \"type\", T: () => AccountAddress },\n            { no: 2, name: \"contract\", kind: \"message\", oneof: \"type\", T: () => ContractAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Address\n */\nexport const Address = new Address$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountVerifyKey$Type extends MessageType<AccountVerifyKey> {\n    constructor() {\n        super(\"concordium.v2.AccountVerifyKey\", [\n            { no: 1, name: \"ed25519_key\", kind: \"scalar\", oneof: \"key\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountVerifyKey\n */\nexport const AccountVerifyKey = new AccountVerifyKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CredentialPublicKeys$Type extends MessageType<CredentialPublicKeys> {\n    constructor() {\n        super(\"concordium.v2.CredentialPublicKeys\", [\n            { no: 1, name: \"keys\", kind: \"map\", K: 13 /*ScalarType.UINT32*/, V: { kind: \"message\", T: () => AccountVerifyKey } },\n            { no: 2, name: \"threshold\", kind: \"message\", T: () => SignatureThreshold }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CredentialPublicKeys\n */\nexport const CredentialPublicKeys = new CredentialPublicKeys$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CredentialRegistrationId$Type extends MessageType<CredentialRegistrationId> {\n    constructor() {\n        super(\"concordium.v2.CredentialRegistrationId\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CredentialRegistrationId\n */\nexport const CredentialRegistrationId = new CredentialRegistrationId$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IdentityProviderIdentity$Type extends MessageType<IdentityProviderIdentity> {\n    constructor() {\n        super(\"concordium.v2.IdentityProviderIdentity\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.IdentityProviderIdentity\n */\nexport const IdentityProviderIdentity = new IdentityProviderIdentity$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass YearMonth$Type extends MessageType<YearMonth> {\n    constructor() {\n        super(\"concordium.v2.YearMonth\", [\n            { no: 1, name: \"year\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 2, name: \"month\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.YearMonth\n */\nexport const YearMonth = new YearMonth$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Policy$Type extends MessageType<Policy> {\n    constructor() {\n        super(\"concordium.v2.Policy\", [\n            { no: 1, name: \"created_at\", kind: \"message\", T: () => YearMonth },\n            { no: 2, name: \"valid_to\", kind: \"message\", T: () => YearMonth },\n            { no: 3, name: \"attributes\", kind: \"map\", K: 13 /*ScalarType.UINT32*/, V: { kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ } }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Policy\n */\nexport const Policy = new Policy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InitialCredentialValues$Type extends MessageType<InitialCredentialValues> {\n    constructor() {\n        super(\"concordium.v2.InitialCredentialValues\", [\n            { no: 1, name: \"keys\", kind: \"message\", T: () => CredentialPublicKeys },\n            { no: 2, name: \"cred_id\", kind: \"message\", T: () => CredentialRegistrationId },\n            { no: 3, name: \"ip_id\", kind: \"message\", T: () => IdentityProviderIdentity },\n            { no: 4, name: \"policy\", kind: \"message\", T: () => Policy }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InitialCredentialValues\n */\nexport const InitialCredentialValues = new InitialCredentialValues$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChainArData$Type extends MessageType<ChainArData> {\n    constructor() {\n        super(\"concordium.v2.ChainArData\", [\n            { no: 1, name: \"enc_id_cred_pub_share\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ChainArData\n */\nexport const ChainArData = new ChainArData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArThreshold$Type extends MessageType<ArThreshold> {\n    constructor() {\n        super(\"concordium.v2.ArThreshold\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ArThreshold\n */\nexport const ArThreshold = new ArThreshold$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Commitment$Type extends MessageType<Commitment> {\n    constructor() {\n        super(\"concordium.v2.Commitment\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Commitment\n */\nexport const Commitment = new Commitment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CredentialCommitments$Type extends MessageType<CredentialCommitments> {\n    constructor() {\n        super(\"concordium.v2.CredentialCommitments\", [\n            { no: 1, name: \"prf\", kind: \"message\", T: () => Commitment },\n            { no: 2, name: \"cred_counter\", kind: \"message\", T: () => Commitment },\n            { no: 3, name: \"max_accounts\", kind: \"message\", T: () => Commitment },\n            { no: 4, name: \"attributes\", kind: \"map\", K: 13 /*ScalarType.UINT32*/, V: { kind: \"message\", T: () => Commitment } },\n            { no: 5, name: \"id_cred_sec_sharing_coeff\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Commitment }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CredentialCommitments\n */\nexport const CredentialCommitments = new CredentialCommitments$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NormalCredentialValues$Type extends MessageType<NormalCredentialValues> {\n    constructor() {\n        super(\"concordium.v2.NormalCredentialValues\", [\n            { no: 1, name: \"keys\", kind: \"message\", T: () => CredentialPublicKeys },\n            { no: 2, name: \"cred_id\", kind: \"message\", T: () => CredentialRegistrationId },\n            { no: 3, name: \"ip_id\", kind: \"message\", T: () => IdentityProviderIdentity },\n            { no: 4, name: \"policy\", kind: \"message\", T: () => Policy },\n            { no: 5, name: \"ar_threshold\", kind: \"message\", T: () => ArThreshold },\n            { no: 6, name: \"ar_data\", kind: \"map\", K: 13 /*ScalarType.UINT32*/, V: { kind: \"message\", T: () => ChainArData } },\n            { no: 7, name: \"commitments\", kind: \"message\", T: () => CredentialCommitments }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NormalCredentialValues\n */\nexport const NormalCredentialValues = new NormalCredentialValues$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountCredential$Type extends MessageType<AccountCredential> {\n    constructor() {\n        super(\"concordium.v2.AccountCredential\", [\n            { no: 1, name: \"initial\", kind: \"message\", oneof: \"credentialValues\", T: () => InitialCredentialValues },\n            { no: 2, name: \"normal\", kind: \"message\", oneof: \"credentialValues\", T: () => NormalCredentialValues }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountCredential\n */\nexport const AccountCredential = new AccountCredential$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldown$Type extends MessageType<Cooldown> {\n    constructor() {\n        super(\"concordium.v2.Cooldown\", [\n            { no: 1, name: \"end_time\", kind: \"message\", T: () => Timestamp },\n            { no: 2, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"status\", kind: \"enum\", T: () => [\"concordium.v2.Cooldown.CooldownStatus\", Cooldown_CooldownStatus] }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Cooldown\n */\nexport const Cooldown = new Cooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenInfo$Type extends MessageType<TokenInfo> {\n    constructor() {\n        super(\"concordium.v2.TokenInfo\", [\n            { no: 1, name: \"token_id\", kind: \"message\", T: () => TokenId },\n            { no: 2, name: \"token_state\", kind: \"message\", T: () => TokenState }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TokenInfo\n */\nexport const TokenInfo = new TokenInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountInfo$Type extends MessageType<AccountInfo> {\n    constructor() {\n        super(\"concordium.v2.AccountInfo\", [\n            { no: 1, name: \"sequence_number\", kind: \"message\", T: () => SequenceNumber },\n            { no: 2, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"schedule\", kind: \"message\", T: () => ReleaseSchedule },\n            { no: 4, name: \"creds\", kind: \"map\", K: 13 /*ScalarType.UINT32*/, V: { kind: \"message\", T: () => AccountCredential } },\n            { no: 5, name: \"threshold\", kind: \"message\", T: () => AccountThreshold },\n            { no: 6, name: \"encrypted_balance\", kind: \"message\", T: () => EncryptedBalance },\n            { no: 7, name: \"encryption_key\", kind: \"message\", T: () => EncryptionKey },\n            { no: 8, name: \"index\", kind: \"message\", T: () => AccountIndex },\n            { no: 9, name: \"stake\", kind: \"message\", T: () => AccountStakingInfo },\n            { no: 10, name: \"address\", kind: \"message\", T: () => AccountAddress },\n            { no: 11, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Cooldown },\n            { no: 12, name: \"available_balance\", kind: \"message\", T: () => Amount },\n            { no: 13, name: \"tokens\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => AccountInfo_Token }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountInfo\n */\nexport const AccountInfo = new AccountInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountInfo_Token$Type extends MessageType<AccountInfo_Token> {\n    constructor() {\n        super(\"concordium.v2.AccountInfo.Token\", [\n            { no: 1, name: \"token_id\", kind: \"message\", T: () => TokenId },\n            { no: 2, name: \"token_account_state\", kind: \"message\", T: () => TokenAccountState }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountInfo.Token\n */\nexport const AccountInfo_Token = new AccountInfo_Token$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockHashInput$Type extends MessageType<BlockHashInput> {\n    constructor() {\n        super(\"concordium.v2.BlockHashInput\", [\n            { no: 1, name: \"best\", kind: \"message\", oneof: \"blockHashInput\", T: () => Empty },\n            { no: 2, name: \"last_final\", kind: \"message\", oneof: \"blockHashInput\", T: () => Empty },\n            { no: 3, name: \"given\", kind: \"message\", oneof: \"blockHashInput\", T: () => BlockHash },\n            { no: 4, name: \"absolute_height\", kind: \"message\", oneof: \"blockHashInput\", T: () => AbsoluteBlockHeight },\n            { no: 5, name: \"relative_height\", kind: \"message\", oneof: \"blockHashInput\", T: () => BlockHashInput_RelativeHeight }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockHashInput\n */\nexport const BlockHashInput = new BlockHashInput$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockHashInput_RelativeHeight$Type extends MessageType<BlockHashInput_RelativeHeight> {\n    constructor() {\n        super(\"concordium.v2.BlockHashInput.RelativeHeight\", [\n            { no: 1, name: \"genesis_index\", kind: \"message\", T: () => GenesisIndex },\n            { no: 2, name: \"height\", kind: \"message\", T: () => BlockHeight },\n            { no: 3, name: \"restrict\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockHashInput.RelativeHeight\n */\nexport const BlockHashInput_RelativeHeight = new BlockHashInput_RelativeHeight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EpochRequest$Type extends MessageType<EpochRequest> {\n    constructor() {\n        super(\"concordium.v2.EpochRequest\", [\n            { no: 1, name: \"relative_epoch\", kind: \"message\", oneof: \"epochRequestInput\", T: () => EpochRequest_RelativeEpoch },\n            { no: 2, name: \"block_hash\", kind: \"message\", oneof: \"epochRequestInput\", T: () => BlockHashInput }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.EpochRequest\n */\nexport const EpochRequest = new EpochRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EpochRequest_RelativeEpoch$Type extends MessageType<EpochRequest_RelativeEpoch> {\n    constructor() {\n        super(\"concordium.v2.EpochRequest.RelativeEpoch\", [\n            { no: 1, name: \"genesis_index\", kind: \"message\", T: () => GenesisIndex },\n            { no: 2, name: \"epoch\", kind: \"message\", T: () => Epoch }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.EpochRequest.RelativeEpoch\n */\nexport const EpochRequest_RelativeEpoch = new EpochRequest_RelativeEpoch$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountIdentifierInput$Type extends MessageType<AccountIdentifierInput> {\n    constructor() {\n        super(\"concordium.v2.AccountIdentifierInput\", [\n            { no: 1, name: \"address\", kind: \"message\", oneof: \"accountIdentifierInput\", T: () => AccountAddress },\n            { no: 2, name: \"cred_id\", kind: \"message\", oneof: \"accountIdentifierInput\", T: () => CredentialRegistrationId },\n            { no: 3, name: \"account_index\", kind: \"message\", oneof: \"accountIdentifierInput\", T: () => AccountIndex }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountIdentifierInput\n */\nexport const AccountIdentifierInput = new AccountIdentifierInput$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountInfoRequest$Type extends MessageType<AccountInfoRequest> {\n    constructor() {\n        super(\"concordium.v2.AccountInfoRequest\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHashInput },\n            { no: 2, name: \"account_identifier\", kind: \"message\", T: () => AccountIdentifierInput }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountInfoRequest\n */\nexport const AccountInfoRequest = new AccountInfoRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenInfoRequest$Type extends MessageType<TokenInfoRequest> {\n    constructor() {\n        super(\"concordium.v2.TokenInfoRequest\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHashInput },\n            { no: 2, name: \"token_id\", kind: \"message\", T: () => TokenId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TokenInfoRequest\n */\nexport const TokenInfoRequest = new TokenInfoRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FinalizedBlockInfo$Type extends MessageType<FinalizedBlockInfo> {\n    constructor() {\n        super(\"concordium.v2.FinalizedBlockInfo\", [\n            { no: 1, name: \"hash\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"height\", kind: \"message\", T: () => AbsoluteBlockHeight }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.FinalizedBlockInfo\n */\nexport const FinalizedBlockInfo = new FinalizedBlockInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AncestorsRequest$Type extends MessageType<AncestorsRequest> {\n    constructor() {\n        super(\"concordium.v2.AncestorsRequest\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHashInput },\n            { no: 2, name: \"amount\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AncestorsRequest\n */\nexport const AncestorsRequest = new AncestorsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ModuleSourceRequest$Type extends MessageType<ModuleSourceRequest> {\n    constructor() {\n        super(\"concordium.v2.ModuleSourceRequest\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHashInput },\n            { no: 2, name: \"module_ref\", kind: \"message\", T: () => ModuleRef }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ModuleSourceRequest\n */\nexport const ModuleSourceRequest = new ModuleSourceRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ContractAddress$Type extends MessageType<ContractAddress> {\n    constructor() {\n        super(\"concordium.v2.ContractAddress\", [\n            { no: 1, name: \"index\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"subindex\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ContractAddress\n */\nexport const ContractAddress = new ContractAddress$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InstanceInfoRequest$Type extends MessageType<InstanceInfoRequest> {\n    constructor() {\n        super(\"concordium.v2.InstanceInfoRequest\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHashInput },\n            { no: 2, name: \"address\", kind: \"message\", T: () => ContractAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InstanceInfoRequest\n */\nexport const InstanceInfoRequest = new InstanceInfoRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InstanceInfo$Type extends MessageType<InstanceInfo> {\n    constructor() {\n        super(\"concordium.v2.InstanceInfo\", [\n            { no: 1, name: \"v0\", kind: \"message\", oneof: \"version\", T: () => InstanceInfo_V0 },\n            { no: 2, name: \"v1\", kind: \"message\", oneof: \"version\", T: () => InstanceInfo_V1 }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InstanceInfo\n */\nexport const InstanceInfo = new InstanceInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InstanceInfo_V0$Type extends MessageType<InstanceInfo_V0> {\n    constructor() {\n        super(\"concordium.v2.InstanceInfo.V0\", [\n            { no: 1, name: \"model\", kind: \"message\", T: () => ContractStateV0 },\n            { no: 2, name: \"owner\", kind: \"message\", T: () => AccountAddress },\n            { no: 3, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"methods\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ReceiveName },\n            { no: 5, name: \"name\", kind: \"message\", T: () => InitName },\n            { no: 6, name: \"source_module\", kind: \"message\", T: () => ModuleRef }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InstanceInfo.V0\n */\nexport const InstanceInfo_V0 = new InstanceInfo_V0$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InstanceInfo_V1$Type extends MessageType<InstanceInfo_V1> {\n    constructor() {\n        super(\"concordium.v2.InstanceInfo.V1\", [\n            { no: 2, name: \"owner\", kind: \"message\", T: () => AccountAddress },\n            { no: 3, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"methods\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ReceiveName },\n            { no: 5, name: \"name\", kind: \"message\", T: () => InitName },\n            { no: 6, name: \"source_module\", kind: \"message\", T: () => ModuleRef }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InstanceInfo.V1\n */\nexport const InstanceInfo_V1 = new InstanceInfo_V1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InstanceStateKVPair$Type extends MessageType<InstanceStateKVPair> {\n    constructor() {\n        super(\"concordium.v2.InstanceStateKVPair\", [\n            { no: 1, name: \"key\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InstanceStateKVPair\n */\nexport const InstanceStateKVPair = new InstanceStateKVPair$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InstanceStateLookupRequest$Type extends MessageType<InstanceStateLookupRequest> {\n    constructor() {\n        super(\"concordium.v2.InstanceStateLookupRequest\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHashInput },\n            { no: 2, name: \"address\", kind: \"message\", T: () => ContractAddress },\n            { no: 3, name: \"key\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InstanceStateLookupRequest\n */\nexport const InstanceStateLookupRequest = new InstanceStateLookupRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InstanceStateValueAtKey$Type extends MessageType<InstanceStateValueAtKey> {\n    constructor() {\n        super(\"concordium.v2.InstanceStateValueAtKey\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InstanceStateValueAtKey\n */\nexport const InstanceStateValueAtKey = new InstanceStateValueAtKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ReceiveName$Type extends MessageType<ReceiveName> {\n    constructor() {\n        super(\"concordium.v2.ReceiveName\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ReceiveName\n */\nexport const ReceiveName = new ReceiveName$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InitName$Type extends MessageType<InitName> {\n    constructor() {\n        super(\"concordium.v2.InitName\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InitName\n */\nexport const InitName = new InitName$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Parameter$Type extends MessageType<Parameter> {\n    constructor() {\n        super(\"concordium.v2.Parameter\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Parameter\n */\nexport const Parameter = new Parameter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ContractStateV0$Type extends MessageType<ContractStateV0> {\n    constructor() {\n        super(\"concordium.v2.ContractStateV0\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ContractStateV0\n */\nexport const ContractStateV0 = new ContractStateV0$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockItemStatus$Type extends MessageType<BlockItemStatus> {\n    constructor() {\n        super(\"concordium.v2.BlockItemStatus\", [\n            { no: 1, name: \"received\", kind: \"message\", oneof: \"status\", T: () => Empty },\n            { no: 2, name: \"committed\", kind: \"message\", oneof: \"status\", T: () => BlockItemStatus_Committed },\n            { no: 3, name: \"finalized\", kind: \"message\", oneof: \"status\", T: () => BlockItemStatus_Finalized }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockItemStatus\n */\nexport const BlockItemStatus = new BlockItemStatus$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockItemStatus_Committed$Type extends MessageType<BlockItemStatus_Committed> {\n    constructor() {\n        super(\"concordium.v2.BlockItemStatus.Committed\", [\n            { no: 1, name: \"outcomes\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlockItemSummaryInBlock }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockItemStatus.Committed\n */\nexport const BlockItemStatus_Committed = new BlockItemStatus_Committed$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockItemStatus_Finalized$Type extends MessageType<BlockItemStatus_Finalized> {\n    constructor() {\n        super(\"concordium.v2.BlockItemStatus.Finalized\", [\n            { no: 1, name: \"outcome\", kind: \"message\", T: () => BlockItemSummaryInBlock }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockItemStatus.Finalized\n */\nexport const BlockItemStatus_Finalized = new BlockItemStatus_Finalized$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockItemSummaryInBlock$Type extends MessageType<BlockItemSummaryInBlock> {\n    constructor() {\n        super(\"concordium.v2.BlockItemSummaryInBlock\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"outcome\", kind: \"message\", T: () => BlockItemSummary }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockItemSummaryInBlock\n */\nexport const BlockItemSummaryInBlock = new BlockItemSummaryInBlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Energy$Type extends MessageType<Energy> {\n    constructor() {\n        super(\"concordium.v2.Energy\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Energy\n */\nexport const Energy = new Energy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Slot$Type extends MessageType<Slot> {\n    constructor() {\n        super(\"concordium.v2.Slot\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Slot\n */\nexport const Slot = new Slot$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NextAccountSequenceNumber$Type extends MessageType<NextAccountSequenceNumber> {\n    constructor() {\n        super(\"concordium.v2.NextAccountSequenceNumber\", [\n            { no: 1, name: \"sequence_number\", kind: \"message\", T: () => SequenceNumber },\n            { no: 2, name: \"all_final\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NextAccountSequenceNumber\n */\nexport const NextAccountSequenceNumber = new NextAccountSequenceNumber$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Duration$Type extends MessageType<Duration> {\n    constructor() {\n        super(\"concordium.v2.Duration\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Duration\n */\nexport const Duration = new Duration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RejectReason$Type extends MessageType<RejectReason> {\n    constructor() {\n        super(\"concordium.v2.RejectReason\", [\n            { no: 1, name: \"module_not_wf\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 2, name: \"module_hash_already_exists\", kind: \"message\", oneof: \"reason\", T: () => ModuleRef },\n            { no: 3, name: \"invalid_account_reference\", kind: \"message\", oneof: \"reason\", T: () => AccountAddress },\n            { no: 4, name: \"invalid_init_method\", kind: \"message\", oneof: \"reason\", T: () => RejectReason_InvalidInitMethod },\n            { no: 5, name: \"invalid_receive_method\", kind: \"message\", oneof: \"reason\", T: () => RejectReason_InvalidReceiveMethod },\n            { no: 6, name: \"invalid_module_reference\", kind: \"message\", oneof: \"reason\", T: () => ModuleRef },\n            { no: 7, name: \"invalid_contract_address\", kind: \"message\", oneof: \"reason\", T: () => ContractAddress },\n            { no: 8, name: \"runtime_failure\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 9, name: \"amount_too_large\", kind: \"message\", oneof: \"reason\", T: () => RejectReason_AmountTooLarge },\n            { no: 10, name: \"serialization_failure\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 11, name: \"out_of_energy\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 12, name: \"rejected_init\", kind: \"message\", oneof: \"reason\", T: () => RejectReason_RejectedInit },\n            { no: 13, name: \"rejected_receive\", kind: \"message\", oneof: \"reason\", T: () => RejectReason_RejectedReceive },\n            { no: 14, name: \"invalid_proof\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 15, name: \"already_a_baker\", kind: \"message\", oneof: \"reason\", T: () => BakerId },\n            { no: 16, name: \"not_a_baker\", kind: \"message\", oneof: \"reason\", T: () => AccountAddress },\n            { no: 17, name: \"insufficient_balance_for_baker_stake\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 18, name: \"stake_under_minimum_threshold_for_baking\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 19, name: \"baker_in_cooldown\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 20, name: \"duplicate_aggregation_key\", kind: \"message\", oneof: \"reason\", T: () => BakerAggregationVerifyKey },\n            { no: 21, name: \"non_existent_credential_id\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 22, name: \"key_index_already_in_use\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 23, name: \"invalid_account_threshold\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 24, name: \"invalid_credential_key_sign_threshold\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 25, name: \"invalid_encrypted_amount_transfer_proof\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 26, name: \"invalid_transfer_to_public_proof\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 27, name: \"encrypted_amount_self_transfer\", kind: \"message\", oneof: \"reason\", T: () => AccountAddress },\n            { no: 28, name: \"invalid_index_on_encrypted_transfer\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 29, name: \"zero_scheduledAmount\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 30, name: \"non_increasing_schedule\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 31, name: \"first_scheduled_release_expired\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 32, name: \"scheduled_self_transfer\", kind: \"message\", oneof: \"reason\", T: () => AccountAddress },\n            { no: 33, name: \"invalid_credentials\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 34, name: \"duplicate_cred_ids\", kind: \"message\", oneof: \"reason\", T: () => RejectReason_DuplicateCredIds },\n            { no: 35, name: \"non_existent_cred_ids\", kind: \"message\", oneof: \"reason\", T: () => RejectReason_NonExistentCredIds },\n            { no: 36, name: \"remove_first_credential\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 37, name: \"credential_holder_did_not_sign\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 38, name: \"not_allowed_multiple_credentials\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 39, name: \"not_allowed_to_receive_encrypted\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 40, name: \"not_allowed_to_handle_encrypted\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 41, name: \"missing_baker_add_parameters\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 42, name: \"finalization_reward_commission_not_in_range\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 43, name: \"baking_reward_commission_not_in_range\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 44, name: \"transaction_fee_commission_not_in_range\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 45, name: \"already_a_delegator\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 46, name: \"insufficient_balance_for_delegation_stake\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 47, name: \"missing_delegation_add_parameters\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 48, name: \"insufficient_delegation_stake\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 49, name: \"delegator_in_cooldown\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 50, name: \"not_a_delegator\", kind: \"message\", oneof: \"reason\", T: () => AccountAddress },\n            { no: 51, name: \"delegation_target_not_a_baker\", kind: \"message\", oneof: \"reason\", T: () => BakerId },\n            { no: 52, name: \"stake_over_maximum_threshold_for_pool\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 53, name: \"pool_would_become_over_delegated\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 54, name: \"pool_closed\", kind: \"message\", oneof: \"reason\", T: () => Empty },\n            { no: 55, name: \"non_existent_token_id\", kind: \"message\", oneof: \"reason\", T: () => TokenId },\n            { no: 56, name: \"token_update_transaction_failed\", kind: \"message\", oneof: \"reason\", T: () => TokenModuleRejectReason }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RejectReason\n */\nexport const RejectReason = new RejectReason$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RejectReason_InvalidInitMethod$Type extends MessageType<RejectReason_InvalidInitMethod> {\n    constructor() {\n        super(\"concordium.v2.RejectReason.InvalidInitMethod\", [\n            { no: 1, name: \"module_ref\", kind: \"message\", T: () => ModuleRef },\n            { no: 2, name: \"init_name\", kind: \"message\", T: () => InitName }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RejectReason.InvalidInitMethod\n */\nexport const RejectReason_InvalidInitMethod = new RejectReason_InvalidInitMethod$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RejectReason_InvalidReceiveMethod$Type extends MessageType<RejectReason_InvalidReceiveMethod> {\n    constructor() {\n        super(\"concordium.v2.RejectReason.InvalidReceiveMethod\", [\n            { no: 1, name: \"module_ref\", kind: \"message\", T: () => ModuleRef },\n            { no: 2, name: \"receive_name\", kind: \"message\", T: () => ReceiveName }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RejectReason.InvalidReceiveMethod\n */\nexport const RejectReason_InvalidReceiveMethod = new RejectReason_InvalidReceiveMethod$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RejectReason_AmountTooLarge$Type extends MessageType<RejectReason_AmountTooLarge> {\n    constructor() {\n        super(\"concordium.v2.RejectReason.AmountTooLarge\", [\n            { no: 1, name: \"address\", kind: \"message\", T: () => Address },\n            { no: 2, name: \"amount\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RejectReason.AmountTooLarge\n */\nexport const RejectReason_AmountTooLarge = new RejectReason_AmountTooLarge$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RejectReason_RejectedInit$Type extends MessageType<RejectReason_RejectedInit> {\n    constructor() {\n        super(\"concordium.v2.RejectReason.RejectedInit\", [\n            { no: 1, name: \"reject_reason\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RejectReason.RejectedInit\n */\nexport const RejectReason_RejectedInit = new RejectReason_RejectedInit$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RejectReason_RejectedReceive$Type extends MessageType<RejectReason_RejectedReceive> {\n    constructor() {\n        super(\"concordium.v2.RejectReason.RejectedReceive\", [\n            { no: 1, name: \"reject_reason\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"contract_address\", kind: \"message\", T: () => ContractAddress },\n            { no: 3, name: \"receive_name\", kind: \"message\", T: () => ReceiveName },\n            { no: 4, name: \"parameter\", kind: \"message\", T: () => Parameter }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RejectReason.RejectedReceive\n */\nexport const RejectReason_RejectedReceive = new RejectReason_RejectedReceive$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RejectReason_DuplicateCredIds$Type extends MessageType<RejectReason_DuplicateCredIds> {\n    constructor() {\n        super(\"concordium.v2.RejectReason.DuplicateCredIds\", [\n            { no: 1, name: \"ids\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CredentialRegistrationId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RejectReason.DuplicateCredIds\n */\nexport const RejectReason_DuplicateCredIds = new RejectReason_DuplicateCredIds$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RejectReason_NonExistentCredIds$Type extends MessageType<RejectReason_NonExistentCredIds> {\n    constructor() {\n        super(\"concordium.v2.RejectReason.NonExistentCredIds\", [\n            { no: 1, name: \"ids\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CredentialRegistrationId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RejectReason.NonExistentCredIds\n */\nexport const RejectReason_NonExistentCredIds = new RejectReason_NonExistentCredIds$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ContractInitializedEvent$Type extends MessageType<ContractInitializedEvent> {\n    constructor() {\n        super(\"concordium.v2.ContractInitializedEvent\", [\n            { no: 1, name: \"contract_version\", kind: \"enum\", T: () => [\"concordium.v2.ContractVersion\", ContractVersion] },\n            { no: 2, name: \"origin_ref\", kind: \"message\", T: () => ModuleRef },\n            { no: 3, name: \"address\", kind: \"message\", T: () => ContractAddress },\n            { no: 4, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"init_name\", kind: \"message\", T: () => InitName },\n            { no: 6, name: \"events\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractEvent },\n            { no: 7, name: \"parameter\", kind: \"message\", T: () => Parameter }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ContractInitializedEvent\n */\nexport const ContractInitializedEvent = new ContractInitializedEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ContractEvent$Type extends MessageType<ContractEvent> {\n    constructor() {\n        super(\"concordium.v2.ContractEvent\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ContractEvent\n */\nexport const ContractEvent = new ContractEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InstanceUpdatedEvent$Type extends MessageType<InstanceUpdatedEvent> {\n    constructor() {\n        super(\"concordium.v2.InstanceUpdatedEvent\", [\n            { no: 1, name: \"contract_version\", kind: \"enum\", T: () => [\"concordium.v2.ContractVersion\", ContractVersion] },\n            { no: 2, name: \"address\", kind: \"message\", T: () => ContractAddress },\n            { no: 3, name: \"instigator\", kind: \"message\", T: () => Address },\n            { no: 4, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"parameter\", kind: \"message\", T: () => Parameter },\n            { no: 6, name: \"receive_name\", kind: \"message\", T: () => ReceiveName },\n            { no: 7, name: \"events\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractEvent }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InstanceUpdatedEvent\n */\nexport const InstanceUpdatedEvent = new InstanceUpdatedEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ContractTraceElement$Type extends MessageType<ContractTraceElement> {\n    constructor() {\n        super(\"concordium.v2.ContractTraceElement\", [\n            { no: 1, name: \"updated\", kind: \"message\", oneof: \"element\", T: () => InstanceUpdatedEvent },\n            { no: 2, name: \"transferred\", kind: \"message\", oneof: \"element\", T: () => ContractTraceElement_Transferred },\n            { no: 3, name: \"interrupted\", kind: \"message\", oneof: \"element\", T: () => ContractTraceElement_Interrupted },\n            { no: 4, name: \"resumed\", kind: \"message\", oneof: \"element\", T: () => ContractTraceElement_Resumed },\n            { no: 5, name: \"upgraded\", kind: \"message\", oneof: \"element\", T: () => ContractTraceElement_Upgraded }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ContractTraceElement\n */\nexport const ContractTraceElement = new ContractTraceElement$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ContractTraceElement_Transferred$Type extends MessageType<ContractTraceElement_Transferred> {\n    constructor() {\n        super(\"concordium.v2.ContractTraceElement.Transferred\", [\n            { no: 1, name: \"sender\", kind: \"message\", T: () => ContractAddress },\n            { no: 2, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"receiver\", kind: \"message\", T: () => AccountAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ContractTraceElement.Transferred\n */\nexport const ContractTraceElement_Transferred = new ContractTraceElement_Transferred$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ContractTraceElement_Interrupted$Type extends MessageType<ContractTraceElement_Interrupted> {\n    constructor() {\n        super(\"concordium.v2.ContractTraceElement.Interrupted\", [\n            { no: 1, name: \"address\", kind: \"message\", T: () => ContractAddress },\n            { no: 2, name: \"events\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractEvent }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ContractTraceElement.Interrupted\n */\nexport const ContractTraceElement_Interrupted = new ContractTraceElement_Interrupted$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ContractTraceElement_Resumed$Type extends MessageType<ContractTraceElement_Resumed> {\n    constructor() {\n        super(\"concordium.v2.ContractTraceElement.Resumed\", [\n            { no: 1, name: \"address\", kind: \"message\", T: () => ContractAddress },\n            { no: 2, name: \"success\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ContractTraceElement.Resumed\n */\nexport const ContractTraceElement_Resumed = new ContractTraceElement_Resumed$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ContractTraceElement_Upgraded$Type extends MessageType<ContractTraceElement_Upgraded> {\n    constructor() {\n        super(\"concordium.v2.ContractTraceElement.Upgraded\", [\n            { no: 1, name: \"address\", kind: \"message\", T: () => ContractAddress },\n            { no: 2, name: \"from\", kind: \"message\", T: () => ModuleRef },\n            { no: 3, name: \"to\", kind: \"message\", T: () => ModuleRef }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ContractTraceElement.Upgraded\n */\nexport const ContractTraceElement_Upgraded = new ContractTraceElement_Upgraded$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerKeysEvent$Type extends MessageType<BakerKeysEvent> {\n    constructor() {\n        super(\"concordium.v2.BakerKeysEvent\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"account\", kind: \"message\", T: () => AccountAddress },\n            { no: 3, name: \"sign_key\", kind: \"message\", T: () => BakerSignatureVerifyKey },\n            { no: 4, name: \"election_key\", kind: \"message\", T: () => BakerElectionVerifyKey },\n            { no: 5, name: \"aggregation_key\", kind: \"message\", T: () => BakerAggregationVerifyKey }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerKeysEvent\n */\nexport const BakerKeysEvent = new BakerKeysEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerStakeUpdatedData$Type extends MessageType<BakerStakeUpdatedData> {\n    constructor() {\n        super(\"concordium.v2.BakerStakeUpdatedData\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"new_stake\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"increased\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerStakeUpdatedData\n */\nexport const BakerStakeUpdatedData = new BakerStakeUpdatedData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncryptedAmountRemovedEvent$Type extends MessageType<EncryptedAmountRemovedEvent> {\n    constructor() {\n        super(\"concordium.v2.EncryptedAmountRemovedEvent\", [\n            { no: 1, name: \"account\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"new_amount\", kind: \"message\", T: () => EncryptedAmount },\n            { no: 3, name: \"input_amount\", kind: \"message\", T: () => EncryptedAmount },\n            { no: 4, name: \"up_to_index\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.EncryptedAmountRemovedEvent\n */\nexport const EncryptedAmountRemovedEvent = new EncryptedAmountRemovedEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NewEncryptedAmountEvent$Type extends MessageType<NewEncryptedAmountEvent> {\n    constructor() {\n        super(\"concordium.v2.NewEncryptedAmountEvent\", [\n            { no: 1, name: \"receiver\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"new_index\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"encrypted_amount\", kind: \"message\", T: () => EncryptedAmount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NewEncryptedAmountEvent\n */\nexport const NewEncryptedAmountEvent = new NewEncryptedAmountEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncryptedSelfAmountAddedEvent$Type extends MessageType<EncryptedSelfAmountAddedEvent> {\n    constructor() {\n        super(\"concordium.v2.EncryptedSelfAmountAddedEvent\", [\n            { no: 1, name: \"account\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"new_amount\", kind: \"message\", T: () => EncryptedAmount },\n            { no: 3, name: \"amount\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.EncryptedSelfAmountAddedEvent\n */\nexport const EncryptedSelfAmountAddedEvent = new EncryptedSelfAmountAddedEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RegisteredData$Type extends MessageType<RegisteredData> {\n    constructor() {\n        super(\"concordium.v2.RegisteredData\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RegisteredData\n */\nexport const RegisteredData = new RegisteredData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent$Type extends MessageType<BakerEvent> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent\", [\n            { no: 1, name: \"baker_added\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerAdded },\n            { no: 2, name: \"baker_removed\", kind: \"message\", oneof: \"event\", T: () => BakerId },\n            { no: 3, name: \"baker_stake_increased\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerStakeIncreased },\n            { no: 4, name: \"baker_stake_decreased\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerStakeDecreased },\n            { no: 5, name: \"baker_restake_earnings_updated\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerRestakeEarningsUpdated },\n            { no: 6, name: \"baker_keys_updated\", kind: \"message\", oneof: \"event\", T: () => BakerKeysEvent },\n            { no: 7, name: \"baker_set_open_status\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerSetOpenStatus },\n            { no: 8, name: \"baker_set_metadata_url\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerSetMetadataUrl },\n            { no: 9, name: \"baker_set_transaction_fee_commission\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerSetTransactionFeeCommission },\n            { no: 10, name: \"baker_set_baking_reward_commission\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerSetBakingRewardCommission },\n            { no: 11, name: \"baker_set_finalization_reward_commission\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerSetFinalizationRewardCommission },\n            { no: 12, name: \"delegation_removed\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_DelegationRemoved },\n            { no: 13, name: \"baker_suspended\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerSuspended },\n            { no: 14, name: \"baker_resumed\", kind: \"message\", oneof: \"event\", T: () => BakerEvent_BakerResumed }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent\n */\nexport const BakerEvent = new BakerEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerAdded$Type extends MessageType<BakerEvent_BakerAdded> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerAdded\", [\n            { no: 1, name: \"keys_event\", kind: \"message\", T: () => BakerKeysEvent },\n            { no: 2, name: \"stake\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"restake_earnings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerAdded\n */\nexport const BakerEvent_BakerAdded = new BakerEvent_BakerAdded$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerStakeIncreased$Type extends MessageType<BakerEvent_BakerStakeIncreased> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerStakeIncreased\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"new_stake\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerStakeIncreased\n */\nexport const BakerEvent_BakerStakeIncreased = new BakerEvent_BakerStakeIncreased$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerStakeDecreased$Type extends MessageType<BakerEvent_BakerStakeDecreased> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerStakeDecreased\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"new_stake\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerStakeDecreased\n */\nexport const BakerEvent_BakerStakeDecreased = new BakerEvent_BakerStakeDecreased$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerRestakeEarningsUpdated$Type extends MessageType<BakerEvent_BakerRestakeEarningsUpdated> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerRestakeEarningsUpdated\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"restake_earnings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerRestakeEarningsUpdated\n */\nexport const BakerEvent_BakerRestakeEarningsUpdated = new BakerEvent_BakerRestakeEarningsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerSetOpenStatus$Type extends MessageType<BakerEvent_BakerSetOpenStatus> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerSetOpenStatus\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"open_status\", kind: \"enum\", T: () => [\"concordium.v2.OpenStatus\", OpenStatus, \"OPEN_STATUS_\"] }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSetOpenStatus\n */\nexport const BakerEvent_BakerSetOpenStatus = new BakerEvent_BakerSetOpenStatus$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerSetMetadataUrl$Type extends MessageType<BakerEvent_BakerSetMetadataUrl> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerSetMetadataUrl\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"url\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSetMetadataUrl\n */\nexport const BakerEvent_BakerSetMetadataUrl = new BakerEvent_BakerSetMetadataUrl$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerSetTransactionFeeCommission$Type extends MessageType<BakerEvent_BakerSetTransactionFeeCommission> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerSetTransactionFeeCommission\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"transaction_fee_commission\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSetTransactionFeeCommission\n */\nexport const BakerEvent_BakerSetTransactionFeeCommission = new BakerEvent_BakerSetTransactionFeeCommission$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerSetBakingRewardCommission$Type extends MessageType<BakerEvent_BakerSetBakingRewardCommission> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerSetBakingRewardCommission\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"baking_reward_commission\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSetBakingRewardCommission\n */\nexport const BakerEvent_BakerSetBakingRewardCommission = new BakerEvent_BakerSetBakingRewardCommission$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerSetFinalizationRewardCommission$Type extends MessageType<BakerEvent_BakerSetFinalizationRewardCommission> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"finalization_reward_commission\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission\n */\nexport const BakerEvent_BakerSetFinalizationRewardCommission = new BakerEvent_BakerSetFinalizationRewardCommission$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_DelegationRemoved$Type extends MessageType<BakerEvent_DelegationRemoved> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.DelegationRemoved\", [\n            { no: 1, name: \"delegator_id\", kind: \"message\", T: () => DelegatorId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.DelegationRemoved\n */\nexport const BakerEvent_DelegationRemoved = new BakerEvent_DelegationRemoved$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerSuspended$Type extends MessageType<BakerEvent_BakerSuspended> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerSuspended\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerSuspended\n */\nexport const BakerEvent_BakerSuspended = new BakerEvent_BakerSuspended$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerEvent_BakerResumed$Type extends MessageType<BakerEvent_BakerResumed> {\n    constructor() {\n        super(\"concordium.v2.BakerEvent.BakerResumed\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerEvent.BakerResumed\n */\nexport const BakerEvent_BakerResumed = new BakerEvent_BakerResumed$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DelegatorId$Type extends MessageType<DelegatorId> {\n    constructor() {\n        super(\"concordium.v2.DelegatorId\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => AccountIndex }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DelegatorId\n */\nexport const DelegatorId = new DelegatorId$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DelegationEvent$Type extends MessageType<DelegationEvent> {\n    constructor() {\n        super(\"concordium.v2.DelegationEvent\", [\n            { no: 1, name: \"delegation_stake_increased\", kind: \"message\", oneof: \"event\", T: () => DelegationEvent_DelegationStakeIncreased },\n            { no: 2, name: \"delegation_stake_decreased\", kind: \"message\", oneof: \"event\", T: () => DelegationEvent_DelegationStakeDecreased },\n            { no: 3, name: \"delegation_set_restake_earnings\", kind: \"message\", oneof: \"event\", T: () => DelegationEvent_DelegationSetRestakeEarnings },\n            { no: 4, name: \"delegation_set_delegation_target\", kind: \"message\", oneof: \"event\", T: () => DelegationEvent_DelegationSetDelegationTarget },\n            { no: 5, name: \"delegation_added\", kind: \"message\", oneof: \"event\", T: () => DelegatorId },\n            { no: 6, name: \"delegation_removed\", kind: \"message\", oneof: \"event\", T: () => DelegatorId },\n            { no: 7, name: \"baker_removed\", kind: \"message\", oneof: \"event\", T: () => DelegationEvent_BakerRemoved }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DelegationEvent\n */\nexport const DelegationEvent = new DelegationEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DelegationEvent_DelegationStakeIncreased$Type extends MessageType<DelegationEvent_DelegationStakeIncreased> {\n    constructor() {\n        super(\"concordium.v2.DelegationEvent.DelegationStakeIncreased\", [\n            { no: 1, name: \"delegator_id\", kind: \"message\", T: () => DelegatorId },\n            { no: 2, name: \"new_stake\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DelegationEvent.DelegationStakeIncreased\n */\nexport const DelegationEvent_DelegationStakeIncreased = new DelegationEvent_DelegationStakeIncreased$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DelegationEvent_DelegationStakeDecreased$Type extends MessageType<DelegationEvent_DelegationStakeDecreased> {\n    constructor() {\n        super(\"concordium.v2.DelegationEvent.DelegationStakeDecreased\", [\n            { no: 1, name: \"delegator_id\", kind: \"message\", T: () => DelegatorId },\n            { no: 2, name: \"new_stake\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DelegationEvent.DelegationStakeDecreased\n */\nexport const DelegationEvent_DelegationStakeDecreased = new DelegationEvent_DelegationStakeDecreased$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DelegationEvent_DelegationSetRestakeEarnings$Type extends MessageType<DelegationEvent_DelegationSetRestakeEarnings> {\n    constructor() {\n        super(\"concordium.v2.DelegationEvent.DelegationSetRestakeEarnings\", [\n            { no: 1, name: \"delegator_id\", kind: \"message\", T: () => DelegatorId },\n            { no: 2, name: \"restake_earnings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DelegationEvent.DelegationSetRestakeEarnings\n */\nexport const DelegationEvent_DelegationSetRestakeEarnings = new DelegationEvent_DelegationSetRestakeEarnings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DelegationEvent_DelegationSetDelegationTarget$Type extends MessageType<DelegationEvent_DelegationSetDelegationTarget> {\n    constructor() {\n        super(\"concordium.v2.DelegationEvent.DelegationSetDelegationTarget\", [\n            { no: 1, name: \"delegator_id\", kind: \"message\", T: () => DelegatorId },\n            { no: 2, name: \"delegation_target\", kind: \"message\", T: () => DelegationTarget }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DelegationEvent.DelegationSetDelegationTarget\n */\nexport const DelegationEvent_DelegationSetDelegationTarget = new DelegationEvent_DelegationSetDelegationTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DelegationEvent_BakerRemoved$Type extends MessageType<DelegationEvent_BakerRemoved> {\n    constructor() {\n        super(\"concordium.v2.DelegationEvent.BakerRemoved\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DelegationEvent.BakerRemoved\n */\nexport const DelegationEvent_BakerRemoved = new DelegationEvent_BakerRemoved$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects$Type extends MessageType<AccountTransactionEffects> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects\", [\n            { no: 1, name: \"none\", kind: \"message\", oneof: \"effect\", T: () => AccountTransactionEffects_None },\n            { no: 2, name: \"module_deployed\", kind: \"message\", oneof: \"effect\", T: () => ModuleRef },\n            { no: 3, name: \"contract_initialized\", kind: \"message\", oneof: \"effect\", T: () => ContractInitializedEvent },\n            { no: 4, name: \"contract_update_issued\", kind: \"message\", oneof: \"effect\", T: () => AccountTransactionEffects_ContractUpdateIssued },\n            { no: 5, name: \"account_transfer\", kind: \"message\", oneof: \"effect\", T: () => AccountTransactionEffects_AccountTransfer },\n            { no: 6, name: \"baker_added\", kind: \"message\", oneof: \"effect\", T: () => BakerEvent_BakerAdded },\n            { no: 7, name: \"baker_removed\", kind: \"message\", oneof: \"effect\", T: () => BakerId },\n            { no: 8, name: \"baker_stake_updated\", kind: \"message\", oneof: \"effect\", T: () => AccountTransactionEffects_BakerStakeUpdated },\n            { no: 9, name: \"baker_restake_earnings_updated\", kind: \"message\", oneof: \"effect\", T: () => BakerEvent_BakerRestakeEarningsUpdated },\n            { no: 10, name: \"baker_keys_updated\", kind: \"message\", oneof: \"effect\", T: () => BakerKeysEvent },\n            { no: 11, name: \"encrypted_amount_transferred\", kind: \"message\", oneof: \"effect\", T: () => AccountTransactionEffects_EncryptedAmountTransferred },\n            { no: 12, name: \"transferred_to_encrypted\", kind: \"message\", oneof: \"effect\", T: () => EncryptedSelfAmountAddedEvent },\n            { no: 13, name: \"transferred_to_public\", kind: \"message\", oneof: \"effect\", T: () => AccountTransactionEffects_TransferredToPublic },\n            { no: 14, name: \"transferred_with_schedule\", kind: \"message\", oneof: \"effect\", T: () => AccountTransactionEffects_TransferredWithSchedule },\n            { no: 15, name: \"credential_keys_updated\", kind: \"message\", oneof: \"effect\", T: () => CredentialRegistrationId },\n            { no: 16, name: \"credentials_updated\", kind: \"message\", oneof: \"effect\", T: () => AccountTransactionEffects_CredentialsUpdated },\n            { no: 17, name: \"data_registered\", kind: \"message\", oneof: \"effect\", T: () => RegisteredData },\n            { no: 18, name: \"baker_configured\", kind: \"message\", oneof: \"effect\", T: () => AccountTransactionEffects_BakerConfigured },\n            { no: 19, name: \"delegation_configured\", kind: \"message\", oneof: \"effect\", T: () => AccountTransactionEffects_DelegationConfigured },\n            { no: 20, name: \"token_update_effect\", kind: \"message\", oneof: \"effect\", T: () => TokenEffect }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects\n */\nexport const AccountTransactionEffects = new AccountTransactionEffects$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects_None$Type extends MessageType<AccountTransactionEffects_None> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects.None\", [\n            { no: 1, name: \"transaction_type\", kind: \"enum\", opt: true, T: () => [\"concordium.v2.TransactionType\", TransactionType] },\n            { no: 2, name: \"reject_reason\", kind: \"message\", T: () => RejectReason }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.None\n */\nexport const AccountTransactionEffects_None = new AccountTransactionEffects_None$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects_ContractUpdateIssued$Type extends MessageType<AccountTransactionEffects_ContractUpdateIssued> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects.ContractUpdateIssued\", [\n            { no: 1, name: \"effects\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractTraceElement }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.ContractUpdateIssued\n */\nexport const AccountTransactionEffects_ContractUpdateIssued = new AccountTransactionEffects_ContractUpdateIssued$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects_AccountTransfer$Type extends MessageType<AccountTransactionEffects_AccountTransfer> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects.AccountTransfer\", [\n            { no: 1, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"receiver\", kind: \"message\", T: () => AccountAddress },\n            { no: 3, name: \"memo\", kind: \"message\", T: () => Memo }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.AccountTransfer\n */\nexport const AccountTransactionEffects_AccountTransfer = new AccountTransactionEffects_AccountTransfer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects_BakerStakeUpdated$Type extends MessageType<AccountTransactionEffects_BakerStakeUpdated> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects.BakerStakeUpdated\", [\n            { no: 1, name: \"update\", kind: \"message\", T: () => BakerStakeUpdatedData }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.BakerStakeUpdated\n */\nexport const AccountTransactionEffects_BakerStakeUpdated = new AccountTransactionEffects_BakerStakeUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects_EncryptedAmountTransferred$Type extends MessageType<AccountTransactionEffects_EncryptedAmountTransferred> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred\", [\n            { no: 1, name: \"removed\", kind: \"message\", T: () => EncryptedAmountRemovedEvent },\n            { no: 2, name: \"added\", kind: \"message\", T: () => NewEncryptedAmountEvent },\n            { no: 3, name: \"memo\", kind: \"message\", T: () => Memo }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred\n */\nexport const AccountTransactionEffects_EncryptedAmountTransferred = new AccountTransactionEffects_EncryptedAmountTransferred$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects_TransferredToPublic$Type extends MessageType<AccountTransactionEffects_TransferredToPublic> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects.TransferredToPublic\", [\n            { no: 1, name: \"removed\", kind: \"message\", T: () => EncryptedAmountRemovedEvent },\n            { no: 2, name: \"amount\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.TransferredToPublic\n */\nexport const AccountTransactionEffects_TransferredToPublic = new AccountTransactionEffects_TransferredToPublic$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects_TransferredWithSchedule$Type extends MessageType<AccountTransactionEffects_TransferredWithSchedule> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects.TransferredWithSchedule\", [\n            { no: 1, name: \"receiver\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"amount\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => NewRelease },\n            { no: 3, name: \"memo\", kind: \"message\", T: () => Memo }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.TransferredWithSchedule\n */\nexport const AccountTransactionEffects_TransferredWithSchedule = new AccountTransactionEffects_TransferredWithSchedule$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects_CredentialsUpdated$Type extends MessageType<AccountTransactionEffects_CredentialsUpdated> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects.CredentialsUpdated\", [\n            { no: 1, name: \"new_cred_ids\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CredentialRegistrationId },\n            { no: 2, name: \"removed_cred_ids\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CredentialRegistrationId },\n            { no: 3, name: \"new_threshold\", kind: \"message\", T: () => AccountThreshold }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.CredentialsUpdated\n */\nexport const AccountTransactionEffects_CredentialsUpdated = new AccountTransactionEffects_CredentialsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects_BakerConfigured$Type extends MessageType<AccountTransactionEffects_BakerConfigured> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects.BakerConfigured\", [\n            { no: 1, name: \"events\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BakerEvent }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.BakerConfigured\n */\nexport const AccountTransactionEffects_BakerConfigured = new AccountTransactionEffects_BakerConfigured$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionEffects_DelegationConfigured$Type extends MessageType<AccountTransactionEffects_DelegationConfigured> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionEffects.DelegationConfigured\", [\n            { no: 1, name: \"events\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => DelegationEvent }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionEffects.DelegationConfigured\n */\nexport const AccountTransactionEffects_DelegationConfigured = new AccountTransactionEffects_DelegationConfigured$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElectionDifficulty$Type extends MessageType<ElectionDifficulty> {\n    constructor() {\n        super(\"concordium.v2.ElectionDifficulty\", [\n            { no: 1, name: \"value\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ElectionDifficulty\n */\nexport const ElectionDifficulty = new ElectionDifficulty$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TimeoutParameters$Type extends MessageType<TimeoutParameters> {\n    constructor() {\n        super(\"concordium.v2.TimeoutParameters\", [\n            { no: 1, name: \"timeout_base\", kind: \"message\", T: () => Duration },\n            { no: 2, name: \"timeout_increase\", kind: \"message\", T: () => Ratio },\n            { no: 3, name: \"timeout_decrease\", kind: \"message\", T: () => Ratio }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TimeoutParameters\n */\nexport const TimeoutParameters = new TimeoutParameters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FinalizationCommitteeParameters$Type extends MessageType<FinalizationCommitteeParameters> {\n    constructor() {\n        super(\"concordium.v2.FinalizationCommitteeParameters\", [\n            { no: 1, name: \"minimum_finalizers\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 2, name: \"maximum_finalizers\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 3, name: \"finalizer_relative_stake_threshold\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.FinalizationCommitteeParameters\n */\nexport const FinalizationCommitteeParameters = new FinalizationCommitteeParameters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorScoreParameters$Type extends MessageType<ValidatorScoreParameters> {\n    constructor() {\n        super(\"concordium.v2.ValidatorScoreParameters\", [\n            { no: 1, name: \"maximum_missed_rounds\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ValidatorScoreParameters\n */\nexport const ValidatorScoreParameters = new ValidatorScoreParameters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConsensusParametersV1$Type extends MessageType<ConsensusParametersV1> {\n    constructor() {\n        super(\"concordium.v2.ConsensusParametersV1\", [\n            { no: 1, name: \"timeout_parameters\", kind: \"message\", T: () => TimeoutParameters },\n            { no: 2, name: \"min_block_time\", kind: \"message\", T: () => Duration },\n            { no: 3, name: \"block_energy_limit\", kind: \"message\", T: () => Energy }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ConsensusParametersV1\n */\nexport const ConsensusParametersV1 = new ConsensusParametersV1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ExchangeRate$Type extends MessageType<ExchangeRate> {\n    constructor() {\n        super(\"concordium.v2.ExchangeRate\", [\n            { no: 1, name: \"value\", kind: \"message\", T: () => Ratio }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ExchangeRate\n */\nexport const ExchangeRate = new ExchangeRate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Ratio$Type extends MessageType<Ratio> {\n    constructor() {\n        super(\"concordium.v2.Ratio\", [\n            { no: 1, name: \"numerator\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"denominator\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Ratio\n */\nexport const Ratio = new Ratio$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdatePublicKey$Type extends MessageType<UpdatePublicKey> {\n    constructor() {\n        super(\"concordium.v2.UpdatePublicKey\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.UpdatePublicKey\n */\nexport const UpdatePublicKey = new UpdatePublicKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateKeysThreshold$Type extends MessageType<UpdateKeysThreshold> {\n    constructor() {\n        super(\"concordium.v2.UpdateKeysThreshold\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.UpdateKeysThreshold\n */\nexport const UpdateKeysThreshold = new UpdateKeysThreshold$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateKeysIndex$Type extends MessageType<UpdateKeysIndex> {\n    constructor() {\n        super(\"concordium.v2.UpdateKeysIndex\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.UpdateKeysIndex\n */\nexport const UpdateKeysIndex = new UpdateKeysIndex$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HigherLevelKeys$Type extends MessageType<HigherLevelKeys> {\n    constructor() {\n        super(\"concordium.v2.HigherLevelKeys\", [\n            { no: 1, name: \"keys\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdatePublicKey },\n            { no: 2, name: \"threshold\", kind: \"message\", T: () => UpdateKeysThreshold }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.HigherLevelKeys\n */\nexport const HigherLevelKeys = new HigherLevelKeys$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccessStructure$Type extends MessageType<AccessStructure> {\n    constructor() {\n        super(\"concordium.v2.AccessStructure\", [\n            { no: 1, name: \"access_public_keys\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdateKeysIndex },\n            { no: 2, name: \"access_threshold\", kind: \"message\", T: () => UpdateKeysThreshold }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccessStructure\n */\nexport const AccessStructure = new AccessStructure$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuthorizationsV0$Type extends MessageType<AuthorizationsV0> {\n    constructor() {\n        super(\"concordium.v2.AuthorizationsV0\", [\n            { no: 1, name: \"keys\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdatePublicKey },\n            { no: 2, name: \"emergency\", kind: \"message\", T: () => AccessStructure },\n            { no: 3, name: \"protocol\", kind: \"message\", T: () => AccessStructure },\n            { no: 4, name: \"parameter_consensus\", kind: \"message\", T: () => AccessStructure },\n            { no: 5, name: \"parameter_euro_per_energy\", kind: \"message\", T: () => AccessStructure },\n            { no: 6, name: \"parameter_micro_CCD_per_euro\", kind: \"message\", T: () => AccessStructure },\n            { no: 7, name: \"parameter_foundation_account\", kind: \"message\", T: () => AccessStructure },\n            { no: 8, name: \"parameter_mint_distribution\", kind: \"message\", T: () => AccessStructure },\n            { no: 9, name: \"parameter_transaction_fee_distribution\", kind: \"message\", T: () => AccessStructure },\n            { no: 10, name: \"parameter_gas_rewards\", kind: \"message\", T: () => AccessStructure },\n            { no: 11, name: \"pool_parameters\", kind: \"message\", T: () => AccessStructure },\n            { no: 12, name: \"add_anonymity_revoker\", kind: \"message\", T: () => AccessStructure },\n            { no: 13, name: \"add_identity_provider\", kind: \"message\", T: () => AccessStructure }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AuthorizationsV0\n */\nexport const AuthorizationsV0 = new AuthorizationsV0$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuthorizationsV1$Type extends MessageType<AuthorizationsV1> {\n    constructor() {\n        super(\"concordium.v2.AuthorizationsV1\", [\n            { no: 1, name: \"v0\", kind: \"message\", T: () => AuthorizationsV0 },\n            { no: 2, name: \"parameter_cooldown\", kind: \"message\", T: () => AccessStructure },\n            { no: 3, name: \"parameter_time\", kind: \"message\", T: () => AccessStructure },\n            { no: 4, name: \"create_plt\", kind: \"message\", T: () => AccessStructure }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AuthorizationsV1\n */\nexport const AuthorizationsV1 = new AuthorizationsV1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Description$Type extends MessageType<Description> {\n    constructor() {\n        super(\"concordium.v2.Description\", [\n            { no: 1, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"url\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"description\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Description\n */\nexport const Description = new Description$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArInfo$Type extends MessageType<ArInfo> {\n    constructor() {\n        super(\"concordium.v2.ArInfo\", [\n            { no: 1, name: \"identity\", kind: \"message\", T: () => ArInfo_ArIdentity },\n            { no: 2, name: \"description\", kind: \"message\", T: () => Description },\n            { no: 3, name: \"public_key\", kind: \"message\", T: () => ArInfo_ArPublicKey }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ArInfo\n */\nexport const ArInfo = new ArInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArInfo_ArIdentity$Type extends MessageType<ArInfo_ArIdentity> {\n    constructor() {\n        super(\"concordium.v2.ArInfo.ArIdentity\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ArInfo.ArIdentity\n */\nexport const ArInfo_ArIdentity = new ArInfo_ArIdentity$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArInfo_ArPublicKey$Type extends MessageType<ArInfo_ArPublicKey> {\n    constructor() {\n        super(\"concordium.v2.ArInfo.ArPublicKey\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ArInfo.ArPublicKey\n */\nexport const ArInfo_ArPublicKey = new ArInfo_ArPublicKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IpIdentity$Type extends MessageType<IpIdentity> {\n    constructor() {\n        super(\"concordium.v2.IpIdentity\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.IpIdentity\n */\nexport const IpIdentity = new IpIdentity$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IpInfo$Type extends MessageType<IpInfo> {\n    constructor() {\n        super(\"concordium.v2.IpInfo\", [\n            { no: 1, name: \"identity\", kind: \"message\", T: () => IpIdentity },\n            { no: 2, name: \"description\", kind: \"message\", T: () => Description },\n            { no: 3, name: \"verify_key\", kind: \"message\", T: () => IpInfo_IpVerifyKey },\n            { no: 4, name: \"cdi_verify_key\", kind: \"message\", T: () => IpInfo_IpCdiVerifyKey }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.IpInfo\n */\nexport const IpInfo = new IpInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IpInfo_IpVerifyKey$Type extends MessageType<IpInfo_IpVerifyKey> {\n    constructor() {\n        super(\"concordium.v2.IpInfo.IpVerifyKey\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.IpInfo.IpVerifyKey\n */\nexport const IpInfo_IpVerifyKey = new IpInfo_IpVerifyKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IpInfo_IpCdiVerifyKey$Type extends MessageType<IpInfo_IpCdiVerifyKey> {\n    constructor() {\n        super(\"concordium.v2.IpInfo.IpCdiVerifyKey\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.IpInfo.IpCdiVerifyKey\n */\nexport const IpInfo_IpCdiVerifyKey = new IpInfo_IpCdiVerifyKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DurationSeconds$Type extends MessageType<DurationSeconds> {\n    constructor() {\n        super(\"concordium.v2.DurationSeconds\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DurationSeconds\n */\nexport const DurationSeconds = new DurationSeconds$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InclusiveRangeAmountFraction$Type extends MessageType<InclusiveRangeAmountFraction> {\n    constructor() {\n        super(\"concordium.v2.InclusiveRangeAmountFraction\", [\n            { no: 1, name: \"min\", kind: \"message\", T: () => AmountFraction },\n            { no: 2, name: \"max_\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InclusiveRangeAmountFraction\n */\nexport const InclusiveRangeAmountFraction = new InclusiveRangeAmountFraction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CommissionRanges$Type extends MessageType<CommissionRanges> {\n    constructor() {\n        super(\"concordium.v2.CommissionRanges\", [\n            { no: 1, name: \"finalization\", kind: \"message\", T: () => InclusiveRangeAmountFraction },\n            { no: 2, name: \"baking\", kind: \"message\", T: () => InclusiveRangeAmountFraction },\n            { no: 3, name: \"transaction\", kind: \"message\", T: () => InclusiveRangeAmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CommissionRanges\n */\nexport const CommissionRanges = new CommissionRanges$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CapitalBound$Type extends MessageType<CapitalBound> {\n    constructor() {\n        super(\"concordium.v2.CapitalBound\", [\n            { no: 1, name: \"value\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CapitalBound\n */\nexport const CapitalBound = new CapitalBound$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass LeverageFactor$Type extends MessageType<LeverageFactor> {\n    constructor() {\n        super(\"concordium.v2.LeverageFactor\", [\n            { no: 1, name: \"value\", kind: \"message\", T: () => Ratio }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.LeverageFactor\n */\nexport const LeverageFactor = new LeverageFactor$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Epoch$Type extends MessageType<Epoch> {\n    constructor() {\n        super(\"concordium.v2.Epoch\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Epoch\n */\nexport const Epoch = new Epoch$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Round$Type extends MessageType<Round> {\n    constructor() {\n        super(\"concordium.v2.Round\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Round\n */\nexport const Round = new Round$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RewardPeriodLength$Type extends MessageType<RewardPeriodLength> {\n    constructor() {\n        super(\"concordium.v2.RewardPeriodLength\", [\n            { no: 1, name: \"value\", kind: \"message\", T: () => Epoch }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RewardPeriodLength\n */\nexport const RewardPeriodLength = new RewardPeriodLength$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MintRate$Type extends MessageType<MintRate> {\n    constructor() {\n        super(\"concordium.v2.MintRate\", [\n            { no: 1, name: \"mantissa\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 2, name: \"exponent\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.MintRate\n */\nexport const MintRate = new MintRate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CooldownParametersCpv1$Type extends MessageType<CooldownParametersCpv1> {\n    constructor() {\n        super(\"concordium.v2.CooldownParametersCpv1\", [\n            { no: 1, name: \"pool_owner_cooldown\", kind: \"message\", T: () => DurationSeconds },\n            { no: 2, name: \"delegator_cooldown\", kind: \"message\", T: () => DurationSeconds }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CooldownParametersCpv1\n */\nexport const CooldownParametersCpv1 = new CooldownParametersCpv1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PoolParametersCpv1$Type extends MessageType<PoolParametersCpv1> {\n    constructor() {\n        super(\"concordium.v2.PoolParametersCpv1\", [\n            { no: 1, name: \"passive_finalization_commission\", kind: \"message\", T: () => AmountFraction },\n            { no: 2, name: \"passive_baking_commission\", kind: \"message\", T: () => AmountFraction },\n            { no: 3, name: \"passive_transaction_commission\", kind: \"message\", T: () => AmountFraction },\n            { no: 4, name: \"commission_bounds\", kind: \"message\", T: () => CommissionRanges },\n            { no: 5, name: \"minimum_equity_capital\", kind: \"message\", T: () => Amount },\n            { no: 6, name: \"capital_bound\", kind: \"message\", T: () => CapitalBound },\n            { no: 7, name: \"leverage_bound\", kind: \"message\", T: () => LeverageFactor }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PoolParametersCpv1\n */\nexport const PoolParametersCpv1 = new PoolParametersCpv1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TimeParametersCpv1$Type extends MessageType<TimeParametersCpv1> {\n    constructor() {\n        super(\"concordium.v2.TimeParametersCpv1\", [\n            { no: 1, name: \"reward_period_length\", kind: \"message\", T: () => RewardPeriodLength },\n            { no: 2, name: \"mint_per_payday\", kind: \"message\", T: () => MintRate }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TimeParametersCpv1\n */\nexport const TimeParametersCpv1 = new TimeParametersCpv1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MintDistributionCpv1$Type extends MessageType<MintDistributionCpv1> {\n    constructor() {\n        super(\"concordium.v2.MintDistributionCpv1\", [\n            { no: 1, name: \"baking_reward\", kind: \"message\", T: () => AmountFraction },\n            { no: 2, name: \"finalization_reward\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.MintDistributionCpv1\n */\nexport const MintDistributionCpv1 = new MintDistributionCpv1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtocolUpdate$Type extends MessageType<ProtocolUpdate> {\n    constructor() {\n        super(\"concordium.v2.ProtocolUpdate\", [\n            { no: 1, name: \"message_\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"specification_url\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"specificationHash\", kind: \"message\", T: () => Sha256Hash },\n            { no: 4, name: \"specification_auxiliary_data\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ProtocolUpdate\n */\nexport const ProtocolUpdate = new ProtocolUpdate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MintDistributionCpv0$Type extends MessageType<MintDistributionCpv0> {\n    constructor() {\n        super(\"concordium.v2.MintDistributionCpv0\", [\n            { no: 1, name: \"mint_per_slot\", kind: \"message\", T: () => MintRate },\n            { no: 2, name: \"baking_reward\", kind: \"message\", T: () => AmountFraction },\n            { no: 3, name: \"finalization_reward\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.MintDistributionCpv0\n */\nexport const MintDistributionCpv0 = new MintDistributionCpv0$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionFeeDistribution$Type extends MessageType<TransactionFeeDistribution> {\n    constructor() {\n        super(\"concordium.v2.TransactionFeeDistribution\", [\n            { no: 1, name: \"baker\", kind: \"message\", T: () => AmountFraction },\n            { no: 2, name: \"gas_account\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TransactionFeeDistribution\n */\nexport const TransactionFeeDistribution = new TransactionFeeDistribution$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GasRewards$Type extends MessageType<GasRewards> {\n    constructor() {\n        super(\"concordium.v2.GasRewards\", [\n            { no: 1, name: \"baker\", kind: \"message\", T: () => AmountFraction },\n            { no: 2, name: \"finalization_proof\", kind: \"message\", T: () => AmountFraction },\n            { no: 3, name: \"account_creation\", kind: \"message\", T: () => AmountFraction },\n            { no: 4, name: \"chain_update\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.GasRewards\n */\nexport const GasRewards = new GasRewards$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GasRewardsCpv2$Type extends MessageType<GasRewardsCpv2> {\n    constructor() {\n        super(\"concordium.v2.GasRewardsCpv2\", [\n            { no: 1, name: \"baker\", kind: \"message\", T: () => AmountFraction },\n            { no: 3, name: \"account_creation\", kind: \"message\", T: () => AmountFraction },\n            { no: 4, name: \"chain_update\", kind: \"message\", T: () => AmountFraction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.GasRewardsCpv2\n */\nexport const GasRewardsCpv2 = new GasRewardsCpv2$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerStakeThreshold$Type extends MessageType<BakerStakeThreshold> {\n    constructor() {\n        super(\"concordium.v2.BakerStakeThreshold\", [\n            { no: 1, name: \"baker_stake_threshold\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerStakeThreshold\n */\nexport const BakerStakeThreshold = new BakerStakeThreshold$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RootUpdate$Type extends MessageType<RootUpdate> {\n    constructor() {\n        super(\"concordium.v2.RootUpdate\", [\n            { no: 1, name: \"root_keys_update\", kind: \"message\", oneof: \"updateType\", T: () => HigherLevelKeys },\n            { no: 2, name: \"level_1_keys_update\", kind: \"message\", oneof: \"updateType\", T: () => HigherLevelKeys },\n            { no: 3, name: \"level_2_keys_update_v0\", kind: \"message\", oneof: \"updateType\", T: () => AuthorizationsV0 },\n            { no: 4, name: \"level_2_keys_update_v1\", kind: \"message\", oneof: \"updateType\", T: () => AuthorizationsV1 }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RootUpdate\n */\nexport const RootUpdate = new RootUpdate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Level1Update$Type extends MessageType<Level1Update> {\n    constructor() {\n        super(\"concordium.v2.Level1Update\", [\n            { no: 1, name: \"level_1_keys_update\", kind: \"message\", oneof: \"updateType\", T: () => HigherLevelKeys },\n            { no: 2, name: \"level_2_keys_update_v0\", kind: \"message\", oneof: \"updateType\", T: () => AuthorizationsV0 },\n            { no: 3, name: \"level_2_keys_update_v1\", kind: \"message\", oneof: \"updateType\", T: () => AuthorizationsV1 }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Level1Update\n */\nexport const Level1Update = new Level1Update$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdatePayload$Type extends MessageType<UpdatePayload> {\n    constructor() {\n        super(\"concordium.v2.UpdatePayload\", [\n            { no: 1, name: \"protocol_update\", kind: \"message\", oneof: \"payload\", T: () => ProtocolUpdate },\n            { no: 2, name: \"election_difficulty_update\", kind: \"message\", oneof: \"payload\", T: () => ElectionDifficulty },\n            { no: 3, name: \"euro_per_energy_update\", kind: \"message\", oneof: \"payload\", T: () => ExchangeRate },\n            { no: 4, name: \"micro_ccd_per_euro_update\", kind: \"message\", oneof: \"payload\", T: () => ExchangeRate },\n            { no: 5, name: \"foundation_account_update\", kind: \"message\", oneof: \"payload\", T: () => AccountAddress },\n            { no: 6, name: \"mint_distribution_update\", kind: \"message\", oneof: \"payload\", T: () => MintDistributionCpv0 },\n            { no: 7, name: \"transaction_fee_distribution_update\", kind: \"message\", oneof: \"payload\", T: () => TransactionFeeDistribution },\n            { no: 8, name: \"gas_rewards_update\", kind: \"message\", oneof: \"payload\", T: () => GasRewards },\n            { no: 9, name: \"baker_stake_threshold_update\", kind: \"message\", oneof: \"payload\", T: () => BakerStakeThreshold },\n            { no: 10, name: \"root_update\", kind: \"message\", oneof: \"payload\", T: () => RootUpdate },\n            { no: 11, name: \"level_1_update\", kind: \"message\", oneof: \"payload\", T: () => Level1Update },\n            { no: 12, name: \"add_anonymity_revoker_update\", kind: \"message\", oneof: \"payload\", T: () => ArInfo },\n            { no: 13, name: \"add_identity_provider_update\", kind: \"message\", oneof: \"payload\", T: () => IpInfo },\n            { no: 14, name: \"cooldown_parameters_cpv_1_update\", kind: \"message\", oneof: \"payload\", T: () => CooldownParametersCpv1 },\n            { no: 15, name: \"pool_parameters_cpv_1_update\", kind: \"message\", oneof: \"payload\", T: () => PoolParametersCpv1 },\n            { no: 16, name: \"time_parameters_cpv_1_update\", kind: \"message\", oneof: \"payload\", T: () => TimeParametersCpv1 },\n            { no: 17, name: \"mint_distribution_cpv_1_update\", kind: \"message\", oneof: \"payload\", T: () => MintDistributionCpv1 },\n            { no: 18, name: \"gas_rewards_cpv_2_update\", kind: \"message\", oneof: \"payload\", T: () => GasRewardsCpv2 },\n            { no: 19, name: \"timeout_parameters_update\", kind: \"message\", oneof: \"payload\", T: () => TimeoutParameters },\n            { no: 20, name: \"min_block_time_update\", kind: \"message\", oneof: \"payload\", T: () => Duration },\n            { no: 21, name: \"block_energy_limit_update\", kind: \"message\", oneof: \"payload\", T: () => Energy },\n            { no: 22, name: \"finalization_committee_parameters_update\", kind: \"message\", oneof: \"payload\", T: () => FinalizationCommitteeParameters },\n            { no: 23, name: \"validator_score_parameters_update\", kind: \"message\", oneof: \"payload\", T: () => ValidatorScoreParameters },\n            { no: 24, name: \"create_plt_update\", kind: \"message\", oneof: \"payload\", T: () => CreatePLT }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.UpdatePayload\n */\nexport const UpdatePayload = new UpdatePayload$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionDetails$Type extends MessageType<AccountTransactionDetails> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionDetails\", [\n            { no: 1, name: \"cost\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"sender\", kind: \"message\", T: () => AccountAddress },\n            { no: 3, name: \"effects\", kind: \"message\", T: () => AccountTransactionEffects }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionDetails\n */\nexport const AccountTransactionDetails = new AccountTransactionDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountCreationDetails$Type extends MessageType<AccountCreationDetails> {\n    constructor() {\n        super(\"concordium.v2.AccountCreationDetails\", [\n            { no: 1, name: \"credential_type\", kind: \"enum\", T: () => [\"concordium.v2.CredentialType\", CredentialType, \"CREDENTIAL_TYPE_\"] },\n            { no: 2, name: \"address\", kind: \"message\", T: () => AccountAddress },\n            { no: 3, name: \"reg_id\", kind: \"message\", T: () => CredentialRegistrationId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountCreationDetails\n */\nexport const AccountCreationDetails = new AccountCreationDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionTime$Type extends MessageType<TransactionTime> {\n    constructor() {\n        super(\"concordium.v2.TransactionTime\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TransactionTime\n */\nexport const TransactionTime = new TransactionTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateDetails$Type extends MessageType<UpdateDetails> {\n    constructor() {\n        super(\"concordium.v2.UpdateDetails\", [\n            { no: 1, name: \"effective_time\", kind: \"message\", T: () => TransactionTime },\n            { no: 2, name: \"payload\", kind: \"message\", T: () => UpdatePayload }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.UpdateDetails\n */\nexport const UpdateDetails = new UpdateDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockItemSummary$Type extends MessageType<BlockItemSummary> {\n    constructor() {\n        super(\"concordium.v2.BlockItemSummary\", [\n            { no: 1, name: \"index\", kind: \"message\", T: () => BlockItemSummary_TransactionIndex },\n            { no: 2, name: \"energy_cost\", kind: \"message\", T: () => Energy },\n            { no: 3, name: \"hash\", kind: \"message\", T: () => TransactionHash },\n            { no: 4, name: \"account_transaction\", kind: \"message\", oneof: \"details\", T: () => AccountTransactionDetails },\n            { no: 5, name: \"account_creation\", kind: \"message\", oneof: \"details\", T: () => AccountCreationDetails },\n            { no: 6, name: \"update\", kind: \"message\", oneof: \"details\", T: () => UpdateDetails },\n            { no: 7, name: \"token_creation\", kind: \"message\", oneof: \"details\", T: () => TokenCreationDetails }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockItemSummary\n */\nexport const BlockItemSummary = new BlockItemSummary$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockItemSummary_TransactionIndex$Type extends MessageType<BlockItemSummary_TransactionIndex> {\n    constructor() {\n        super(\"concordium.v2.BlockItemSummary.TransactionIndex\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockItemSummary.TransactionIndex\n */\nexport const BlockItemSummary_TransactionIndex = new BlockItemSummary_TransactionIndex$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GenesisIndex$Type extends MessageType<GenesisIndex> {\n    constructor() {\n        super(\"concordium.v2.GenesisIndex\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.GenesisIndex\n */\nexport const GenesisIndex = new GenesisIndex$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConsensusInfo$Type extends MessageType<ConsensusInfo> {\n    constructor() {\n        super(\"concordium.v2.ConsensusInfo\", [\n            { no: 1, name: \"best_block\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"genesis_block\", kind: \"message\", T: () => BlockHash },\n            { no: 3, name: \"genesis_time\", kind: \"message\", T: () => Timestamp },\n            { no: 4, name: \"slot_duration\", kind: \"message\", T: () => Duration },\n            { no: 5, name: \"epoch_duration\", kind: \"message\", T: () => Duration },\n            { no: 6, name: \"last_finalized_block\", kind: \"message\", T: () => BlockHash },\n            { no: 7, name: \"best_block_height\", kind: \"message\", T: () => AbsoluteBlockHeight },\n            { no: 8, name: \"last_finalized_block_height\", kind: \"message\", T: () => AbsoluteBlockHeight },\n            { no: 9, name: \"blocks_received_count\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 10, name: \"block_last_received_time\", kind: \"message\", T: () => Timestamp },\n            { no: 11, name: \"block_receive_latency_ema\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"block_receive_latency_emsd\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"block_receive_period_ema\", kind: \"scalar\", opt: true, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"block_receive_period_emsd\", kind: \"scalar\", opt: true, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"blocks_verified_count\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 16, name: \"block_last_arrived_time\", kind: \"message\", T: () => Timestamp },\n            { no: 17, name: \"block_arrive_latency_ema\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 18, name: \"block_arrive_latency_emsd\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 19, name: \"block_arrive_period_ema\", kind: \"scalar\", opt: true, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 20, name: \"block_arrive_period_emsd\", kind: \"scalar\", opt: true, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 21, name: \"transactions_per_block_ema\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 22, name: \"transactions_per_block_emsd\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 23, name: \"finalization_count\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 24, name: \"last_finalized_time\", kind: \"message\", T: () => Timestamp },\n            { no: 25, name: \"finalization_period_ema\", kind: \"scalar\", opt: true, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 26, name: \"finalization_period_emsd\", kind: \"scalar\", opt: true, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 27, name: \"protocol_version\", kind: \"enum\", T: () => [\"concordium.v2.ProtocolVersion\", ProtocolVersion] },\n            { no: 28, name: \"genesis_index\", kind: \"message\", T: () => GenesisIndex },\n            { no: 29, name: \"current_era_genesis_block\", kind: \"message\", T: () => BlockHash },\n            { no: 30, name: \"current_era_genesis_time\", kind: \"message\", T: () => Timestamp },\n            { no: 31, name: \"current_timeout_duration\", kind: \"message\", T: () => Duration },\n            { no: 32, name: \"current_round\", kind: \"message\", T: () => Round },\n            { no: 33, name: \"current_epoch\", kind: \"message\", T: () => Epoch },\n            { no: 34, name: \"trigger_block_time\", kind: \"message\", T: () => Timestamp }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ConsensusInfo\n */\nexport const ConsensusInfo = new ConsensusInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArrivedBlockInfo$Type extends MessageType<ArrivedBlockInfo> {\n    constructor() {\n        super(\"concordium.v2.ArrivedBlockInfo\", [\n            { no: 1, name: \"hash\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"height\", kind: \"message\", T: () => AbsoluteBlockHeight }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ArrivedBlockInfo\n */\nexport const ArrivedBlockInfo = new ArrivedBlockInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CryptographicParameters$Type extends MessageType<CryptographicParameters> {\n    constructor() {\n        super(\"concordium.v2.CryptographicParameters\", [\n            { no: 1, name: \"genesis_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"bulletproof_generators\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"on_chain_commitment_key\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CryptographicParameters\n */\nexport const CryptographicParameters = new CryptographicParameters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockInfo$Type extends MessageType<BlockInfo> {\n    constructor() {\n        super(\"concordium.v2.BlockInfo\", [\n            { no: 1, name: \"hash\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"height\", kind: \"message\", T: () => AbsoluteBlockHeight },\n            { no: 3, name: \"parent_block\", kind: \"message\", T: () => BlockHash },\n            { no: 4, name: \"last_finalized_block\", kind: \"message\", T: () => BlockHash },\n            { no: 5, name: \"genesis_index\", kind: \"message\", T: () => GenesisIndex },\n            { no: 6, name: \"era_block_height\", kind: \"message\", T: () => BlockHeight },\n            { no: 7, name: \"receive_time\", kind: \"message\", T: () => Timestamp },\n            { no: 8, name: \"arrive_time\", kind: \"message\", T: () => Timestamp },\n            { no: 9, name: \"slot_number\", kind: \"message\", T: () => Slot },\n            { no: 10, name: \"slot_time\", kind: \"message\", T: () => Timestamp },\n            { no: 11, name: \"baker\", kind: \"message\", T: () => BakerId },\n            { no: 12, name: \"finalized\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"transaction_count\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 14, name: \"transactions_energy_cost\", kind: \"message\", T: () => Energy },\n            { no: 15, name: \"transactions_size\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 16, name: \"state_hash\", kind: \"message\", T: () => StateHash },\n            { no: 17, name: \"protocol_version\", kind: \"enum\", T: () => [\"concordium.v2.ProtocolVersion\", ProtocolVersion] },\n            { no: 18, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 19, name: \"epoch\", kind: \"message\", T: () => Epoch }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockInfo\n */\nexport const BlockInfo = new BlockInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PoolInfoRequest$Type extends MessageType<PoolInfoRequest> {\n    constructor() {\n        super(\"concordium.v2.PoolInfoRequest\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHashInput },\n            { no: 2, name: \"baker\", kind: \"message\", T: () => BakerId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PoolInfoRequest\n */\nexport const PoolInfoRequest = new PoolInfoRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PoolPendingChange$Type extends MessageType<PoolPendingChange> {\n    constructor() {\n        super(\"concordium.v2.PoolPendingChange\", [\n            { no: 1, name: \"reduce\", kind: \"message\", oneof: \"change\", T: () => PoolPendingChange_Reduce },\n            { no: 2, name: \"remove\", kind: \"message\", oneof: \"change\", T: () => PoolPendingChange_Remove }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PoolPendingChange\n */\nexport const PoolPendingChange = new PoolPendingChange$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PoolPendingChange_Reduce$Type extends MessageType<PoolPendingChange_Reduce> {\n    constructor() {\n        super(\"concordium.v2.PoolPendingChange.Reduce\", [\n            { no: 1, name: \"reduced_equity_capital\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"effective_time\", kind: \"message\", T: () => Timestamp }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PoolPendingChange.Reduce\n */\nexport const PoolPendingChange_Reduce = new PoolPendingChange_Reduce$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PoolPendingChange_Remove$Type extends MessageType<PoolPendingChange_Remove> {\n    constructor() {\n        super(\"concordium.v2.PoolPendingChange.Remove\", [\n            { no: 1, name: \"effective_time\", kind: \"message\", T: () => Timestamp }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PoolPendingChange.Remove\n */\nexport const PoolPendingChange_Remove = new PoolPendingChange_Remove$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PoolCurrentPaydayInfo$Type extends MessageType<PoolCurrentPaydayInfo> {\n    constructor() {\n        super(\"concordium.v2.PoolCurrentPaydayInfo\", [\n            { no: 1, name: \"blocks_baked\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"finalization_live\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"transaction_fees_earned\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"effective_stake\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"lottery_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"baker_equity_capital\", kind: \"message\", T: () => Amount },\n            { no: 7, name: \"delegated_capital\", kind: \"message\", T: () => Amount },\n            { no: 8, name: \"commission_rates\", kind: \"message\", T: () => CommissionRates },\n            { no: 9, name: \"is_primed_for_suspension\", kind: \"scalar\", opt: true, T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"missed_rounds\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PoolCurrentPaydayInfo\n */\nexport const PoolCurrentPaydayInfo = new PoolCurrentPaydayInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PoolInfoResponse$Type extends MessageType<PoolInfoResponse> {\n    constructor() {\n        super(\"concordium.v2.PoolInfoResponse\", [\n            { no: 1, name: \"baker\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"address\", kind: \"message\", T: () => AccountAddress },\n            { no: 3, name: \"equity_capital\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"delegated_capital\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"delegated_capital_cap\", kind: \"message\", T: () => Amount },\n            { no: 6, name: \"pool_info\", kind: \"message\", T: () => BakerPoolInfo },\n            { no: 7, name: \"equity_pending_change\", kind: \"message\", T: () => PoolPendingChange },\n            { no: 8, name: \"current_payday_info\", kind: \"message\", T: () => PoolCurrentPaydayInfo },\n            { no: 9, name: \"all_pool_total_capital\", kind: \"message\", T: () => Amount },\n            { no: 10, name: \"is_suspended\", kind: \"scalar\", opt: true, T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PoolInfoResponse\n */\nexport const PoolInfoResponse = new PoolInfoResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PassiveDelegationInfo$Type extends MessageType<PassiveDelegationInfo> {\n    constructor() {\n        super(\"concordium.v2.PassiveDelegationInfo\", [\n            { no: 1, name: \"delegated_capital\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"commission_rates\", kind: \"message\", T: () => CommissionRates },\n            { no: 3, name: \"current_payday_transaction_fees_earned\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"current_payday_delegated_capital\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"all_pool_total_capital\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PassiveDelegationInfo\n */\nexport const PassiveDelegationInfo = new PassiveDelegationInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlocksAtHeightRequest$Type extends MessageType<BlocksAtHeightRequest> {\n    constructor() {\n        super(\"concordium.v2.BlocksAtHeightRequest\", [\n            { no: 1, name: \"absolute\", kind: \"message\", oneof: \"blocksAtHeight\", T: () => BlocksAtHeightRequest_Absolute },\n            { no: 2, name: \"relative\", kind: \"message\", oneof: \"blocksAtHeight\", T: () => BlocksAtHeightRequest_Relative }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlocksAtHeightRequest\n */\nexport const BlocksAtHeightRequest = new BlocksAtHeightRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlocksAtHeightRequest_Absolute$Type extends MessageType<BlocksAtHeightRequest_Absolute> {\n    constructor() {\n        super(\"concordium.v2.BlocksAtHeightRequest.Absolute\", [\n            { no: 1, name: \"height\", kind: \"message\", T: () => AbsoluteBlockHeight }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlocksAtHeightRequest.Absolute\n */\nexport const BlocksAtHeightRequest_Absolute = new BlocksAtHeightRequest_Absolute$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlocksAtHeightRequest_Relative$Type extends MessageType<BlocksAtHeightRequest_Relative> {\n    constructor() {\n        super(\"concordium.v2.BlocksAtHeightRequest.Relative\", [\n            { no: 1, name: \"genesis_index\", kind: \"message\", T: () => GenesisIndex },\n            { no: 2, name: \"height\", kind: \"message\", T: () => BlockHeight },\n            { no: 3, name: \"restrict\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlocksAtHeightRequest.Relative\n */\nexport const BlocksAtHeightRequest_Relative = new BlocksAtHeightRequest_Relative$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlocksAtHeightResponse$Type extends MessageType<BlocksAtHeightResponse> {\n    constructor() {\n        super(\"concordium.v2.BlocksAtHeightResponse\", [\n            { no: 1, name: \"blocks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlockHash }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlocksAtHeightResponse\n */\nexport const BlocksAtHeightResponse = new BlocksAtHeightResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenomicsInfo$Type extends MessageType<TokenomicsInfo> {\n    constructor() {\n        super(\"concordium.v2.TokenomicsInfo\", [\n            { no: 1, name: \"v0\", kind: \"message\", oneof: \"tokenomics\", T: () => TokenomicsInfo_V0 },\n            { no: 2, name: \"v1\", kind: \"message\", oneof: \"tokenomics\", T: () => TokenomicsInfo_V1 }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TokenomicsInfo\n */\nexport const TokenomicsInfo = new TokenomicsInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenomicsInfo_V0$Type extends MessageType<TokenomicsInfo_V0> {\n    constructor() {\n        super(\"concordium.v2.TokenomicsInfo.V0\", [\n            { no: 1, name: \"total_amount\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"total_encrypted_amount\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"baking_reward_account\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"finalization_reward_account\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"gas_account\", kind: \"message\", T: () => Amount },\n            { no: 6, name: \"protocol_version\", kind: \"enum\", T: () => [\"concordium.v2.ProtocolVersion\", ProtocolVersion] }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TokenomicsInfo.V0\n */\nexport const TokenomicsInfo_V0 = new TokenomicsInfo_V0$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenomicsInfo_V1$Type extends MessageType<TokenomicsInfo_V1> {\n    constructor() {\n        super(\"concordium.v2.TokenomicsInfo.V1\", [\n            { no: 1, name: \"total_amount\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"total_encrypted_amount\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"baking_reward_account\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"finalization_reward_account\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"gas_account\", kind: \"message\", T: () => Amount },\n            { no: 6, name: \"foundation_transaction_rewards\", kind: \"message\", T: () => Amount },\n            { no: 7, name: \"next_payday_time\", kind: \"message\", T: () => Timestamp },\n            { no: 8, name: \"next_payday_mint_rate\", kind: \"message\", T: () => MintRate },\n            { no: 9, name: \"total_staked_capital\", kind: \"message\", T: () => Amount },\n            { no: 10, name: \"protocol_version\", kind: \"enum\", T: () => [\"concordium.v2.ProtocolVersion\", ProtocolVersion] }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TokenomicsInfo.V1\n */\nexport const TokenomicsInfo_V1 = new TokenomicsInfo_V1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InvokeInstanceRequest$Type extends MessageType<InvokeInstanceRequest> {\n    constructor() {\n        super(\"concordium.v2.InvokeInstanceRequest\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHashInput },\n            { no: 2, name: \"invoker\", kind: \"message\", T: () => Address },\n            { no: 3, name: \"instance\", kind: \"message\", T: () => ContractAddress },\n            { no: 4, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"entrypoint\", kind: \"message\", T: () => ReceiveName },\n            { no: 6, name: \"parameter\", kind: \"message\", T: () => Parameter },\n            { no: 7, name: \"energy\", kind: \"message\", T: () => Energy }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InvokeInstanceRequest\n */\nexport const InvokeInstanceRequest = new InvokeInstanceRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InvokeInstanceResponse$Type extends MessageType<InvokeInstanceResponse> {\n    constructor() {\n        super(\"concordium.v2.InvokeInstanceResponse\", [\n            { no: 1, name: \"success\", kind: \"message\", oneof: \"result\", T: () => InvokeInstanceResponse_Success },\n            { no: 2, name: \"failure\", kind: \"message\", oneof: \"result\", T: () => InvokeInstanceResponse_Failure }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InvokeInstanceResponse\n */\nexport const InvokeInstanceResponse = new InvokeInstanceResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InvokeInstanceResponse_Failure$Type extends MessageType<InvokeInstanceResponse_Failure> {\n    constructor() {\n        super(\"concordium.v2.InvokeInstanceResponse.Failure\", [\n            { no: 1, name: \"return_value\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"used_energy\", kind: \"message\", T: () => Energy },\n            { no: 3, name: \"reason\", kind: \"message\", T: () => RejectReason }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InvokeInstanceResponse.Failure\n */\nexport const InvokeInstanceResponse_Failure = new InvokeInstanceResponse_Failure$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InvokeInstanceResponse_Success$Type extends MessageType<InvokeInstanceResponse_Success> {\n    constructor() {\n        super(\"concordium.v2.InvokeInstanceResponse.Success\", [\n            { no: 1, name: \"return_value\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"used_energy\", kind: \"message\", T: () => Energy },\n            { no: 3, name: \"effects\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractTraceElement }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InvokeInstanceResponse.Success\n */\nexport const InvokeInstanceResponse_Success = new InvokeInstanceResponse_Success$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GetPoolDelegatorsRequest$Type extends MessageType<GetPoolDelegatorsRequest> {\n    constructor() {\n        super(\"concordium.v2.GetPoolDelegatorsRequest\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHashInput },\n            { no: 2, name: \"baker\", kind: \"message\", T: () => BakerId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.GetPoolDelegatorsRequest\n */\nexport const GetPoolDelegatorsRequest = new GetPoolDelegatorsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DelegatorInfo$Type extends MessageType<DelegatorInfo> {\n    constructor() {\n        super(\"concordium.v2.DelegatorInfo\", [\n            { no: 1, name: \"account\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"stake\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"pending_change\", kind: \"message\", T: () => StakePendingChange }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DelegatorInfo\n */\nexport const DelegatorInfo = new DelegatorInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DelegatorRewardPeriodInfo$Type extends MessageType<DelegatorRewardPeriodInfo> {\n    constructor() {\n        super(\"concordium.v2.DelegatorRewardPeriodInfo\", [\n            { no: 1, name: \"account\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"stake\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DelegatorRewardPeriodInfo\n */\nexport const DelegatorRewardPeriodInfo = new DelegatorRewardPeriodInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Branch$Type extends MessageType<Branch> {\n    constructor() {\n        super(\"concordium.v2.Branch\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"children\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Branch }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Branch\n */\nexport const Branch = new Branch$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass LeadershipElectionNonce$Type extends MessageType<LeadershipElectionNonce> {\n    constructor() {\n        super(\"concordium.v2.LeadershipElectionNonce\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.LeadershipElectionNonce\n */\nexport const LeadershipElectionNonce = new LeadershipElectionNonce$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElectionInfo$Type extends MessageType<ElectionInfo> {\n    constructor() {\n        super(\"concordium.v2.ElectionInfo\", [\n            { no: 1, name: \"election_difficulty\", kind: \"message\", T: () => ElectionDifficulty },\n            { no: 2, name: \"election_nonce\", kind: \"message\", T: () => LeadershipElectionNonce },\n            { no: 3, name: \"baker_election_info\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ElectionInfo_Baker }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ElectionInfo\n */\nexport const ElectionInfo = new ElectionInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElectionInfo_Baker$Type extends MessageType<ElectionInfo_Baker> {\n    constructor() {\n        super(\"concordium.v2.ElectionInfo.Baker\", [\n            { no: 1, name: \"baker\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"account\", kind: \"message\", T: () => AccountAddress },\n            { no: 3, name: \"lottery_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ElectionInfo.Baker\n */\nexport const ElectionInfo_Baker = new ElectionInfo_Baker$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent$Type extends MessageType<BlockSpecialEvent> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent\", [\n            { no: 1, name: \"baking_rewards\", kind: \"message\", oneof: \"event\", T: () => BlockSpecialEvent_BakingRewards },\n            { no: 2, name: \"mint\", kind: \"message\", oneof: \"event\", T: () => BlockSpecialEvent_Mint },\n            { no: 3, name: \"finalization_rewards\", kind: \"message\", oneof: \"event\", T: () => BlockSpecialEvent_FinalizationRewards },\n            { no: 4, name: \"block_reward\", kind: \"message\", oneof: \"event\", T: () => BlockSpecialEvent_BlockReward },\n            { no: 5, name: \"payday_foundation_reward\", kind: \"message\", oneof: \"event\", T: () => BlockSpecialEvent_PaydayFoundationReward },\n            { no: 6, name: \"payday_account_reward\", kind: \"message\", oneof: \"event\", T: () => BlockSpecialEvent_PaydayAccountReward },\n            { no: 7, name: \"block_accrue_reward\", kind: \"message\", oneof: \"event\", T: () => BlockSpecialEvent_BlockAccrueReward },\n            { no: 8, name: \"payday_pool_reward\", kind: \"message\", oneof: \"event\", T: () => BlockSpecialEvent_PaydayPoolReward },\n            { no: 9, name: \"validator_suspended\", kind: \"message\", oneof: \"event\", T: () => BlockSpecialEvent_ValidatorSuspended },\n            { no: 10, name: \"validator_primed_for_suspension\", kind: \"message\", oneof: \"event\", T: () => BlockSpecialEvent_ValidatorPrimedForSuspension }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent\n */\nexport const BlockSpecialEvent = new BlockSpecialEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_AccountAmounts$Type extends MessageType<BlockSpecialEvent_AccountAmounts> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.AccountAmounts\", [\n            { no: 1, name: \"entries\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlockSpecialEvent_AccountAmounts_Entry }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.AccountAmounts\n */\nexport const BlockSpecialEvent_AccountAmounts = new BlockSpecialEvent_AccountAmounts$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_AccountAmounts_Entry$Type extends MessageType<BlockSpecialEvent_AccountAmounts_Entry> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.AccountAmounts.Entry\", [\n            { no: 1, name: \"account\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"amount\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.AccountAmounts.Entry\n */\nexport const BlockSpecialEvent_AccountAmounts_Entry = new BlockSpecialEvent_AccountAmounts_Entry$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_BakingRewards$Type extends MessageType<BlockSpecialEvent_BakingRewards> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.BakingRewards\", [\n            { no: 1, name: \"baker_rewards\", kind: \"message\", T: () => BlockSpecialEvent_AccountAmounts },\n            { no: 2, name: \"remainder\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.BakingRewards\n */\nexport const BlockSpecialEvent_BakingRewards = new BlockSpecialEvent_BakingRewards$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_Mint$Type extends MessageType<BlockSpecialEvent_Mint> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.Mint\", [\n            { no: 1, name: \"mint_baking_reward\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"mint_finalization_reward\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"mint_platform_development_charge\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"foundation_account\", kind: \"message\", T: () => AccountAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.Mint\n */\nexport const BlockSpecialEvent_Mint = new BlockSpecialEvent_Mint$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_FinalizationRewards$Type extends MessageType<BlockSpecialEvent_FinalizationRewards> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.FinalizationRewards\", [\n            { no: 1, name: \"finalization_rewards\", kind: \"message\", T: () => BlockSpecialEvent_AccountAmounts },\n            { no: 2, name: \"remainder\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.FinalizationRewards\n */\nexport const BlockSpecialEvent_FinalizationRewards = new BlockSpecialEvent_FinalizationRewards$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_BlockReward$Type extends MessageType<BlockSpecialEvent_BlockReward> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.BlockReward\", [\n            { no: 1, name: \"transaction_fees\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"old_gas_account\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"new_gas_account\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"baker_reward\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"foundation_charge\", kind: \"message\", T: () => Amount },\n            { no: 6, name: \"baker\", kind: \"message\", T: () => AccountAddress },\n            { no: 7, name: \"foundation_account\", kind: \"message\", T: () => AccountAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.BlockReward\n */\nexport const BlockSpecialEvent_BlockReward = new BlockSpecialEvent_BlockReward$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_PaydayFoundationReward$Type extends MessageType<BlockSpecialEvent_PaydayFoundationReward> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.PaydayFoundationReward\", [\n            { no: 1, name: \"foundation_account\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"development_charge\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.PaydayFoundationReward\n */\nexport const BlockSpecialEvent_PaydayFoundationReward = new BlockSpecialEvent_PaydayFoundationReward$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_PaydayAccountReward$Type extends MessageType<BlockSpecialEvent_PaydayAccountReward> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.PaydayAccountReward\", [\n            { no: 1, name: \"account\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"transaction_fees\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"baker_reward\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"finalization_reward\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.PaydayAccountReward\n */\nexport const BlockSpecialEvent_PaydayAccountReward = new BlockSpecialEvent_PaydayAccountReward$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_BlockAccrueReward$Type extends MessageType<BlockSpecialEvent_BlockAccrueReward> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.BlockAccrueReward\", [\n            { no: 1, name: \"transaction_fees\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"old_gas_account\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"new_gas_account\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"baker_reward\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"passive_reward\", kind: \"message\", T: () => Amount },\n            { no: 6, name: \"foundation_charge\", kind: \"message\", T: () => Amount },\n            { no: 7, name: \"baker\", kind: \"message\", T: () => BakerId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.BlockAccrueReward\n */\nexport const BlockSpecialEvent_BlockAccrueReward = new BlockSpecialEvent_BlockAccrueReward$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_PaydayPoolReward$Type extends MessageType<BlockSpecialEvent_PaydayPoolReward> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.PaydayPoolReward\", [\n            { no: 1, name: \"pool_owner\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"transaction_fees\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"baker_reward\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"finalization_reward\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.PaydayPoolReward\n */\nexport const BlockSpecialEvent_PaydayPoolReward = new BlockSpecialEvent_PaydayPoolReward$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_ValidatorSuspended$Type extends MessageType<BlockSpecialEvent_ValidatorSuspended> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.ValidatorSuspended\", [\n            { no: 1, name: \"bakerId\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"account\", kind: \"message\", T: () => AccountAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.ValidatorSuspended\n */\nexport const BlockSpecialEvent_ValidatorSuspended = new BlockSpecialEvent_ValidatorSuspended$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSpecialEvent_ValidatorPrimedForSuspension$Type extends MessageType<BlockSpecialEvent_ValidatorPrimedForSuspension> {\n    constructor() {\n        super(\"concordium.v2.BlockSpecialEvent.ValidatorPrimedForSuspension\", [\n            { no: 1, name: \"bakerId\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"account\", kind: \"message\", T: () => AccountAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSpecialEvent.ValidatorPrimedForSuspension\n */\nexport const BlockSpecialEvent_ValidatorPrimedForSuspension = new BlockSpecialEvent_ValidatorPrimedForSuspension$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PendingUpdate$Type extends MessageType<PendingUpdate> {\n    constructor() {\n        super(\"concordium.v2.PendingUpdate\", [\n            { no: 1, name: \"effective_time\", kind: \"message\", T: () => TransactionTime },\n            { no: 2, name: \"root_keys\", kind: \"message\", oneof: \"effect\", T: () => HigherLevelKeys },\n            { no: 3, name: \"level1_keys\", kind: \"message\", oneof: \"effect\", T: () => HigherLevelKeys },\n            { no: 4, name: \"level2_keys_cpv_0\", kind: \"message\", oneof: \"effect\", T: () => AuthorizationsV0 },\n            { no: 5, name: \"level2_keys_cpv_1\", kind: \"message\", oneof: \"effect\", T: () => AuthorizationsV1 },\n            { no: 6, name: \"protocol\", kind: \"message\", oneof: \"effect\", T: () => ProtocolUpdate },\n            { no: 7, name: \"election_difficulty\", kind: \"message\", oneof: \"effect\", T: () => ElectionDifficulty },\n            { no: 8, name: \"euro_per_energy\", kind: \"message\", oneof: \"effect\", T: () => ExchangeRate },\n            { no: 9, name: \"micro_ccd_per_euro\", kind: \"message\", oneof: \"effect\", T: () => ExchangeRate },\n            { no: 10, name: \"foundation_account\", kind: \"message\", oneof: \"effect\", T: () => AccountAddress },\n            { no: 11, name: \"mint_distribution_cpv_0\", kind: \"message\", oneof: \"effect\", T: () => MintDistributionCpv0 },\n            { no: 12, name: \"mint_distribution_cpv_1\", kind: \"message\", oneof: \"effect\", T: () => MintDistributionCpv1 },\n            { no: 13, name: \"transaction_fee_distribution\", kind: \"message\", oneof: \"effect\", T: () => TransactionFeeDistribution },\n            { no: 14, name: \"gas_rewards\", kind: \"message\", oneof: \"effect\", T: () => GasRewards },\n            { no: 15, name: \"pool_parameters_cpv_0\", kind: \"message\", oneof: \"effect\", T: () => BakerStakeThreshold },\n            { no: 16, name: \"pool_parameters_cpv_1\", kind: \"message\", oneof: \"effect\", T: () => PoolParametersCpv1 },\n            { no: 17, name: \"add_anonymity_revoker\", kind: \"message\", oneof: \"effect\", T: () => ArInfo },\n            { no: 18, name: \"add_identity_provider\", kind: \"message\", oneof: \"effect\", T: () => IpInfo },\n            { no: 19, name: \"cooldown_parameters\", kind: \"message\", oneof: \"effect\", T: () => CooldownParametersCpv1 },\n            { no: 20, name: \"time_parameters\", kind: \"message\", oneof: \"effect\", T: () => TimeParametersCpv1 },\n            { no: 21, name: \"gas_rewards_cpv_2\", kind: \"message\", oneof: \"effect\", T: () => GasRewardsCpv2 },\n            { no: 22, name: \"timeout_parameters\", kind: \"message\", oneof: \"effect\", T: () => TimeoutParameters },\n            { no: 23, name: \"min_block_time\", kind: \"message\", oneof: \"effect\", T: () => Duration },\n            { no: 24, name: \"block_energy_limit\", kind: \"message\", oneof: \"effect\", T: () => Energy },\n            { no: 25, name: \"finalization_committee_parameters\", kind: \"message\", oneof: \"effect\", T: () => FinalizationCommitteeParameters },\n            { no: 26, name: \"validator_score_parameters\", kind: \"message\", oneof: \"effect\", T: () => ValidatorScoreParameters }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PendingUpdate\n */\nexport const PendingUpdate = new PendingUpdate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NextUpdateSequenceNumbers$Type extends MessageType<NextUpdateSequenceNumbers> {\n    constructor() {\n        super(\"concordium.v2.NextUpdateSequenceNumbers\", [\n            { no: 1, name: \"root_keys\", kind: \"message\", T: () => SequenceNumber },\n            { no: 2, name: \"level1_keys\", kind: \"message\", T: () => SequenceNumber },\n            { no: 3, name: \"level2_keys\", kind: \"message\", T: () => SequenceNumber },\n            { no: 4, name: \"protocol\", kind: \"message\", T: () => SequenceNumber },\n            { no: 5, name: \"election_difficulty\", kind: \"message\", T: () => SequenceNumber },\n            { no: 6, name: \"euro_per_energy\", kind: \"message\", T: () => SequenceNumber },\n            { no: 7, name: \"micro_ccd_per_euro\", kind: \"message\", T: () => SequenceNumber },\n            { no: 8, name: \"foundation_account\", kind: \"message\", T: () => SequenceNumber },\n            { no: 9, name: \"mint_distribution\", kind: \"message\", T: () => SequenceNumber },\n            { no: 10, name: \"transaction_fee_distribution\", kind: \"message\", T: () => SequenceNumber },\n            { no: 11, name: \"gas_rewards\", kind: \"message\", T: () => SequenceNumber },\n            { no: 12, name: \"pool_parameters\", kind: \"message\", T: () => SequenceNumber },\n            { no: 13, name: \"add_anonymity_revoker\", kind: \"message\", T: () => SequenceNumber },\n            { no: 14, name: \"add_identity_provider\", kind: \"message\", T: () => SequenceNumber },\n            { no: 15, name: \"cooldown_parameters\", kind: \"message\", T: () => SequenceNumber },\n            { no: 16, name: \"time_parameters\", kind: \"message\", T: () => SequenceNumber },\n            { no: 17, name: \"timeout_parameters\", kind: \"message\", T: () => SequenceNumber },\n            { no: 18, name: \"min_block_time\", kind: \"message\", T: () => SequenceNumber },\n            { no: 19, name: \"block_energy_limit\", kind: \"message\", T: () => SequenceNumber },\n            { no: 20, name: \"finalization_committee_parameters\", kind: \"message\", T: () => SequenceNumber },\n            { no: 21, name: \"validator_score_parameters\", kind: \"message\", T: () => SequenceNumber },\n            { no: 22, name: \"protocol_level_tokens\", kind: \"message\", T: () => SequenceNumber }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NextUpdateSequenceNumbers\n */\nexport const NextUpdateSequenceNumbers = new NextUpdateSequenceNumbers$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IpAddress$Type extends MessageType<IpAddress> {\n    constructor() {\n        super(\"concordium.v2.IpAddress\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.IpAddress\n */\nexport const IpAddress = new IpAddress$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Port$Type extends MessageType<Port> {\n    constructor() {\n        super(\"concordium.v2.Port\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Port\n */\nexport const Port = new Port$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IpSocketAddress$Type extends MessageType<IpSocketAddress> {\n    constructor() {\n        super(\"concordium.v2.IpSocketAddress\", [\n            { no: 1, name: \"ip\", kind: \"message\", T: () => IpAddress },\n            { no: 2, name: \"port\", kind: \"message\", T: () => Port }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.IpSocketAddress\n */\nexport const IpSocketAddress = new IpSocketAddress$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PeerId$Type extends MessageType<PeerId> {\n    constructor() {\n        super(\"concordium.v2.PeerId\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PeerId\n */\nexport const PeerId = new PeerId$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BannedPeer$Type extends MessageType<BannedPeer> {\n    constructor() {\n        super(\"concordium.v2.BannedPeer\", [\n            { no: 1, name: \"ip_address\", kind: \"message\", T: () => IpAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BannedPeer\n */\nexport const BannedPeer = new BannedPeer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BannedPeers$Type extends MessageType<BannedPeers> {\n    constructor() {\n        super(\"concordium.v2.BannedPeers\", [\n            { no: 1, name: \"peers\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BannedPeer }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BannedPeers\n */\nexport const BannedPeers = new BannedPeers$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PeerToBan$Type extends MessageType<PeerToBan> {\n    constructor() {\n        super(\"concordium.v2.PeerToBan\", [\n            { no: 1, name: \"ip_address\", kind: \"message\", T: () => IpAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PeerToBan\n */\nexport const PeerToBan = new PeerToBan$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DumpRequest$Type extends MessageType<DumpRequest> {\n    constructor() {\n        super(\"concordium.v2.DumpRequest\", [\n            { no: 1, name: \"file\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"raw\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DumpRequest\n */\nexport const DumpRequest = new DumpRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PeersInfo$Type extends MessageType<PeersInfo> {\n    constructor() {\n        super(\"concordium.v2.PeersInfo\", [\n            { no: 1, name: \"peers\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PeersInfo_Peer }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PeersInfo\n */\nexport const PeersInfo = new PeersInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PeersInfo_Peer$Type extends MessageType<PeersInfo_Peer> {\n    constructor() {\n        super(\"concordium.v2.PeersInfo.Peer\", [\n            { no: 1, name: \"peer_id\", kind: \"message\", T: () => PeerId },\n            { no: 2, name: \"socket_address\", kind: \"message\", T: () => IpSocketAddress },\n            { no: 3, name: \"network_stats\", kind: \"message\", T: () => PeersInfo_Peer_NetworkStats },\n            { no: 4, name: \"bootstrapper\", kind: \"message\", oneof: \"consensusInfo\", T: () => Empty },\n            { no: 5, name: \"node_catchup_status\", kind: \"enum\", oneof: \"consensusInfo\", T: () => [\"concordium.v2.PeersInfo.Peer.CatchupStatus\", PeersInfo_Peer_CatchupStatus] }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PeersInfo.Peer\n */\nexport const PeersInfo_Peer = new PeersInfo_Peer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PeersInfo_Peer_NetworkStats$Type extends MessageType<PeersInfo_Peer_NetworkStats> {\n    constructor() {\n        super(\"concordium.v2.PeersInfo.Peer.NetworkStats\", [\n            { no: 2, name: \"packets_sent\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"packets_received\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"latency\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PeersInfo.Peer.NetworkStats\n */\nexport const PeersInfo_Peer_NetworkStats = new PeersInfo_Peer_NetworkStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NodeInfo$Type extends MessageType<NodeInfo> {\n    constructor() {\n        super(\"concordium.v2.NodeInfo\", [\n            { no: 1, name: \"peer_version\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"local_time\", kind: \"message\", T: () => Timestamp },\n            { no: 4, name: \"peer_uptime\", kind: \"message\", T: () => Duration },\n            { no: 5, name: \"network_info\", kind: \"message\", T: () => NodeInfo_NetworkInfo },\n            { no: 6, name: \"bootstrapper\", kind: \"message\", oneof: \"details\", T: () => Empty },\n            { no: 7, name: \"node\", kind: \"message\", oneof: \"details\", T: () => NodeInfo_Node }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NodeInfo\n */\nexport const NodeInfo = new NodeInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NodeInfo_NetworkInfo$Type extends MessageType<NodeInfo_NetworkInfo> {\n    constructor() {\n        super(\"concordium.v2.NodeInfo.NetworkInfo\", [\n            { no: 1, name: \"node_id\", kind: \"message\", T: () => PeerId },\n            { no: 2, name: \"peer_total_sent\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"peer_total_received\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"avg_bps_in\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 5, name: \"avg_bps_out\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NodeInfo.NetworkInfo\n */\nexport const NodeInfo_NetworkInfo = new NodeInfo_NetworkInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NodeInfo_BakerConsensusInfo$Type extends MessageType<NodeInfo_BakerConsensusInfo> {\n    constructor() {\n        super(\"concordium.v2.NodeInfo.BakerConsensusInfo\", [\n            { no: 1, name: \"baker_id\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"passive_committee_info\", kind: \"enum\", oneof: \"status\", T: () => [\"concordium.v2.NodeInfo.BakerConsensusInfo.PassiveCommitteeInfo\", NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo] },\n            { no: 3, name: \"active_baker_committee_info\", kind: \"message\", oneof: \"status\", T: () => NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo },\n            { no: 4, name: \"active_finalizer_committee_info\", kind: \"message\", oneof: \"status\", T: () => NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NodeInfo.BakerConsensusInfo\n */\nexport const NodeInfo_BakerConsensusInfo = new NodeInfo_BakerConsensusInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo$Type extends MessageType<NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo> {\n    constructor() {\n        super(\"concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo\n */\nexport const NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo = new NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo$Type extends MessageType<NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo> {\n    constructor() {\n        super(\"concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo\n */\nexport const NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo = new NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NodeInfo_Node$Type extends MessageType<NodeInfo_Node> {\n    constructor() {\n        super(\"concordium.v2.NodeInfo.Node\", [\n            { no: 1, name: \"not_running\", kind: \"message\", oneof: \"consensusStatus\", T: () => Empty },\n            { no: 2, name: \"passive\", kind: \"message\", oneof: \"consensusStatus\", T: () => Empty },\n            { no: 3, name: \"active\", kind: \"message\", oneof: \"consensusStatus\", T: () => NodeInfo_BakerConsensusInfo }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.NodeInfo.Node\n */\nexport const NodeInfo_Node = new NodeInfo_Node$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendBlockItemRequest$Type extends MessageType<SendBlockItemRequest> {\n    constructor() {\n        super(\"concordium.v2.SendBlockItemRequest\", [\n            { no: 1, name: \"account_transaction\", kind: \"message\", oneof: \"blockItem\", T: () => AccountTransaction },\n            { no: 2, name: \"credential_deployment\", kind: \"message\", oneof: \"blockItem\", T: () => CredentialDeployment },\n            { no: 3, name: \"update_instruction\", kind: \"message\", oneof: \"blockItem\", T: () => UpdateInstruction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.SendBlockItemRequest\n */\nexport const SendBlockItemRequest = new SendBlockItemRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CredentialDeployment$Type extends MessageType<CredentialDeployment> {\n    constructor() {\n        super(\"concordium.v2.CredentialDeployment\", [\n            { no: 1, name: \"message_expiry\", kind: \"message\", T: () => TransactionTime },\n            { no: 2, name: \"raw_payload\", kind: \"scalar\", oneof: \"payload\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CredentialDeployment\n */\nexport const CredentialDeployment = new CredentialDeployment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Signature$Type extends MessageType<Signature> {\n    constructor() {\n        super(\"concordium.v2.Signature\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Signature\n */\nexport const Signature = new Signature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SignatureMap$Type extends MessageType<SignatureMap> {\n    constructor() {\n        super(\"concordium.v2.SignatureMap\", [\n            { no: 1, name: \"signatures\", kind: \"map\", K: 13 /*ScalarType.UINT32*/, V: { kind: \"message\", T: () => Signature } }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.SignatureMap\n */\nexport const SignatureMap = new SignatureMap$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountSignatureMap$Type extends MessageType<AccountSignatureMap> {\n    constructor() {\n        super(\"concordium.v2.AccountSignatureMap\", [\n            { no: 1, name: \"signatures\", kind: \"map\", K: 13 /*ScalarType.UINT32*/, V: { kind: \"message\", T: () => Signature } }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountSignatureMap\n */\nexport const AccountSignatureMap = new AccountSignatureMap$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionSignature$Type extends MessageType<AccountTransactionSignature> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionSignature\", [\n            { no: 1, name: \"signatures\", kind: \"map\", K: 13 /*ScalarType.UINT32*/, V: { kind: \"message\", T: () => AccountSignatureMap } }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionSignature\n */\nexport const AccountTransactionSignature = new AccountTransactionSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionHeader$Type extends MessageType<AccountTransactionHeader> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionHeader\", [\n            { no: 1, name: \"sender\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"sequence_number\", kind: \"message\", T: () => SequenceNumber },\n            { no: 3, name: \"energy_amount\", kind: \"message\", T: () => Energy },\n            { no: 5, name: \"expiry\", kind: \"message\", T: () => TransactionTime }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionHeader\n */\nexport const AccountTransactionHeader = new AccountTransactionHeader$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InitContractPayload$Type extends MessageType<InitContractPayload> {\n    constructor() {\n        super(\"concordium.v2.InitContractPayload\", [\n            { no: 1, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"module_ref\", kind: \"message\", T: () => ModuleRef },\n            { no: 3, name: \"init_name\", kind: \"message\", T: () => InitName },\n            { no: 4, name: \"parameter\", kind: \"message\", T: () => Parameter }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.InitContractPayload\n */\nexport const InitContractPayload = new InitContractPayload$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateContractPayload$Type extends MessageType<UpdateContractPayload> {\n    constructor() {\n        super(\"concordium.v2.UpdateContractPayload\", [\n            { no: 1, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"address\", kind: \"message\", T: () => ContractAddress },\n            { no: 3, name: \"receive_name\", kind: \"message\", T: () => ReceiveName },\n            { no: 4, name: \"parameter\", kind: \"message\", T: () => Parameter }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.UpdateContractPayload\n */\nexport const UpdateContractPayload = new UpdateContractPayload$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransferPayload$Type extends MessageType<TransferPayload> {\n    constructor() {\n        super(\"concordium.v2.TransferPayload\", [\n            { no: 1, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"receiver\", kind: \"message\", T: () => AccountAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TransferPayload\n */\nexport const TransferPayload = new TransferPayload$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransferWithMemoPayload$Type extends MessageType<TransferWithMemoPayload> {\n    constructor() {\n        super(\"concordium.v2.TransferWithMemoPayload\", [\n            { no: 1, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"receiver\", kind: \"message\", T: () => AccountAddress },\n            { no: 3, name: \"memo\", kind: \"message\", T: () => Memo }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TransferWithMemoPayload\n */\nexport const TransferWithMemoPayload = new TransferWithMemoPayload$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionPayload$Type extends MessageType<AccountTransactionPayload> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionPayload\", [\n            { no: 1, name: \"raw_payload\", kind: \"scalar\", oneof: \"payload\", T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"deploy_module\", kind: \"message\", oneof: \"payload\", T: () => VersionedModuleSource },\n            { no: 3, name: \"init_contract\", kind: \"message\", oneof: \"payload\", T: () => InitContractPayload },\n            { no: 4, name: \"update_contract\", kind: \"message\", oneof: \"payload\", T: () => UpdateContractPayload },\n            { no: 5, name: \"transfer\", kind: \"message\", oneof: \"payload\", T: () => TransferPayload },\n            { no: 6, name: \"transfer_with_memo\", kind: \"message\", oneof: \"payload\", T: () => TransferWithMemoPayload },\n            { no: 7, name: \"register_data\", kind: \"message\", oneof: \"payload\", T: () => RegisteredData }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionPayload\n */\nexport const AccountTransactionPayload = new AccountTransactionPayload$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PreAccountTransaction$Type extends MessageType<PreAccountTransaction> {\n    constructor() {\n        super(\"concordium.v2.PreAccountTransaction\", [\n            { no: 1, name: \"header\", kind: \"message\", T: () => AccountTransactionHeader },\n            { no: 2, name: \"payload\", kind: \"message\", T: () => AccountTransactionPayload }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PreAccountTransaction\n */\nexport const PreAccountTransaction = new PreAccountTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransaction$Type extends MessageType<AccountTransaction> {\n    constructor() {\n        super(\"concordium.v2.AccountTransaction\", [\n            { no: 1, name: \"signature\", kind: \"message\", T: () => AccountTransactionSignature },\n            { no: 2, name: \"header\", kind: \"message\", T: () => AccountTransactionHeader },\n            { no: 3, name: \"payload\", kind: \"message\", T: () => AccountTransactionPayload }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransaction\n */\nexport const AccountTransaction = new AccountTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateInstructionHeader$Type extends MessageType<UpdateInstructionHeader> {\n    constructor() {\n        super(\"concordium.v2.UpdateInstructionHeader\", [\n            { no: 1, name: \"sequence_number\", kind: \"message\", T: () => UpdateSequenceNumber },\n            { no: 2, name: \"effective_time\", kind: \"message\", T: () => TransactionTime },\n            { no: 3, name: \"timeout\", kind: \"message\", T: () => TransactionTime }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.UpdateInstructionHeader\n */\nexport const UpdateInstructionHeader = new UpdateInstructionHeader$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateInstructionPayload$Type extends MessageType<UpdateInstructionPayload> {\n    constructor() {\n        super(\"concordium.v2.UpdateInstructionPayload\", [\n            { no: 3, name: \"raw_payload\", kind: \"scalar\", oneof: \"payload\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.UpdateInstructionPayload\n */\nexport const UpdateInstructionPayload = new UpdateInstructionPayload$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateInstruction$Type extends MessageType<UpdateInstruction> {\n    constructor() {\n        super(\"concordium.v2.UpdateInstruction\", [\n            { no: 1, name: \"signatures\", kind: \"message\", T: () => SignatureMap },\n            { no: 2, name: \"header\", kind: \"message\", T: () => UpdateInstructionHeader },\n            { no: 3, name: \"payload\", kind: \"message\", T: () => UpdateInstructionPayload }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.UpdateInstruction\n */\nexport const UpdateInstruction = new UpdateInstruction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountTransactionSignHash$Type extends MessageType<AccountTransactionSignHash> {\n    constructor() {\n        super(\"concordium.v2.AccountTransactionSignHash\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountTransactionSignHash\n */\nexport const AccountTransactionSignHash = new AccountTransactionSignHash$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CredentialsPerBlockLimit$Type extends MessageType<CredentialsPerBlockLimit> {\n    constructor() {\n        super(\"concordium.v2.CredentialsPerBlockLimit\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.CredentialsPerBlockLimit\n */\nexport const CredentialsPerBlockLimit = new CredentialsPerBlockLimit$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChainParametersV0$Type extends MessageType<ChainParametersV0> {\n    constructor() {\n        super(\"concordium.v2.ChainParametersV0\", [\n            { no: 1, name: \"election_difficulty\", kind: \"message\", T: () => ElectionDifficulty },\n            { no: 2, name: \"euro_per_energy\", kind: \"message\", T: () => ExchangeRate },\n            { no: 3, name: \"micro_ccd_per_euro\", kind: \"message\", T: () => ExchangeRate },\n            { no: 4, name: \"baker_cooldown_epochs\", kind: \"message\", T: () => Epoch },\n            { no: 5, name: \"account_creation_limit\", kind: \"message\", T: () => CredentialsPerBlockLimit },\n            { no: 6, name: \"mint_distribution\", kind: \"message\", T: () => MintDistributionCpv0 },\n            { no: 7, name: \"transaction_fee_distribution\", kind: \"message\", T: () => TransactionFeeDistribution },\n            { no: 8, name: \"gas_rewards\", kind: \"message\", T: () => GasRewards },\n            { no: 9, name: \"foundation_account\", kind: \"message\", T: () => AccountAddress },\n            { no: 10, name: \"minimum_threshold_for_baking\", kind: \"message\", T: () => Amount },\n            { no: 11, name: \"root_keys\", kind: \"message\", T: () => HigherLevelKeys },\n            { no: 12, name: \"level1_keys\", kind: \"message\", T: () => HigherLevelKeys },\n            { no: 13, name: \"level2_keys\", kind: \"message\", T: () => AuthorizationsV0 }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ChainParametersV0\n */\nexport const ChainParametersV0 = new ChainParametersV0$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChainParametersV1$Type extends MessageType<ChainParametersV1> {\n    constructor() {\n        super(\"concordium.v2.ChainParametersV1\", [\n            { no: 1, name: \"election_difficulty\", kind: \"message\", T: () => ElectionDifficulty },\n            { no: 2, name: \"euro_per_energy\", kind: \"message\", T: () => ExchangeRate },\n            { no: 3, name: \"micro_ccd_per_euro\", kind: \"message\", T: () => ExchangeRate },\n            { no: 4, name: \"cooldown_parameters\", kind: \"message\", T: () => CooldownParametersCpv1 },\n            { no: 5, name: \"time_parameters\", kind: \"message\", T: () => TimeParametersCpv1 },\n            { no: 6, name: \"account_creation_limit\", kind: \"message\", T: () => CredentialsPerBlockLimit },\n            { no: 7, name: \"mint_distribution\", kind: \"message\", T: () => MintDistributionCpv1 },\n            { no: 8, name: \"transaction_fee_distribution\", kind: \"message\", T: () => TransactionFeeDistribution },\n            { no: 9, name: \"gas_rewards\", kind: \"message\", T: () => GasRewards },\n            { no: 10, name: \"foundation_account\", kind: \"message\", T: () => AccountAddress },\n            { no: 11, name: \"pool_parameters\", kind: \"message\", T: () => PoolParametersCpv1 },\n            { no: 12, name: \"root_keys\", kind: \"message\", T: () => HigherLevelKeys },\n            { no: 13, name: \"level1_keys\", kind: \"message\", T: () => HigherLevelKeys },\n            { no: 14, name: \"level2_keys\", kind: \"message\", T: () => AuthorizationsV1 }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ChainParametersV1\n */\nexport const ChainParametersV1 = new ChainParametersV1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChainParametersV2$Type extends MessageType<ChainParametersV2> {\n    constructor() {\n        super(\"concordium.v2.ChainParametersV2\", [\n            { no: 1, name: \"consensus_parameters\", kind: \"message\", T: () => ConsensusParametersV1 },\n            { no: 2, name: \"euro_per_energy\", kind: \"message\", T: () => ExchangeRate },\n            { no: 3, name: \"micro_ccd_per_euro\", kind: \"message\", T: () => ExchangeRate },\n            { no: 4, name: \"cooldown_parameters\", kind: \"message\", T: () => CooldownParametersCpv1 },\n            { no: 5, name: \"time_parameters\", kind: \"message\", T: () => TimeParametersCpv1 },\n            { no: 6, name: \"account_creation_limit\", kind: \"message\", T: () => CredentialsPerBlockLimit },\n            { no: 7, name: \"mint_distribution\", kind: \"message\", T: () => MintDistributionCpv1 },\n            { no: 8, name: \"transaction_fee_distribution\", kind: \"message\", T: () => TransactionFeeDistribution },\n            { no: 9, name: \"gas_rewards\", kind: \"message\", T: () => GasRewardsCpv2 },\n            { no: 10, name: \"foundation_account\", kind: \"message\", T: () => AccountAddress },\n            { no: 11, name: \"pool_parameters\", kind: \"message\", T: () => PoolParametersCpv1 },\n            { no: 12, name: \"root_keys\", kind: \"message\", T: () => HigherLevelKeys },\n            { no: 13, name: \"level1_keys\", kind: \"message\", T: () => HigherLevelKeys },\n            { no: 14, name: \"level2_keys\", kind: \"message\", T: () => AuthorizationsV1 },\n            { no: 15, name: \"finalization_committee_parameters\", kind: \"message\", T: () => FinalizationCommitteeParameters }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ChainParametersV2\n */\nexport const ChainParametersV2 = new ChainParametersV2$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChainParametersV3$Type extends MessageType<ChainParametersV3> {\n    constructor() {\n        super(\"concordium.v2.ChainParametersV3\", [\n            { no: 1, name: \"consensus_parameters\", kind: \"message\", T: () => ConsensusParametersV1 },\n            { no: 2, name: \"euro_per_energy\", kind: \"message\", T: () => ExchangeRate },\n            { no: 3, name: \"micro_ccd_per_euro\", kind: \"message\", T: () => ExchangeRate },\n            { no: 4, name: \"cooldown_parameters\", kind: \"message\", T: () => CooldownParametersCpv1 },\n            { no: 5, name: \"time_parameters\", kind: \"message\", T: () => TimeParametersCpv1 },\n            { no: 6, name: \"account_creation_limit\", kind: \"message\", T: () => CredentialsPerBlockLimit },\n            { no: 7, name: \"mint_distribution\", kind: \"message\", T: () => MintDistributionCpv1 },\n            { no: 8, name: \"transaction_fee_distribution\", kind: \"message\", T: () => TransactionFeeDistribution },\n            { no: 9, name: \"gas_rewards\", kind: \"message\", T: () => GasRewardsCpv2 },\n            { no: 10, name: \"foundation_account\", kind: \"message\", T: () => AccountAddress },\n            { no: 11, name: \"pool_parameters\", kind: \"message\", T: () => PoolParametersCpv1 },\n            { no: 12, name: \"root_keys\", kind: \"message\", T: () => HigherLevelKeys },\n            { no: 13, name: \"level1_keys\", kind: \"message\", T: () => HigherLevelKeys },\n            { no: 14, name: \"level2_keys\", kind: \"message\", T: () => AuthorizationsV1 },\n            { no: 15, name: \"finalization_committee_parameters\", kind: \"message\", T: () => FinalizationCommitteeParameters },\n            { no: 16, name: \"validator_score_parameters\", kind: \"message\", T: () => ValidatorScoreParameters }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ChainParametersV3\n */\nexport const ChainParametersV3 = new ChainParametersV3$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChainParameters$Type extends MessageType<ChainParameters> {\n    constructor() {\n        super(\"concordium.v2.ChainParameters\", [\n            { no: 1, name: \"v0\", kind: \"message\", oneof: \"parameters\", T: () => ChainParametersV0 },\n            { no: 2, name: \"v1\", kind: \"message\", oneof: \"parameters\", T: () => ChainParametersV1 },\n            { no: 3, name: \"v2\", kind: \"message\", oneof: \"parameters\", T: () => ChainParametersV2 },\n            { no: 4, name: \"v3\", kind: \"message\", oneof: \"parameters\", T: () => ChainParametersV3 }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ChainParameters\n */\nexport const ChainParameters = new ChainParameters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FinalizationSummaryParty$Type extends MessageType<FinalizationSummaryParty> {\n    constructor() {\n        super(\"concordium.v2.FinalizationSummaryParty\", [\n            { no: 1, name: \"baker\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"weight\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"signed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.FinalizationSummaryParty\n */\nexport const FinalizationSummaryParty = new FinalizationSummaryParty$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FinalizationIndex$Type extends MessageType<FinalizationIndex> {\n    constructor() {\n        super(\"concordium.v2.FinalizationIndex\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.FinalizationIndex\n */\nexport const FinalizationIndex = new FinalizationIndex$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FinalizationSummary$Type extends MessageType<FinalizationSummary> {\n    constructor() {\n        super(\"concordium.v2.FinalizationSummary\", [\n            { no: 1, name: \"block\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"index\", kind: \"message\", T: () => FinalizationIndex },\n            { no: 3, name: \"delay\", kind: \"message\", T: () => BlockHeight },\n            { no: 4, name: \"finalizers\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => FinalizationSummaryParty }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.FinalizationSummary\n */\nexport const FinalizationSummary = new FinalizationSummary$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockFinalizationSummary$Type extends MessageType<BlockFinalizationSummary> {\n    constructor() {\n        super(\"concordium.v2.BlockFinalizationSummary\", [\n            { no: 1, name: \"none\", kind: \"message\", oneof: \"summary\", T: () => Empty },\n            { no: 2, name: \"record\", kind: \"message\", oneof: \"summary\", T: () => FinalizationSummary }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockFinalizationSummary\n */\nexport const BlockFinalizationSummary = new BlockFinalizationSummary$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockItem$Type extends MessageType<BlockItem> {\n    constructor() {\n        super(\"concordium.v2.BlockItem\", [\n            { no: 1, name: \"hash\", kind: \"message\", T: () => TransactionHash },\n            { no: 2, name: \"account_transaction\", kind: \"message\", oneof: \"blockItem\", T: () => AccountTransaction },\n            { no: 3, name: \"credential_deployment\", kind: \"message\", oneof: \"blockItem\", T: () => CredentialDeployment },\n            { no: 4, name: \"update_instruction\", kind: \"message\", oneof: \"blockItem\", T: () => UpdateInstruction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockItem\n */\nexport const BlockItem = new BlockItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakerRewardPeriodInfo$Type extends MessageType<BakerRewardPeriodInfo> {\n    constructor() {\n        super(\"concordium.v2.BakerRewardPeriodInfo\", [\n            { no: 1, name: \"baker\", kind: \"message\", T: () => BakerInfo },\n            { no: 2, name: \"effective_stake\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"commission_rates\", kind: \"message\", T: () => CommissionRates },\n            { no: 4, name: \"equity_capital\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"delegated_capital\", kind: \"message\", T: () => Amount },\n            { no: 6, name: \"is_finalizer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakerRewardPeriodInfo\n */\nexport const BakerRewardPeriodInfo = new BakerRewardPeriodInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass QuorumSignature$Type extends MessageType<QuorumSignature> {\n    constructor() {\n        super(\"concordium.v2.QuorumSignature\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.QuorumSignature\n */\nexport const QuorumSignature = new QuorumSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass QuorumCertificate$Type extends MessageType<QuorumCertificate> {\n    constructor() {\n        super(\"concordium.v2.QuorumCertificate\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 3, name: \"epoch\", kind: \"message\", T: () => Epoch },\n            { no: 4, name: \"aggregate_signature\", kind: \"message\", T: () => QuorumSignature },\n            { no: 5, name: \"signatories\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BakerId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.QuorumCertificate\n */\nexport const QuorumCertificate = new QuorumCertificate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FinalizerRound$Type extends MessageType<FinalizerRound> {\n    constructor() {\n        super(\"concordium.v2.FinalizerRound\", [\n            { no: 1, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 2, name: \"finalizers\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BakerId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.FinalizerRound\n */\nexport const FinalizerRound = new FinalizerRound$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TimeoutSignature$Type extends MessageType<TimeoutSignature> {\n    constructor() {\n        super(\"concordium.v2.TimeoutSignature\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TimeoutSignature\n */\nexport const TimeoutSignature = new TimeoutSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TimeoutCertificate$Type extends MessageType<TimeoutCertificate> {\n    constructor() {\n        super(\"concordium.v2.TimeoutCertificate\", [\n            { no: 1, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 2, name: \"min_epoch\", kind: \"message\", T: () => Epoch },\n            { no: 3, name: \"qc_rounds_first_epoch\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => FinalizerRound },\n            { no: 4, name: \"qc_rounds_second_epoch\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => FinalizerRound },\n            { no: 5, name: \"aggregate_signature\", kind: \"message\", T: () => TimeoutSignature }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TimeoutCertificate\n */\nexport const TimeoutCertificate = new TimeoutCertificate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SuccessorProof$Type extends MessageType<SuccessorProof> {\n    constructor() {\n        super(\"concordium.v2.SuccessorProof\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.SuccessorProof\n */\nexport const SuccessorProof = new SuccessorProof$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EpochFinalizationEntry$Type extends MessageType<EpochFinalizationEntry> {\n    constructor() {\n        super(\"concordium.v2.EpochFinalizationEntry\", [\n            { no: 1, name: \"finalized_qc\", kind: \"message\", T: () => QuorumCertificate },\n            { no: 2, name: \"successor_qc\", kind: \"message\", T: () => QuorumCertificate },\n            { no: 3, name: \"successor_proof\", kind: \"message\", T: () => SuccessorProof }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.EpochFinalizationEntry\n */\nexport const EpochFinalizationEntry = new EpochFinalizationEntry$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockCertificates$Type extends MessageType<BlockCertificates> {\n    constructor() {\n        super(\"concordium.v2.BlockCertificates\", [\n            { no: 1, name: \"quorum_certificate\", kind: \"message\", T: () => QuorumCertificate },\n            { no: 2, name: \"timeout_certificate\", kind: \"message\", T: () => TimeoutCertificate },\n            { no: 3, name: \"epoch_finalization_entry\", kind: \"message\", T: () => EpochFinalizationEntry }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockCertificates\n */\nexport const BlockCertificates = new BlockCertificates$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass WinningBaker$Type extends MessageType<WinningBaker> {\n    constructor() {\n        super(\"concordium.v2.WinningBaker\", [\n            { no: 1, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 2, name: \"winner\", kind: \"message\", T: () => BakerId },\n            { no: 3, name: \"present\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.WinningBaker\n */\nexport const WinningBaker = new WinningBaker$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunRequest$Type extends MessageType<DryRunRequest> {\n    constructor() {\n        super(\"concordium.v2.DryRunRequest\", [\n            { no: 1, name: \"load_block_state\", kind: \"message\", oneof: \"request\", T: () => BlockHashInput },\n            { no: 2, name: \"state_query\", kind: \"message\", oneof: \"request\", T: () => DryRunStateQuery },\n            { no: 3, name: \"state_operation\", kind: \"message\", oneof: \"request\", T: () => DryRunStateOperation }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunRequest\n */\nexport const DryRunRequest = new DryRunRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunStateQuery$Type extends MessageType<DryRunStateQuery> {\n    constructor() {\n        super(\"concordium.v2.DryRunStateQuery\", [\n            { no: 1, name: \"get_account_info\", kind: \"message\", oneof: \"query\", T: () => AccountIdentifierInput },\n            { no: 2, name: \"get_instance_info\", kind: \"message\", oneof: \"query\", T: () => ContractAddress },\n            { no: 3, name: \"invoke_instance\", kind: \"message\", oneof: \"query\", T: () => DryRunInvokeInstance }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunStateQuery\n */\nexport const DryRunStateQuery = new DryRunStateQuery$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunInvokeInstance$Type extends MessageType<DryRunInvokeInstance> {\n    constructor() {\n        super(\"concordium.v2.DryRunInvokeInstance\", [\n            { no: 1, name: \"invoker\", kind: \"message\", T: () => Address },\n            { no: 2, name: \"instance\", kind: \"message\", T: () => ContractAddress },\n            { no: 3, name: \"amount\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"entrypoint\", kind: \"message\", T: () => ReceiveName },\n            { no: 5, name: \"parameter\", kind: \"message\", T: () => Parameter },\n            { no: 6, name: \"energy\", kind: \"message\", T: () => Energy }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunInvokeInstance\n */\nexport const DryRunInvokeInstance = new DryRunInvokeInstance$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunStateOperation$Type extends MessageType<DryRunStateOperation> {\n    constructor() {\n        super(\"concordium.v2.DryRunStateOperation\", [\n            { no: 1, name: \"set_timestamp\", kind: \"message\", oneof: \"operation\", T: () => Timestamp },\n            { no: 2, name: \"mint_to_account\", kind: \"message\", oneof: \"operation\", T: () => DryRunMintToAccount },\n            { no: 3, name: \"run_transaction\", kind: \"message\", oneof: \"operation\", T: () => DryRunTransaction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunStateOperation\n */\nexport const DryRunStateOperation = new DryRunStateOperation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunMintToAccount$Type extends MessageType<DryRunMintToAccount> {\n    constructor() {\n        super(\"concordium.v2.DryRunMintToAccount\", [\n            { no: 1, name: \"account\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"amount\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunMintToAccount\n */\nexport const DryRunMintToAccount = new DryRunMintToAccount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunTransaction$Type extends MessageType<DryRunTransaction> {\n    constructor() {\n        super(\"concordium.v2.DryRunTransaction\", [\n            { no: 1, name: \"sender\", kind: \"message\", T: () => AccountAddress },\n            { no: 2, name: \"energy_amount\", kind: \"message\", T: () => Energy },\n            { no: 3, name: \"payload\", kind: \"message\", T: () => AccountTransactionPayload },\n            { no: 4, name: \"signatures\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => DryRunSignature }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunTransaction\n */\nexport const DryRunTransaction = new DryRunTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunSignature$Type extends MessageType<DryRunSignature> {\n    constructor() {\n        super(\"concordium.v2.DryRunSignature\", [\n            { no: 1, name: \"credential\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 2, name: \"key\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunSignature\n */\nexport const DryRunSignature = new DryRunSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunResponse$Type extends MessageType<DryRunResponse> {\n    constructor() {\n        super(\"concordium.v2.DryRunResponse\", [\n            { no: 1, name: \"error\", kind: \"message\", oneof: \"response\", T: () => DryRunErrorResponse },\n            { no: 2, name: \"success\", kind: \"message\", oneof: \"response\", T: () => DryRunSuccessResponse },\n            { no: 3, name: \"quota_remaining\", kind: \"message\", T: () => Energy }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunResponse\n */\nexport const DryRunResponse = new DryRunResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunErrorResponse$Type extends MessageType<DryRunErrorResponse> {\n    constructor() {\n        super(\"concordium.v2.DryRunErrorResponse\", [\n            { no: 1, name: \"no_state\", kind: \"message\", oneof: \"error\", T: () => DryRunErrorResponse_NoState },\n            { no: 2, name: \"block_not_found\", kind: \"message\", oneof: \"error\", T: () => DryRunErrorResponse_BlockNotFound },\n            { no: 3, name: \"account_not_found\", kind: \"message\", oneof: \"error\", T: () => DryRunErrorResponse_AccountNotFound },\n            { no: 4, name: \"instance_not_found\", kind: \"message\", oneof: \"error\", T: () => DryRunErrorResponse_InstanceNotFound },\n            { no: 5, name: \"amount_over_limit\", kind: \"message\", oneof: \"error\", T: () => DryRunErrorResponse_AmountOverLimit },\n            { no: 6, name: \"balance_insufficient\", kind: \"message\", oneof: \"error\", T: () => DryRunErrorResponse_BalanceInsufficient },\n            { no: 8, name: \"energy_insufficient\", kind: \"message\", oneof: \"error\", T: () => DryRunErrorResponse_EnergyInsufficient },\n            { no: 9, name: \"invoke_failed\", kind: \"message\", oneof: \"error\", T: () => DryRunErrorResponse_InvokeFailure }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse\n */\nexport const DryRunErrorResponse = new DryRunErrorResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunErrorResponse_NoState$Type extends MessageType<DryRunErrorResponse_NoState> {\n    constructor() {\n        super(\"concordium.v2.DryRunErrorResponse.NoState\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.NoState\n */\nexport const DryRunErrorResponse_NoState = new DryRunErrorResponse_NoState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunErrorResponse_BlockNotFound$Type extends MessageType<DryRunErrorResponse_BlockNotFound> {\n    constructor() {\n        super(\"concordium.v2.DryRunErrorResponse.BlockNotFound\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.BlockNotFound\n */\nexport const DryRunErrorResponse_BlockNotFound = new DryRunErrorResponse_BlockNotFound$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunErrorResponse_AccountNotFound$Type extends MessageType<DryRunErrorResponse_AccountNotFound> {\n    constructor() {\n        super(\"concordium.v2.DryRunErrorResponse.AccountNotFound\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.AccountNotFound\n */\nexport const DryRunErrorResponse_AccountNotFound = new DryRunErrorResponse_AccountNotFound$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunErrorResponse_InstanceNotFound$Type extends MessageType<DryRunErrorResponse_InstanceNotFound> {\n    constructor() {\n        super(\"concordium.v2.DryRunErrorResponse.InstanceNotFound\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.InstanceNotFound\n */\nexport const DryRunErrorResponse_InstanceNotFound = new DryRunErrorResponse_InstanceNotFound$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunErrorResponse_AmountOverLimit$Type extends MessageType<DryRunErrorResponse_AmountOverLimit> {\n    constructor() {\n        super(\"concordium.v2.DryRunErrorResponse.AmountOverLimit\", [\n            { no: 1, name: \"amount_limit\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.AmountOverLimit\n */\nexport const DryRunErrorResponse_AmountOverLimit = new DryRunErrorResponse_AmountOverLimit$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunErrorResponse_BalanceInsufficient$Type extends MessageType<DryRunErrorResponse_BalanceInsufficient> {\n    constructor() {\n        super(\"concordium.v2.DryRunErrorResponse.BalanceInsufficient\", [\n            { no: 1, name: \"required_amount\", kind: \"message\", T: () => Amount },\n            { no: 2, name: \"available_amount\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.BalanceInsufficient\n */\nexport const DryRunErrorResponse_BalanceInsufficient = new DryRunErrorResponse_BalanceInsufficient$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunErrorResponse_EnergyInsufficient$Type extends MessageType<DryRunErrorResponse_EnergyInsufficient> {\n    constructor() {\n        super(\"concordium.v2.DryRunErrorResponse.EnergyInsufficient\", [\n            { no: 1, name: \"energy_required\", kind: \"message\", T: () => Energy }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.EnergyInsufficient\n */\nexport const DryRunErrorResponse_EnergyInsufficient = new DryRunErrorResponse_EnergyInsufficient$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunErrorResponse_InvokeFailure$Type extends MessageType<DryRunErrorResponse_InvokeFailure> {\n    constructor() {\n        super(\"concordium.v2.DryRunErrorResponse.InvokeFailure\", [\n            { no: 1, name: \"return_value\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"used_energy\", kind: \"message\", T: () => Energy },\n            { no: 3, name: \"reason\", kind: \"message\", T: () => RejectReason }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunErrorResponse.InvokeFailure\n */\nexport const DryRunErrorResponse_InvokeFailure = new DryRunErrorResponse_InvokeFailure$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunSuccessResponse$Type extends MessageType<DryRunSuccessResponse> {\n    constructor() {\n        super(\"concordium.v2.DryRunSuccessResponse\", [\n            { no: 1, name: \"block_state_loaded\", kind: \"message\", oneof: \"response\", T: () => DryRunSuccessResponse_BlockStateLoaded },\n            { no: 2, name: \"account_info\", kind: \"message\", oneof: \"response\", T: () => AccountInfo },\n            { no: 3, name: \"instance_info\", kind: \"message\", oneof: \"response\", T: () => InstanceInfo },\n            { no: 4, name: \"invoke_succeeded\", kind: \"message\", oneof: \"response\", T: () => DryRunSuccessResponse_InvokeSuccess },\n            { no: 5, name: \"timestamp_set\", kind: \"message\", oneof: \"response\", T: () => DryRunSuccessResponse_TimestampSet },\n            { no: 6, name: \"minted_to_account\", kind: \"message\", oneof: \"response\", T: () => DryRunSuccessResponse_MintedToAccount },\n            { no: 7, name: \"transaction_executed\", kind: \"message\", oneof: \"response\", T: () => DryRunSuccessResponse_TransactionExecuted }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse\n */\nexport const DryRunSuccessResponse = new DryRunSuccessResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunSuccessResponse_BlockStateLoaded$Type extends MessageType<DryRunSuccessResponse_BlockStateLoaded> {\n    constructor() {\n        super(\"concordium.v2.DryRunSuccessResponse.BlockStateLoaded\", [\n            { no: 1, name: \"current_timestamp\", kind: \"message\", T: () => Timestamp },\n            { no: 2, name: \"block_hash\", kind: \"message\", T: () => BlockHash },\n            { no: 3, name: \"protocol_version\", kind: \"enum\", T: () => [\"concordium.v2.ProtocolVersion\", ProtocolVersion] }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse.BlockStateLoaded\n */\nexport const DryRunSuccessResponse_BlockStateLoaded = new DryRunSuccessResponse_BlockStateLoaded$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunSuccessResponse_TimestampSet$Type extends MessageType<DryRunSuccessResponse_TimestampSet> {\n    constructor() {\n        super(\"concordium.v2.DryRunSuccessResponse.TimestampSet\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse.TimestampSet\n */\nexport const DryRunSuccessResponse_TimestampSet = new DryRunSuccessResponse_TimestampSet$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunSuccessResponse_MintedToAccount$Type extends MessageType<DryRunSuccessResponse_MintedToAccount> {\n    constructor() {\n        super(\"concordium.v2.DryRunSuccessResponse.MintedToAccount\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse.MintedToAccount\n */\nexport const DryRunSuccessResponse_MintedToAccount = new DryRunSuccessResponse_MintedToAccount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunSuccessResponse_TransactionExecuted$Type extends MessageType<DryRunSuccessResponse_TransactionExecuted> {\n    constructor() {\n        super(\"concordium.v2.DryRunSuccessResponse.TransactionExecuted\", [\n            { no: 1, name: \"energy_cost\", kind: \"message\", T: () => Energy },\n            { no: 2, name: \"details\", kind: \"message\", T: () => AccountTransactionDetails },\n            { no: 3, name: \"return_value\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse.TransactionExecuted\n */\nexport const DryRunSuccessResponse_TransactionExecuted = new DryRunSuccessResponse_TransactionExecuted$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DryRunSuccessResponse_InvokeSuccess$Type extends MessageType<DryRunSuccessResponse_InvokeSuccess> {\n    constructor() {\n        super(\"concordium.v2.DryRunSuccessResponse.InvokeSuccess\", [\n            { no: 1, name: \"return_value\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"used_energy\", kind: \"message\", T: () => Energy },\n            { no: 3, name: \"effects\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractTraceElement }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.DryRunSuccessResponse.InvokeSuccess\n */\nexport const DryRunSuccessResponse_InvokeSuccess = new DryRunSuccessResponse_InvokeSuccess$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FinalizerIndex$Type extends MessageType<FinalizerIndex> {\n    constructor() {\n        super(\"concordium.v2.FinalizerIndex\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.FinalizerIndex\n */\nexport const FinalizerIndex = new FinalizerIndex$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass QuorumMessage$Type extends MessageType<QuorumMessage> {\n    constructor() {\n        super(\"concordium.v2.QuorumMessage\", [\n            { no: 1, name: \"signature\", kind: \"message\", T: () => QuorumSignature },\n            { no: 2, name: \"block\", kind: \"message\", T: () => BlockHash },\n            { no: 3, name: \"finalizer\", kind: \"message\", T: () => FinalizerIndex },\n            { no: 4, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 5, name: \"epoch\", kind: \"message\", T: () => Epoch }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.QuorumMessage\n */\nexport const QuorumMessage = new QuorumMessage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RawQuorumCertificate$Type extends MessageType<RawQuorumCertificate> {\n    constructor() {\n        super(\"concordium.v2.RawQuorumCertificate\", [\n            { no: 1, name: \"block_hash\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 3, name: \"epoch\", kind: \"message\", T: () => Epoch },\n            { no: 4, name: \"aggregate_signature\", kind: \"message\", T: () => QuorumSignature },\n            { no: 5, name: \"signatories\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => FinalizerIndex }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RawQuorumCertificate\n */\nexport const RawQuorumCertificate = new RawQuorumCertificate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockSignature$Type extends MessageType<BlockSignature> {\n    constructor() {\n        super(\"concordium.v2.BlockSignature\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockSignature\n */\nexport const BlockSignature = new BlockSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TimeoutMessage$Type extends MessageType<TimeoutMessage> {\n    constructor() {\n        super(\"concordium.v2.TimeoutMessage\", [\n            { no: 1, name: \"finalizer\", kind: \"message\", T: () => FinalizerIndex },\n            { no: 2, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 3, name: \"epoch\", kind: \"message\", T: () => Epoch },\n            { no: 4, name: \"quorum_certificate\", kind: \"message\", T: () => RawQuorumCertificate },\n            { no: 5, name: \"signature\", kind: \"message\", T: () => TimeoutSignature },\n            { no: 6, name: \"message_signature\", kind: \"message\", T: () => BlockSignature }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TimeoutMessage\n */\nexport const TimeoutMessage = new TimeoutMessage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RawFinalizerRound$Type extends MessageType<RawFinalizerRound> {\n    constructor() {\n        super(\"concordium.v2.RawFinalizerRound\", [\n            { no: 1, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 2, name: \"finalizers\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => FinalizerIndex }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RawFinalizerRound\n */\nexport const RawFinalizerRound = new RawFinalizerRound$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RawTimeoutCertificate$Type extends MessageType<RawTimeoutCertificate> {\n    constructor() {\n        super(\"concordium.v2.RawTimeoutCertificate\", [\n            { no: 1, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 2, name: \"min_epoch\", kind: \"message\", T: () => Epoch },\n            { no: 3, name: \"qc_rounds_first_epoch\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RawFinalizerRound },\n            { no: 4, name: \"qc_rounds_second_epoch\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RawFinalizerRound },\n            { no: 5, name: \"aggregate_signature\", kind: \"message\", T: () => TimeoutSignature }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RawTimeoutCertificate\n */\nexport const RawTimeoutCertificate = new RawTimeoutCertificate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PersistentRoundStatus$Type extends MessageType<PersistentRoundStatus> {\n    constructor() {\n        super(\"concordium.v2.PersistentRoundStatus\", [\n            { no: 1, name: \"last_signed_quorum_message\", kind: \"message\", T: () => QuorumMessage },\n            { no: 2, name: \"last_signed_timeout_message\", kind: \"message\", T: () => TimeoutMessage },\n            { no: 3, name: \"last_baked_round\", kind: \"message\", T: () => Round },\n            { no: 4, name: \"latest_timeout\", kind: \"message\", T: () => RawTimeoutCertificate }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.PersistentRoundStatus\n */\nexport const PersistentRoundStatus = new PersistentRoundStatus$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RoundTimeout$Type extends MessageType<RoundTimeout> {\n    constructor() {\n        super(\"concordium.v2.RoundTimeout\", [\n            { no: 1, name: \"timeout_certificate\", kind: \"message\", T: () => RawTimeoutCertificate },\n            { no: 2, name: \"quorum_certificate\", kind: \"message\", T: () => RawQuorumCertificate }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RoundTimeout\n */\nexport const RoundTimeout = new RoundTimeout$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RawFinalizationEntry$Type extends MessageType<RawFinalizationEntry> {\n    constructor() {\n        super(\"concordium.v2.RawFinalizationEntry\", [\n            { no: 1, name: \"finalized_qc\", kind: \"message\", T: () => RawQuorumCertificate },\n            { no: 2, name: \"successor_qc\", kind: \"message\", T: () => RawQuorumCertificate },\n            { no: 3, name: \"successor_proof\", kind: \"message\", T: () => SuccessorProof }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RawFinalizationEntry\n */\nexport const RawFinalizationEntry = new RawFinalizationEntry$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RoundStatus$Type extends MessageType<RoundStatus> {\n    constructor() {\n        super(\"concordium.v2.RoundStatus\", [\n            { no: 1, name: \"current_round\", kind: \"message\", T: () => Round },\n            { no: 2, name: \"highest_certified_block\", kind: \"message\", T: () => RawQuorumCertificate },\n            { no: 3, name: \"previous_round_timeout\", kind: \"message\", T: () => RoundTimeout },\n            { no: 4, name: \"round_eligible_to_bake\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"current_epoch\", kind: \"message\", T: () => Epoch },\n            { no: 6, name: \"last_epoch_finalization_entry\", kind: \"message\", T: () => RawFinalizationEntry },\n            { no: 7, name: \"current_timeout\", kind: \"message\", T: () => Duration }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RoundStatus\n */\nexport const RoundStatus = new RoundStatus$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlockTableSummary$Type extends MessageType<BlockTableSummary> {\n    constructor() {\n        super(\"concordium.v2.BlockTableSummary\", [\n            { no: 1, name: \"dead_block_cache_size\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"live_blocks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlockHash }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BlockTableSummary\n */\nexport const BlockTableSummary = new BlockTableSummary$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BranchBlocks$Type extends MessageType<BranchBlocks> {\n    constructor() {\n        super(\"concordium.v2.BranchBlocks\", [\n            { no: 1, name: \"blocks_at_branch_height\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlockHash }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BranchBlocks\n */\nexport const BranchBlocks = new BranchBlocks$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RoundExistingBlock$Type extends MessageType<RoundExistingBlock> {\n    constructor() {\n        super(\"concordium.v2.RoundExistingBlock\", [\n            { no: 1, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 2, name: \"baker\", kind: \"message\", T: () => BakerId },\n            { no: 3, name: \"block\", kind: \"message\", T: () => BlockHash }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RoundExistingBlock\n */\nexport const RoundExistingBlock = new RoundExistingBlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RoundExistingQC$Type extends MessageType<RoundExistingQC> {\n    constructor() {\n        super(\"concordium.v2.RoundExistingQC\", [\n            { no: 1, name: \"round\", kind: \"message\", T: () => Round },\n            { no: 2, name: \"epoch\", kind: \"message\", T: () => Epoch }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.RoundExistingQC\n */\nexport const RoundExistingQC = new RoundExistingQC$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FullBakerInfo$Type extends MessageType<FullBakerInfo> {\n    constructor() {\n        super(\"concordium.v2.FullBakerInfo\", [\n            { no: 1, name: \"baker_identity\", kind: \"message\", T: () => BakerId },\n            { no: 2, name: \"election_verify_key\", kind: \"message\", T: () => BakerElectionVerifyKey },\n            { no: 3, name: \"signature_verify_key\", kind: \"message\", T: () => BakerSignatureVerifyKey },\n            { no: 4, name: \"aggregation_verify_key\", kind: \"message\", T: () => BakerAggregationVerifyKey },\n            { no: 5, name: \"stake\", kind: \"message\", T: () => Amount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.FullBakerInfo\n */\nexport const FullBakerInfo = new FullBakerInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FinalizationCommitteeHash$Type extends MessageType<FinalizationCommitteeHash> {\n    constructor() {\n        super(\"concordium.v2.FinalizationCommitteeHash\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.FinalizationCommitteeHash\n */\nexport const FinalizationCommitteeHash = new FinalizationCommitteeHash$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BakersAndFinalizers$Type extends MessageType<BakersAndFinalizers> {\n    constructor() {\n        super(\"concordium.v2.BakersAndFinalizers\", [\n            { no: 1, name: \"bakers\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => FullBakerInfo },\n            { no: 2, name: \"finalizers\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BakerId },\n            { no: 3, name: \"baker_total_stake\", kind: \"message\", T: () => Amount },\n            { no: 4, name: \"finalizer_total_stake\", kind: \"message\", T: () => Amount },\n            { no: 5, name: \"finalization_committee_hash\", kind: \"message\", T: () => FinalizationCommitteeHash }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.BakersAndFinalizers\n */\nexport const BakersAndFinalizers = new BakersAndFinalizers$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EpochBakers$Type extends MessageType<EpochBakers> {\n    constructor() {\n        super(\"concordium.v2.EpochBakers\", [\n            { no: 1, name: \"previous_epoch_bakers\", kind: \"message\", T: () => BakersAndFinalizers },\n            { no: 2, name: \"current_epoch_bakers\", kind: \"message\", T: () => BakersAndFinalizers },\n            { no: 3, name: \"next_epoch_bakers\", kind: \"message\", T: () => BakersAndFinalizers },\n            { no: 4, name: \"next_payday\", kind: \"message\", T: () => Epoch }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.EpochBakers\n */\nexport const EpochBakers = new EpochBakers$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TimeoutMessages$Type extends MessageType<TimeoutMessages> {\n    constructor() {\n        super(\"concordium.v2.TimeoutMessages\", [\n            { no: 1, name: \"first_epoch\", kind: \"message\", T: () => Epoch },\n            { no: 2, name: \"first_epoch_timeouts\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TimeoutMessage },\n            { no: 3, name: \"second_epoch_timeouts\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TimeoutMessage }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.TimeoutMessages\n */\nexport const TimeoutMessages = new TimeoutMessages$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AggregatedSignatures$Type extends MessageType<AggregatedSignatures> {\n    constructor() {\n        super(\"concordium.v2.AggregatedSignatures\", [\n            { no: 1, name: \"signed_block\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"signature_weight\", kind: \"message\", T: () => Amount },\n            { no: 3, name: \"aggregate_signature\", kind: \"message\", T: () => QuorumSignature },\n            { no: 4, name: \"signatories\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => FinalizerIndex }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AggregatedSignatures\n */\nexport const AggregatedSignatures = new AggregatedSignatures$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass QuorumMessages$Type extends MessageType<QuorumMessages> {\n    constructor() {\n        super(\"concordium.v2.QuorumMessages\", [\n            { no: 1, name: \"quorum_messages\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => QuorumMessage },\n            { no: 2, name: \"aggregated_signatures\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => AggregatedSignatures }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.QuorumMessages\n */\nexport const QuorumMessages = new QuorumMessages$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConsensusDetailedStatusQuery$Type extends MessageType<ConsensusDetailedStatusQuery> {\n    constructor() {\n        super(\"concordium.v2.ConsensusDetailedStatusQuery\", [\n            { no: 1, name: \"genesis_index\", kind: \"message\", T: () => GenesisIndex }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ConsensusDetailedStatusQuery\n */\nexport const ConsensusDetailedStatusQuery = new ConsensusDetailedStatusQuery$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConsensusDetailedStatus$Type extends MessageType<ConsensusDetailedStatus> {\n    constructor() {\n        super(\"concordium.v2.ConsensusDetailedStatus\", [\n            { no: 1, name: \"genesis_block\", kind: \"message\", T: () => BlockHash },\n            { no: 2, name: \"persistent_round_status\", kind: \"message\", T: () => PersistentRoundStatus },\n            { no: 3, name: \"round_status\", kind: \"message\", T: () => RoundStatus },\n            { no: 4, name: \"non_finalized_transaction_count\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 5, name: \"transaction_table_purge_counter\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"block_table\", kind: \"message\", T: () => BlockTableSummary },\n            { no: 7, name: \"branches\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BranchBlocks },\n            { no: 8, name: \"round_existing_blocks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RoundExistingBlock },\n            { no: 9, name: \"round_existing_qcs\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RoundExistingQC },\n            { no: 10, name: \"genesis_block_height\", kind: \"message\", T: () => AbsoluteBlockHeight },\n            { no: 11, name: \"last_finalized_block\", kind: \"message\", T: () => BlockHash },\n            { no: 12, name: \"last_finalized_block_height\", kind: \"message\", T: () => BlockHeight },\n            { no: 13, name: \"latest_finalization_entry\", kind: \"message\", T: () => RawFinalizationEntry },\n            { no: 14, name: \"epoch_bakers\", kind: \"message\", T: () => EpochBakers },\n            { no: 15, name: \"timeout_messages\", kind: \"message\", T: () => TimeoutMessages },\n            { no: 16, name: \"terminal_block\", kind: \"message\", T: () => BlockHash }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.ConsensusDetailedStatus\n */\nexport const ConsensusDetailedStatus = new ConsensusDetailedStatus$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountPending$Type extends MessageType<AccountPending> {\n    constructor() {\n        super(\"concordium.v2.AccountPending\", [\n            { no: 1, name: \"account_index\", kind: \"message\", T: () => AccountIndex },\n            { no: 2, name: \"first_timestamp\", kind: \"message\", T: () => Timestamp }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountPending\n */\nexport const AccountPending = new AccountPending$Type();\n","export {\n    Type,\n    instanceOf,\n    create,\n    toString,\n    equals,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    fromJSON,\n    fromString,\n    SchemaValue,\n    fromSchemaValue,\n    toSchemaValue,\n    toContractName,\n    toEntrypointName,\n    fromStringUnchecked,\n} from '../../types/ReceiveName.js';\n","import { Tag, decode } from 'cbor2';\nimport { encode, registerEncoder } from 'cbor2/encoder';\n\nimport { MAX_U64 } from '../constants.js';\nimport { ContractAddress } from '../types/index.js';\nimport { isDefined } from '../util.js';\n\n/**\n * Enum representing the types of errors that can occur when creating a contract address.\n */\nexport enum ErrorType {\n    /** Error type indicating a contract index exceeds the maximum allowed value. */\n    EXCEEDS_MAX_VALUE = 'EXCEEDS_MAX_VALUE',\n    /** Error type indicating a contract index is negative. */\n    NEGATIVE = 'NEGATIVE',\n}\n\n/**\n * Custom error to represent issues with contract addresses.\n */\nexport class Err extends Error {\n    private constructor(\n        /** The {@linkcode ErrorType} of the error. Can be used to distinguish different types of errors. */\n        public readonly type: ErrorType,\n        message: string\n    ) {\n        super(message);\n        this.name = `CborContractAddress.Err.${type}`;\n    }\n\n    /**\n     * Creates a CborContractAddress.Err indicating that the contract address index exceeds the maximum allowed value.\n     */\n    public static exceedsMaxValue(): Err {\n        return new Err(ErrorType.EXCEEDS_MAX_VALUE, `Contract indices cannot be larger than ${MAX_U64}`);\n    }\n\n    /**\n     * Creates a CborContractAddress.Err indicating that the contract address index is negative.\n     */\n    public static negative(): Err {\n        return new Err(ErrorType.NEGATIVE, 'Contract indices cannot be negative');\n    }\n}\n\n/**\n * CIS-7 CBOR representation of a `ContractAddress`.\n */\nclass CborContractAddress {\n    #nominal = true;\n\n    constructor(\n        /** The index of the smart contract address. */\n        public readonly index: bigint,\n        /** The subindex of the smart contract address. Interpreted as `0` if not specified. */\n        public readonly subindex?: bigint\n    ) {\n        const values = [index, subindex].filter(isDefined);\n        if (values.some((v) => v < 0n)) {\n            throw Err.negative();\n        }\n        if (values.some((v) => v > MAX_U64)) {\n            throw Err.exceedsMaxValue();\n        }\n    }\n\n    /**\n     * Get a string representation of the contract address using the `<index, subindex>` format.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return toContractAddress(this).toString();\n    }\n\n    /**\n     * Get the JSON representation (i.e. object format) of the contract address.\n     * It's up to the user to process this, as bigints are not JSON serializable.\n     * @returns {JSON} The JSON representation.\n     */\n    public toJSON(): JSON {\n        if (this.subindex === undefined) return { index: this.index };\n        return { index: this.index, subindex: this.subindex };\n    }\n}\n\n/**\n * CIS-7 CBOR representation of a `ContractAddress`.\n */\nexport type Type = CborContractAddress;\n\n/**\n * Type predicate for {@linkcode Type}.\n *\n * @param v - a value of unknown type to check\n * @returns whether the type is an instance of {@linkcode Type}\n */\nexport const instanceOf = (v: unknown): v is CborContractAddress => v instanceof CborContractAddress;\n\n/**\n * The JSON representation of a {@linkcode Type} cbor contract address.\n * It's up to the user to process this, as bigints are not JSON serializable.\n */\nexport type JSON = { index: bigint; subindex?: bigint };\n\ntype NumLike = string | number | bigint;\n\n/**\n * Create a CBOR-compatible contract address from numeric index (and optional subindex).\n *\n * @param index Index of the contract (string | number | bigint accepted, coerced via BigInt()).\n * @param subindex Optional subindex of the contract (same coercion rules). If `0`, the value is omitted.\n *\n * @returns CborContractAddress instance representing the provided (index, subindex).\n * @throws {Err} If index or subindex is negative ({@link Err.negative}).\n * @throws {Err} if index of subindex exceed MAX_U64 ({@link Err.exceedsMaxValue}).\n */\nexport function create(index: NumLike, subindex?: NumLike): CborContractAddress {\n    if (subindex === undefined) {\n        return new CborContractAddress(BigInt(index));\n    }\n\n    const sub = BigInt(subindex);\n    if (sub === 0n) {\n        return new CborContractAddress(BigInt(index));\n    }\n\n    return new CborContractAddress(BigInt(index), BigInt(subindex));\n}\n\n/**\n * Convert a public `ContractAddress.Type` (sdk representation) into its CBOR wrapper form.\n *\n * @param address The contract address value (with bigint index/subindex) to wrap.\n * @returns Equivalent CborContractAddress instance.\n */\nexport function fromContractAddress(address: ContractAddress.Type): CborContractAddress {\n    return create(address.index, address.subindex);\n}\n\n/**\n * Convert a CBOR wrapper contract address to the public `ContractAddress.Type`.\n *\n * @param address The CBOR contract address wrapper to convert.\n * @returns New `ContractAddress.Type` constructed from wrapper values.\n */\nexport function toContractAddress(address: CborContractAddress): ContractAddress.Type {\n    return ContractAddress.create(address.index, address.subindex);\n}\n\n/**\n * Create a CborContractAddress from its JSON-like object representation.\n *\n * @param address Object with index and optional subindex.\n * @returns Corresponding CborContractAddress instance.\n */\nexport function fromJSON(address: JSON): CborContractAddress {\n    if (address.subindex === undefined || address.subindex === null) {\n        return new CborContractAddress(BigInt(address.index));\n    }\n    return new CborContractAddress(BigInt(address.index), BigInt(address.subindex));\n}\n\nconst TAGGED_CONTRACT_ADDRESS = 40919;\n\n/**\n * Produce the tagged CBOR value representation (tag + contents) for a contract address.\n * Tag format simple: 40919(index).\n * Tag format full: 40919([index, subindex]).\n *\n * @param address The CBOR contract address wrapper instance.\n * @returns cbor2.Tag carrying the encoded address.\n */\nexport function toCBORValue(address: CborContractAddress): Tag {\n    let contents = address.subindex === undefined ? address.index : [address.index, address.subindex];\n    return new Tag(TAGGED_CONTRACT_ADDRESS, contents);\n}\n\n/**\n * Encode a contract address to raw CBOR binary (Uint8Array) using its tagged representation.\n *\n * @param address The CBOR contract address wrapper to encode.\n * @returns Uint8Array containing the canonical CBOR encoding.\n */\nexport function toCBOR(address: CborContractAddress): Uint8Array {\n    return new Uint8Array(encode(toCBORValue(address)));\n}\n\n/**\n * Registers a CBOR encoder for the CborContractAddress type with the `cbor2` library.\n * This allows CborContractAddress instances to be automatically encoded when used with\n * the `cbor2` library's encode function.\n *\n * @returns {void}\n * @example\n * // Register the encoder\n * registerCBOREncoder();\n * // Now CborContractAddress instances can be encoded directly\n * const encoded = encode(myCborContractAddress);\n */\nexport function registerCBOREncoder(): void {\n    registerEncoder(CborContractAddress, (value) => {\n        const { tag, contents } = toCBORValue(value);\n        return [tag, contents];\n    });\n}\n\n/**\n * Decodes a CBOR-encoded contract address tagged value (tag 40919) into a {@linkcode CborContractAddress} instance.\n *\n * @param {unknown} decoded - The CBOR decoded value, expected to be a tagged value with tag 40919.\n * @throws {Error} - If the decoded value is not a valid CBOR encoded contract address.\n * @returns {CborContractAddress} The decoded contract address as a CborContractAddress instance.\n */\nfunction fromCBORValue(decoded: unknown): CborContractAddress {\n    // Verify we have a tagged value with tag 40919 (tagged-contract-address)\n    if (!(decoded instanceof Tag) || decoded.tag !== TAGGED_CONTRACT_ADDRESS) {\n        throw new Error(`Invalid CBOR encoded contract address: expected tag ${TAGGED_CONTRACT_ADDRESS}`);\n    }\n\n    const validateUint = (val: unknown): val is number | bigint => typeof val === 'number' || typeof val === 'bigint';\n\n    const value = decoded.contents;\n    if (Array.isArray(value) && value.length === 2 && value.every(validateUint))\n        return new CborContractAddress(BigInt(value[0]), BigInt(value[1]));\n    else if (validateUint(value)) return new CborContractAddress(BigInt(value));\n    else throw new Error('Invalid CBOR encoded contract address: expected uint value or tuple with 2 uint values.');\n}\n\n/**\n * Decodes a CBOR-encoded contract address into an CborContractAddress instance.\n * This function can handle both the full format (with subindex)\n * and a simplified format with just the index.\n *\n * 1. With subindex:\n * ```\n * [uint, uint]\n * ```\n *\n * 2. Without subindex:\n * ```\n * uint\n * ```\n *\n * @param {Uint8Array} bytes - The CBOR encoded representation of an contract address.\n * @throws {Error} - If the input is not a valid CBOR encoding of an contract address.\n * @returns {Type} The decoded CborContractAddress instance.\n */\nexport function fromCBOR(bytes: Uint8Array): Type {\n    return fromCBORValue(decode(bytes));\n}\n\n/**\n * Registers a CBOR decoder for the tagged-contract address (40919) format with the `cbor2` library.\n * This enables automatic decoding of CBOR data containing Concordium contract addresses\n * when using the `cbor2` library's decode function.\n *\n * @returns {() => void} A cleanup function that, when called, will restore the previous\n * decoder (if any) that was registered for the tagged-address format. This is useful\n * when used in an existing `cbor2` use-case.\n *\n * @example\n * // Register the decoder\n * const cleanup = registerCBORDecoder();\n * // Use the decoder\n * const tokenHolder = decode(cborBytes); // Returns CborContractAddress if format matches\n * // Later, unregister the decoder\n * cleanup();\n */\nexport function registerCBORDecoder(): () => void {\n    const old = [Tag.registerDecoder(TAGGED_CONTRACT_ADDRESS, fromCBORValue)];\n\n    // return cleanup function to restore the old decoder\n    return () => {\n        for (const decoder of old) {\n            if (decoder) {\n                Tag.registerDecoder(TAGGED_CONTRACT_ADDRESS, decoder);\n            } else {\n                Tag.clearDecoder(TAGGED_CONTRACT_ADDRESS);\n            }\n        }\n    };\n}\n","import { Buffer } from 'buffer/index.js';\n\nimport { checkParameterLength } from '../contractHelpers.js';\nimport type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport { deserializeTypeValue, serializeTypeValue } from '../schema.js';\nimport { SchemaType, serializeSchemaType } from '../schemaTypes.js';\nimport type { Base64String, HexString, SmartContractTypeValues } from '../types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.Parameter;\n/**\n * @deprecated\n */\nexport type Serializable = HexString;\n\n/** Parameter for a smart contract entrypoint. */\nclass Parameter {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** Internal buffer of bytes representing the parameter. */\n        public readonly buffer: Uint8Array\n    ) {}\n\n    /**\n     * Get a string representation of the parameter.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return toHexString(this);\n    }\n\n    /**\n     * Get a JSON-serializable representation of the parameter.\n     * @returns {HexString} The JSON-serializable representation.\n     */\n    public toJSON(): HexString {\n        return toHexString(this);\n    }\n}\n\n/**\n * Converts a {@linkcode HexString} to a parameter.\n * @param {HexString} json The JSON representation of the parameter.\n * @returns {Parameter} The parameter.\n */\nexport function fromJSON(json: HexString): Parameter {\n    return fromHexString(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode Parameter.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON(value: Type): Serializable {\n    return toHexString(value);\n}\n\n/** Parameter for a smart contract entrypoint. */\nexport type Type = Parameter;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is Parameter {\n    return value instanceof Parameter;\n}\n\n/**\n * Create an empty parameter.\n * @returns {Parameter} An empty parameter.\n */\nexport function empty(): Parameter {\n    return fromBufferUnchecked(new ArrayBuffer(0));\n}\n\n/**\n * Create a parameter for a smart contract entrypoint.\n * Ensuring the buffer does not exceed the maximum number of bytes supported for a smart contract parameter.\n * @param {ArrayBuffer} buffer The buffer of bytes representing the parameter.\n * @throws If the provided buffer exceed the supported number of bytes for a smart contract.\n * @returns {Parameter}\n */\nexport function fromBuffer(buffer: ArrayBuffer): Parameter {\n    checkParameterLength(buffer);\n    return fromBufferUnchecked(buffer);\n}\n\n/**\n * Create an unchecked parameter for a smart contract entrypoint.\n * It is up to the caller to ensure the buffer does not exceed the maximum number of bytes supported for a smart contract parameter.\n * @param {ArrayBuffer} buffer The buffer of bytes representing the parameter.\n * @returns {Parameter}\n */\nexport function fromBufferUnchecked(buffer: ArrayBuffer): Parameter {\n    return new Parameter(new Uint8Array(buffer));\n}\n\n/**\n * Create a parameter for a smart contract entrypoint from a hex string.\n * Ensuring the parameter does not exceed the maximum number of bytes supported for a smart contract parameter.\n * @param {HexString} hex String with hex encoding of the parameter.\n * @throws If the provided parameter exceed the supported number of bytes for a smart contract.\n * @returns {Parameter}\n */\nexport function fromHexString(hex: HexString): Parameter {\n    return fromBuffer(Buffer.from(hex, 'hex'));\n}\n\n/**\n * Convert a parameter into a hex string.\n * @param {Parameter} parameter The parameter to encode in a hex string.\n * @returns {HexString}\n */\nexport function toHexString(parameter: Parameter): HexString {\n    return Buffer.from(parameter.buffer).toString('hex');\n}\n\n/**\n * Convert a parameter into a buffer.\n * @param {Parameter} parameter The parameter to get the buffer from.\n * @returns {Uint8Array}\n */\nexport function toBuffer(parameter: Parameter): Uint8Array {\n    return parameter.buffer;\n}\n\n/**\n * Create a parameter from a schema type and the corresponding schema value.\n * @param {SchemaType} schemaType The schema type for some parameter.\n * @param {unknown} value The parameter value fitting the schema type.\n * @returns {Parameter} A parameter of the provided value encoded using the schema type.\n */\nexport function fromSchemaType(schemaType: SchemaType, value: unknown): Parameter {\n    const schemaBytes = serializeSchemaType(schemaType);\n    return serializeTypeValue(value, schemaBytes);\n}\n\n/**\n * Create a parameter from a schema type and the corresponding schema value.\n * @param {Base64String} schemaBase64 The schema type for some parameter in base64.\n * @param {unknown} value The parameter value fitting the schema type.\n * @returns {Parameter} A parameter of the provided value encoded using the schema type.\n */\nexport function fromBase64SchemaType(schemaBase64: Base64String, value: unknown): Parameter {\n    const schemaBytes = Buffer.from(schemaBase64, 'base64');\n    return serializeTypeValue(value, schemaBytes);\n}\n\n/**\n * Parse a contract parameter using a schema type.\n * @param {Parameter} parameter The parameter.\n * @param {SchemaType} schemaType The schema type for the parameter.\n * @returns {SmartContractTypeValues}\n */\nexport function parseWithSchemaType(parameter: Parameter, schemaType: SchemaType): SmartContractTypeValues {\n    const schemaBytes = serializeSchemaType(schemaType);\n    return deserializeTypeValue(toBuffer(parameter), schemaBytes);\n}\n\n/**\n * Parse a contract parameter using a schema type.\n * @param {Parameter} parameter The parameter to parse.\n * @param {Base64String} schemaBase64 The schema type for the parameter encoded as Base64.\n * @returns {SmartContractTypeValues}\n */\nexport function parseWithSchemaTypeBase64(parameter: Parameter, schemaBase64: Base64String): SmartContractTypeValues {\n    const schemaBytes = Buffer.from(schemaBase64, 'base64');\n    return deserializeTypeValue(toBuffer(parameter), schemaBytes);\n}\n\n/**\n * Convert a smart contract parameter from its protobuf encoding.\n * @param {Proto.Parameter} parameter The parameter in protobuf.\n * @returns {Parameter} The parameter.\n */\nexport function fromProto(parameter: Proto.Parameter): Parameter {\n    return fromBuffer(parameter.value);\n}\n\n/**\n * Convert a parameter into its protobuf encoding.\n * @param {Parameter} parameter The parameter.\n * @returns {Proto.Parameter} The protobuf encoding.\n */\nexport function toProto(parameter: Parameter): Proto.Parameter {\n    return {\n        value: parameter.buffer,\n    };\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode Parameter.toJSON} method instead.\n * @param {Type} value - The parameter to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: Parameter): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toHexString(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromHexString);\n","import bs58check from 'bs58check';\nimport { Buffer } from 'buffer/index.js';\n\nimport type * as Proto from '../grpc-api/v2/concordium/kernel.js';\nimport { Base58String } from '../types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.AccountAddress;\n/**\n * @deprecated\n */\nexport type Serializable = Base58String;\n\n/**\n * Representation of an account address, which enforces that it:\n * - Is a valid base58 string with version byte of 1.\n * - The base58 string is a length of 50 (encoding exactly 32 bytes).\n */\nclass AccountAddress {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** The account address represented in base58check. */\n        public readonly address: string,\n        /** The account address represented in bytes. */\n        public readonly decodedAddress: Uint8Array\n    ) {}\n\n    /**\n     * Get a string representation of the account address.\n     *\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return toBase58(this);\n    }\n\n    /**\n     * Get a JSON-serializable representation of the account address.\n     * @returns {Base58String} The JSON-serializable representation.\n     */\n    public toJSON(): Base58String {\n        return toBase58(this);\n    }\n}\n\n/**\n * Converts a {@linkcode Base58String} to an account address.\n * @param {Base58String} json The JSON representation of the account address.\n * @returns {AccountAddress} The account address.\n */\nexport function fromJSON(json: Base58String): AccountAddress {\n    return fromBase58(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value.\n * @deprecated Use the {@linkcode AccountAddress.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON(value: Type): Serializable {\n    return toBase58(value);\n}\n\n/**\n * Representation of an account address, which enforces that it:\n * - Is a valid base58 string with version byte of 1.\n * - The base58 string is a length of 50 (encoding exactly 32 bytes).\n */\nexport type Type = AccountAddress;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is AccountAddress {\n    return value instanceof AccountAddress;\n}\n\n/**\n * Construct an AccountAddress from a buffer of bytes.\n * @param {ArrayBuffer} buffer Buffer containing exactly 32 bytes representing the address of the account.\n * @throws If the provided buffer does not contain exactly 32 bytes.\n * @returns {AccountAddress} The AccountAddress.\n */\nexport function fromBuffer(buffer: ArrayBuffer): AccountAddress {\n    if (buffer.byteLength !== 32) {\n        throw new Error(`The provided buffer '${buffer}' is invalid as its length was not 32`);\n    }\n\n    const address = bs58check.encode(Buffer.concat([Uint8Array.of(1), new Uint8Array(buffer)]));\n    return new AccountAddress(address, new Uint8Array(buffer));\n}\n\n/**\n * Construct an AccountAddress from a base58check string.\n * @param {string} address String of base58check encoded account address, must use a byte version of 1.\n * @throws If the provided string is not: exactly 50 characters, a valid base58check encoding using version byte 1.\n * @returns {AccountAddress} The AccountAddress.\n */\nexport function fromBase58(address: string): AccountAddress {\n    if (address.length !== 50) {\n        throw new Error(`The provided address '${address}' is invalid as its length was not 50`);\n    }\n    const buffer = bs58check.decode(address);\n    const versionByte = buffer.at(0);\n    if (versionByte !== 1) {\n        throw new Error(`The provided address '${address}' does not use version byte with value of 1`);\n    }\n    const decodedAddress = buffer.subarray(1, 33); // Ensure only the 32 bytes for the address is kept.\n    return new AccountAddress(address, new Uint8Array(decodedAddress));\n}\n\n/**\n * Get the bytes corresponding to the account address.\n * @param {AccountAddress} accountAddress The account address.\n */\nexport function toBuffer(accountAddress: AccountAddress): Uint8Array {\n    return accountAddress.decodedAddress;\n}\n\n/**\n * Get a base58check string of the account address.\n * @param {AccountAddress} accountAddress The account address.\n */\nexport function toBase58(accountAddress: AccountAddress): string {\n    return accountAddress.address;\n}\n\n/** Type used when encoding an account address in the JSON format used when serializing using a smart contract schema type. */\nexport type SchemaValue = string;\n\n/**\n * Get account address in the JSON format used when serializing using a smart contract schema type.\n * @param {AccountAddress} accountAddress The account address.\n * @returns {SchemaValue} The schema JSON representation.\n */\nexport function toSchemaValue(accountAddress: AccountAddress): SchemaValue {\n    return accountAddress.address;\n}\n\n/**\n * Convert to account address from JSON format used when serializing using a smart contract schema type.\n * @param {SchemaValue} accountAddress The account address in schema JSON format.\n * @returns {AccountAddress} The account address.\n */\nexport function fromSchemaValue(accountAddress: SchemaValue): AccountAddress {\n    return fromBase58(accountAddress);\n}\n\nexport const BYTES_LENGTH = 32;\nconst ALIAS_BYTES_LENGTH = 3;\nconst COMMON_BYTES_LENGTH = BYTES_LENGTH - ALIAS_BYTES_LENGTH;\nconst MAX_COUNT = 16777215; // 2^(8 * 3) - 1\n\n/**\n * Given two accountAddresses, return whether they are aliases.\n * @param address an AccountAddress\n * @param alias another AccountAddress\n * @returns boolean that indicates whether address and alias are aliases\n */\nexport function isAlias(address: AccountAddress, alias: AccountAddress): boolean {\n    return (\n        0 ===\n        Buffer.from(address.decodedAddress).compare(\n            alias.decodedAddress,\n            0,\n            COMMON_BYTES_LENGTH,\n            0,\n            COMMON_BYTES_LENGTH\n        )\n    );\n}\n\n/**\n * Given an AccountAddress and a counter, returns an alias for the address.\n * @param address the account address for which the function should get an alias for\n * @param counter number s.t. 0 <= counter < 2^24, decides which alias is returned.\n * If a counter outside this scope is given, then the function will throw an exception\n * @returns an AccountAddress, which is an alias to the given address\n */\nexport function getAlias(address: AccountAddress, counter: number): AccountAddress {\n    if (counter < 0 || counter > MAX_COUNT) {\n        throw new Error(\n            `An invalid counter value was given: ${counter}. The value has to satisfy that 0 <= counter < 2^24`\n        );\n    }\n    const commonBytes = address.decodedAddress.slice(0, COMMON_BYTES_LENGTH);\n    const aliasBytes = Buffer.alloc(ALIAS_BYTES_LENGTH);\n    aliasBytes.writeUIntBE(counter, 0, ALIAS_BYTES_LENGTH);\n    return fromBuffer(Buffer.concat([commonBytes, aliasBytes]));\n}\n\n/**\n * Convert an account address from its protobuf encoding.\n * @param {Proto.AccountAddress} accountAddress The account address in protobuf.\n * @returns {AccountAddress} The account address\n */\nexport function fromProto(accountAddress: Proto.AccountAddress): AccountAddress {\n    return fromBuffer(accountAddress.value);\n}\n\n/**\n * Convert an account address into its protobuf encoding.\n * @param {AccountAddress} accountAddress The account address.\n * @returns {Proto.AccountAddress} The protobuf encoding.\n */\nexport function toProto(accountAddress: AccountAddress): Proto.AccountAddress {\n    return {\n        value: accountAddress.decodedAddress,\n    };\n}\n\n/**\n * Check if two account addresses are the exact same. This will not consider different aliases for the same account as equal.\n * @param {AccountAddress} left\n * @param {AccountAddress} right\n * @returns {boolean} True if they are equal.\n */\nexport function equals(left: AccountAddress, right: AccountAddress): boolean {\n    return left.address === right.address;\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode AccountAddress.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: AccountAddress): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toBase58(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromBase58);\n","export * from './types.js';\nexport * from './proofs.js';\nexport * from './helpers.js';\nexport * from './grpc.js';\n","import { ConcordiumGRPCClient } from '../grpc/GRPCClient.js';\nimport {\n    AccountAddress,\n    AccountInfo,\n    AccountTransaction,\n    AccountTransactionHeader,\n    AccountTransactionType,\n    TokenUpdatePayload,\n    TransactionExpiry,\n    TransactionHash,\n} from '../pub/types.js';\nimport { AccountSigner, signTransaction } from '../signHelpers.js';\nimport { SequenceNumber } from '../types/index.js';\nimport { bail } from '../util.js';\nimport {\n    Cbor,\n    CborAccountAddress,\n    TokenAddAllowListOperation,\n    TokenAddDenyListOperation,\n    TokenAmount,\n    TokenBurnOperation,\n    TokenId,\n    TokenInfo,\n    TokenMintOperation,\n    TokenModuleReference,\n    TokenModuleState,\n    TokenOperation,\n    TokenOperationType,\n    TokenPauseOperation,\n    TokenRemoveAllowListOperation,\n    TokenRemoveDenyListOperation,\n    TokenTransfer,\n    TokenTransferOperation,\n    TokenUnpauseOperation,\n    createTokenUpdatePayload,\n} from './index.js';\n\n/**\n * Enum representing the types of errors that can occur when interacting with PLT instances through the client.\n */\nexport enum TokenErrorCode {\n    /** Error type indicating the token ID does not match the module version expected by the client. */\n    INCORRECT_MODULE_VERSION = 'INCORRECT_MODULE_VERSION',\n    /** Error type indicating the supplied token amount is not compatible with the token. */\n    INVALID_TOKEN_AMOUNT = 'INVALID_TOKEN_AMOUNT',\n    /** Error representing an attempt transfer funds to an account which is either not on the token allow list,\n     * or is on the token deny list.\n     */\n    NOT_ALLOWED = 'NOT_ALLOWED',\n    /** Error representing an attempt to transfer tokens from an account that does not have enough tokens to cover the\n     * amount. */\n    INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS',\n    /** Error type Error indicating that supply change operation is prohibited while the token is in the paused state.\n     */\n    PAUSED = 'PAUSED',\n    /** Error that indicates that the token does not support minting. */\n    NOT_MINTABLE = 'NOT_MINTABLE',\n    /** Error that indicates that the token does not support burning. */\n    NOT_BURNABLE = 'NOT_BURNABLE',\n    /** Error that indicates that allow list is not available for this token. */\n    NO_ALLOW_LIST = 'NO_ALLOW_LIST',\n    /** Error that indicates that deny list is not available for this token. */\n    NO_DENY_LIST = 'NO_DENY_LIST',\n    /** Error that indicates that an account has insufficient amount of token to burn. */\n    INSUFFICIENT_SUPPLY = 'INSUFFICIENT_SUPPLY',\n    // InsufficientSupplyError\n}\n\n/**\n * Error thrown while interacting with PLT instances through the client.\n */\nexport abstract class TokenError extends Error {\n    public abstract readonly code: TokenErrorCode;\n    private _name: string = 'TokenClientError';\n\n    /**\n     * Constructs a new TokenError.\n     * @param {string} message - The error message.\n     */\n    constructor(message: string) {\n        super(message);\n    }\n\n    /**\n     * Gets the name of the error, including its code.\n     * @returns {string} The name of the error.\n     */\n    public override get name(): string {\n        return `${this._name}.${this.code}`;\n    }\n}\n\n/** Error type indicating the token ID does not match the module version expected by the client. */\nexport class ModuleVersionMismatchError extends TokenError {\n    public readonly code = TokenErrorCode.INCORRECT_MODULE_VERSION;\n\n    /**\n     * Constructs a new ModuleVersionMismatchError.\n     * @param {TokenModuleReference.Type} expectedRef - The expected module reference.\n     * @param {TokenModuleReference.Type} foundRef - The found module reference.\n     */\n    constructor(\n        public readonly expectedRef: TokenModuleReference.Type,\n        public readonly foundRef: TokenModuleReference.Type\n    ) {\n        super(\n            `Token module version mismatch. Expected token with module ref ${expectedRef}, found ${foundRef} during lookup.`\n        );\n    }\n}\n\n/** Error type indicating the supplied token amount is not compatible with the token. */\nexport class InvalidTokenAmountError extends TokenError {\n    public readonly code = TokenErrorCode.INVALID_TOKEN_AMOUNT;\n\n    /**\n     * Constructs a new InvalidTokenAmountError.\n     * @param {number} tokenDecimals - The number of decimals the token supports.\n     * @param {TokenAmount.Type} amount - The token amount that is invalid.\n     */\n    constructor(\n        public readonly tokenDecimals: number,\n        public readonly amount: TokenAmount.Type\n    ) {\n        super(\n            `The token amount supplied cannot be represented as an amount of the token. The amount is represented with ${amount.decimals} decimals, while the token requires ${tokenDecimals} decimals.`\n        );\n    }\n}\n\n/**\n * Error type indicating an attempt transfer funds to/from an account which is either not on the token allow list, or is on the token deny list\n */\nexport class NotAllowedError extends TokenError {\n    public readonly code = TokenErrorCode.NOT_ALLOWED;\n\n    /**\n     * Constructs a new NotAllowedError.\n     * @param {AccountAddress.Type} receiver - The account address of the receiver.\n     */\n    constructor(public readonly receiver: AccountAddress.Type) {\n        super(\n            `Transfering funds from or to the account specified is currently not allowed (${receiver}) because of the allow/deny list.`\n        );\n    }\n}\n\n/**\n * Error type indicating insufficient funds for a transaction.\n */\nexport class InsufficientFundsError extends TokenError {\n    public readonly code = TokenErrorCode.INSUFFICIENT_FUNDS;\n\n    /**\n     * Constructs a new InsufficientFundsError.\n     *\n     * @param {AccountAddress.Type} sender - The account address of the sender.\n     * @param {TokenAmount.Type} requiredAmount - The amount of tokens required for the transaction.\n     */\n    constructor(\n        public readonly sender: AccountAddress.Type,\n        public readonly requiredAmount: TokenAmount.Type\n    ) {\n        super(`Insufficient funds: Sender ${sender} requires at least ${requiredAmount} tokens.`);\n    }\n}\n\n/**\n * Error type indicating that the token is paused.\n */\nexport class PausedError extends TokenError {\n    public readonly code = TokenErrorCode.PAUSED;\n\n    /**\n     * Constructs a new PausedError.\n     *\n     * @param {TokenId.Type} tokenId - The ID of the token.\n     */\n    constructor(public readonly tokenId: TokenId.Type) {\n        super(`Token ${tokenId} is paused.`);\n    }\n}\n\n/**\n * Error type indicating that the token is not mintable.\n */\nexport class NotMintableError extends TokenError {\n    public readonly code = TokenErrorCode.NOT_MINTABLE;\n\n    /**\n     * Constructs a new NotMintableError.\n     *\n     * @param {TokenId.Type} tokenId - The ID of the token.\n     */\n    constructor(public readonly tokenId: TokenId.Type) {\n        super(`Token ${tokenId} is not mintable.`);\n    }\n}\n\n/**\n * Error type indicating that the token is not burnable.\n */\nexport class NotBurnableError extends TokenError {\n    public readonly code = TokenErrorCode.NOT_BURNABLE;\n\n    /**\n     * Constructs a new NotBurnableError.\n     *\n     * @param {TokenId.Type} tokenId - The ID of the token.\n     */\n    constructor(public readonly tokenId: TokenId.Type) {\n        super(`Token ${tokenId} is not burnable.`);\n    }\n}\n\n/**\n * Error type indicating that the token has no allow list.\n */\nexport class NoAllowListError extends TokenError {\n    public readonly code = TokenErrorCode.NO_ALLOW_LIST;\n\n    /**\n     * Constructs a new NoAllowListError.\n     *\n     * @param {TokenId.Type} tokenId - The ID of the token.\n     */\n    constructor(public readonly tokenId: TokenId.Type) {\n        super(`Token ${tokenId} does not have allow list.`);\n    }\n}\n\n/**\n * Error type indicating that the token has no deny list.\n */\nexport class NoDenyListError extends TokenError {\n    public readonly code = TokenErrorCode.NO_DENY_LIST;\n\n    /**\n     * Constructs a new NoDenyListError.\n     *\n     * @param {TokenId.Type} tokenId - The ID of the token.\n     */\n    constructor(public readonly tokenId: TokenId.Type) {\n        super(`Token ${tokenId} does not have deny list.`);\n    }\n}\n\n/**\n * Error type indicating insufficient supply for the burning.\n */\nexport class InsufficientSupplyError extends TokenError {\n    public readonly code = TokenErrorCode.INSUFFICIENT_SUPPLY;\n\n    /**\n     * Constructs a new InsufficientSupplyError.\n     *\n     * @param {AccountAddress.Type} sender - The account address of the sender.\n     * @param {TokenAmount.Type} requiredAmount - The amount of tokens required for the burn.\n     */\n    constructor(\n        public readonly sender: AccountAddress.Type,\n        public readonly requiredAmount: TokenAmount.Type\n    ) {\n        super(`Insufficient supply: Sender ${sender} requires at least ${requiredAmount} tokens for the burn.`);\n    }\n}\n\n/**\n * Class representing a token.\n */\nclass Token {\n    /** The parsed module state of the token. */\n    private _info: TokenInfo;\n    private _moduleState: TokenModuleState;\n\n    /**\n     * Constructs a new Token.\n     * @param {ConcordiumGRPCClient} grpc - The gRPC client for interacting with the Concordium network.\n     * @param {TokenInfo} info - Information about the token.\n     */\n    public constructor(\n        public readonly grpc: ConcordiumGRPCClient,\n        info: TokenInfo\n    ) {\n        this._info = info;\n        this._moduleState = Cbor.decode(info.state.moduleState, 'TokenModuleState');\n    }\n\n    public get info(): TokenInfo {\n        return this._info;\n    }\n    public get moduleState(): TokenModuleState {\n        return this._moduleState;\n    }\n\n    /**\n     * Mutates this instance with fresh info and keeps fields in sync.\n     * Returns `this` for ergonomic chaining / capturing a reference if desired.\n     */\n    public async update(): Promise<this> {\n        const next = await this.grpc.getTokenInfo(this._info.id);\n        this._info = next;\n        this._moduleState = Cbor.decode(next.state.moduleState, 'TokenModuleState');\n        return this;\n    }\n}\n\nexport type Type = Token;\n\n/**\n * Creates a Token instance from a token ID.\n * @param {ConcordiumGRPCClient} grpc - The gRPC client for interacting with the Concordium network.\n * @param {TokenId.Type} tokenId - The ID of the token.\n * @returns {Promise<Token>} A promise that resolves to a Token instance.\n */\nexport async function fromId(grpc: ConcordiumGRPCClient, tokenId: TokenId.Type): Promise<Token> {\n    const info = await grpc.getTokenInfo(tokenId);\n    return new Token(grpc, info);\n}\n\n/**\n * Creates a Token instance from token information.\n * @param {ConcordiumGRPCClient} grpc - The gRPC client for interacting with the Concordium network.\n * @param {TokenInfo} tokenInfo - Information about the token.\n * @returns {Token} A Token instance.\n */\nexport function fromInfo(grpc: ConcordiumGRPCClient, tokenInfo: TokenInfo): Token {\n    return new Token(grpc, tokenInfo);\n}\n\n/**\n * Validates if the given token amount is compatible with the token.\n *\n * @param {Token} token - The token to validate against.\n * @param {TokenAmount.Type} amount - The amount to validate.\n\n * @returns {true} If the amount is valid within the context of the token.\n * @throws {InvalidTokenAmountError} If the token amount is not compatible with the token.\n */\nexport function validateAmount(token: Token, amount: TokenAmount.Type): true {\n    if (amount.decimals === token.info.state.decimals) {\n        return true;\n    }\n    throw new InvalidTokenAmountError(token.info.state.decimals, amount);\n}\n\n/**\n * Scales a token amount with fewer decimals to the token's decimal representation.\n *\n * @param {Token} token - The token to scale the amount for.\n * @param {TokenAmount.Type} amount - The amount to scale.\n * @returns {TokenAmount.Type} The scaled token amount.\n * @throws {InvalidTokenAmountError} If the token amount is not compatible with the token.\n */\nexport function scaleAmount(token: Token, amount: TokenAmount.Type): TokenAmount.Type {\n    if (amount.decimals === token.info.state.decimals) {\n        return amount;\n    }\n    if (amount.decimals > token.info.state.decimals) {\n        throw new InvalidTokenAmountError(token.info.state.decimals, amount);\n    }\n\n    return TokenAmount.create(\n        amount.value * 10n ** BigInt(token.info.state.decimals - amount.decimals),\n        token.info.state.decimals\n    );\n}\n\n/**\n * Initiates a transaction for a given token.\n *\n * This function creates and sends a transaction of type `TokenUpdate` for the specified token.\n *\n * @param {Token} token - The token for which the transaction is being performed.\n * @param {AccountAddress.Type} sender - The account address initiating the transaction.\n * @param {TokenUpdatePayload} payload - The transaction payload.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n *\n * @returns {Promise<TransactionHash.Type>} A promise that resolves to the transaction hash.\n */\nexport async function sendRaw(\n    token: Token,\n    sender: AccountAddress.Type,\n    payload: TokenUpdatePayload,\n    signer: AccountSigner,\n    { expiry = TransactionExpiry.futureMinutes(5), nonce }: TokenUpdateMetadata = {}\n): Promise<TransactionHash.Type> {\n    const { nonce: nextNonce } = nonce ? { nonce } : await token.grpc.getNextAccountNonce(sender);\n    const header: AccountTransactionHeader = {\n        expiry,\n        nonce: nextNonce,\n        sender,\n    };\n    const transaction: AccountTransaction = {\n        type: AccountTransactionType.TokenUpdate,\n        payload,\n        header,\n    };\n    const signature = await signTransaction(transaction, signer);\n    return token.grpc.sendAccountTransaction(transaction, signature);\n}\n\n/**\n * The response type for the `balanceOf` function.\n */\nexport type BalanceOfResponse = TokenAmount.Type | undefined;\n\n/**\n * Retrieves the balance of a token for a given account.\n *\n * @param {Token} token - The token to check the balance of.\n * @param {AccountInfo} accountInfo - The account to check the balance for.\n *\n * @returns {BalanceOfResponse} The balance of the token for the account.\n */\nexport function balanceOf(token: Token, accountInfo: AccountInfo): BalanceOfResponse;\n/**\n * Retrieves the balance of a token for a given account.\n *\n * @param {Token} token - The token to check the balance of.\n * @param {AccountAddress.Type} accountAddress - The account to check the balance for.\n *\n * @returns {Promise<BalanceOfResponse>} The balance of the token for the account.\n */\nexport async function balanceOf(token: Token, accountAddress: AccountAddress.Type): Promise<BalanceOfResponse>;\n/**\n * Retrieves the balance of a token for a given account.\n *\n * @param {Token} token - The token to check the balance of.\n * @param {AccountInfo | AccountAddress.Type} account - The account to check the balance for.\n *\n * @returns {Promise<BalanceOfResponse> | BalanceOfResponse} The balance of the token for the account.\n */\nexport function balanceOf(\n    token: Token,\n    account: AccountInfo | AccountAddress.Type\n): Promise<BalanceOfResponse> | BalanceOfResponse {\n    if (!AccountAddress.instanceOf(account)) {\n        return account.accountTokens.find((t) => t.id.value === token.info.id.value)?.state.balance;\n    }\n\n    return token.grpc.getAccountInfo(account).then((accInfo) => balanceOf(token, accInfo));\n}\n\n/**\n * Validates a token transfer.\n *\n * @param {Token} token - The token to transfer.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {TokenTransfer | TokenTransfer[]} payload - The transfer payload.\n *\n * @returns {Promise<true>} A promise that resolves to true if the transfer is valid.\n * @throws {InvalidTokenAmountError} If any token amount is not compatible with the token.\n * @throws {InsufficientFundsError} If the sender does not have enough tokens.\n * @throws {NotAllowedError} If the sender or receiver is not allowed to send/receive tokens.\n * @throws {PausedError} If the token is paused.\n */\nexport async function validateTransfer(\n    token: Token,\n    sender: AccountAddress.Type,\n    payload: TokenTransfer | TokenTransfer[]\n): Promise<true> {\n    await token.update();\n    token.moduleState.paused && bail(new PausedError(token.info.id));\n\n    const payloads = [payload].flat();\n    // Validate all amounts\n    payloads.forEach((p) => validateAmount(token, p.amount));\n\n    const { decimals } = token.info.state;\n    const senderInfo = await token.grpc.getAccountInfo(sender);\n\n    // Check the sender balance.\n    const senderBalance = balanceOf(token, senderInfo) ?? TokenAmount.zero(decimals); // We fall back to zero, as the `token` has already been validated at this point.\n    const payloadTotal = payloads.reduce(\n        (acc, { amount }) => acc.add(TokenAmount.toDecimal(amount)),\n        TokenAmount.toDecimal(TokenAmount.zero(decimals))\n    );\n    if (TokenAmount.toDecimal(senderBalance).lt(payloadTotal)) {\n        throw new InsufficientFundsError(sender, TokenAmount.fromDecimal(payloadTotal, decimals));\n    }\n\n    if (!token.moduleState.allowList && !token.moduleState.denyList) {\n        // If the token neither has a deny list nor allow list, we can skip the check.\n        return true;\n    }\n\n    // Check that sender and all receivers are NOT on the deny list (if present), or that they are included in the allow list (if present).\n    const receiverInfos = await Promise.all(payloads.map((p) => token.grpc.getAccountInfo(p.recipient.address)));\n    const accounts = [senderInfo, ...receiverInfos];\n    accounts.forEach((r) => {\n        const accountToken = r.accountTokens.find((t) => t.id.value === token.info.id.value)?.state;\n        const accountModuleState =\n            accountToken?.moduleState === undefined\n                ? undefined\n                : Cbor.decode(accountToken.moduleState, 'TokenModuleAccountState');\n\n        if (token.moduleState.denyList && accountModuleState?.denyList) throw new NotAllowedError(r.accountAddress);\n        if (token.moduleState.allowList && !accountModuleState?.allowList) throw new NotAllowedError(r.accountAddress);\n    });\n\n    return true;\n}\n\n/**\n * Validates a token mint.\n *\n * @param {Token} token - The token to mint.\n * @param {TokenAmount.Type | TokenAmount.Type[]} amounts - The amounts of tokens to mint.\n *\n * @returns {Promise<true>} A promise that resolves to true if the minting is valid.\n * @throws {InvalidTokenAmountError} If any token amount is not compatible with the token.\n * @throws {PausedError} If the token is paused.\n * @throws {NotMintableError} If the the token if not mintable.\n */\nexport async function validateMint(token: Token, amounts: TokenAmount.Type | TokenAmount.Type[]): Promise<true> {\n    const amountsList = [amounts].flat();\n    await token.update();\n    token.moduleState.paused && bail(new PausedError(token.info.id));\n    !token.moduleState.mintable && bail(new NotMintableError(token.info.id));\n    amountsList.forEach((amount) => validateAmount(token, amount));\n    return true;\n}\n\n/**\n * Validates a token burn.\n *\n * @param {Token} token - The token to burn.\n * @param {TokenAmount.Type | TokenAmount.Type[]} amounts - The amounts of tokens to burn.\n *\n * @returns {Promise<true>} A promise that resolves to true if the burning is valid.\n * @throws {InvalidTokenAmountError} If any token amount is not compatible with the token.\n * @throws {PausedError} If the token is paused.\n * @throws {NotBurnableError} If the the token if not burnable.\n * @throws {InsufficientSupplyError} If the sender has insufficent amount of tokens for the burn.\n */\nexport async function validateBurn(\n    token: Token,\n    amounts: TokenAmount.Type | TokenAmount.Type[],\n    sender: AccountAddress.Type | AccountInfo\n): Promise<true> {\n    const amountsList = [amounts].flat();\n    await token.update();\n    token.moduleState.paused && bail(new PausedError(token.info.id));\n    !token.moduleState.burnable && bail(new NotBurnableError(token.info.id));\n    amountsList.forEach((amount) => validateAmount(token, amount));\n\n    const { decimals } = token.info.state;\n\n    let senderBalance: BalanceOfResponse;\n    let senderAdderss: AccountAddress.Type;\n\n    if (AccountAddress.instanceOf(sender)) {\n        senderAdderss = sender;\n        senderBalance = await balanceOf(token, sender);\n    } else {\n        senderAdderss = sender.accountAddress;\n        senderBalance = balanceOf(token, sender);\n    }\n\n    const burnableAmount = senderBalance ?? TokenAmount.zero(decimals);\n    const payloadTotal = amountsList.reduce(\n        (acc, amount) => acc.add(TokenAmount.toDecimal(amount)),\n        TokenAmount.toDecimal(TokenAmount.zero(decimals))\n    );\n    if (TokenAmount.toDecimal(burnableAmount).lt(payloadTotal)) {\n        throw new InsufficientSupplyError(senderAdderss, TokenAmount.fromDecimal(payloadTotal, decimals));\n    }\n    return true;\n}\n\n/**\n * Validates a token allow list update.\n *\n * @param {Token} token - The token that's allow list is to be updated.\n *\n * @returns {Promise<true>} A promise that resolves to true if the token's allow list can be updated.\n * @throws {NoAllowListError} If the token does not have an allow list.\n */\nexport async function validateAllowListUpdate(token: Token): Promise<true> {\n    await token.update();\n    !token.moduleState.allowList && bail(new NoAllowListError(token.info.id));\n    return true;\n}\n\n/**\n * Validates a token deny list update.\n *\n * @param {Token} token - The token that's deny list is to be updated.\n *\n * @returns {Promise<true>} A promise that resolves to true if the token's deny list can be updated.\n * @throws {NoDenyListError} If the token does not have a deny list.\n */\nexport async function validateDenyListUpdate(token: Token): Promise<true> {\n    await token.update();\n    !token.moduleState.denyList && bail(new NoDenyListError(token.info.id));\n    return true;\n}\n\nexport type TokenUpdateMetadata = {\n    /**\n     * The expiry time for the transaction.\n     */\n    expiry?: TransactionExpiry.Type;\n    /**\n     * The the sender account \"nonce\" for to use for the transaction. If not specified, the\n     * nonce will be queried from the node used for the transaction.\n     */\n    nonce?: SequenceNumber.Type;\n};\n\ntype TransferOtions = {\n    /** Whether to automatically scale a token amount to the correct number of decimals as the token */\n    autoScale?: boolean;\n    /** Whether to validate the operation client side against the latest finalized state (necessary state will be fetched) before submitting it */\n    validate?: boolean;\n};\n\nexport type TransferInput = Omit<TokenTransfer, 'recipient'> & {\n    /** The recipient of the transfer. */\n    recipient: AccountAddress.Type;\n};\n\n/**\n * Transfers tokens from the sender to the specified recipients.\n *\n * @param {Token} token - The token to transfer.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {TransferInput | TransferInput[]} payload - The transfer payload.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n * @param {TransferOtions} [opts={ autoScale: true, validate: false }] - Options for the transfer.\n *\n * @returns {Promise<TransactionHash.Type>} A promise that resolves to the transaction hash.\n * @throws {InvalidTokenAmountError} If `opts.validate` and any token amount is not compatible with the token.\n * @throws {InsufficientFundsError} If `opts.validate` and the sender does not have enough tokens.\n * @throws {NotAllowedError} If `opts.validate` and a sender or receiver is not allowed to send/receive tokens.\n * @throws {PausedError} If `opts.validate` and the token is paused.\n */\nexport async function transfer(\n    token: Token,\n    sender: AccountAddress.Type,\n    payload: TransferInput | TransferInput[],\n    signer: AccountSigner,\n    metadata?: TokenUpdateMetadata,\n    { autoScale = true, validate = false }: TransferOtions = {}\n): Promise<TransactionHash.Type> {\n    let transfers: TokenTransfer[] = [payload].flat().map((p) => ({\n        ...p,\n        recipient: CborAccountAddress.fromAccountAddress(p.recipient),\n        amount: autoScale ? scaleAmount(token, p.amount) : p.amount,\n    }));\n\n    if (validate) {\n        await validateTransfer(token, sender, transfers);\n    }\n\n    const ops: TokenTransferOperation[] = transfers.map((p) => ({ [TokenOperationType.Transfer]: p }));\n    return sendOperations(token, sender, ops, signer, metadata);\n}\n\ntype SupplyUpdateOptions = {\n    /** Whether to automatically scale a token amount to the correct number of decimals as the token */\n    autoScale?: boolean;\n    /** Whether to validate the operation client side against the latest finalized state (necessary state will be fetched) before submitting it */\n    validate?: boolean;\n};\n\n/**\n * Mints a specified amount of tokens.\n *\n * @param {Token} token - The token to mint.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {TokenAmount.Type | TokenAmount.Type[]} amounts - The amount(s) of tokens to mint.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n * @param {SupplyUpdateOptions} [opts={ autoScale: true, validate: false }] - Options for supply update operations.\n *\n * @returns A promise that resolves to the transaction hash.\n * @throws {InvalidTokenAmountError} If `opts.validate` and the token amount is not compatible with the token.\n * @throws {PausedError} If `opts.validate` and the token is paused.\n * @throws {NotMintableError} If `opts.validate` and the token is not mintable.\n */\nexport async function mint(\n    token: Token,\n    sender: AccountAddress.Type,\n    amounts: TokenAmount.Type | TokenAmount.Type[],\n    signer: AccountSigner,\n    metadata?: TokenUpdateMetadata,\n    { autoScale = true, validate = false }: SupplyUpdateOptions = {}\n): Promise<TransactionHash.Type> {\n    let amountsList = [amounts].flat();\n    if (autoScale) {\n        amountsList = amountsList.map((amount) => scaleAmount(token, amount));\n    }\n\n    if (validate) {\n        await validateMint(token, amountsList);\n    }\n\n    const ops: TokenMintOperation[] = amountsList.map((amount) => ({\n        [TokenOperationType.Mint]: { amount },\n    }));\n    return sendOperations(token, sender, ops, signer, metadata);\n}\n\n/**\n * Burns a specified amount of tokens.\n *\n * @param {Token} token - The token to burn.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {TokenAmount.Type | TokenAmount.Type[]} amounts - The amount(s) of tokens to burn.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n * @param {SupplyUpdateOptions} [opts={ autoScale: true, validate: false }] - Options for supply update operations.\n *\n * @returns A promise that resolves to the transaction hash.\n * @throws {InvalidTokenAmountError} If `opts.validate` and the token amount is not compatible with the token.\n * @throws {PausedError} If `opts.validate` and the token is paused.\n * @throws {NotBurnableError} If `opts.validate` and the token is not burnable.\n * @throws {InsufficientSupplyError} If `opts.validate` and the sender has insufficent amount of tokens for the burn.\n */\nexport async function burn(\n    token: Token,\n    sender: AccountAddress.Type,\n    amounts: TokenAmount.Type | TokenAmount.Type[],\n    signer: AccountSigner,\n    metadata?: TokenUpdateMetadata,\n    { autoScale = true, validate = false }: SupplyUpdateOptions = {}\n): Promise<TransactionHash.Type> {\n    let amountsList = [amounts].flat();\n    if (autoScale) {\n        amountsList = amountsList.map((amount) => scaleAmount(token, amount));\n    }\n\n    if (validate) {\n        await validateBurn(token, amountsList, sender);\n    }\n\n    const ops: TokenBurnOperation[] = amountsList.map((amount) => ({\n        [TokenOperationType.Burn]: { amount },\n    }));\n    return sendOperations(token, sender, ops, signer, metadata);\n}\n\ntype UpdateListOptions = {\n    /** Whether to validate the operation client side against the latest finalized state (necessary state will be fetched) before submitting it */\n    validate?: boolean;\n};\n\n/**\n * Adds an account to the allow list of a token.\n *\n * @param {Token} token - The token for which to add the list entry.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {AccountAddress.Type | AccountAddress.Type[]} targets - The account address(es) to be added to the list.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n * @param {UpdateListOptions} [opts={ validate: false }] - Options for updating the allow/deny list.\n *\n * @returns A promise that resolves to the transaction hash.\n * @throws {NoAllowListError} If `opts.validate` and the token does not have allow list.\n */\nexport async function addAllowList(\n    token: Token,\n    sender: AccountAddress.Type,\n    targets: AccountAddress.Type | AccountAddress.Type[],\n    signer: AccountSigner,\n    metadata?: TokenUpdateMetadata,\n    { validate = false }: UpdateListOptions = {}\n): Promise<TransactionHash.Type> {\n    if (validate) {\n        await validateAllowListUpdate(token);\n    }\n\n    const ops: TokenAddAllowListOperation[] = [targets].flat().map((target) => ({\n        [TokenOperationType.AddAllowList]: { target: CborAccountAddress.fromAccountAddress(target) },\n    }));\n    return sendOperations(token, sender, ops, signer, metadata);\n}\n\n/**\n * Removes an account from the allow list of a token.\n *\n * @param {Token} token - The token for which to add the list entry.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {AccountAddress.Type | AccountAddress.Type[]} targets - The account address(es) to be added to the list.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n * @param {UpdateListOptions} [opts={ validate: false }] - Options for updating the allow/deny list.\n *\n * @returns A promise that resolves to the transaction hash.\n * @throws {NoAllowListError} If `opts.validate` and the token does not have allow list.\n */\nexport async function removeAllowList(\n    token: Token,\n    sender: AccountAddress.Type,\n    targets: AccountAddress.Type | AccountAddress.Type[],\n    signer: AccountSigner,\n    metadata?: TokenUpdateMetadata,\n    { validate = false }: UpdateListOptions = {}\n): Promise<TransactionHash.Type> {\n    if (validate) {\n        await validateAllowListUpdate(token);\n    }\n\n    const ops: TokenRemoveAllowListOperation[] = [targets].flat().map((target) => ({\n        [TokenOperationType.RemoveAllowList]: { target: CborAccountAddress.fromAccountAddress(target) },\n    }));\n    return sendOperations(token, sender, ops, signer, metadata);\n}\n\n/**\n * Adds an account to the deny list of a token.\n *\n * @param {Token} token - The token for which to add the list entry.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {AccountAddress.Type | AccountAddress.Type[]} targets - The account address(es) to be added to the list.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n * @param {UpdateListOptions} [opts={ validate: false }] - Options for updating the allow/deny list.\n *\n * @returns A promise that resolves to the transaction hash.\n * @throws {NoDenyListError} If `opts.validate` and the token does not have deny list.\n */\nexport async function addDenyList(\n    token: Token,\n    sender: AccountAddress.Type,\n    targets: AccountAddress.Type | AccountAddress.Type[],\n    signer: AccountSigner,\n    metadata?: TokenUpdateMetadata,\n    { validate = false }: UpdateListOptions = {}\n): Promise<TransactionHash.Type> {\n    if (validate) {\n        await validateDenyListUpdate(token);\n    }\n\n    const ops: TokenAddDenyListOperation[] = [targets].flat().map((target) => ({\n        [TokenOperationType.AddDenyList]: { target: CborAccountAddress.fromAccountAddress(target) },\n    }));\n    return sendOperations(token, sender, ops, signer, metadata);\n}\n\n/**\n * Removes an account from the deny list of a token.\n *\n * @param {Token} token - The token for which to add the list entry.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {AccountAddress.Type | AccountAddress.Type[]} targets - The account address(es) to be added to the list.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n * @param {UpdateListOptions} [opts={ validate: false }] - Options for updating the allow/deny list.\n *\n * @returns A promise that resolves to the transaction hash.\n * @throws {NoDenyListError} If `opts.validate` and the token does not have deny list.\n */\nexport async function removeDenyList(\n    token: Token,\n    sender: AccountAddress.Type,\n    targets: AccountAddress.Type | AccountAddress.Type[],\n    signer: AccountSigner,\n    metadata?: TokenUpdateMetadata,\n    { validate = false }: UpdateListOptions = {}\n): Promise<TransactionHash.Type> {\n    if (validate) {\n        await validateDenyListUpdate(token);\n    }\n\n    const ops: TokenRemoveDenyListOperation[] = [targets].flat().map((target) => ({\n        [TokenOperationType.RemoveDenyList]: { target: CborAccountAddress.fromAccountAddress(target) },\n    }));\n    return sendOperations(token, sender, ops, signer, metadata);\n}\n\n/**\n * Suspends execution of any operation involving balance changes for the token.\n *\n * @param {Token} token - The token to pause/unpause.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n *\n * @returns A promise that resolves to the transaction hash.\n */\nexport async function pause(\n    token: Token,\n    sender: AccountAddress.Type,\n    signer: AccountSigner,\n    metadata?: TokenUpdateMetadata\n): Promise<TransactionHash.Type> {\n    const operation: TokenPauseOperation = { [TokenOperationType.Pause]: {} };\n    return sendOperations(token, sender, [operation], signer, metadata);\n}\n\n/**\n * Resumes execution of any operation involving balance changes for the token.\n *\n * @param {Token} token - The token to pause/unpause.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n *\n * @returns A promise that resolves to the transaction hash.\n */\nexport async function unpause(\n    token: Token,\n    sender: AccountAddress.Type,\n    signer: AccountSigner,\n    metadata?: TokenUpdateMetadata\n): Promise<TransactionHash.Type> {\n    const operation: TokenUnpauseOperation = { [TokenOperationType.Unpause]: {} };\n    return sendOperations(token, sender, [operation], signer, metadata);\n}\n\n/**\n * Executes a batch of operations on a token.\n *\n * @param {Token} token - The token on which to perform the operations.\n * @param {AccountAddress.Type} sender - The account address of the sender.\n * @param {TokenOperation[]} operations - An array of governance operations to execute.\n * @param {AccountSigner} signer - The signer responsible for signing the transaction.\n * @param {TokenUpdateMetadata} [metadata={ expiry: TransactionExpiry.futureMinutes(5) }] - The metadata for the token update.\n *\n * @returns A promise that resolves to the transaction hash.\n */\nexport async function sendOperations(\n    token: Token,\n    sender: AccountAddress.Type,\n    operations: TokenOperation[],\n    signer: AccountSigner,\n    metadata?: TokenUpdateMetadata\n): Promise<TransactionHash.Type> {\n    const payload = createTokenUpdatePayload(token.info.id, operations);\n    return sendRaw(token, sender, payload, signer, metadata);\n}\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","import {\n    Authorizations,\n    AuthorizationsV1,\n    BlockInfo,\n    BlockInfoV0,\n    BlockInfoV1,\n    ChainParameters,\n    ChainParametersV0,\n    ChainParametersV1,\n    ChainParametersV2,\n    ConsensusStatus,\n    ConsensusStatusV0,\n    ConsensusStatusV1,\n    ElectionInfo,\n    ElectionInfoV0,\n    ElectionInfoV1,\n    InstanceInfo,\n    InstanceInfoV0,\n    InstanceInfoV1,\n    RewardStatus,\n    RewardStatusV1,\n} from './types.js';\n\n/**\n * Whether {@link Authorizations} parameter given is of type {@link AuthorizationsV1}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isAuthorizationsV1 = (as: Authorizations): as is AuthorizationsV1 => as.version === 1;\n\n/**\n * Whether {@link ChainParameters} parameter given is of type {@link ChainParametersV0}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isChainParametersV0 = (cp: ChainParameters): cp is ChainParametersV0 => cp.version === 0;\n\n/**\n * Whether {@link ChainParameters} parameter given is of type {@link ChainParametersV1}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isChainParametersV1 = (cp: ChainParameters): cp is ChainParametersV1 => cp.version === 1;\n\n/**\n * Whether {@link ChainParameters} parameter given is of type {@link ChainParametersV2}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isChainParametersV2 = (cp: ChainParameters): cp is ChainParametersV2 => cp.version === 2;\n\n/**\n * Whether {@link BlockInfo} parameter given is of type {@link BlockInfoV0}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isBlockInfoV0 = (bi: BlockInfo): bi is BlockInfoV0 => bi.version === 0;\n\n/**\n * Whether {@link BlockInfo} parameter given is of type {@link BlockInfoV1}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isBlockInfoV1 = (bi: BlockInfo): bi is BlockInfoV1 => bi.version === 1;\n\n/**\n * Whether {@link ConensusStatus} parameter given is of type {@link ConsensusStatusV0}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isConsensusStatusV0 = (cs: ConsensusStatus): cs is ConsensusStatusV0 => cs.version === 0;\n\n/**\n * Whether {@link ConensusStatus} parameter given is of type {@link ConsensusStatusV1}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isConsensusStatusV1 = (cs: ConsensusStatus): cs is ConsensusStatusV1 => cs.version === 1;\n\n/**\n * Whether {@link ElectionInfo} parameter given is of type {@link ElectionInfoV0}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isElectionInfoV0 = (ei: ElectionInfo): ei is ElectionInfoV0 => ei.version === 0;\n\n/**\n * Whether {@link ElectionInfo} parameter given is of type {@link ElectionInfoV1}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isElectionInfoV1 = (ei: ElectionInfo): ei is ElectionInfoV1 => ei.version === 1;\n\n/**\n * Whether {@link InstanceInfo} parameter given is of type {@link InstanceInfoV1}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isInstanceInfoV1 = (info: InstanceInfo): info is InstanceInfoV1 => info.version === 1;\n\n/**\n * Whether {@link InstanceInfo} parameter given is of type {@link InstanceInfoV0}\n *\n * @deprecated check the `version` member instead.\n */\nexport const isInstanceInfoV0 = (info: InstanceInfo): info is InstanceInfoV0 =>\n    info.version === undefined || info.version === 0;\n\n/**\n * Whether {@link RewardStatus} parameter given is of type {@link RewardStatusV1}\n *\n * @deprecated check the `version` member instead.\n */\nexport function isRewardStatusV1(rs: RewardStatus): rs is RewardStatusV1 {\n    return rs.version === 1;\n}\n","// Functionality revolving around Web3 ID credentials.\nexport * from '../web3-id/index.js';\n","try {\n  var util = require('util');\n  /* istanbul ignore next */\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  /* istanbul ignore next */\n  module.exports = require('./inherits_browser.js');\n}\n","export {\n    Type,\n    JSON,\n    fromJSON,\n    instanceOf,\n    create,\n    toCBOR,\n    fromCBOR,\n    fromString,\n    registerCBOREncoder,\n} from '../../plt/TokenMetadataUrl.js';\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nconst P = 2n ** 255n - 19n; // ed25519 is twisted edwards curve\nconst N = 2n ** 252n + 27742317777372353535851937790883648493n; // curve's (group) order\nconst Gx = 0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51an; // base point x\nconst Gy = 0x6666666666666666666666666666666666666666666666666666666666666658n; // base point y\nconst CURVE = {\n    a: -1n,\n    d: 37095705934669439343138083508754565189542113879843219016388785533085940283555n,\n    p: P, n: N, h: 8, Gx, Gy // field prime, curve (group) order, cofactor\n};\nconst err = (m = '') => { throw new Error(m); }; // error helper, messes-up stack trace\nconst str = (s) => typeof s === 'string'; // is string\nconst au8 = (a, l) => // is Uint8Array (of specific length)\n !(a instanceof Uint8Array) || (typeof l === 'number' && l > 0 && a.length !== l) ?\n    err('Uint8Array expected') : a;\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst toU8 = (a, len) => au8(str(a) ? h2b(a) : u8n(a), len); // norm(hex/u8a) to u8a\nconst mod = (a, b = P) => { let r = a % b; return r >= 0n ? r : b + r; }; // mod division\nconst isPoint = (p) => (p instanceof Point ? p : err('Point expected')); // is xyzt point\nlet Gpows = undefined; // precomputes for base point G\nclass Point {\n    constructor(ex, ey, ez, et) {\n        this.ex = ex;\n        this.ey = ey;\n        this.ez = ez;\n        this.et = et;\n    }\n    static fromAffine(p) { return new Point(p.x, p.y, 1n, mod(p.x * p.y)); }\n    static fromHex(hex, strict = true) {\n        const { d } = CURVE;\n        hex = toU8(hex, 32);\n        const normed = hex.slice(); // copy the array to not mess it up\n        normed[31] = hex[31] & ~0x80; // adjust first LE byte = last BE byte\n        const y = b2n_LE(normed); // decode as little-endian, convert to num\n        if (y === 0n) { // y=0 is valid, proceed\n        }\n        else {\n            if (strict && !(0n < y && y < P))\n                err('bad y coord 1'); // strict=true [1..P-1]\n            if (!strict && !(0n < y && y < 2n ** 256n))\n                err('bad y coord 2'); // strict=false [1..2^256-1]\n        }\n        const y2 = mod(y * y); // y²\n        const u = mod(y2 - 1n); // u=y²-1\n        const v = mod(d * y2 + 1n); // v=dy²+1\n        let { isValid, value: x } = uvRatio(u, v); // (uv³)(uv⁷)^(p-5)/8; square root\n        if (!isValid)\n            err('bad y coordinate 3'); // not square root: bad point\n        const isXOdd = (x & 1n) === 1n; // adjust sign of x coordinate\n        const isHeadOdd = (hex[31] & 0x80) !== 0;\n        if (isHeadOdd !== isXOdd)\n            x = mod(-x);\n        return new Point(x, y, 1n, mod(x * y)); // Z=1, T=xy\n    }\n    get x() { return this.toAffine().x; } // .x, .y will call expensive toAffine.\n    get y() { return this.toAffine().y; } // Should be used with care.\n    equals(other) {\n        const { ex: X1, ey: Y1, ez: Z1 } = this;\n        const { ex: X2, ey: Y2, ez: Z2 } = isPoint(other); // isPoint() checks class equality\n        const X1Z2 = mod(X1 * Z2), X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2), Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() { return this.equals(I); }\n    negate() {\n        return new Point(mod(-this.ex), this.ey, this.ez, mod(-this.et));\n    }\n    double() {\n        const { ex: X1, ey: Y1, ez: Z1 } = this; // Cost: 4M + 4S + 1*a + 6add + 1*2\n        const { a } = CURVE; // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new Point(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this; // Cost: 8M + 1*k + 8add + 1*2.\n        const { ex: X2, ey: Y2, ez: Z2, et: T2 } = isPoint(other); // doesn't check if other on-curve\n        const { a, d } = CURVE; // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3\n        const A = mod(X1 * X2);\n        const B = mod(Y1 * Y2);\n        const C = mod(T1 * d * T2);\n        const D = mod(Z1 * Z2);\n        const E = mod((X1 + Y1) * (X2 + Y2) - A - B);\n        const F = mod(D - C);\n        const G = mod(D + C);\n        const H = mod(B - a * A);\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new Point(X3, Y3, Z3, T3);\n    }\n    mul(n, safe = true) {\n        if (n === 0n)\n            return safe === true ? err('cannot multiply by 0') : I;\n        if (!(typeof n === 'bigint' && 0n < n && n < N))\n            err('invalid scalar, must be < L');\n        if (!safe && this.is0() || n === 1n)\n            return this; // safe=true bans 0. safe=false allows 0.\n        if (this.equals(G))\n            return wNAF(n).p; // use wNAF precomputes for base points\n        let p = I, f = G; // init result point & fake point\n        for (let d = this; n > 0n; d = d.double(), n >>= 1n) { // double-and-add ladder\n            if (n & 1n)\n                p = p.add(d); // if bit is present, add to point\n            else if (safe)\n                f = f.add(d); // if not, add to fake for timing safety\n        }\n        return p;\n    }\n    multiply(scalar) { return this.mul(scalar); } // Aliases for compatibilty\n    clearCofactor() { return this.mul(BigInt(CURVE.h), false); } // multiply by cofactor\n    isSmallOrder() { return this.clearCofactor().is0(); } // check if P is small order\n    isTorsionFree() {\n        let p = this.mul(N / 2n, false).double(); // ensures the point is not \"bad\".\n        if (N % 2n)\n            p = p.add(this); // P^(N+1)             // P*N == (P*(N/2))*2+P\n        return p.is0();\n    }\n    toAffine() {\n        const { ex: x, ey: y, ez: z } = this; // (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy)\n        if (this.is0())\n            return { x: 0n, y: 0n }; // fast-path for zero point\n        const iz = invert(z); // z^-1: invert z\n        if (mod(z * iz) !== 1n)\n            err('invalid inverse'); // (z * z^-1) must be 1, otherwise bad math\n        return { x: mod(x * iz), y: mod(y * iz) }; // x = x*z^-1; y = y*z^-1\n    }\n    toRawBytes() {\n        const { x, y } = this.toAffine(); // convert to affine 2d point\n        const b = n2b_32LE(y); // encode number to 32 bytes\n        b[31] |= x & 1n ? 0x80 : 0; // store sign in first LE byte\n        return b;\n    }\n    toHex() { return b2h(this.toRawBytes()); } // encode to hex string\n}\nPoint.BASE = new Point(Gx, Gy, 1n, mod(Gx * Gy)); // Generator / Base point\nPoint.ZERO = new Point(0n, 1n, 1n, 0n); // Identity / Zero point\nconst { BASE: G, ZERO: I } = Point; // Generator, identity points\nconst padh = (num, pad) => num.toString(16).padStart(pad, '0');\nconst b2h = (b) => Array.from(b).map(e => padh(e, 2)).join(''); // bytes to hex\nconst h2b = (hex) => {\n    const l = hex.length; // error if not string,\n    if (!str(hex) || l % 2)\n        err('hex invalid 1'); // or has odd length like 3, 5.\n    const arr = u8n(l / 2); // create result array\n    for (let i = 0; i < arr.length; i++) {\n        const j = i * 2;\n        const h = hex.slice(j, j + 2); // hexByte. slice is faster than substr\n        const b = Number.parseInt(h, 16); // byte, created from string part\n        if (Number.isNaN(b) || b < 0)\n            err('hex invalid 2'); // byte must be valid 0 <= byte < 256\n        arr[i] = b;\n    }\n    return arr;\n};\nconst n2b_32LE = (num) => h2b(padh(num, 32 * 2)).reverse(); // number to bytes LE\nconst b2n_LE = (b) => BigInt('0x' + b2h(u8n(au8(b)).reverse())); // bytes LE to num\nconst concatB = (...arrs) => {\n    const r = u8n(arrs.reduce((sum, a) => sum + au8(a).length, 0)); // create u8a of summed length\n    let pad = 0; // walk through each array,\n    arrs.forEach(a => { r.set(a, pad); pad += a.length; }); // ensure they have proper type\n    return r;\n};\nconst invert = (num, md = P) => {\n    if (num === 0n || md <= 0n)\n        err('no inverse n=' + num + ' mod=' + md); // no neg exponent for now\n    let a = mod(num, md), b = md, x = 0n, y = 1n, u = 1n, v = 0n;\n    while (a !== 0n) { // uses euclidean gcd algorithm\n        const q = b / a, r = b % a; // not constant-time\n        const m = x - u * q, n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    return b === 1n ? mod(x, md) : err('no inverse'); // b is gcd at this point\n};\nconst pow2 = (x, power) => {\n    let r = x;\n    while (power-- > 0n) {\n        r *= r;\n        r %= P;\n    }\n    return r;\n};\nconst pow_2_252_3 = (x) => {\n    const x2 = (x * x) % P; // x^2,       bits 1\n    const b2 = (x2 * x) % P; // x^3,       bits 11\n    const b4 = (pow2(b2, 2n) * b2) % P; // x^(2^4-1), bits 1111\n    const b5 = (pow2(b4, 1n) * x) % P; // x^(2^5-1), bits 11111\n    const b10 = (pow2(b5, 5n) * b5) % P; // x^(2^10)\n    const b20 = (pow2(b10, 10n) * b10) % P; // x^(2^20)\n    const b40 = (pow2(b20, 20n) * b20) % P; // x^(2^40)\n    const b80 = (pow2(b40, 40n) * b40) % P; // x^(2^80)\n    const b160 = (pow2(b80, 80n) * b80) % P; // x^(2^160)\n    const b240 = (pow2(b160, 80n) * b80) % P; // x^(2^240)\n    const b250 = (pow2(b240, 10n) * b10) % P; // x^(2^250)\n    const pow_p_5_8 = (pow2(b250, 2n) * x) % P; // < To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n};\nconst RM1 = 19681161376707505956807079304988542015446066515923890162744021073123829784752n; // √-1\nconst uvRatio = (u, v) => {\n    const v3 = mod(v * v * v); // v³\n    const v7 = mod(v3 * v3 * v); // v⁷\n    const pow = pow_2_252_3(u * v7).pow_p_5_8; // (uv⁷)^(p-5)/8\n    let x = mod(u * v3 * pow); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * RM1); // Second root candidate; RM1 is √-1\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * RM1); // There is no valid root, vx² = -u√-1\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if ((mod(x) & 1n) === 1n)\n        x = mod(-x); // edIsNegative\n    return { isValid: useRoot1 || useRoot2, value: x };\n};\nconst modL_LE = (hash) => mod(b2n_LE(hash), N); // modulo L; but little-endian\nlet _shaS;\nconst sha512a = (...m) => etc.sha512Async(...m); // Async SHA512\nconst sha512s = (...m) => // Sync SHA512, not set by default\n typeof _shaS === 'function' ? _shaS(...m) : err('etc.sha512Sync not set');\nconst hash2extK = (hashed) => {\n    const head = hashed.slice(0, 32); // slice creates a copy, unlike subarray\n    head[0] &= 248; // Clamp bits: 0b1111_1000,\n    head[31] &= 127; // 0b0111_1111,\n    head[31] |= 64; // 0b0100_0000\n    const prefix = hashed.slice(32, 64); // private key \"prefix\"\n    const scalar = modL_LE(head); // modular division over curve order\n    const point = G.mul(scalar); // public key point\n    const pointBytes = point.toRawBytes(); // point serialized to Uint8Array\n    return { head, prefix, scalar, point, pointBytes };\n};\n// RFC8032 5.1.5; getPublicKey async, sync. Hash priv key and extract point.\nconst getExtendedPublicKeyAsync = (priv) => sha512a(toU8(priv, 32)).then(hash2extK);\nconst getExtendedPublicKey = (priv) => hash2extK(sha512s(toU8(priv, 32)));\nconst getPublicKeyAsync = (priv) => getExtendedPublicKeyAsync(priv).then(p => p.pointBytes);\nconst getPublicKey = (priv) => getExtendedPublicKey(priv).pointBytes;\nfunction hashFinish(asynchronous, res) {\n    if (asynchronous)\n        return sha512a(res.hashable).then(res.finish);\n    return res.finish(sha512s(res.hashable));\n}\nconst _sign = (e, rBytes, msg) => {\n    const { pointBytes: P, scalar: s } = e;\n    const r = modL_LE(rBytes); // r was created outside, reduce it modulo L\n    const R = G.mul(r).toRawBytes(); // R = [r]B\n    const hashable = concatB(R, P, msg); // dom2(F, C) || R || A || PH(M)\n    const finish = (hashed) => {\n        const S = mod(r + modL_LE(hashed) * s, N); // S = (r + k * s) mod L; 0 <= s < l\n        return au8(concatB(R, n2b_32LE(S)), 64); // 64-byte sig: 32b R.x + 32b LE(S)\n    };\n    return { hashable, finish };\n};\nconst signAsync = async (msg, privKey) => {\n    const m = toU8(msg); // RFC8032 5.1.6: sign msg with key async\n    const e = await getExtendedPublicKeyAsync(privKey); // pub,prfx\n    const rBytes = await sha512a(e.prefix, m); // r = SHA512(dom2(F, C) || prefix || PH(M))\n    return hashFinish(true, _sign(e, rBytes, m)); // gen R, k, S, then 64-byte signature\n};\nconst sign = (msg, privKey) => {\n    const m = toU8(msg); // RFC8032 5.1.6: sign msg with key sync\n    const e = getExtendedPublicKey(privKey); // pub,prfx\n    const rBytes = sha512s(e.prefix, m); // r = SHA512(dom2(F, C) || prefix || PH(M))\n    return hashFinish(false, _sign(e, rBytes, m)); // gen R, k, S, then 64-byte signature\n};\nconst _verify = (sig, msg, pub) => {\n    msg = toU8(msg); // Message hex str/Bytes\n    sig = toU8(sig, 64); // Signature hex str/Bytes, must be 64 bytes\n    const A = Point.fromHex(pub, false); // public key A decoded\n    const R = Point.fromHex(sig.slice(0, 32), false); // 0 <= R < 2^256: ZIP215 R can be >= P\n    const s = b2n_LE(sig.slice(32, 64)); // Decode second half as an integer S\n    const SB = G.mul(s, false); // in the range 0 <= s < L\n    const hashable = concatB(R.toRawBytes(), A.toRawBytes(), msg); // dom2(F, C) || R || A || PH(M)\n    const finish = (hashed) => {\n        const k = modL_LE(hashed); // decode in little-endian, modulo L\n        const RkA = R.add(A.mul(k, false)); // [8]R + [8][k]A'\n        return RkA.add(SB.negate()).clearCofactor().is0(); // [8][S]B = [8]R + [8][k]A'\n    };\n    return { hashable, finish };\n};\n// RFC8032 5.1.7: verification async, sync\nconst verifyAsync = async (s, m, p) => hashFinish(true, _verify(s, m, p));\nconst verify = (s, m, p) => hashFinish(false, _verify(s, m, p));\nconst cr = () => // We support: 1) browsers 2) node.js 19+\n typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\nconst etc = {\n    bytesToHex: b2h, hexToBytes: h2b, concatBytes: concatB,\n    mod, invert,\n    randomBytes: (len) => {\n        const crypto = cr(); // Can be shimmed in node.js <= 18 to prevent error:\n        // import { webcrypto } from 'node:crypto';\n        // if (!globalThis.crypto) globalThis.crypto = webcrypto;\n        if (!crypto)\n            err('crypto.getRandomValues must be defined');\n        return crypto.getRandomValues(u8n(len));\n    },\n    sha512Async: async (...messages) => {\n        const crypto = cr();\n        if (!crypto)\n            err('crypto.subtle or etc.sha512Async must be defined');\n        const m = concatB(...messages);\n        return u8n(await crypto.subtle.digest('SHA-512', m.buffer));\n    },\n    sha512Sync: undefined, // Actual logic below\n};\nObject.defineProperties(etc, { sha512Sync: {\n        configurable: false, get() { return _shaS; }, set(f) { if (!_shaS)\n            _shaS = f; },\n    } });\nconst utils = {\n    getExtendedPublicKeyAsync, getExtendedPublicKey,\n    randomPrivateKey: () => etc.randomBytes(32),\n    precompute(w = 8, p = G) { p.multiply(3n); return p; }, // no-op\n};\nconst W = 8; // Precomputes-related code. W = window size\nconst precompute = () => {\n    const points = []; // 10x sign(), 2x verify(). To achieve this,\n    const windows = 256 / W + 1; // app needs to spend 40ms+ to calculate\n    let p = G, b = p; // a lot of points related to base point G.\n    for (let w = 0; w < windows; w++) { // Points are stored in array and used\n        b = p; // any time Gx multiplication is done.\n        points.push(b); // They consume 16-32 MiB of RAM.\n        for (let i = 1; i < 2 ** (W - 1); i++) {\n            b = b.add(p);\n            points.push(b);\n        }\n        p = b.double(); // Precomputes don't speed-up getSharedKey,\n    } // which multiplies user point by scalar,\n    return points; // when precomputes are using base point\n};\nconst wNAF = (n) => {\n    // Compared to other point mult methods,\n    const comp = Gpows || (Gpows = precompute()); // stores 2x less points using subtraction\n    const neg = (cnd, p) => { let n = p.negate(); return cnd ? n : p; }; // negate\n    let p = I, f = G; // f must be G, or could become I in the end\n    const windows = 1 + 256 / W; // W=8 17 windows\n    const wsize = 2 ** (W - 1); // W=8 128 window size\n    const mask = BigInt(2 ** W - 1); // W=8 will create mask 0b11111111\n    const maxNum = 2 ** W; // W=8 256\n    const shiftBy = BigInt(W); // W=8 8\n    for (let w = 0; w < windows; w++) {\n        const off = w * wsize;\n        let wbits = Number(n & mask); // extract W bits.\n        n >>= shiftBy; // shift number by W bits.\n        if (wbits > wsize) {\n            wbits -= maxNum;\n            n += 1n;\n        } // split if bits > max: +224 => 256-32\n        const off1 = off, off2 = off + Math.abs(wbits) - 1; // offsets, evaluate both\n        const cnd1 = w % 2 !== 0, cnd2 = wbits < 0; // conditions, evaluate both\n        if (wbits === 0) {\n            f = f.add(neg(cnd1, comp[off1])); // bits are 0: add garbage to fake point\n        }\n        else { //          ^ can't add off2, off2 = I\n            p = p.add(neg(cnd2, comp[off2])); // bits are 1: add to result point\n        }\n    }\n    return { p, f }; // return both real and fake points for JIT\n}; // !! you can disable precomputes by commenting-out call of the wNAF() inside Point#mul()\nexport { getPublicKey, getPublicKeyAsync, sign, verify, // Remove the export to easily use in REPL\nsignAsync, verifyAsync, CURVE, etc, utils, Point as ExtendedPoint }; // envs like browser console\n","// To add support for node versions <19.\n// From https://www.npmjs.com/package/@noble/ed25519#usage\nimport { webcrypto } from 'node:crypto';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nif (!globalThis.crypto)\n    globalThis.crypto = webcrypto;\n// eslint-disable-next-line import/export\nexport * from '@noble/ed25519';\n//# sourceMappingURL=node.js.map","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","import { EncodedTokenModuleEvent, TransactionEventTag } from '../types.js';\nimport { cborDecode } from '../types/cbor.js';\nimport { TokenOperationType } from './TokenOperation.js';\nimport { CborAccountAddress, TokenId } from './index.js';\n\ntype GenTokenModuleEvent<E extends TokenOperationType, T extends Object> = {\n    /** The tag of the event. */\n    tag: TransactionEventTag.TokenModuleEvent;\n    /** The ID of the token. */\n    tokenId: TokenId.Type;\n    /** The type of the event. */\n    type: E;\n    /** The details of the event. */\n    details: T;\n};\n\n/**\n * Represents a token module event (found when decoding) unknown to the SDK.\n */\nexport type UnknownTokenModuleEvent = {\n    /** The tag of the event. */\n    tag: TransactionEventTag.TokenModuleEvent;\n    /** The ID of the token. */\n    tokenId: TokenId.Type;\n    /** The type of the event. */\n    type: string;\n    /** The details of the event. */\n    details: unknown;\n};\n\n/**\n * The structure of any list update event for a PLT.\n */\nexport type TokenListUpdateEventDetails = {\n    /** The target of the list update. */\n    target: CborAccountAddress.Type;\n};\n\n/**\n * The structure of a pause event for a PLT.\n */\nexport type TokenPauseEventDetails = {};\n\nexport type TokenEventDetails = TokenListUpdateEventDetails | TokenPauseEventDetails;\n\n/**\n * An event occuring as the result of an \"addAllowList\" operation.\n */\nexport type TokenAddAllowListEvent = GenTokenModuleEvent<TokenOperationType.AddAllowList, TokenListUpdateEventDetails>;\n/**\n * An event occuring as the result of an \"addDenyList\" operation.\n */\nexport type TokenAddDenyListEvent = GenTokenModuleEvent<TokenOperationType.AddDenyList, TokenListUpdateEventDetails>;\n/**\n * An event occuring as the result of an \"removeAllowList\" operation.\n */\nexport type TokenRemoveAllowListEvent = GenTokenModuleEvent<\n    TokenOperationType.RemoveAllowList,\n    TokenListUpdateEventDetails\n>;\n/**\n * An event occuring as the result of an \"removeDenyList\" operation.\n */\nexport type TokenRemoveDenyListEvent = GenTokenModuleEvent<\n    TokenOperationType.RemoveDenyList,\n    TokenListUpdateEventDetails\n>;\n\n/**\n * An event occuring as the result of a \"pause\" operation, describing whether execution\n * of the associated token operations are paused or not.\n */\nexport type TokenPauseEvent = GenTokenModuleEvent<TokenOperationType.Pause, TokenPauseEventDetails>;\n\n/**\n * An event occuring as the result of a \"pause\" operation, describing whether execution\n * of the associated token operations are paused or not.\n */\nexport type TokenUnpauseEvent = GenTokenModuleEvent<TokenOperationType.Unpause, TokenPauseEventDetails>;\n\n/**\n * A union of all token module events.\n */\nexport type TokenModuleEvent =\n    | TokenAddAllowListEvent\n    | TokenAddDenyListEvent\n    | TokenRemoveAllowListEvent\n    | TokenRemoveDenyListEvent\n    | TokenPauseEvent\n    | TokenUnpauseEvent;\n\nfunction parseTokenListUpdateEventDetails(decoded: unknown): TokenListUpdateEventDetails {\n    if (typeof decoded !== 'object' || decoded === null) {\n        throw new Error(`Invalid event details: ${JSON.stringify(decoded)}. Expected an object.`);\n    }\n    if (!('target' in decoded && CborAccountAddress.instanceOf(decoded.target))) {\n        throw new Error(`Invalid event details: ${JSON.stringify(decoded)}. Expected 'target' to be a TokenHolder`);\n    }\n\n    return decoded as TokenListUpdateEventDetails;\n}\n\nfunction parseTokenPauseEventDetails(decoded: unknown): TokenPauseEventDetails {\n    if (typeof decoded !== 'object' || decoded === null) {\n        throw new Error(`Invalid event details: ${JSON.stringify(decoded)}. Expected an object.`);\n    }\n\n    return decoded as TokenPauseEventDetails;\n}\n\n/**\n * Parses a token module event, decoding the details from CBOR format.\n *\n * @param event - The token module event to parse.\n * @returns The parsed token module event with decoded details.\n *\n * @example\n * const parsedEvent = parseTokenModuleEvent(encodedEvent);\n * switch (parsedEvent.type) {\n *   // typed details are now available, e.g.:\n *   case TokenOperationType.AddAllowList: console.log(parsedEvent.details.target);\n *   ...\n *   default: console.warn('Unknown event encountered:', parsedEvent);\n * }\n */\nexport function parseTokenModuleEvent(event: EncodedTokenModuleEvent): TokenModuleEvent | UnknownTokenModuleEvent {\n    const decoded = cborDecode(event.details.bytes);\n    switch (event.type) {\n        case TokenOperationType.AddAllowList:\n        case TokenOperationType.RemoveAllowList:\n        case TokenOperationType.AddDenyList:\n        case TokenOperationType.RemoveDenyList:\n            return { ...event, type: event.type, details: parseTokenListUpdateEventDetails(decoded) };\n        case TokenOperationType.Pause:\n        case TokenOperationType.Unpause:\n            return { ...event, type: event.type, details: parseTokenPauseEventDetails(decoded) };\n        default:\n            return { ...event, details: decoded };\n    }\n}\n","import { Buffer } from 'buffer/index.js';\n\nimport type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport { deserializeTypeValue } from '../schema.js';\nimport { SchemaType, serializeSchemaType } from '../schemaTypes.js';\nimport type { Base64String, HexString, SmartContractTypeValues } from '../types.js';\n\n/**\n * @deprecated\n */\nexport type Serializable = HexString;\n\n/**\n * An event logged by a smart contract instance.\n */\nclass ContractEvent {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __nominal = true;\n    constructor(\n        /** The internal buffer of bytes representing the event. */\n        public readonly buffer: Uint8Array\n    ) {}\n\n    /**\n     * Get a string representation of the contract event.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return toHexString(this);\n    }\n\n    /**\n     * Get a JSON-serializable representation of the contract event.\n     * @returns {HexString} The JSON-serializable representation.\n     */\n    public toJSON(): HexString {\n        return toHexString(this);\n    }\n}\n\n/**\n * Converts a {@linkcode HexString} to a contract event.\n * @param {HexString} json The JSON representation of the contract event.\n * @returns {ContractEvent} The contract event.\n */\nexport function fromJSON(json: HexString): ContractEvent {\n    return fromHexString(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode ContractEvent.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON(value: Type): Serializable {\n    return toHexString(value);\n}\n\n/**\n * An event logged by a smart contract instance.\n */\nexport type Type = ContractEvent;\n\nexport function fromBuffer(buffer: ArrayBuffer): ContractEvent {\n    return new ContractEvent(new Uint8Array(buffer));\n}\n\n/**\n * Create a ContractEvent from a hex string.\n * @param {HexString} hex Hex encoding of the event.\n * @returns {ContractEvent}\n */\nexport function fromHexString(hex: HexString): ContractEvent {\n    return fromBuffer(Buffer.from(hex, 'hex'));\n}\n\n/**\n * Hex encode a ContractEvent.\n * @param {ContractEvent} event The event to encode.\n * @returns {HexString} String containing the hex encoding.\n */\nexport function toHexString(event: ContractEvent): HexString {\n    return Buffer.from(event.buffer).toString('hex');\n}\n\n/**\n * Get byte representation of a ContractEvent.\n * @param {ContractEvent} event The event.\n * @returns {ArrayBuffer} Hash represented as bytes.\n */\nexport function toBuffer(event: ContractEvent): Uint8Array {\n    return event.buffer;\n}\n\n/**\n * Convert a contract event from its protobuf encoding.\n * @param {Proto.ContractEvent} event The protobuf encoding.\n * @returns {ContractEvent}\n */\nexport function fromProto(event: Proto.ContractEvent): ContractEvent {\n    return fromBuffer(event.value);\n}\n\n/**\n * Convert a contract event into its protobuf encoding.\n * @param {ContractEvent} event The block hash.\n * @returns {Proto.ContractEvent} The protobuf encoding.\n */\nexport function toProto(event: ContractEvent): Proto.ContractEvent {\n    return {\n        value: event.buffer,\n    };\n}\n\n/**\n * Parse a contract event using a schema type.\n * @param {ContractEvent} event The event.\n * @param {SchemaType} schemaType The schema type for the event.\n * @returns {SmartContractTypeValues}\n */\nexport function parseWithSchemaType(event: ContractEvent, schemaType: SchemaType): SmartContractTypeValues {\n    const schemaBytes = serializeSchemaType(schemaType);\n    return deserializeTypeValue(toBuffer(event), schemaBytes);\n}\n\n/**\n * Parse a contract event using a schema type.\n * @param {ContractEvent} event The event.\n * @param {Base64String} schemaBase64 The schema type for the event encoded as Base64.\n * @returns {SmartContractTypeValues}\n */\nexport function parseWithSchemaTypeBase64(event: ContractEvent, schemaBase64: Base64String): SmartContractTypeValues {\n    const schemaBytes = Buffer.from(schemaBase64, 'base64');\n    return deserializeTypeValue(toBuffer(event), schemaBytes);\n}\n","import { Buffer } from 'buffer/index.js';\n\nimport * as Proto from '../grpc-api/v2/concordium/protocol-level-tokens.js';\nimport { HexString } from '../types.js';\nimport { cborEncode } from '../types/cbor.js';\n\nexport type JSON = HexString;\n\n/**\n * CBOR encoded data\n */\nclass Cbor {\n    #nominal = true;\n    constructor(\n        /** The internal value of bytes */\n        public readonly bytes: Uint8Array\n    ) {}\n\n    /**\n     * Get a string representation of the cbor.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return toHexString(this);\n    }\n\n    /**\n     * Get a JSON-serializable representation of the cbor.\n     * @returns {HexString} The JSON-serializable representation.\n     */\n    public toJSON(): HexString {\n        return toHexString(this);\n    }\n}\n\n/**\n * Converts a {@linkcode HexString} to CBOR data.\n * @param {HexString} json The JSON representation of the token event.\n * @returns {Cbor} The CBOR data.\n */\nexport function fromJSON(json: HexString): Cbor {\n    return fromHexString(json);\n}\n\n/**\n * CBOR encoded data\n */\nexport type Type = Cbor;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is Cbor {\n    return value instanceof Cbor;\n}\n\n/**\n * Create CBOR data type from a byte representation\n * @param buffer The byte representation\n * @returns {Cbor} The CBOR data\n */\nexport function fromBuffer(buffer: ArrayBuffer): Cbor {\n    return new Cbor(new Uint8Array(buffer));\n}\n\n/**\n * Get byte representation of the CBOR data.\n * @param {Cbor} cbor The event.\n * @returns {Uint8Array} The CBOR bytes.\n */\nexport function toBuffer(cbor: Cbor): Uint8Array {\n    return cbor.bytes;\n}\n\n/**\n * Create CBOR from a hex string.\n * @param {HexString} hex Hex encoded data.\n * @returns {Cbor}\n */\nexport function fromHexString(hex: HexString): Cbor {\n    return fromBuffer(Buffer.from(hex, 'hex'));\n}\n\n/**\n * Hex encode CBOR data.\n * @param {Cbor} cbor The CBOR data.\n * @returns {HexString} String containing the hex encoding.\n */\nexport function toHexString(cbor: Cbor): HexString {\n    return Buffer.from(cbor.bytes).toString('hex');\n}\n\n/**\n * Convert CBOR data from its protobuf encoding.\n * @param {Proto.CBor} cbor The protobuf encoding.\n * @returns {Cbor}\n */\nexport function fromProto(cbor: Proto.CBor): Cbor {\n    return fromBuffer(cbor.value);\n}\n\n/**\n * Convert CBOR data into its protobuf encoding.\n * @param {Cbor} cbor module event.\n * @returns {Proto.CBor} The protobuf encoding.\n */\nexport function toProto(cbor: Cbor): Proto.CBor {\n    return {\n        value: cbor.bytes,\n    };\n}\n\nexport { decode } from './decode.js';\n\n/**\n * Encode a value into CBOR format.\n * @param {unknown} value - The value to encode.\n * @returns {Cbor} The CBOR encoded data.\n */\nexport function encode(value: unknown): Cbor {\n    return new Cbor(cborEncode(value));\n}\n","export * as AccountAddress from './AccountAddress.js';\nexport * as BlockHash from './BlockHash.js';\nexport * as CcdAmount from './CcdAmount.js';\nexport * as ContractAddress from './ContractAddress.js';\nexport * as ContractEvent from './ContractEvent.js';\nexport * as ContractName from './ContractName.js';\nexport * as CredentialRegistrationId from './CredentialRegistrationId.js';\nexport { DataBlob } from './DataBlob.js';\nexport * as Duration from './Duration.js';\nexport * as Energy from './Energy.js';\nexport * as EntrypointName from './EntrypointName.js';\nexport * as InitName from './InitName.js';\nexport * as ModuleClient from './ModuleClient.js';\nexport * as ModuleReference from './ModuleReference.js';\nexport * as Parameter from './Parameter.js';\nexport * as ReceiveName from './ReceiveName.js';\nexport * as ReturnValue from './ReturnValue.js';\nexport * as SequenceNumber from './SequenceNumber.js';\nexport * as Timestamp from './Timestamp.js';\nexport * as TransactionExpiry from './TransactionExpiry.js';\nexport * as TransactionHash from './TransactionHash.js';\n","import { Buffer } from 'buffer/index.js';\n\nimport { encodeHexString, packBufferWithWord16Length } from '../serializationHelpers.js';\nimport type { HexString } from '../types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.DataBlob;\nexport type Serializable = HexString;\n\n/**\n * Representation of a transfer's memo or a registerData transaction's data, which enforces that:\n * - the byte length is <= 256\n */\nexport class DataBlob {\n    public readonly data: Buffer;\n\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(data: ArrayBuffer) {\n        if (data.byteLength > 256) {\n            throw new Error(\"A data blob's size cannot exceed 256 bytes\");\n        }\n\n        this.data = Buffer.from(data);\n    }\n\n    /**\n     * Encodes the data to a JSON-serializable hex-string.\n     *\n     * @returns The hex-string representation of the data.\n     */\n    public toJSON(): HexString {\n        return packBufferWithWord16Length(this.data).toString('hex');\n    }\n\n    /**\n     * Takes a hex-string and converts it to an instance of type {@linkcode DataBlob}.\n     * The method expects the string to be prefixed with a 2-byte length like the one returned by {@linkcode toJSON}.\n     *\n     * @param value Hex-string to be converted to a DataBlob.\n     * @returns The parsed instance.\n     */\n    public static fromJSON(value: HexString): DataBlob {\n        // The first 2 bytes are the length of the data buffer, so we need to remove them.\n        return new DataBlob(encodeHexString(value.substring(4)));\n    }\n\n    /**\n     * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n     *\n     * @returns {TypedJson} The transformed object.\n     */\n    public toTypedJSON(): TypedJson<Serializable> {\n        return {\n            ['@type']: JSON_DISCRIMINATOR,\n            value: this.data.toString('hex'),\n        };\n    }\n\n    /**\n     * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode DataBlob}.\n     *\n     * @param {TypedJson} json - The typed JSON to convert.\n     * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n     * @returns {DataBlob} The parsed instance.\n     */\n    public static fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, (v: Serializable) => {\n        const data = Buffer.from(v, 'hex');\n        return new DataBlob(data);\n    });\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport JSONBig from 'json-bigint';\n\nimport * as AccountAddress from './AccountAddress.js';\nimport * as BlockHash from './BlockHash.js';\nimport * as CcdAmount from './CcdAmount.js';\nimport * as ContractAddress from './ContractAddress.js';\nimport * as ContractName from './ContractName.js';\nimport * as CredentialRegistrationId from './CredentialRegistrationId.js';\nimport { JSON_DISCRIMINATOR as DATA_BLOB_DISCRIMINATOR, DataBlob } from './DataBlob.js';\nimport * as Duration from './Duration.js';\nimport * as Energy from './Energy.js';\nimport * as EntrypointName from './EntrypointName.js';\nimport * as InitName from './InitName.js';\nimport * as ModuleReference from './ModuleReference.js';\nimport * as Parameter from './Parameter.js';\nimport * as ReceiveName from './ReceiveName.js';\nimport * as ReturnValue from './ReturnValue.js';\nimport * as SequenceNumber from './SequenceNumber.js';\nimport * as Timestamp from './Timestamp.js';\nimport * as TransactionExpiry from './TransactionExpiry.js';\nimport * as TransactionHash from './TransactionHash.js';\nimport { isTypedJsonCandidate } from './util.js';\n\nfunction reviveConcordiumTypes(value: unknown) {\n    if (isTypedJsonCandidate(value)) {\n        switch (value['@type']) {\n            case Parameter.JSON_DISCRIMINATOR:\n                return Parameter.fromTypedJSON(value);\n            case ReturnValue.JSON_DISCRIMINATOR:\n                return ReturnValue.fromTypedJSON(value);\n            case SequenceNumber.JSON_DISCRIMINATOR:\n                return SequenceNumber.fromTypedJSON(value);\n            case Energy.JSON_DISCRIMINATOR:\n                return Energy.fromTypedJSON(value);\n            case TransactionHash.JSON_DISCRIMINATOR:\n                return TransactionHash.fromTypedJSON(value);\n            case BlockHash.JSON_DISCRIMINATOR:\n                return BlockHash.fromTypedJSON(value);\n            case ContractName.JSON_DISCRIMINATOR:\n                return ContractName.fromTypedJSON(value);\n            case InitName.JSON_DISCRIMINATOR:\n                return InitName.fromTypedJSON(value);\n            case ReceiveName.JSON_DISCRIMINATOR:\n                return ReceiveName.fromTypedJSON(value);\n            case CredentialRegistrationId.JSON_DISCRIMINATOR:\n                return CredentialRegistrationId.fromTypedJSON(value);\n            case AccountAddress.JSON_DISCRIMINATOR:\n                return AccountAddress.fromTypedJSON(value);\n            case ContractAddress.JSON_DISCRIMINATOR:\n                return ContractAddress.fromTypedJSON(value);\n            case EntrypointName.JSON_DISCRIMINATOR:\n                return EntrypointName.fromTypedJSON(value);\n            case Timestamp.JSON_DISCRIMINATOR:\n                return Timestamp.fromTypedJSON(value);\n            case Duration.JSON_DISCRIMINATOR:\n                return Duration.fromTypedJSON(value);\n            case CcdAmount.JSON_DISCRIMINATOR:\n                return CcdAmount.fromTypedJSON(value);\n            case TransactionExpiry.JSON_DISCRIMINATOR:\n                return TransactionExpiry.fromTypedJSON(value);\n            case ModuleReference.JSON_DISCRIMINATOR:\n                return ModuleReference.fromTypedJSON(value);\n            case DATA_BLOB_DISCRIMINATOR:\n                return DataBlob.fromTypedJSON(value);\n        }\n    }\n\n    return value;\n}\n\n/**\n * Acts as an inverse for {@linkcode jsonStringify}.\n * @deprecated Manually convert the JSON structure instead. For account transactions,\n * parse the output with something that handles deserializing`bigint`s, e.g. the\n * `json-bigint` dependency, and use `AccountTransactionHandler.fromJSON`.\n */\nexport function jsonParse(input: string, reviver?: (this: any, key: string, value: any) => any): any {\n    return JSON.parse(input, (k, v) =>\n        reviver === undefined ? reviveConcordiumTypes(v) : reviver(k, reviveConcordiumTypes(v))\n    );\n}\n\n/**\n * Replaces values of concordium domain types with values that can be revived into their original types. Returns undefined if type cannot be matched.\n */\nfunction transformConcordiumType(value: unknown): unknown | undefined {\n    switch (true) {\n        case AccountAddress.instanceOf(value):\n            return AccountAddress.toTypedJSON(value as AccountAddress.Type);\n        case BlockHash.instanceOf(value):\n            return BlockHash.toTypedJSON(value as BlockHash.Type);\n        case CcdAmount.instanceOf(value):\n            return CcdAmount.toTypedJSON(value as CcdAmount.Type);\n        case ContractAddress.instanceOf(value):\n            return ContractAddress.toTypedJSON(value as ContractAddress.Type);\n        case ContractName.instanceOf(value):\n            return ContractName.toTypedJSON(value as ContractName.Type);\n        case CredentialRegistrationId.instanceOf(value):\n            return CredentialRegistrationId.toTypedJSON(value as CredentialRegistrationId.Type);\n        case value instanceof DataBlob:\n            return (value as DataBlob).toTypedJSON();\n        case Duration.instanceOf(value):\n            return Duration.toTypedJSON(value as Duration.Type);\n        case Energy.instanceOf(value):\n            return Energy.toTypedJSON(value as Energy.Type);\n        case EntrypointName.instanceOf(value):\n            return EntrypointName.toTypedJSON(value as EntrypointName.Type);\n        case InitName.instanceOf(value):\n            return InitName.toTypedJSON(value as InitName.Type);\n        case ModuleReference.instanceOf(value):\n            return ModuleReference.toTypedJSON(value as ModuleReference.Type);\n        case Parameter.instanceOf(value):\n            return Parameter.toTypedJSON(value as Parameter.Type);\n        case ReceiveName.instanceOf(value):\n            return ReceiveName.toTypedJSON(value as ReceiveName.Type);\n        case ReturnValue.instanceOf(value):\n            return ReturnValue.toTypedJSON(value as ReturnValue.Type);\n        case SequenceNumber.instanceOf(value):\n            return SequenceNumber.toTypedJSON(value as SequenceNumber.Type);\n        case Timestamp.instanceOf(value):\n            return Timestamp.toTypedJSON(value as Timestamp.Type);\n        case TransactionExpiry.instanceOf(value):\n            return TransactionExpiry.toTypedJSON(value as TransactionExpiry.Type);\n        case TransactionHash.instanceOf(value):\n            return TransactionHash.toTypedJSON(value as TransactionHash.Type);\n    }\n\n    return undefined;\n}\n\n/**\n * Replaces values of concordium domain types with their unwrapped values. Returns undefined if type cannot be matched.\n */\nfunction unwrapConcordiumType(value: unknown): unknown | undefined {\n    switch (true) {\n        case AccountAddress.instanceOf(value):\n            return AccountAddress.toUnwrappedJSON(value as AccountAddress.Type);\n        case BlockHash.instanceOf(value):\n            return BlockHash.toUnwrappedJSON(value as BlockHash.Type);\n        case CcdAmount.instanceOf(value):\n            return (value as CcdAmount.Type).toJSON();\n        case ContractAddress.instanceOf(value):\n            return ContractAddress.toUnwrappedJSON(value as ContractAddress.Type);\n        case ContractName.instanceOf(value):\n            return ContractName.toUnwrappedJSON(value as ContractName.Type);\n        case CredentialRegistrationId.instanceOf(value):\n            return (value as CredentialRegistrationId.Type).toJSON();\n        case value instanceof DataBlob:\n            return (value as DataBlob).toJSON();\n        case Duration.instanceOf(value):\n            return Duration.toUnwrappedJSON(value as Duration.Type);\n        case Energy.instanceOf(value):\n            return Energy.toUnwrappedJSON(value as Energy.Type);\n        case EntrypointName.instanceOf(value):\n            return EntrypointName.toUnwrappedJSON(value as EntrypointName.Type);\n        case InitName.instanceOf(value):\n            return InitName.toUnwrappedJSON(value as InitName.Type);\n        case ModuleReference.instanceOf(value):\n            return ModuleReference.toUnwrappedJSON(value as ModuleReference.Type);\n        case Parameter.instanceOf(value):\n            return Parameter.toUnwrappedJSON(value as Parameter.Type);\n        case ReceiveName.instanceOf(value):\n            return ReceiveName.toUnwrappedJSON(value as ReceiveName.Type);\n        case ReturnValue.instanceOf(value):\n            return ReturnValue.toUnwrappedJSON(value as ReturnValue.Type);\n        case SequenceNumber.instanceOf(value):\n            return SequenceNumber.toUnwrappedJSON(value as SequenceNumber.Type);\n        case Timestamp.instanceOf(value):\n            return Timestamp.toUnwrappedJSON(value as Timestamp.Type);\n        case TransactionExpiry.instanceOf(value):\n            return TransactionExpiry.toUnwrappedJSON(value as TransactionExpiry.Type);\n        case TransactionHash.instanceOf(value):\n            return TransactionHash.toUnwrappedJSON(value as TransactionHash.Type);\n    }\n\n    return undefined;\n}\n\ntype ReplacerFun = (this: any, key: string, value: any) => any;\n\nfunction ccdTypesReplacer(this: any, key: string, value: any): any {\n    const rawValue = this[key];\n    return transformConcordiumType(rawValue) ?? value;\n}\n\nfunction ccdUnwrapReplacer(this: any, key: string, value: any): any {\n    const rawValue = this[key];\n    return unwrapConcordiumType(rawValue) ?? value;\n}\n\n/**\n * Stringify, which ensures concordium domain types are stringified in a restorable fashion.\n * This should be used if you want to be able to restore the concordium domain types in the JSON to its original types.\n * @deprecated Manually convert the object to the preferred JSON structure instead. For account transactions,\n * use `AccountTransactionHandler.toJSON` prior to invoking `JSON.stringify`. It's up to the developer to\n * handle serialization of `bigints`, e.g. with the `json-bigint` dependency.\n *\n * @param value A JavaScript value, usually an object or array, to be converted.\n * @param replacer A function that transforms the results.\n * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n */\nexport function jsonStringify(input: any, replacer?: ReplacerFun, space?: string | number): string {\n    function replacerFunction(this: any, key: string, value: any) {\n        const transformedValue = ccdTypesReplacer.call(this, key, value);\n        return replacer?.call(this, key, transformedValue) ?? transformedValue;\n    }\n    return JSON.stringify(input, replacerFunction, space);\n}\n\n/**\n * Describes how bigints encountered in {@linkcode jsonUnwrapStringify} are handled by default.\n */\nexport const enum BigintFormatType {\n    /** Use 'json-bigint' to safely convert `bigint`s to integers */\n    Integer,\n    /** Convert `bigint`s to strings */\n    String,\n    /** Do nothing, i.e. must be handled manually in replacer function. */\n    None,\n}\n\n/**\n * Stringify, which ensures concordium domain types are unwrapped to their inner type before stringified.\n * This should be used if you want to manually deserialize the inner property values, as the serialization is irreversible.\n * @deprecated Manually convert the object to the preferred JSON structure instead. For account transactions,\n * use `AccountTransactionHandler.toJSON` prior to invoking `JSON.stringify`. It's up to the developer to\n * handle serialization of `bigints`, e.g. with the `json-bigint` dependency.\n *\n * @param value A JavaScript value, usually an object or array, to be converted.\n * @param bigintFormat Determines how to handle bigints. Can be set to either:\n * - `BigintFormatType.Number`: uses 'json-bigint to safely serialize,\n * - `BigintFormatType.String`: converts `bigint` to strings\n * - `BigintFormatType.None`: must be taken care of manually, e.g. in replacer function.\n * Defaults to BigintFormatType.None\n * @param replacer A function that transforms the results.\n * This overrides `bigintFormat`, and will also run on primitive values passed as `value.`\n * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n *\n * @example\n * jsonUnwrapStringify(100n) => throws `TypeError`, as bigints cannot be serialized.\n * jsonUnwrapStringify(100n, BigintFormatType.None) => throws `TypeError`\n * jsonUnwrapStringify(100n, BigintFormatType.None, (_key, value) => 'replaced') => '\"replaced\"'\n *\n * jsonUnwrapStringify(100n, BigintFormatType.Number) => '100'\n * jsonUnwrapStringify(100n, BigintFormatType.Number, (_key, value) => -value) => '-100' // runs both replacer and bigintFormat\n * jsonUnwrapStringify(100n, BigintFormatType.Number, (_key, value) => 'replaced') => '\"replaced\"' // replacer takes precedence\n *\n * jsonUnwrapStringify(100n, BigintFormatType.String) => '\"100\"'\n * jsonUnwrapStringify(100n, BigintFormatType.String, (_key, value) => -value) => '\"-100\"' // runs both replacer and bigintFormat\n * jsonUnwrapStringify(100n, BigintFormatType.String, (_key, value) => 10) => '10' // replacer takes precedence\n */\nexport function jsonUnwrapStringify(\n    input: any,\n    bigintFormat = BigintFormatType.None,\n    replacer?: ReplacerFun,\n    space?: string | number\n): string {\n    function replaceBigintValue(value: any): any {\n        switch (bigintFormat) {\n            case BigintFormatType.String:\n                if (typeof value === 'bigint') {\n                    return value.toString();\n                }\n            default:\n                return value;\n        }\n    }\n\n    function replacerFunction(this: any, key: string, value: any) {\n        let replaced = ccdUnwrapReplacer.call(this, key, value);\n        replaced = replacer?.call(this, key, replaced) ?? replaced;\n        return replaceBigintValue(replaced);\n    }\n\n    let replaced = input;\n    if (typeof input !== 'object') {\n        replaced = replacer?.call(replaced, '', replaced) ?? replaced;\n        replaced = replaceBigintValue(replaced);\n    }\n\n    const stringify = bigintFormat === BigintFormatType.Integer ? JSONBig.stringify : JSON.stringify;\n    return stringify(replaced, replacerFunction, space);\n}\n","import * as wasm from '@concordium/rust-bindings';\nimport { Buffer } from 'buffer/index.js';\nimport JSONbig from 'json-bigint';\n\nimport { SchemaVersion, SmartContractTypeValues } from './types.js';\nimport * as ContractName from './types/ContractName.js';\nimport * as EntrypointName from './types/EntrypointName.js';\nimport * as Parameter from './types/Parameter.js';\n\n/**\n * @param moduleSchema buffer for the schema of a module that contains the contract\n * @param contractName name of the contract that the init contract transaction will initialize\n * @param schemaVersion the version of the schema provided\n * @returns buffer containing the schema for of init contract parameters\n */\nexport function getInitContractParameterSchema(\n    moduleSchema: ArrayBuffer,\n    contractName: ContractName.Type,\n    schemaVersion?: SchemaVersion\n): Uint8Array {\n    const parameterSchema = wasm.getInitContractParameterSchema(\n        Buffer.from(moduleSchema).toString('hex'),\n        ContractName.toString(contractName),\n        schemaVersion\n    );\n    return Buffer.from(parameterSchema, 'hex');\n}\n\n/**\n * @param moduleSchema buffer for the schema of a module that contains the contract\n * @param contractName name of the contract that the update contract transaction will update\n * @param receiveFunctionName name of function that the update contract transaction will invoke\n * @param schemaVersion the version of the schema provided\n * @returns buffer containing the schema for of update contract parameters\n */\nexport function getUpdateContractParameterSchema(\n    moduleSchema: ArrayBuffer,\n    contractName: ContractName.Type,\n    receiveFunctionName: EntrypointName.Type,\n    schemaVersion?: SchemaVersion\n): Uint8Array {\n    const parameterSchema = wasm.getReceiveContractParameterSchema(\n        Buffer.from(moduleSchema).toString('hex'),\n        ContractName.toString(contractName),\n        EntrypointName.toString(receiveFunctionName),\n        schemaVersion\n    );\n    return Buffer.from(parameterSchema, 'hex');\n}\n\n/**\n * @param rawSchema the schema for the type\n * @returns JSON template of the schema\n */\nexport function displayTypeSchemaTemplate(rawSchema: ArrayBuffer): string {\n    return wasm.displayTypeSchemaTemplate(Buffer.from(rawSchema).toString('hex'));\n}\n\n/**\n * @param contractName name of the contract that the init contract transaction will initialize\n * @param parameters the parameters to be serialized. Should correspond to the JSON representation.\n * @param rawSchema buffer for the schema of a module that contains the contract\n * @param schemaVersion the version of the schema provided\n * @param verboseErrorMessage Whether errors are in a verbose format or not. Defaults to `false`.\n * @returns serialized buffer of init contract parameters\n */\nexport function serializeInitContractParameters(\n    contractName: ContractName.Type,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    parameters: any,\n    rawSchema: ArrayBuffer,\n    schemaVersion?: SchemaVersion,\n    verboseErrorMessage = false\n): Parameter.Type {\n    const serializedParameters = wasm.serializeInitContractParameters(\n        JSONbig.stringify(parameters),\n        Buffer.from(rawSchema).toString('hex'),\n        ContractName.toString(contractName),\n        schemaVersion,\n        verboseErrorMessage\n    );\n    return Parameter.fromBuffer(Buffer.from(serializedParameters, 'hex'));\n}\n\n/**\n * @param contractName name of the contract that the update contract transaction will update\n * @param receiveFunctionName name of function that the update contract transaction will invoke\n * @param parameters the parameters to be serialized. Should correspond to the JSON representation.\n * @param rawSchema buffer for the schema of a module that contains the contract\n * @param schemaVersion the version of the schema provided\n * @param verboseErrorMessage Whether errors are in a verbose format or not. Defaults to `false`.\n * @returns serialized buffer of update contract parameters\n */\nexport function serializeUpdateContractParameters(\n    contractName: ContractName.Type,\n    receiveFunctionName: EntrypointName.Type,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    parameters: any,\n    rawSchema: ArrayBuffer,\n    schemaVersion?: SchemaVersion,\n    verboseErrorMessage = false\n): Parameter.Type {\n    const serializedParameters = wasm.serializeReceiveContractParameters(\n        JSONbig.stringify(parameters),\n        Buffer.from(rawSchema).toString('hex'),\n        ContractName.toString(contractName),\n        EntrypointName.toString(receiveFunctionName),\n        schemaVersion,\n        verboseErrorMessage\n    );\n    return Parameter.fromBuffer(Buffer.from(serializedParameters, 'hex'));\n}\n\n/**\n * Given a value for a smart contract type, and the raw schema for that type, serialize the value into binary format.\n * @param value the value that should be serialized. Should correspond to the JSON representation\n * @param rawSchema the schema for the type that the given value should be serialized as\n * @param verboseErrorMessage Whether errors are in a verbose format or not. Defaults to `false`.\n * @returns serialized buffer of the value\n */\nexport function serializeTypeValue(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    value: any,\n    rawSchema: ArrayBuffer,\n    verboseErrorMessage = false\n): Parameter.Type {\n    const serializedValue = wasm.serializeTypeValue(\n        JSONbig.stringify(value),\n        Buffer.from(rawSchema).toString('hex'),\n        verboseErrorMessage\n    );\n    return Parameter.fromBuffer(Buffer.from(serializedValue, 'hex'));\n}\n\n/**\n * Given a contract's raw state, its name and its schema, return the state as a JSON object.\n * The return type is any, and the actual type should be determined by using the schema.\n */\nexport function deserializeContractState(\n    contractName: ContractName.Type,\n    schema: ArrayBuffer,\n    state: ArrayBuffer,\n    verboseErrorMessage = false\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n    const serializedState = wasm.deserializeState(\n        ContractName.toString(contractName),\n        Buffer.from(state).toString('hex'),\n        Buffer.from(schema).toString('hex'),\n        verboseErrorMessage\n    );\n    try {\n        return JSONbig({\n            alwaysParseAsBig: true,\n            useNativeBigInt: true,\n        }).parse(serializedState);\n    } catch (e) {\n        throw new Error('unable to deserialize state, due to: ' + serializedState); // In this case serializedState is the error message from the rust module\n    }\n}\n\n/**\n * Deserializes a receive functions's return value from a sequence of bytes into a json object.\n * @param returnValueBytes A buffer containing the return value as raw bytes.\n * @param moduleSchema The raw module schema as a buffer.\n * @param contractName The name of the contract where the receive function is located.\n * @param functionName The name of the receive function which return value you want to deserialize.\n * @param schemaVersion The schema version as a number. This parameter is optional, if you provide a serialized versioned schema this argument won't be needed.\n * @param verboseErrorMessage Whether errors are in a verbose format or not. Defaults to `false`.\n */\nexport function deserializeReceiveReturnValue(\n    returnValueBytes: ArrayBuffer,\n    moduleSchema: ArrayBuffer,\n    contractName: ContractName.Type,\n    functionName: EntrypointName.Type,\n    schemaVersion?: number,\n    verboseErrorMessage = false\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n    const deserializedReturnValue = wasm.deserializeReceiveReturnValue(\n        Buffer.from(returnValueBytes).toString('hex'),\n        Buffer.from(moduleSchema).toString('hex'),\n        ContractName.toString(contractName),\n        EntrypointName.toString(functionName),\n        schemaVersion,\n        verboseErrorMessage\n    );\n    try {\n        return JSONbig({\n            alwaysParseAsBig: true,\n            useNativeBigInt: true,\n        }).parse(deserializedReturnValue);\n    } catch (e) {\n        throw new Error('unable to deserialize the return value, due to: ' + deserializedReturnValue); // In this case deserializedReturnValue is the error message from the rust module\n    }\n}\n\n/**\n * Deserializes a receive function's error from a sequence of bytes into a json object.\n * @param errorBytes A buffer containing the error as raw bytes.\n * @param moduleSchema The raw module schema as a buffer.\n * @param contractName The name of the contract where the receive function is located.\n * @param functionName The name of the receive function which error you want to deserialize.\n * @param verboseErrorMessage Whether errors are in a verbose format or not. Defaults to `false`.\n */\nexport function deserializeReceiveError(\n    errorBytes: ArrayBuffer,\n    moduleSchema: ArrayBuffer,\n    contractName: ContractName.Type,\n    functionName: EntrypointName.Type,\n    verboseErrorMessage = false\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n    const deserializedError = wasm.deserializeReceiveError(\n        Buffer.from(errorBytes).toString('hex'),\n        Buffer.from(moduleSchema).toString('hex'),\n        ContractName.toString(contractName),\n        EntrypointName.toString(functionName),\n        verboseErrorMessage\n    );\n    try {\n        return JSONbig({\n            alwaysParseAsBig: true,\n            useNativeBigInt: true,\n        }).parse(deserializedError);\n    } catch (e) {\n        throw new Error('unable to deserialize the error value, due to: ' + deserializedError); // In this case deserializedError is the error message from the rust module\n    }\n}\n\n/**\n * Deserializes an init function's error from a sequence of bytes into a json object.\n * @param errorBytes A buffer containing the error as raw bytes.\n * @param moduleSchema The raw module schema as a buffer.\n * @param contractName The name of the init function which error you want to deserialize.\n * @param verboseErrorMessage Whether errors are in a verbose format or not. Defaults to `false`.\n */\nexport function deserializeInitError(\n    errorBytes: ArrayBuffer,\n    moduleSchema: ArrayBuffer,\n    contractName: ContractName.Type,\n    verboseErrorMessage = false\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n    const deserializedError = wasm.deserializeInitError(\n        Buffer.from(errorBytes).toString('hex'),\n        Buffer.from(moduleSchema).toString('hex'),\n        ContractName.toString(contractName),\n        verboseErrorMessage\n    );\n    try {\n        return JSONbig({\n            alwaysParseAsBig: true,\n            useNativeBigInt: true,\n        }).parse(deserializedError);\n    } catch (e) {\n        throw new Error('unable to deserialize the error value, due to: ' + deserializedError); // In this case deserializedError is the error message from the rust module\n    }\n}\n\n/**\n * Given a binary value for a smart contract type, and the raw schema for that type, deserialize the value into the JSON representation.\n * @param value the value that should be deserialized.\n * @param rawSchema the schema for the type that the given value should be deserialized as\n * @param verboseErrorMessage Whether errors are in a verbose format or not. Defaults to `false`.\n * @returns the deserialized value\n */\nexport function deserializeTypeValue(\n    value: ArrayBuffer,\n    rawSchema: ArrayBuffer,\n    verboseErrorMessage = false\n): SmartContractTypeValues {\n    const deserializedValue = wasm.deserializeTypeValue(\n        Buffer.from(value).toString('hex'),\n        Buffer.from(rawSchema).toString('hex'),\n        verboseErrorMessage\n    );\n    return JSONbig({\n        alwaysParseAsBig: true,\n        useNativeBigInt: true,\n    }).parse(deserializedValue);\n}\n","import{MT as u,SIMPLE as n}from\"./constants.js\";import{writeInt as o}from\"./encoder.js\";class t{static KnownSimple=new Map([[n.FALSE,!1],[n.TRUE,!0],[n.NULL,null],[n.UNDEFINED,void 0]]);value;constructor(e){this.value=e}static create(e){return t.KnownSimple.has(e)?t.KnownSimple.get(e):new t(e)}toCBOR(e,i){if(i.rejectCustomSimples)throw new Error(`Cannot encode non-standard Simple value: ${this.value}`);o(this.value,e,u.SIMPLE_FLOAT)}toString(){return`simple(${this.value})`}decode(){return t.KnownSimple.has(this.value)?t.KnownSimple.get(this.value):this}[Symbol.for(\"nodejs.util.inspect.custom\")](e,i,r){return`simple(${r(this.value,i)})`}}export{t as Simple};\n","export {\n    ConcordiumGRPCClient,\n    ConcordiumGRPCWebClient,\n    getAccountIdentifierInput,\n    getBlockHashInput,\n} from './GRPCClient.js';\nexport * from './upward.js';\n","class e{static defaultOptions={chunkSize:4096};#r;#i=[];#s=null;#t=0;#a=0;constructor(t={}){if(this.#r={...e.defaultOptions,...t},this.#r.chunkSize<8)throw new RangeError(`Expected size >= 8, got ${this.#r.chunkSize}`);this.#n()}get length(){return this.#a}read(){this.#l();const t=new Uint8Array(this.#a);let i=0;for(const s of this.#i)t.set(s,i),i+=s.length;return this.#n(),t}write(t){const i=t.length;i>this.#o()?(this.#l(),i>this.#r.chunkSize?(this.#i.push(t),this.#n()):(this.#n(),this.#i[this.#i.length-1].set(t),this.#t=i)):(this.#i[this.#i.length-1].set(t,this.#t),this.#t+=i),this.#a+=i}writeUint8(t){this.#e(1),this.#s.setUint8(this.#t,t),this.#h(1)}writeUint16(t,i=!1){this.#e(2),this.#s.setUint16(this.#t,t,i),this.#h(2)}writeUint32(t,i=!1){this.#e(4),this.#s.setUint32(this.#t,t,i),this.#h(4)}writeBigUint64(t,i=!1){this.#e(8),this.#s.setBigUint64(this.#t,t,i),this.#h(8)}writeInt16(t,i=!1){this.#e(2),this.#s.setInt16(this.#t,t,i),this.#h(2)}writeInt32(t,i=!1){this.#e(4),this.#s.setInt32(this.#t,t,i),this.#h(4)}writeBigInt64(t,i=!1){this.#e(8),this.#s.setBigInt64(this.#t,t,i),this.#h(8)}writeFloat32(t,i=!1){this.#e(4),this.#s.setFloat32(this.#t,t,i),this.#h(4)}writeFloat64(t,i=!1){this.#e(8),this.#s.setFloat64(this.#t,t,i),this.#h(8)}clear(){this.#a=0,this.#i=[],this.#n()}#n(){const t=new Uint8Array(this.#r.chunkSize);this.#i.push(t),this.#t=0,this.#s=new DataView(t.buffer,t.byteOffset,t.byteLength)}#l(){if(this.#t===0){this.#i.pop();return}const t=this.#i.length-1;this.#i[t]=this.#i[t].subarray(0,this.#t),this.#t=0,this.#s=null}#o(){const t=this.#i.length-1;return this.#i[t].length-this.#t}#e(t){this.#o()<t&&(this.#l(),this.#n())}#h(t){this.#t+=t,this.#a+=t}}export{e as Writer};\n","import{DCBOR_INT as x,MT as s,NUMBYTES as u,SIMPLE as T,SYMS as g,TAG as A}from\"./constants.js\";import{sortCoreDeterministic as L}from\"./sorts.js\";import{Writer as N}from\"./writer.js\";import{box as _,getEncodedLength as G}from\"./box.js\";import{flushToZero as D,halfToUint as S}from\"./float.js\";import{hexToU8 as M}from\"./utils.js\";const{ENCODED:te}=g,O=s.SIMPLE_FLOAT<<5|u.TWO,h=s.SIMPLE_FLOAT<<5|u.FOUR,B=s.SIMPLE_FLOAT<<5|u.EIGHT,C=s.SIMPLE_FLOAT<<5|T.TRUE,j=s.SIMPLE_FLOAT<<5|T.FALSE,W=s.SIMPLE_FLOAT<<5|T.UNDEFINED,P=s.SIMPLE_FLOAT<<5|T.NULL,q=new TextEncoder,k={...N.defaultOptions,avoidInts:!1,cde:!1,collapseBigInts:!0,dcbor:!1,float64:!1,flushToZero:!1,forceEndian:null,ignoreOriginalEncoding:!1,largeNegativeAsBigInt:!1,reduceUnsafeNumbers:!1,rejectBigInts:!1,rejectCustomSimples:!1,rejectDuplicateKeys:!1,rejectFloats:!1,rejectUndefined:!1,simplifyNegativeZero:!1,sortKeys:null,stringNormalization:null},R={cde:!0,ignoreOriginalEncoding:!0,sortKeys:L},$={...R,dcbor:!0,largeNegativeAsBigInt:!0,reduceUnsafeNumbers:!0,rejectCustomSimples:!0,rejectDuplicateKeys:!0,rejectUndefined:!0,simplifyNegativeZero:!0,stringNormalization:\"NFC\"};function I(e){const n=e<0;return typeof e==\"bigint\"?[n?-e-1n:e,n]:[n?-e-1:e,n]}function p(e,n,t){if(t.rejectFloats)throw new Error(`Attempt to encode an unwanted floating point number: ${e}`);if(isNaN(e))n.writeUint8(O),n.writeUint16(32256);else if(!t.float64&&Math.fround(e)===e){const r=S(e);r===null?(n.writeUint8(h),n.writeFloat32(e)):(n.writeUint8(O),n.writeUint16(r))}else n.writeUint8(B),n.writeFloat64(e)}function a(e,n,t){const[r,i]=I(e);if(i&&t)throw new TypeError(`Negative size: ${e}`);t??=i?s.NEG_INT:s.POS_INT,t<<=5,r<24?n.writeUint8(t|r):r<=255?(n.writeUint8(t|u.ONE),n.writeUint8(r)):r<=65535?(n.writeUint8(t|u.TWO),n.writeUint16(r)):r<=4294967295?(n.writeUint8(t|u.FOUR),n.writeUint32(r)):(n.writeUint8(t|u.EIGHT),n.writeBigUint64(BigInt(r)))}function U(e,n,t){typeof e==\"number\"?a(e,n,s.TAG):typeof e==\"object\"&&!t.ignoreOriginalEncoding&&g.ENCODED in e?n.write(e[g.ENCODED]):e<=Number.MAX_SAFE_INTEGER?a(Number(e),n,s.TAG):(n.writeUint8(s.TAG<<5|u.EIGHT),n.writeBigUint64(BigInt(e)))}function l(e,n,t){const[r,i]=I(e);if(t.collapseBigInts&&(!t.largeNegativeAsBigInt||e>=-0x8000000000000000n)){if(r<=0xffffffffn){a(Number(e),n);return}if(r<=0xffffffffffffffffn){const E=(i?s.NEG_INT:s.POS_INT)<<5;n.writeUint8(E|u.EIGHT),n.writeBigUint64(r);return}}if(t.rejectBigInts)throw new Error(`Attempt to encode unwanted bigint: ${e}`);const o=i?A.NEG_BIGINT:A.POS_BIGINT,d=r.toString(16),f=d.length%2?\"0\":\"\";U(o,n,t);const c=M(f+d);a(c.length,n,s.BYTE_STRING),n.write(c)}function z(e,n,t){t.flushToZero&&(e=D(e)),Object.is(e,-0)?t.simplifyNegativeZero?t.avoidInts?p(0,n,t):a(0,n):p(e,n,t):!t.avoidInts&&Number.isSafeInteger(e)?a(e,n):t.reduceUnsafeNumbers&&Math.floor(e)===e&&e>=x.MIN&&e<=x.MAX?l(BigInt(e),n,t):p(e,n,t)}function K(e,n,t){const r=t.stringNormalization?e.normalize(t.stringNormalization):e,i=q.encode(r);a(i.length,n,s.UTF8_STRING),n.write(i)}function H(e,n,t){const r=e;F(r,r.length,s.ARRAY,n,t);for(const i of r)b(i,n,t)}function Z(e,n){const t=e;a(t.length,n,s.BYTE_STRING),n.write(t)}const m=new Map([[Array,H],[Uint8Array,Z]]);function ie(e,n){const t=m.get(e);return m.set(e,n),t}function re(e){const n=m.get(e);return m.delete(e),n}function F(e,n,t,r,i){const o=G(e);o&&!i.ignoreOriginalEncoding?r.write(o):a(n,r,t)}function J(e,n,t){if(e===null){n.writeUint8(P);return}if(!t.ignoreOriginalEncoding&&g.ENCODED in e){n.write(e[g.ENCODED]);return}const r=m.get(e.constructor);if(r){const o=r(e,n,t);o&&((typeof o[0]==\"bigint\"||isFinite(Number(o[0])))&&U(o[0],n,t),b(o[1],n,t));return}if(typeof e.toCBOR==\"function\"){const o=e.toCBOR(n,t);o&&((typeof o[0]==\"bigint\"||isFinite(Number(o[0])))&&U(o[0],n,t),b(o[1],n,t));return}if(typeof e.toJSON==\"function\"){b(e.toJSON(),n,t);return}const i=Object.entries(e).map(o=>[o[0],o[1],Y(o[0],t)]);t.sortKeys&&i.sort(t.sortKeys),F(e,i.length,s.MAP,n,t);for(const[o,d,f]of i)n.write(f),b(d,n,t)}function b(e,n,t){switch(typeof e){case\"number\":z(e,n,t);break;case\"bigint\":l(e,n,t);break;case\"string\":K(e,n,t);break;case\"boolean\":n.writeUint8(e?C:j);break;case\"undefined\":if(t.rejectUndefined)throw new Error(\"Attempt to encode unwanted undefined.\");n.writeUint8(W);break;case\"object\":J(e,n,t);break;case\"symbol\":throw new TypeError(`Unknown symbol: ${e.toString()}`);default:throw new TypeError(`Unknown type: ${typeof e}, ${String(e)}`)}}function Y(e,n={}){const t={...k};n.dcbor?Object.assign(t,$):n.cde&&Object.assign(t,R),Object.assign(t,n);const r=new N(t);return b(e,r,t),r.read()}function oe(e,n,t=s.POS_INT){n||(n=\"f\");const r={...k,collapseBigInts:!1,chunkSize:10,simplifyNegativeZero:!1},i=new N(r),o=Number(e);function d(f){if(Object.is(e,-0))throw new Error(\"Invalid integer: -0\");const[c,E]=I(e);if(E&&t!==s.POS_INT)throw new Error(\"Invalid major type combination\");const w=typeof f==\"number\"&&isFinite(f);if(w&&!Number.isSafeInteger(o))throw new TypeError(`Unsafe number for ${n}: ${e}`);if(c>f)throw new TypeError(`Undersized encoding ${n} for: ${e}`);const y=(E?s.NEG_INT:t)<<5;return w?[y,Number(c)]:[y,c]}switch(n){case\"bigint\":if(Object.is(e,-0))throw new TypeError(\"Invalid bigint: -0\");e=BigInt(e),l(e,i,r);break;case\"f\":p(o,i,r);break;case\"f16\":{const f=S(o);if(f===null)throw new TypeError(`Invalid f16: ${e}`);i.writeUint8(O),i.writeUint16(f);break}case\"f32\":if(!isNaN(o)&&Math.fround(o)!==o)throw new TypeError(`Invalid f32: ${e}`);i.writeUint8(h),i.writeFloat32(o);break;case\"f64\":i.writeUint8(B),i.writeFloat64(o);break;case\"i\":if(Object.is(e,-0))throw new Error(\"Invalid integer: -0\");if(Number.isSafeInteger(o))a(o,i,e<0?void 0:t);else{const[f,c]=d(1/0);c>0xffffffffffffffffn?(e=BigInt(e),l(e,i,r)):(i.writeUint8(f|u.EIGHT),i.writeBigUint64(BigInt(c)))}break;case\"i0\":{const[f,c]=d(23);i.writeUint8(f|c);break}case\"i8\":{const[f,c]=d(255);i.writeUint8(f|u.ONE),i.writeUint8(c);break}case\"i16\":{const[f,c]=d(65535);i.writeUint8(f|u.TWO),i.writeUint16(c);break}case\"i32\":{const[f,c]=d(4294967295);i.writeUint8(f|u.FOUR),i.writeUint32(c);break}case\"i64\":{const[f,c]=d(0xffffffffffffffffn);i.writeUint8(f|u.EIGHT),i.writeBigUint64(BigInt(c));break}default:throw new TypeError(`Invalid number encoding: \"${n}\"`)}return _(e,i.read())}export{te as ENCODED,R as cdeEncodeOptions,re as clearEncoder,$ as dcborEncodeOptions,k as defaultEncodeOptions,Y as encode,oe as encodedNumber,ie as registerEncoder,H as writeArray,l as writeBigInt,p as writeFloat,a as writeInt,F as writeLength,z as writeNumber,K as writeString,U as writeTag,Z as writeUint8Array,b as writeUnknown};\n","import type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.SequenceNumber;\n/**\n * @deprecated\n */\nexport type Serializable = string;\n\n/** Transaction sequence number. (Formerly refered as Nonce) */\nclass SequenceNumber {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** Internal value representing the sequence number. */\n        public readonly value: bigint\n    ) {}\n\n    /**\n     * Get a string representation of the sequence number.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.value.toString();\n    }\n\n    /**\n     * Get a JSON-serializable representation of the sequence number.\n     * @returns {bigint} The JSON-serializable representation.\n     */\n    public toJSON(): bigint {\n        return this.value;\n    }\n}\n\n/**\n * Converts a `bigint` to sequence number.\n * @param {bigint} json The JSON representation of the sequence number.\n * @returns {SequenceNumber} The sequence number.\n */\nexport function fromJSON(json: bigint): SequenceNumber {\n    return create(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode SequenceNumber.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode bigint} value\n */\nexport function toUnwrappedJSON(value: Type): bigint {\n    return value.value;\n}\n\n/** A transaction sequence number. (Formerly refered as Nonce) */\nexport type Type = SequenceNumber;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is SequenceNumber {\n    return value instanceof SequenceNumber;\n}\n\n/**\n * Construct an SequenceNumber type.\n * @param {bigint | number} sequenceNumber The account sequence number.\n * @throws If `sequenceNumber` is not at least 1.\n * @returns {SequenceNumber}\n */\nexport function create(sequenceNumber: bigint | number): SequenceNumber {\n    if (sequenceNumber < 1) {\n        throw new Error('Invalid account sequence number: Must be 1 or higher.');\n    }\n    return new SequenceNumber(BigInt(sequenceNumber));\n}\n\n/**\n * Convert a SequenceNumber from its protobuf encoding.\n * @param {Proto.SequenceNumber} sequenceNumber The sequence number in protobuf.\n * @returns {SequenceNumber} The sequence number.\n */\nexport function fromProto(sequenceNumber: Proto.SequenceNumber): SequenceNumber {\n    return create(sequenceNumber.value);\n}\n\n/**\n * Convert a sequence number into its protobuf encoding.\n * @param {SequenceNumber} sequenceNumber The duration.\n * @returns {Proto.SequenceNumber} The protobuf encoding.\n */\nexport function toProto(sequenceNumber: SequenceNumber): Proto.SequenceNumber {\n    return {\n        value: sequenceNumber.value,\n    };\n}\n\n/**\n * Constructs a {@linkcode Type} from {@linkcode Serializable}.\n * @deprecated Use the {@linkcode SequenceNumber.fromJSON} method instead.\n * @param {Serializable} value\n * @returns {Type} The duration.\n */\nexport function fromSerializable(value: Serializable): Type {\n    return create(BigInt(value));\n}\n\n/**\n * Converts {@linkcode Type} into {@linkcode Serializable}.\n * @deprecated Use the {@linkcode SequenceNumber.toJSON} method instead.\n * @param {Type} value\n * @returns {Serializable} The serializable value\n */\nexport function toSerializable(value: Type): Serializable {\n    return value.value.toString();\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode SequenceNumber.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: SequenceNumber): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toSerializable(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromSerializable);\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","import { cborDecode } from '../types/cbor.js';\nimport { CborAccountAddress, TokenAmount } from './index.js';\nimport { EncodedTokenModuleRejectReason } from './types.js';\n\nexport enum TokenRejectReasonType {\n    AddressNotFound = 'addressNotFound',\n    TokenBalanceInsufficient = 'tokenBalanceInsufficient',\n    DeserializationFailure = 'deserializationFailure',\n    UnsupportedOperation = 'unsupportedOperation',\n    OperationNotPermitted = 'operationNotPermitted',\n    MintWouldOverflow = 'mintWouldOverflow',\n}\n\ntype RejectReasonGen<T extends TokenRejectReasonType, D> = Omit<EncodedTokenModuleRejectReason, 'type' | 'details'> & {\n    /** The type of rejection. */\n    type: T;\n    /** Additional details about the rejection. */\n    details: D;\n};\n\n/**\n * Represents a token module reject reason (found when decoding) unknown to the SDK.\n */\nexport type UnknownTokenRejectReason = Omit<EncodedTokenModuleRejectReason, 'details'> & {\n    /** Additional details about the rejection. */\n    details: unknown;\n};\n\n/**\n * The details of an \"addressNotFound\": an account address was not valid.\n */\nexport type AddressNotFoundDetails = {\n    /** The index in the list of operations of the failing operation. */\n    index: number;\n    /** The address that could not be resolved. */\n    address: CborAccountAddress.Type;\n};\n\n/**\n * An account address was not valid.\n */\nexport type AddressNotFoundRejectReason = RejectReasonGen<\n    TokenRejectReasonType.AddressNotFound,\n    AddressNotFoundDetails\n>;\n\n/**\n * Details for a reject reason where the account's token balance is insufficient\n * for the attempted operation.\n *\n * See CIS-7: reject-reasons/tokenBalanceInsufficient\n */\nexport type TokenBalanceInsufficientDetails = {\n    /** The index in the list of operations of the failing operation. */\n    index: number;\n    /** The available balance for the sender at the time of the operation. */\n    availableBalance: TokenAmount.Type;\n    /** The minimum required balance to perform the operation. */\n    requiredBalance: TokenAmount.Type;\n};\n\n/** Typed reject reason for \"tokenBalanceInsufficient\". */\nexport type TokenBalanceInsufficientRejectReason = RejectReasonGen<\n    TokenRejectReasonType.TokenBalanceInsufficient,\n    TokenBalanceInsufficientDetails\n>;\n\n/**\n * Details for a reject reason where the operation payload could not be deserialized.\n *\n * See CIS-7: reject-reasons/deserializationFailure\n */\nexport type DeserializationFailureDetails = {\n    /** Text description of the failure mode. */\n    cause?: string;\n};\n\n/** Typed reject reason for \"deserializationFailure\". */\nexport type DeserializationFailureRejectReason = RejectReasonGen<\n    TokenRejectReasonType.DeserializationFailure,\n    DeserializationFailureDetails\n>;\n\n/**\n * Details for a reject reason where the specified operation is not supported by the module.\n *\n * See CIS-7: reject-reasons/unsupportedOperation\n */\nexport type UnsupportedOperationDetails = {\n    /** The index in the list of operations of the failing operation. */\n    index: number;\n    /** The type of operation that was not supported. */\n    operationType: string;\n    /** The reason why the operation was not supported. */\n    reason?: string;\n};\n\n/** Typed reject reason for \"unsupportedOperation\". */\nexport type UnsupportedOperationRejectReason = RejectReasonGen<\n    TokenRejectReasonType.UnsupportedOperation,\n    UnsupportedOperationDetails\n>;\n\n/**\n * Details for a reject reason where the operation is recognized but not permitted\n * under the current state or policy (e.g., paused, allow/deny list).\n *\n * See CIS-7: reject-reasons/operationNotPermitted\n */\nexport type OperationNotPermittedDetails = {\n    /** The index in the list of operations of the failing operation. */\n    index: number;\n    /** (Optionally) the address that does not have the necessary permissions to perform the operation. */\n    address?: CborAccountAddress.Type;\n    /** The reason why the operation is not permitted. */\n    reason?: string;\n};\n\n/** Typed reject reason for \"operationNotPermitted\". */\nexport type OperationNotPermittedRejectReason = RejectReasonGen<\n    TokenRejectReasonType.OperationNotPermitted,\n    OperationNotPermittedDetails\n>;\n\n/**\n * Details for a reject reason where minting would overflow supply constraints.\n *\n * See CIS-7: reject-reasons/mintWouldOverflow\n */\nexport type MintWouldOverflowDetails = {\n    /** The index in the list of operations of the failing operation. */\n    index: number;\n    /** The requested amount to mint. */\n    requestedAmount: TokenAmount.Type;\n    /** The current supply of the token. */\n    currentSupply: TokenAmount.Type;\n    /** The maximum representable token amount. */\n    maxRepresentableAmount: TokenAmount.Type;\n};\n\n/** Typed reject reason for \"mintWouldOverflow\". */\nexport type MintWouldOverflowRejectReason = RejectReasonGen<\n    TokenRejectReasonType.MintWouldOverflow,\n    MintWouldOverflowDetails\n>;\n\n/**\n * Union of all token module reject reasons defined by CIS-7,\n * with strongly-typed details per reason.\n *\n * @see https://proposals.concordium.com/CIS/cis-7.html#reject-reasons\n */\nexport type TokenModuleRejectReason =\n    | AddressNotFoundRejectReason\n    | TokenBalanceInsufficientRejectReason\n    | DeserializationFailureRejectReason\n    | UnsupportedOperationRejectReason\n    | OperationNotPermittedRejectReason\n    | MintWouldOverflowRejectReason;\n\nfunction parseAddressNotFound(decoded: unknown): AddressNotFoundDetails {\n    if (typeof decoded !== 'object' || decoded === null) {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected an object.`);\n    }\n    // required\n    if (!('index' in decoded) || typeof decoded.index !== 'number') {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected 'index' to be a number`);\n    }\n    // required\n    if (!('address' in decoded) || !CborAccountAddress.instanceOf(decoded.address)) {\n        throw new Error(\n            `Invalid reason details: ${JSON.stringify(decoded)}. Expected 'address' to be a CborAccountAddress`\n        );\n    }\n\n    return decoded as AddressNotFoundDetails;\n}\n\nfunction parseMintWouldOverflow(decoded: unknown): MintWouldOverflowDetails {\n    if (typeof decoded !== 'object' || decoded === null) {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected an object.`);\n    }\n    // required\n    if (!('index' in decoded) || typeof decoded.index !== 'number') {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected 'index' to be a number`);\n    }\n    // required\n    if (!('requestedAmount' in decoded) || !TokenAmount.instanceOf(decoded.requestedAmount)) {\n        throw new Error(\n            `Invalid reason details: ${JSON.stringify(decoded)}. Expected 'requestedAmount' to be a TokenAmount`\n        );\n    }\n    // required\n    if (!('currentSupply' in decoded) || !TokenAmount.instanceOf(decoded.currentSupply)) {\n        throw new Error(\n            `Invalid reason details: ${JSON.stringify(decoded)}. Expected 'currentSupply' to be a TokenAmount`\n        );\n    }\n    // required\n    if (!('maxRepresentableAmount' in decoded) || !TokenAmount.instanceOf(decoded.maxRepresentableAmount)) {\n        throw new Error(\n            `Invalid reason details: ${JSON.stringify(decoded)}. Expected 'maxRepresentableAmount' to be a TokenAmount`\n        );\n    }\n    return decoded as MintWouldOverflowDetails;\n}\n\nfunction parseTokenBalanceInsufficient(decoded: unknown): TokenBalanceInsufficientDetails {\n    if (typeof decoded !== 'object' || decoded === null) {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected an object.`);\n    }\n    // required\n    if (!('index' in decoded) || typeof decoded.index !== 'number') {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected 'index' to be a number`);\n    }\n    // required\n    if (!('availableBalance' in decoded) || !TokenAmount.instanceOf(decoded.availableBalance)) {\n        throw new Error(\n            `Invalid reason details: ${JSON.stringify(decoded)}. Expected 'availableBalance' to be a TokenAmount`\n        );\n    }\n    // required\n    if (!('requiredBalance' in decoded) || !TokenAmount.instanceOf(decoded.requiredBalance)) {\n        throw new Error(\n            `Invalid reason details: ${JSON.stringify(decoded)}. Expected 'requiredBalance' to be a TokenAmount`\n        );\n    }\n    return decoded as TokenBalanceInsufficientDetails;\n}\n\nfunction parseDeserializationFailure(decoded: unknown): DeserializationFailureDetails {\n    if (typeof decoded !== 'object' || decoded === null) {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected an object.`);\n    }\n    // optional\n    if ('cause' in decoded && typeof decoded.cause !== 'string') {\n        throw new Error(\n            `Invalid reason details: ${JSON.stringify(decoded)}. Expected 'cause' to be a string if present`\n        );\n    }\n    return decoded as DeserializationFailureDetails;\n}\n\nfunction parseUnsupportedOperation(decoded: unknown): UnsupportedOperationDetails {\n    if (typeof decoded !== 'object' || decoded === null) {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected an object.`);\n    }\n    // required\n    if (!('index' in decoded) || typeof decoded.index !== 'number') {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected 'index' to be a number`);\n    }\n    // required\n    if (!('operationType' in decoded) || typeof decoded.operationType !== 'string') {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected 'operationType' to be a string`);\n    }\n    // optional\n    if ('reason' in decoded && typeof decoded.reason !== 'string') {\n        throw new Error(\n            `Invalid reason details: ${JSON.stringify(decoded)}. Expected 'reason' to be a string if present`\n        );\n    }\n    return decoded as UnsupportedOperationDetails;\n}\n\nfunction parseOperationNotPermitted(decoded: unknown): OperationNotPermittedDetails {\n    if (typeof decoded !== 'object' || decoded === null) {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected an object.`);\n    }\n    // required\n    if (!('index' in decoded) || typeof decoded.index !== 'number') {\n        throw new Error(`Invalid reason details: ${JSON.stringify(decoded)}. Expected 'index' to be a number`);\n    }\n    // optional\n    if ('address' in decoded && !CborAccountAddress.instanceOf(decoded.address)) {\n        throw new Error(\n            `Invalid reason details: ${JSON.stringify(decoded)}. Expected 'address' to be a CborAccountAddress if present`\n        );\n    }\n    // optional\n    if ('reason' in decoded && typeof decoded.reason !== 'string') {\n        throw new Error(\n            `Invalid reason details: ${JSON.stringify(decoded)}. Expected 'reason' to be a string if present`\n        );\n    }\n    return decoded as OperationNotPermittedDetails;\n}\n\n/**\n * Parses a token module reject reason, decoding the details from CBOR format.\n *\n * @param rejectReason - The token module reject reason to parse.\n * @returns The parsed token module reject reason with decoded details.\n *\n * @example\n * const parsedReason = parseTokenModuleRejectReason(encodedReason);\n * switch (parsedReason.type) {\n *   // typed details are now available, e.g.:\n *   case TokenRejectReasonType.MintWouldOverflow: console.log(parsedReason.requestedAmount);\n *   ...\n *   default: console.warn('Unknown reject reason:', parsedReason);\n * }\n */\nexport function parseTokenModuleRejectReason(\n    rejectReason: EncodedTokenModuleRejectReason\n): TokenModuleRejectReason | UnknownTokenRejectReason {\n    const decoded = cborDecode(rejectReason.details.bytes);\n    switch (rejectReason.type) {\n        case TokenRejectReasonType.AddressNotFound:\n            return { ...rejectReason, type: rejectReason.type, details: parseAddressNotFound(decoded) };\n        case TokenRejectReasonType.MintWouldOverflow:\n            return { ...rejectReason, type: rejectReason.type, details: parseMintWouldOverflow(decoded) };\n        case TokenRejectReasonType.TokenBalanceInsufficient:\n            return { ...rejectReason, type: rejectReason.type, details: parseTokenBalanceInsufficient(decoded) };\n        case TokenRejectReasonType.DeserializationFailure:\n            return { ...rejectReason, type: rejectReason.type, details: parseDeserializationFailure(decoded) };\n        case TokenRejectReasonType.UnsupportedOperation:\n            return { ...rejectReason, type: rejectReason.type, details: parseUnsupportedOperation(decoded) };\n        case TokenRejectReasonType.OperationNotPermitted:\n            return { ...rejectReason, type: rejectReason.type, details: parseOperationNotPermitted(decoded) };\n        default:\n            return { ...rejectReason, details: decoded };\n    }\n}\n","export var DeferredState;\n(function (DeferredState) {\n    DeferredState[DeferredState[\"PENDING\"] = 0] = \"PENDING\";\n    DeferredState[DeferredState[\"REJECTED\"] = 1] = \"REJECTED\";\n    DeferredState[DeferredState[\"RESOLVED\"] = 2] = \"RESOLVED\";\n})(DeferredState || (DeferredState = {}));\n/**\n * A deferred promise. This is a \"controller\" for a promise, which lets you\n * pass a promise around and reject or resolve it from the outside.\n *\n * Warning: This class is to be used with care. Using it can make code very\n * difficult to read. It is intended for use in library code that exposes\n * promises, not for regular business logic.\n */\nexport class Deferred {\n    /**\n     * @param preventUnhandledRejectionWarning - prevents the warning\n     * \"Unhandled Promise rejection\" by adding a noop rejection handler.\n     * Working with calls returned from the runtime-rpc package in an\n     * async function usually means awaiting one call property after\n     * the other. This means that the \"status\" is not being awaited when\n     * an earlier await for the \"headers\" is rejected. This causes the\n     * \"unhandled promise reject\" warning. A more correct behaviour for\n     * calls might be to become aware whether at least one of the\n     * promises is handled and swallow the rejection warning for the\n     * others.\n     */\n    constructor(preventUnhandledRejectionWarning = true) {\n        this._state = DeferredState.PENDING;\n        this._promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n        if (preventUnhandledRejectionWarning) {\n            this._promise.catch(_ => { });\n        }\n    }\n    /**\n     * Get the current state of the promise.\n     */\n    get state() {\n        return this._state;\n    }\n    /**\n     * Get the deferred promise.\n     */\n    get promise() {\n        return this._promise;\n    }\n    /**\n     * Resolve the promise. Throws if the promise is already resolved or rejected.\n     */\n    resolve(value) {\n        if (this.state !== DeferredState.PENDING)\n            throw new Error(`cannot resolve ${DeferredState[this.state].toLowerCase()}`);\n        this._resolve(value);\n        this._state = DeferredState.RESOLVED;\n    }\n    /**\n     * Reject the promise. Throws if the promise is already resolved or rejected.\n     */\n    reject(reason) {\n        if (this.state !== DeferredState.PENDING)\n            throw new Error(`cannot reject ${DeferredState[this.state].toLowerCase()}`);\n        this._reject(reason);\n        this._state = DeferredState.REJECTED;\n    }\n    /**\n     * Resolve the promise. Ignore if not pending.\n     */\n    resolvePending(val) {\n        if (this._state === DeferredState.PENDING)\n            this.resolve(val);\n    }\n    /**\n     * Reject the promise. Ignore if not pending.\n     */\n    rejectPending(reason) {\n        if (this._state === DeferredState.PENDING)\n            this.reject(reason);\n    }\n}\n","export { CIS3 } from './util.js';\nexport * from './CIS3Contract.js';\n","import type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.ContractAddress;\ntype ContractAddressLike<T> = { index: T; subindex: T };\nexport type Serializable = ContractAddressLike<string>;\n\n/** Address of a smart contract instance. */\nclass ContractAddress implements ContractAddressLike<bigint> {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** The index of the smart contract address. */\n        public readonly index: bigint,\n        /** The subindex of the smart contract address. */\n        public readonly subindex: bigint\n    ) {}\n\n    /**\n     * Get a string representation of the contract address using the `<index, subindex>` format.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return `<${this.index}, ${this.subindex}>`;\n    }\n}\n\n/**\n * Unwraps {@linkcode Type} value\n *\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON({ index, subindex }: Type): ContractAddressLike<bigint> {\n    return { index, subindex };\n}\n\n/** Address of a smart contract instance. */\nexport type Type = ContractAddress;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is ContractAddress {\n    return value instanceof ContractAddress;\n}\n\n/**\n * Construct a ContractAddress type.\n * @param {number | bigint} index The index of the smart contract instance.\n * @param {number | bigint} [subindex] The subindex of the smart contract instance. Defaults to 0.\n * @throws If provided index or subindex is sub-zero.\n * @returns {ContractAddress}\n */\nexport function create(index: number | bigint, subindex: number | bigint = 0n): ContractAddress {\n    if (index < 0) {\n        throw new Error('Invalid contract address: The index cannot be a negative number.');\n    }\n    if (subindex < 0) {\n        throw new Error('Invalid contract address: The subindex cannot be a negative number.');\n    }\n    return new ContractAddress(BigInt(index), BigInt(subindex));\n}\n\n/** Type used when encoding a contract address in the JSON format used when serializing using a smart contract schema type. */\nexport type SchemaValue = {\n    index: bigint;\n    subindex: bigint;\n};\n\n/**\n * Get contract address in the JSON format used when serializing using a smart contract schema type.\n * @param {ContractAddress} contractAddress The contract address.\n * @returns {SchemaValue} The schema JSON representation.\n */\nexport function toSchemaValue(contractAddress: ContractAddress): SchemaValue {\n    return { index: contractAddress.index, subindex: contractAddress.subindex };\n}\n\n/**\n * Convert to contract address from JSON format used when serializing using a smart contract schema type.\n * @param {SchemaValue} contractAddress The contract address in schema JSON format.\n * @returns {ContractAddress} The contract address.\n */\nexport function fromSchemaValue(contractAddress: SchemaValue): ContractAddress {\n    return create(contractAddress.index, contractAddress.subindex);\n}\n\n/**\n * Convert a smart contract address from its protobuf encoding.\n * @param {Proto.ContractAddress} contractAddress The contract address in protobuf.\n * @returns {ContractAddress} The contract address.\n */\nexport function fromProto(contractAddress: Proto.ContractAddress): ContractAddress {\n    return create(contractAddress.index, contractAddress.subindex);\n}\n\n/**\n * Convert a smart contract address into its protobuf encoding.\n * @param {ContractAddress} contractAddress The contract address.\n * @returns {Proto.ContractAddress} The protobuf encoding.\n */\nexport function toProto(contractAddress: ContractAddress): Proto.ContractAddress {\n    return {\n        index: contractAddress.index,\n        subindex: contractAddress.subindex,\n    };\n}\n\n/**\n * Check if two contract addresses are the same.\n * @param {ContractAddress} left\n * @param {ContractAddress} right\n * @returns {boolean} True if they are equal.\n */\nexport function equals(left: ContractAddress, right: ContractAddress): boolean {\n    return left.index === right.index && left.subindex === right.subindex;\n}\n\n/**\n * Constructs a {@linkcode ContractAddress} from {@linkcode Serializable}.\n * @param {Serializable} value\n * @returns {ContractAddress} The contract address.\n */\nexport function fromSerializable(value: Serializable): ContractAddress {\n    return new ContractAddress(BigInt(value.index), BigInt(value.subindex));\n}\n\n/**\n * Converts {@linkcode ContractAddress} into {@linkcode Serializable}.\n * @param {ContractAddress} contractAddress\n * @returns {Serializable} The serializable contract address\n */\nexport function toSerializable(contractAddress: ContractAddress): Serializable {\n    return {\n        index: contractAddress.index.toString(),\n        subindex: contractAddress.subindex.toString(),\n    };\n}\n\n/**\n * Converts {@linkcode ContractAddress} into a string using the `<index, subindex>` format.\n * @deprecated Use the {@linkcode ContractAddress.toString} method instead.\n * @param {ContractAddress} contractAddress\n * @returns {string} The string representation of the address.\n */\nexport function toString(contractAddress: ContractAddress): string {\n    return `<${contractAddress.index}, ${contractAddress.subindex}>`;\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode toSerializable} function instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: ContractAddress): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toSerializable(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromSerializable} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromSerializable);\n","import{DCBOR_INT as h,MT as a,NUMBYTES as u}from\"./constants.js\";import{DiagnosticSizes as j}from\"./options.js\";import{sortCoreDeterministic as y}from\"./sorts.js\";import{box as f,getEncoded as b,saveEncoded as N}from\"./box.js\";import{defaultEncodeOptions as E,encode as T}from\"./encoder.js\";import{stringToHex as p,u8concat as S,u8toHex as g}from\"./utils.js\";import{DecodeStream as I}from\"./decodeStream.js\";import{Simple as O}from\"./simple.js\";import{Tag as m}from\"./tag.js\";import{checkSubnormal as D}from\"./float.js\";const v=new Map([[u.ZERO,1],[u.ONE,2],[u.TWO,3],[u.FOUR,5],[u.EIGHT,9]]),A=new Uint8Array(0);function k(d,r){return!r.boxed&&!r.preferMap&&d.every(([i])=>typeof i==\"string\")?Object.fromEntries(d):new Map(d)}class w{static defaultDecodeOptions={...I.defaultOptions,ParentType:w,boxed:!1,cde:!1,dcbor:!1,diagnosticSizes:j.PREFERRED,convertUnsafeIntsToFloat:!1,createObject:k,pretty:!1,preferMap:!1,rejectLargeNegatives:!1,rejectBigInts:!1,rejectDuplicateKeys:!1,rejectFloats:!1,rejectInts:!1,rejectLongLoundNaN:!1,rejectLongFloats:!1,rejectNegativeZero:!1,rejectSimple:!1,rejectStreaming:!1,rejectStringsNotNormalizedAs:null,rejectSubnormals:!1,rejectUndefined:!1,rejectUnsafeFloatInts:!1,saveOriginal:!1,sortKeys:null};static cdeDecodeOptions={cde:!0,rejectStreaming:!0,requirePreferred:!0,sortKeys:y};static dcborDecodeOptions={...this.cdeDecodeOptions,dcbor:!0,convertUnsafeIntsToFloat:!0,rejectDuplicateKeys:!0,rejectLargeNegatives:!0,rejectLongLoundNaN:!0,rejectLongFloats:!0,rejectNegativeZero:!0,rejectSimple:!0,rejectUndefined:!0,rejectUnsafeFloatInts:!0,rejectStringsNotNormalizedAs:\"NFC\"};parent;mt;ai;left;offset;count=0;children=[];depth=0;#e;#t=null;constructor(r,i,e,t){if([this.mt,this.ai,,this.offset]=r,this.left=i,this.parent=e,this.#e=t,e&&(this.depth=e.depth+1),this.mt===a.MAP&&(this.#e.sortKeys||this.#e.rejectDuplicateKeys)&&(this.#t=[]),this.#e.rejectStreaming&&this.ai===u.INDEFINITE)throw new Error(\"Streaming not supported\")}get isStreaming(){return this.left===1/0}get done(){return this.left===0}static create(r,i,e,t){const[s,l,n,c]=r;switch(s){case a.POS_INT:case a.NEG_INT:{if(e.rejectInts)throw new Error(`Unexpected integer: ${n}`);if(e.rejectLargeNegatives&&n<-0x8000000000000000n)throw new Error(`Invalid 65bit negative number: ${n}`);let o=n;return e.convertUnsafeIntsToFloat&&o>=h.MIN&&o<=h.MAX&&(o=Number(n)),e.boxed?f(o,t.toHere(c)):o}case a.SIMPLE_FLOAT:if(l>u.ONE){if(e.rejectFloats)throw new Error(`Decoding unwanted floating point number: ${n}`);if(e.rejectNegativeZero&&Object.is(n,-0))throw new Error(\"Decoding negative zero\");if(e.rejectLongLoundNaN&&isNaN(n)){const o=t.toHere(c);if(o.length!==3||o[1]!==126||o[2]!==0)throw new Error(`Invalid NaN encoding: \"${g(o)}\"`)}if(e.rejectSubnormals&&D(t.toHere(c+1)),e.rejectLongFloats){const o=T(n,{chunkSize:9,reduceUnsafeNumbers:e.rejectUnsafeFloatInts});if(o[0]>>5!==s)throw new Error(`Should have been encoded as int, not float: ${n}`);if(o.length<v.get(l))throw new Error(`Number should have been encoded shorter: ${n}`)}if(typeof n==\"number\"&&e.boxed)return f(n,t.toHere(c))}else{if(e.rejectSimple&&n instanceof O)throw new Error(`Invalid simple value: ${n}`);if(e.rejectUndefined&&n===void 0)throw new Error(\"Unexpected undefined\")}return n;case a.BYTE_STRING:case a.UTF8_STRING:if(n===1/0)return new e.ParentType(r,1/0,i,e);if(e.rejectStringsNotNormalizedAs&&typeof n==\"string\"){const o=n.normalize(e.rejectStringsNotNormalizedAs);if(n!==o)throw new Error(`String not normalized as \"${e.rejectStringsNotNormalizedAs}\", got [${p(n)}] instead of [${p(o)}]`)}return e.boxed?f(n,t.toHere(c)):n;case a.ARRAY:return new e.ParentType(r,n,i,e);case a.MAP:return new e.ParentType(r,n*2,i,e);case a.TAG:{const o=new e.ParentType(r,1,i,e);return o.children=new m(n),o}}throw new TypeError(`Invalid major type: ${s}`)}static decodeToEncodeOpts(r){return{...E,avoidInts:r.rejectInts,float64:!r.rejectLongFloats,flushToZero:r.rejectSubnormals,largeNegativeAsBigInt:r.rejectLargeNegatives,sortKeys:r.sortKeys}}push(r,i,e){if(this.children.push(r),this.#t){const t=b(r)||i.toHere(e);this.#t.push(t)}return--this.left}replaceLast(r,i,e){let t,s=-1/0;if(this.children instanceof m?(s=0,t=this.children.contents,this.children.contents=r):(s=this.children.length-1,t=this.children[s],this.children[s]=r),this.#t){const l=b(r)||e.toHere(i.offset);this.#t[s]=l}return t}convert(r){let i;switch(this.mt){case a.ARRAY:i=this.children;break;case a.MAP:{const e=this.#r();if(this.#e.sortKeys){let t;for(const s of e){if(t&&this.#e.sortKeys(t,s)>=0)throw new Error(`Duplicate or out of order key: \"0x${s[2]}\"`);t=s}}else if(this.#e.rejectDuplicateKeys){const t=new Set;for(const[s,l,n]of e){const c=g(n);if(t.has(c))throw new Error(`Duplicate key: \"0x${c}\"`);t.add(c)}}i=this.#e.createObject(e,this.#e);break}case a.BYTE_STRING:return S(this.children);case a.UTF8_STRING:{const e=this.children.join(\"\");i=this.#e.boxed?f(e,r.toHere(this.offset)):e;break}case a.TAG:i=this.children.decode(this.#e);break;default:throw new TypeError(`Invalid mt on convert: ${this.mt}`)}return this.#e.saveOriginal&&i&&typeof i==\"object\"&&N(i,r.toHere(this.offset)),i}#r(){const r=this.children,i=r.length;if(i%2)throw new Error(\"Missing map value\");const e=new Array(i/2);if(this.#t)for(let t=0;t<i;t+=2)e[t>>1]=[r[t],r[t+1],this.#t[t]];else for(let t=0;t<i;t+=2)e[t>>1]=[r[t],r[t+1],A];return e}}export{w as CBORcontainer};\n","import { Buffer } from 'buffer/index.js';\n\nimport { HexString } from './types.js';\n\n/**\n * A wrapper around some data, which enables reading from the data without\n * having to keep track of what has already been read.\n */\nexport class Cursor {\n    private cursor = 0;\n\n    /**\n     * Constructs a `Cursor`.\n     *\n     * @param {Buffer} data - the data\n     */\n    private constructor(private data: Buffer) {}\n\n    /**\n     * Constructs a `Cursor` from hex encoded data.\n     *\n     * @param {HexString} data - the (hex encoded) data\n     *\n     * @returns {Cursor} a Cursor wrapping the data\n     */\n    public static fromHex(data: HexString): Cursor {\n        return new Cursor(Buffer.from(data, 'hex'));\n    }\n\n    /**\n     * Constructs a `Cursor` from a buffer of bytes.\n     *\n     * @param {ArrayBuffer} buffer - the buffer containing bytes.\n     *\n     * @returns {Cursor} a Cursor wrapping the data.\n     */\n    public static fromBuffer(buffer: ArrayBuffer): Cursor {\n        return new Cursor(Buffer.from(buffer));\n    }\n\n    /**\n     * Read a number of bytes from the cursor.\n     *\n     * @param {number} [numBytes=this.remainingBytes.length] - The number of bytes to read. Defaults to the remaining bytes from the cursor position.\n     *\n     * @throws If the buffer contains fewer bytes than being read.\n     *\n     * @returns {Buffer} A buffer containing the number of bytes specified from the cursor position\n     */\n    public read(numBytes: number = this.remainingBytes.length): Buffer {\n        const end = this.cursor + numBytes;\n        if (this.data.length < end) {\n            throw new Error(`Failed to read ${numBytes} bytes from the cursor.`);\n        }\n        const data = Buffer.from(this.data.subarray(this.cursor, end));\n        this.cursor += numBytes;\n        return data;\n    }\n\n    /** The remaining bytes, i.e. not including the bytes already read. */\n    public get remainingBytes(): Buffer {\n        return Buffer.from(this.data.subarray(this.cursor));\n    }\n}\n\n/**\n * Represents function for deserilizing some value from a {@link Cursor}.\n * @template A The value to deserialize.\n */\nexport interface Deserializer<A> {\n    (cursor: Cursor): A;\n}\n\n/**\n * Deserialize a single byte from the cursor.\n * @param {Cursor} cursor Cursor over the data to deserialize from.\n * @returns {number} The value of the single byte.\n * @throws If the buffer contains fewer bytes than being read.\n */\nexport function deserializeUInt8(cursor: Cursor): number {\n    return cursor.read(1).readUInt8(0);\n}\n/**\n * Deserialize a u16 little endian from the cursor.\n * @param {Cursor} cursor Cursor over the data to deserialize from.\n * @returns {number} The deserialized value.\n * @throws If the buffer contains fewer bytes than being read.\n */\nexport function deserializeUInt16LE(cursor: Cursor): number {\n    return cursor.read(2).readUInt16LE(0);\n}\n/**\n * Deserialize a u32 little endian from the cursor.\n * @param {Cursor} cursor Cursor over the data to deserialize from.\n * @returns {number} The deserialized value.\n * @throws If the buffer contains fewer bytes than being read.\n */\nexport function deserializeUInt32LE(cursor: Cursor): number {\n    return cursor.read(4).readUInt32LE(0);\n}\n/**\n * Deserialize a u64 little endian from the cursor.\n * @param {Cursor} cursor Cursor over the data to deserialize from.\n * @returns {bigint} The deserialized value.\n * @throws If the buffer contains fewer bytes than being read.\n */\nexport function deserializeBigUInt64LE(cursor: Cursor): bigint {\n    return cursor.read(8).readBigInt64LE(0).valueOf();\n}\n\n/**\n * Deserialize a u16 big endian from the cursor.\n * @param {Cursor} cursor Cursor over the data to deserialize from.\n * @returns {number} The deserialized value.\n * @throws If the buffer contains fewer bytes than being read.\n */\nexport function deserializeUInt16BE(cursor: Cursor): number {\n    return cursor.read(2).readUInt16BE(0);\n}\n/**\n * Deserialize a u32 big endian from the cursor.\n * @param {Cursor} cursor Cursor over the data to deserialize from.\n * @returns {number} The deserialized value.\n * @throws If the buffer contains fewer bytes than being read.\n */\nexport function deserializeUInt32BE(cursor: Cursor): number {\n    return cursor.read(4).readUInt32BE(0);\n}\n/**\n * Deserialize a u64 big endian from the cursor.\n * @param {Cursor} cursor Cursor over the data to deserialize from.\n * @returns {bigint} The deserialized value.\n * @throws If the buffer contains fewer bytes than being read.\n */\nexport function deserializeBigUInt64BE(cursor: Cursor): bigint {\n    return cursor.read(8).readBigInt64BE(0).valueOf();\n}\n\n/**\n * Helper function to create a function that deserializes a `HexString` value received in a smart contract response into a list of dynamic type values\n * determined by the deserialization logic defined in the callback function.\n *\n * @param {Function} deserializer - A callback function invoked with a {@link Cursor} pointing to the remaining slice of the full value given by the `input`\n * The callback function is expected to return the deserialized value  of type `R`\n *\n * @returns {Function} A function taking a single `HexString` input, returning a list of dynamic type values deserialized according to the `deserializer` function.\n */\nexport const makeDeserializeListResponse =\n    <R>(deserializer: (value: Cursor) => R) =>\n    (value: HexString): R[] => {\n        const cursor = Cursor.fromHex(value);\n        const n = cursor.read(2).readUInt16LE(0);\n        const values: R[] = [];\n\n        for (let i = 0; i < n; i++) {\n            const value = deserializer(cursor);\n            values.push(value);\n        }\n\n        return values;\n    };\n\n/**\n * Helper function to create a function that deserializes a `HexString` value into either a value or a list of values,\n * depending on a given input value. The returned function will produce a single value if the input is not an array\n * or an array of length 1, and a list of values of the same length as the input if it is an array.\n *\n * @param {T} input - The input value to compare the deserialized value against.\n * @param {Function} deserializer - A deserialization function that takes a `HexString` value and returns a list of deserialized values.\n *\n * @returns {Function} A function taking a single `HexString` input, returning either a single value or a list of values.\n */\nexport const ensureMatchesInput =\n    <T, R>(input: T, deserializer: (value: HexString) => R[]) =>\n    (value: HexString): R[] | R => {\n        const result = deserializer(value);\n        const expectList = Array.isArray(input);\n        const expectLength = expectList ? input.length : 1;\n\n        if (result.length !== expectLength) {\n            throw new Error(\n                `Expected list with length ${expectLength} when deserializing response, received list with length ${result.length}`\n            );\n        }\n\n        if (expectList) {\n            return result;\n        }\n\n        return result[0];\n    };\n","import { isAsciiAlphaNumericPunctuation } from '../contractHelpers.js';\nimport type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport * as ContractName from './ContractName.js';\nimport * as EntrypointName from './EntrypointName.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.ReceiveName;\n/**\n * @deprecated\n */\nexport type Serializable = string;\n\n/**\n * Represents a receive-function in a smart contract module.\n * A value of this type is assumed to be a valid receive name which means:\n * - It only contains ASCII alpha, numeric and punctuations.\n * - It is at most 100 characters.\n * - It contains at least one '.' character.\n */\nclass ReceiveName {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** The internal string value of the receive name. */\n        public readonly value: string\n    ) {}\n\n    /**\n     * Get a string representation of the receive name.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.value;\n    }\n\n    /**\n     * Get a JSON-serializable representation of the receive name.\n     * @returns {string} The JSON-serializable representation.\n     */\n    public toJSON(): string {\n        return this.value;\n    }\n}\n\n/**\n * Converts a `string` to a receive name.\n * @param {string} json The JSON representation of the receive name.\n * @throws If the string is not a valid receive name.\n * @returns {ReceiveName} The receive name.\n */\nexport function fromJSON(json: string): ReceiveName {\n    return fromString(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode ReceiveName.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON(value: Type): Serializable {\n    return toString(value);\n}\n\n/**\n * Represents a receive-function in a smart contract module.\n * A value of this type is assumed to be a valid receive name which means:\n * - It only contains ASCII alpha, numeric and punctuations.\n * - It is at most 100 characters.\n * - It contains at least one '.' character.\n */\nexport type Type = ReceiveName;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is ReceiveName {\n    return value instanceof ReceiveName;\n}\n\n/**\n * Create a ReceiveName.\n * @param {ContractName.Type} contractName The name of the smart contract using this receive-function.\n * @param {EntrypointName.Type} entrypointName The entrypoint of the smart contract corresponding to this receive-function.\n * @throws If the provided value is not a valid receive name.\n * @returns {ReceiveName} The receive name.\n */\nexport function create(contractName: ContractName.Type, entrypointName: EntrypointName.Type): ReceiveName {\n    return fromString(`${ContractName.toString(contractName)}.${EntrypointName.toString(entrypointName)}`);\n}\n\n/**\n * Create a smart contract receive-name from a string, ensuring it follows the required format.\n * @param {string} value The string of the receive name.\n * @throws If the provided value is not a valid receive name.\n * @returns {ReceiveName}\n */\nexport function fromString(value: string): ReceiveName {\n    if (value.length > 100) {\n        throw new Error('Invalid ReceiveName: Can be atmost 100 characters long.');\n    }\n    if (!value.includes('.')) {\n        throw new Error(\"Invalid ReceiveName: Must contain at least one '.' character.\");\n    }\n    if (!isAsciiAlphaNumericPunctuation(value)) {\n        throw new Error('Invalid ReceiveName: Must only contain ASCII alpha, numeric and punctuation characters.');\n    }\n    return new ReceiveName(value);\n}\n\n/**\n * Create a smart contract receive name from a string, but _without_ ensuring it follows the required format.\n * It is up to the caller to ensure the string is a valid receive name.\n * @param {string} value The string with the receive name.\n * @returns {ReceiveName}\n */\nexport function fromStringUnchecked(value: string): ReceiveName {\n    return new ReceiveName(value);\n}\n\n/**\n * Convert a receive name to a string\n * @deprecated Use the {@linkcode ReceiveName.toString} method instead.\n * @param {ReceiveName} receiveName The receive name to stringify.\n * @returns {string}\n */\nexport function toString(receiveName: ReceiveName): string {\n    return receiveName.value;\n}\n\n/**\n * Convert a receive name to a ContractName\n * @param {ReceiveName} receiveName The receive name to get the contract name from.\n * @returns {ContractName.Type}\n */\nexport function toContractName(receiveName: ReceiveName): ContractName.Type {\n    const splitAt = receiveName.value.indexOf('.');\n    const contractName = receiveName.value.substring(0, splitAt);\n    return ContractName.fromStringUnchecked(contractName);\n}\n\n/**\n * Convert a receive name to a EntrypointName\n * @param {ReceiveName} receiveName The receive name to get the entrypoint name from.\n * @returns {EntrypointName.Type}\n */\nexport function toEntrypointName(receiveName: ReceiveName): EntrypointName.Type {\n    const splitAt = receiveName.value.indexOf('.');\n    const entrypointName = receiveName.value.substring(splitAt + 1);\n    return EntrypointName.fromStringUnchecked(entrypointName);\n}\n\n/** Type used when encoding a receive-name in the JSON format used when serializing using a smart contract schema type. */\nexport type SchemaValue = {\n    contract: string;\n    func: string;\n};\n\n/**\n * Get receiveName in the JSON format used when serializing using a smart contract schema type.\n * @param {ReceiveName} receiveName The receive name.\n * @returns {SchemaValue} The schema JSON representation.\n */\nexport function toSchemaValue(receiveName: ReceiveName): SchemaValue {\n    const contract = ContractName.toString(toContractName(receiveName));\n    const func = EntrypointName.toString(toEntrypointName(receiveName));\n    return { contract, func };\n}\n\n/**\n * Convert to smart contract receive name from JSON format used when serializing using a smart contract schema type.\n * @param {SchemaValue} receiveName The receive name in schema JSON format.\n * @returns {ReceiveName} The receive name.\n */\nexport function fromSchemaValue(receiveName: SchemaValue): ReceiveName {\n    return fromString(`${receiveName.contract}.${receiveName.func}`);\n}\n\n/**\n * Convert a smart contract receive name from its protobuf encoding.\n * @param {Proto.ReceiveName} receiveName The protobuf encoding.\n * @returns {ReceiveName}\n */\nexport function fromProto(receiveName: Proto.ReceiveName): ReceiveName {\n    return fromStringUnchecked(receiveName.value);\n}\n\n/**\n * Convert a smart contract receive name into its protobuf encoding.\n * @param {ReceiveName} receiveName The receive name.\n * @returns {Proto.ReceiveName} The protobuf encoding.\n */\nexport function toProto(receiveName: ReceiveName): Proto.ReceiveName {\n    return {\n        value: receiveName.value,\n    };\n}\n\n/**\n * Check if two smart contract receive names represent the same.\n * @param {ReceiveName} left\n * @param {ReceiveName} right\n * @returns {boolean} True if they are equal.\n */\nexport function equals(left: ReceiveName, right: ReceiveName): boolean {\n    return left.value === right.value;\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode ReceiveName.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON({ value }: ReceiveName): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value,\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the{@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromString);\n","/**\n * Converts snake_case to lowerCamelCase.\n *\n * Should behave like protoc:\n * https://github.com/protocolbuffers/protobuf/blob/e8ae137c96444ea313485ed1118c5e43b2099cf1/src/google/protobuf/compiler/java/java_helpers.cc#L118\n */\nexport function lowerCamelCase(snakeCase) {\n    let capNext = false;\n    const sb = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let next = snakeCase.charAt(i);\n        if (next == '_') {\n            capNext = true;\n        }\n        else if (/\\d/.test(next)) {\n            sb.push(next);\n            capNext = true;\n        }\n        else if (capNext) {\n            sb.push(next.toUpperCase());\n            capNext = false;\n        }\n        else if (i == 0) {\n            sb.push(next.toLowerCase());\n        }\n        else {\n            sb.push(next);\n        }\n    }\n    return sb.join('');\n}\n","export { toBuffer } from '../util.js';\n","/**\n * @module Common GRPC-Client\n */\nimport type { Known, Upward } from './grpc/index.js';\nimport type { Cbor, TokenId } from './plt/index.js';\nimport type { TokenAccountInfo } from './plt/types.js';\nimport type * as AccountAddress from './types/AccountAddress.js';\nimport type * as BlockHash from './types/BlockHash.js';\nimport type * as CcdAmount from './types/CcdAmount.js';\nimport type * as ContractAddress from './types/ContractAddress.js';\nimport type * as ContractName from './types/ContractName.js';\nimport type * as CredentialRegistrationId from './types/CredentialRegistrationId.js';\nimport type { DataBlob } from './types/DataBlob.js';\nimport type * as Duration from './types/Duration.js';\nimport type * as Energy from './types/Energy.js';\nimport type * as InitName from './types/InitName.js';\nimport type * as ModuleReference from './types/ModuleReference.js';\nimport type * as Parameter from './types/Parameter.js';\nimport type * as ReceiveName from './types/ReceiveName.js';\nimport type * as ReturnValue from './types/ReturnValue.js';\nimport type * as SequenceNumber from './types/SequenceNumber.js';\nimport type * as Timestamp from './types/Timestamp.js';\nimport type * as TransactionExpiry from './types/TransactionExpiry.js';\nimport type * as TransactionHash from './types/TransactionHash.js';\nimport type { RejectReason } from './types/rejectReason.js';\nimport type { ContractTraceEvent } from './types/transactionEvent.js';\n\nexport * from './types/NodeInfo.js';\nexport * from './types/PeerInfo.js';\nexport * from './types/blockItemSummary.js';\nexport * from './types/chainUpdate.js';\nexport * from './types/rejectReason.js';\nexport * from './types/transactionEvent.js';\nexport * from './types/BlockSpecialEvents.js';\nexport * from './types/errors.js';\n\nexport type HexString = string;\nexport type Base58String = string;\nexport type Base64String = string;\nexport type DigitString = string;\nexport type UrlString = string;\nexport type IpAddressString = string;\nexport type JsonString = string;\n\n/** A smart contract module reference. This is always 32 bytes long. */\nexport type ModuleRef = HexString;\n/** The signature of a 'QuorumCertificate'. the bytes have a fixed length of 48 bytes. */\nexport type QuorumSignature = HexString;\n/** The signature of a 'TimeoutCertificate'. the bytes have a fixed length of 48 bytes. */\nexport type TimeoutSignature = HexString;\n/**\n * A proof that establishes that the successor block of\n * a 'EpochFinalizationEntry' is the immediate successor of\n * the finalized block.\n *\n * The bytes have a fixed length of 32 bytes.\n */\nexport type SuccessorProof = HexString;\n/** Baker's public key used to check whether they won the lottery or not. */\nexport type BakerElectionVerifyKey = HexString;\n/** Baker's public key used to check that they are indeed the ones who produced the block. */\nexport type BakerSignatureVerifyKey = HexString;\n/**\n * Baker's public key used to check signatures on finalization records.\n * This is only used if the baker has sufficient stake to participate in\n * finalization.\n */\nexport type BakerAggregationVerifyKey = HexString;\n\n/** A consensus round */\nexport type Round = bigint;\n\n/**\n * Utility type that takes an object type and makes the hover overlay more readable.\n *\n * @example\n * type ComplexType = {test: string;} & {another: number;}; // Hovering this type shows: {test: string;} & {another: number;}\n * type Test = Compute<ComplexType>; // Now it shows: {test: string; another: number;}\n */\ntype Compute<T> = {\n    [K in keyof T]: T[K];\n} & unknown;\n\n/**\n * The number of chain restarts via a protocol update. An effected\n * protocol update instruction might not change the protocol version\n * specified in the previous field, but it always increments the genesis\n * index.\n */\nexport type GenesisIndex = number;\n\n/**\n * Makes keys of type optional\n *\n * @example\n * type PartiallyOptionalProps = MakeOptional<{test: string; another: number;}, 'another'>; // {test: string; another?: number;}\n */\nexport type MakeOptional<T, K extends keyof T> = Compute<Omit<T, K> & Partial<Pick<T, K>>>;\n\n/** Makes keys of type required (i.e. non-optional) */\nexport type MakeRequired<T, K extends keyof T> = Compute<Required<Pick<T, K>> & Omit<T, K>>;\n/**\n * Returns a union of all keys of type T with values matching type V.\n */\nexport type KeysMatching<T, V> = {\n    [K in keyof T]-?: T[K] extends V ? K : never;\n}[keyof T];\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport interface Versioned<T> {\n    v: number;\n    value: T;\n}\n\nexport enum AttributesKeys {\n    firstName,\n    lastName,\n    sex,\n    dob,\n    countryOfResidence,\n    nationality,\n    idDocType,\n    idDocNo,\n    idDocIssuer,\n    idDocIssuedAt,\n    idDocExpiresAt,\n    nationalIdNo,\n    taxIdNo,\n    lei,\n    legalName,\n    legalCountry,\n    businessNumber,\n    registrationAuth,\n}\n\nexport type Attributes = {\n    [P in keyof typeof AttributesKeys]: string;\n};\nexport type AttributeKey = keyof Attributes;\n\nexport enum AttributeKeyString {\n    firstName = 'firstName',\n    lastName = 'lastName',\n    sex = 'sex',\n    dob = 'dob',\n    countryOfResidence = 'countryOfResidence',\n    nationality = 'nationality',\n    idDocType = 'idDocType',\n    idDocNo = 'idDocNo',\n    idDocIssuer = 'idDocIssuer',\n    idDocIssuedAt = 'idDocIssuedAt',\n    idDocExpiresAt = 'idDocExpiresAt',\n    nationalIdNo = 'nationalIdNo',\n    taxIdNo = 'taxIdNo',\n    lei = 'lei',\n    legalName = 'legalName',\n    legalCountry = 'legalCountry',\n    businessNumber = 'businessNumber',\n    registrationAuth = 'registrationAuth',\n}\n\nexport enum Sex {\n    NotKnown = '0',\n    Male = '1',\n    Female = '2',\n    NA = '9',\n}\n\nexport enum IdDocType {\n    NA = '0',\n    Passport = '1',\n    NationalIdCard = '2',\n    DriversLicense = '3',\n    ImmigrationCard = '4',\n}\n\nexport enum TransactionStatusEnum {\n    Received = 'received',\n    Finalized = 'finalized',\n    Committed = 'committed',\n}\n\nexport interface AddressAccount {\n    type: 'AddressAccount';\n    address: AccountAddress.Type;\n}\n\nexport type AccountIdentifierInput = AccountAddress.Type | CredentialRegistrationId.Type | bigint;\n\nexport type Address =\n    | {\n          type: 'AddressContract';\n          address: ContractAddress.Type;\n      }\n    | AddressAccount;\n\nexport enum TransactionSummaryType {\n    AccountTransaction = 'accountTransaction',\n    CredentialDeploymentTransaction = 'credentialDeploymentTransaction',\n    AccountCreation = 'accountCreation',\n    UpdateTransaction = 'updateTransaction',\n    TokenCreation = 'tokenCreation',\n}\n\ninterface BaseTransactionSummaryType {\n    type: TransactionSummaryType;\n}\n\nexport interface TransferWithMemoSummaryType extends BaseTransactionSummaryType {\n    contents: 'transferWithMemo';\n}\n\nexport interface GenericTransactionSummaryType extends BaseTransactionSummaryType {\n    contents: string;\n}\n\nexport interface BaseTransactionSummary {\n    sender?: AccountAddress.Type;\n    hash: TransactionHash.Type;\n\n    cost: CcdAmount.Type;\n    energyCost: Energy.Type;\n    index: bigint;\n}\n\nexport interface Ratio {\n    numerator: bigint;\n    denominator: bigint;\n}\n\nexport type ExchangeRate = Ratio;\n\nexport interface InclusiveRange<N extends number> {\n    min: N;\n    max: N;\n}\n\nexport type DurationSeconds = bigint;\n/** Index of an epoch, or number of epochs. */\nexport type Epoch = bigint;\n\nexport interface TransactionFeeDistribution {\n    baker: number;\n    gasAccount: number;\n}\n\nexport interface MintRate {\n    mantissa: number;\n    exponent: number;\n}\n\ninterface MintDistributionCommon {\n    bakingReward: number;\n    finalizationReward: number;\n}\n\nexport interface MintDistributionV0 extends MintDistributionCommon {\n    version: 0;\n    mintPerSlot: number;\n}\n\nexport interface MintDistributionV1 extends MintDistributionCommon {\n    version: 1;\n}\n\nexport type MintDistribution = MintDistributionV0 | MintDistributionV1;\n\n/** Common gas rewards properties across all protocol versions */\nexport interface GasRewardsCommon {\n    /** The fractional amount paid to the baker */\n    baker: number;\n    /** The fractional amount paid for an account creation */\n    accountCreation: number;\n    /** The fractional amount paid for a chain update */\n    chainUpdate: number;\n}\n\n/** Gas rewards properties for protocol version 1-5 ({@link ChainParametersV0} and {@link ChainParametersV1}). */\nexport interface GasRewardsV0 extends GasRewardsCommon {\n    version: 0;\n    /** The fractional amount paid for including a finalization proof */\n    finalizationProof: number;\n}\n\n/** Gas rewards properties from protocol version 6 ({@link ChainParametersV2}). */\nexport interface GasRewardsV1 extends GasRewardsCommon {\n    version: 1;\n}\n\n/** Common reward parameters used across all protocol versions */\nexport interface RewardParametersCommon {\n    /** The current transaction fee distribution */\n    transactionFeeDistribution: TransactionFeeDistribution;\n}\n\n/** Reward parameters used from protocol version 1-3 ({@link ChainParametersV0}). */\nexport interface RewardParametersV0 extends RewardParametersCommon {\n    version: 0;\n    /** The current mint distribution */\n    mintDistribution: MintDistributionV0;\n    /** The current gas rewards parameters */\n    gASRewards: GasRewardsV0;\n}\n\n/** Reward parameters used in protocol versions 4 and 5 ({@link ChainParametersV1}). */\nexport interface RewardParametersV1 extends RewardParametersCommon {\n    version: 1;\n    /** The current mint distribution */\n    mintDistribution: MintDistributionV1;\n    /** The current gas rewards parameters */\n    gASRewards: GasRewardsV0;\n}\n\n/** Reward parameters used from protocol version 6 ({@link ChainParametersV2}). */\nexport interface RewardParametersV2 extends RewardParametersCommon {\n    version: 2;\n    /** The current mint distribution */\n    mintDistribution: MintDistributionV1;\n    /** The current gas rewards parameters */\n    gASRewards: GasRewardsV1;\n}\n\n/** Cooldown parameters used from protocol version 1-3 */\nexport interface CooldownParametersV0 {\n    /** The baker cooldown period in {@link Epoch} epochs */\n    bakerCooldownEpochs: Epoch;\n}\n\n/** Cooldown parameters used from protocol version 4 */\nexport interface CooldownParametersV1 {\n    /** The pool owner (baker) cooldown period in seconds */\n    poolOwnerCooldown: DurationSeconds;\n    /** The delegator cooldown period in seconds */\n    delegatorCooldown: DurationSeconds;\n}\n\n/** Pool parameters used from protocol version 1-3 */\nexport interface PoolParametersV0 {\n    /** The minimum threshold to stake to become a baker. */\n    minimumThresholdForBaking: CcdAmount.Type;\n}\n\n/** Pool parameters used from protocol version 4 */\nexport interface PoolParametersV1 {\n    /** Fraction of finalization rewards charged by the passive delegation. */\n    passiveFinalizationCommission: number;\n    /** Fraction of baking rewards charged by the passive delegation.*/\n    passiveBakingCommission: number;\n    /* Fraction of transaction rewards charged by the L-pool.*/\n    passiveTransactionCommission: number;\n    /** Fraction of finalization rewards charged by the pool owner. */\n    finalizationCommissionRange: InclusiveRange<number>;\n    /** Fraction of baking rewards charged by the pool owner. */\n    bakingCommissionRange: InclusiveRange<number>;\n    /** Fraction of transaction rewards charged by the pool owner. */\n    transactionCommissionRange: InclusiveRange<number>;\n    /** Minimum equity capital required for a new baker.*/\n    minimumEquityCapital: CcdAmount.Type;\n    /**\n     * Maximum fraction of the total staked capital of that a new baker can\n     * have.\n     */\n    capitalBound: number;\n    /**\n     * The maximum leverage that a baker can have as a ratio of total stake\n     * to equity capital.\n     */\n    leverageBound: Ratio;\n}\n\n/**\n * Time parameters used from protocol version 4\n * These consist of the reward period length and the mint rate per payday. These are coupled as\n * a change to either affects the overall rate of minting.\n */\nexport interface TimeParametersV1 {\n    /** The length of a reward period, in {@link Epoch} epochs. */\n    rewardPeriodLength: Epoch;\n    /** The rate at which CCD is minted per payday. */\n    mintPerPayday: number;\n}\n\n/** Parameters that determine timeouts in the consensus protocol used from protocol version 6. */\nexport interface TimeoutParameters {\n    /** The base value for triggering a timeout, in milliseconds. */\n    timeoutBase: Duration.Type;\n    /** Factor for increasing the timeout. Must be greater than 1. */\n    timeoutIncrease: Ratio;\n    /** Factor for decreasing the timeout. Must be between 0 and 1. */\n    timeoutDecrease: Ratio;\n}\n\n/** Consensus parameters, used from protocol version 6 */\nexport interface ConsensusParameters {\n    /** Minimum time interval between blocks. */\n    minBlockTime: Duration.Type;\n    /** Maximum energy allowed per block. */\n    blockEnergyLimit: Energy.Type;\n}\n\n/**\n * Finalization committee parameters, used from protocol version 6\n */\nexport interface FinalizationCommitteeParameters {\n    /** The minimum size of a finalization committee before `finalizerRelativeStakeThreshold` takes effect. */\n    minimumFinalizers: number;\n    /** The maximum size of a finalization committee. */\n    maximumFinalizers: number;\n    /**\n     * The threshold for determining the stake required for being eligible the finalization committee.\n     * The amount is given by `total stake in pools * finalizerRelativeStakeThreshold`.\n     * Subsequently, this will alwas be a number between 0 and 1.\n     */\n    finalizerRelativeStakeThreshold: number;\n}\n\n/** Common chain parameters across all protocol versions */\nexport interface ChainParametersCommon {\n    /** Rate of euros per energy */\n    euroPerEnergy: ExchangeRate;\n    /** Rate of micro CCD per euro */\n    microGTUPerEuro: ExchangeRate;\n    /** Limit for the number of account creations in a block */\n    accountCreationLimit: number;\n    /** The chain foundation account */\n    foundationAccount: AccountAddress.Type;\n    /** Keys allowed to do level1 updates */\n    level1Keys: KeysWithThreshold;\n    /** Keys allowed to do root updates */\n    rootKeys: KeysWithThreshold;\n}\n\n/** Chain parameters used from protocol version 1-3 */\nexport type ChainParametersV0 = ChainParametersCommon &\n    CooldownParametersV0 &\n    PoolParametersV0 & {\n        version: 0;\n        /** The election difficulty for consensus lottery */\n        electionDifficulty: number;\n        /** The election difficulty for consensus lottery */\n        rewardParameters: RewardParametersV0;\n        /** Keys allowed to do parameter updates */\n        level2Keys: AuthorizationsV0;\n    };\n\n/** Chain parameters used in protocol versions 4 and 5 */\nexport type ChainParametersV1 = ChainParametersCommon &\n    CooldownParametersV1 &\n    TimeParametersV1 &\n    PoolParametersV1 & {\n        version: 1;\n        /** The election difficulty for consensus lottery */\n        electionDifficulty: number;\n        /** The election difficulty for consensus lottery */\n        rewardParameters: RewardParametersV1;\n        /** Keys allowed to do parameter updates */\n        level2Keys: AuthorizationsV1;\n    };\n\n/** Chain parameters used in protocol version 6 and 7 */\nexport type ChainParametersV2 = ChainParametersCommon &\n    CooldownParametersV1 &\n    TimeParametersV1 &\n    PoolParametersV1 &\n    FinalizationCommitteeParameters &\n    TimeoutParameters &\n    ConsensusParameters & {\n        version: 2;\n        /** The election difficulty for consensus lottery */\n        rewardParameters: RewardParametersV2;\n        /** Keys allowed to do parameter updates */\n        level2Keys: AuthorizationsV1;\n    };\n\n/**\n * Validator score parameters. These parameters control the threshold of\n * maximal missed rounds before a validator gets suspended.\n */\nexport interface ValidatorScoreParameters {\n    /** Maximal number of missed rounds before a validator gets suspended. */\n    maxMissedRounds: bigint;\n}\n\n/** Chain parameters used from protocol version 8 */\nexport type ChainParametersV3 = Omit<ChainParametersV2, 'version'> & {\n    version: 3;\n    /** The current validator score parameters */\n    validatorScoreParameters: ValidatorScoreParameters;\n};\n\n/** Union of all chain parameters across all protocol versions */\nexport type ChainParameters = ChainParametersV0 | ChainParametersV1 | ChainParametersV2 | ChainParametersV3;\n\nexport interface Authorization {\n    threshold: number;\n    authorizedKeys: number[];\n}\n\ninterface AuthorizationsCommon {\n    emergency: Authorization;\n    microGTUPerEuro: Authorization;\n    euroPerEnergy: Authorization;\n    transactionFeeDistribution: Authorization;\n    foundationAccount: Authorization;\n    mintDistribution: Authorization;\n    protocol: Authorization;\n    paramGASRewards: Authorization;\n    /**\n     * For protocol version 3 and earlier, this controls the authorization of the bakerStakeThreshold update.\n     */\n    poolParameters: Authorization;\n    /**\n     * For protocol version 6 and later, this controls the authorization of consensus related updates.\n     */\n    electionDifficulty: Authorization;\n    addAnonymityRevoker: Authorization;\n    addIdentityProvider: Authorization;\n    /** The authorization keys. */\n    keys: UpdatePublicKey[];\n}\n\n/**\n * Used from protocol version 1-3\n */\nexport interface AuthorizationsV0 extends AuthorizationsCommon {\n    version: 0;\n}\n\n/**\n * Used from protocol version 4\n */\nexport interface AuthorizationsV1 extends AuthorizationsCommon {\n    version: 1;\n    cooldownParameters: Authorization;\n    timeParameters: Authorization;\n    /** Available from protocol 9 */\n    createPlt?: Authorization;\n}\n\nexport type Authorizations = AuthorizationsV0 | AuthorizationsV1;\n\nexport interface KeysWithThreshold {\n    /** The authorization keys. */\n    keys: UpdatePublicKey[];\n    threshold: number;\n}\n\ninterface RewardStatusCommon {\n    protocolVersion?: bigint;\n    totalAmount: CcdAmount.Type;\n    totalEncryptedAmount: CcdAmount.Type;\n    bakingRewardAccount: CcdAmount.Type;\n    finalizationRewardAccount: CcdAmount.Type;\n    gasAccount: CcdAmount.Type;\n}\n\nexport interface RewardStatusV0 extends RewardStatusCommon {\n    version: 0;\n}\n\nexport interface RewardStatusV1 extends RewardStatusCommon {\n    version: 1;\n    foundationTransactionRewards: CcdAmount.Type;\n    nextPaydayTime: Date;\n    nextPaydayMintRate: MintRate;\n    totalStakedCapital: CcdAmount.Type;\n    protocolVersion: bigint;\n}\n\nexport type RewardStatus = RewardStatusV0 | RewardStatusV1;\nexport type TokenomicsInfo = RewardStatus;\n\n/** Common properties for block info across all protocol versions */\nexport interface BlockInfoCommon {\n    /**\n     * Hash of parent block. For the initial genesis block (i.e. not re-genesis)\n     * this will be the hash of the block itself\n     */\n    blockParent: BlockHash.Type;\n    /** Hash of block */\n    blockHash: BlockHash.Type;\n    /** Hash of block state */\n    blockStateHash: HexString;\n    /** Hash of last finalized block when this block was baked */\n    blockLastFinalized: BlockHash.Type;\n\n    /** The absolute height of this (i.e. relative to the initial genesis block) */\n    blockHeight: bigint;\n    /** The baker ID of the baker for this block. Not available for a genesis block */\n    blockBaker?: BakerId;\n\n    /** The time the block was verified */\n    blockArriveTime: Date;\n    /** The time the block was received */\n    blockReceiveTime: Date;\n    /** The time of the slot in which the block was baked */\n    blockSlotTime: Date;\n\n    /** Whether the block is finalized */\n    finalized: boolean;\n\n    /** The number of transactions in the block */\n    transactionCount: bigint;\n    /** The total byte size of all transactions in the block */\n    transactionsSize: bigint;\n    /** The energy cost of the transactions in the block */\n    transactionEnergyCost: Energy.Type;\n\n    /**\n     * The genesis index for the block. This counst the number of protocol updates that have\n     * preceeded this block, and defines the era of the block.\n     */\n    genesisIndex: GenesisIndex;\n    /** The height of this block relative to the (re)genesis block of its era */\n    eraBlockHeight: number;\n    /** The protocol version the block belongs to */\n    protocolVersion: bigint;\n}\n\n/** Block info used for protocol version 1-5 */\nexport interface BlockInfoV0 extends BlockInfoCommon {\n    version: 0;\n    /** The slot number in which the block was baked. */\n    blockSlot: bigint;\n}\n\n/** Block info used from protocol version 6 */\nexport interface BlockInfoV1 extends BlockInfoCommon {\n    version: 1;\n    /** The block round */\n    round: Round;\n    /** The block epoch */\n    epoch: Epoch;\n}\n\n/** Union of all block info versions */\nexport type BlockInfo = BlockInfoV0 | BlockInfoV1;\n\nexport interface CommonBlockInfo {\n    hash: BlockHash.Type;\n    height: bigint;\n}\n\nexport type ArrivedBlockInfo = CommonBlockInfo;\nexport type FinalizedBlockInfo = CommonBlockInfo;\n\nexport type AbsoluteBlocksAtHeightRequest = bigint;\nexport interface RelativeBlocksAtHeightRequest {\n    genesisIndex: GenesisIndex;\n    height: bigint;\n    restrict: boolean;\n}\n\nexport type BlocksAtHeightRequest = AbsoluteBlocksAtHeightRequest | RelativeBlocksAtHeightRequest;\n\n/** Common properties for  consensus status types used across all protocol versions */\nexport interface ConsensusStatusCommon {\n    /** Hash of the current best block */\n    bestBlock: BlockHash.Type;\n    /** Hash of the initial genesis block */\n    genesisBlock: BlockHash.Type;\n    /** Hash of the genesis block of the current era, i.e. since the last protocol update. */\n    currentEraGenesisBlock: BlockHash.Type;\n    /** Hash of the last finalized block */\n    lastFinalizedBlock: BlockHash.Type;\n\n    /** Current epoch duration, in milliseconds */\n    epochDuration: Duration.Type;\n    /** Absolute height of the best block */\n    bestBlockHeight: bigint;\n    /** Absolute height of the last finalized block */\n    lastFinalizedBlockHeight: bigint;\n\n    /** Number of finalizations */\n    finalizationCount: bigint;\n    /** Total number of blocks received and verified */\n    blocksVerifiedCount: bigint;\n    /** Total number of blocks received */\n    blocksReceivedCount: bigint;\n\n    /** Exponential moving average latency between a block's slot time and its arrival. */\n    blockArriveLatencyEMA: number;\n    /** Standard deviation of exponential moving average latency between a block's slot time and its arrival. */\n    blockArriveLatencyEMSD: number;\n\n    /** Exponential moving average latency between a block's slot time and received time. */\n    blockReceiveLatencyEMA: number;\n    /** Standard deviation of exponential moving average latency between a block's slot time and received time. */\n    blockReceiveLatencyEMSD: number;\n\n    /** Exponential moving average number of transactions per block. */\n    transactionsPerBlockEMA: number;\n    /** Standard deviation of exponential moving average number of transactions per block. */\n    transactionsPerBlockEMSD: number;\n\n    /** Exponential moving average time between receiving blocks. */\n    blockReceivePeriodEMA?: number;\n    /** Standard deviation of exponential moving average time between receiving blocks. */\n    blockReceivePeriodEMSD?: number;\n\n    /** Exponential moving average time between block arrivals. */\n    blockArrivePeriodEMA?: number;\n    /** Standard deviation of exponential moving average time between block arrivals. */\n    blockArrivePeriodEMSD?: number;\n\n    /** Exponential moving average time between finalizations. */\n    finalizationPeriodEMA?: number;\n    /** Standard deviation of exponential moving average time between finalizations. */\n    finalizationPeriodEMSD?: number;\n\n    /** Time of the (original) genesis block. */\n    genesisTime: Date;\n    /** Time when the current era started. */\n    currentEraGenesisTime: Date;\n    /** The last time a block was received. */\n    blockLastReceivedTime?: Date;\n    /** The last time a block was verified (added to the tree). */\n    blockLastArrivedTime?: Date;\n    /** Time of last verified finalization. */\n    lastFinalizedTime?: Date;\n\n    /**\n     * The number of chain restarts via a protocol update. A completed\n     * protocol update instruction might not change the protocol version\n     * specified in the previous field, but it always increments the genesis\n     * index.\n     */\n    genesisIndex: GenesisIndex;\n\n    /** Currently active protocol version. */\n    protocolVersion: bigint;\n}\n\n/** Consensus status used for protocol version 1-5 */\nexport interface ConsensusStatusV0 extends ConsensusStatusCommon {\n    version: 0;\n    /** (Current) slot duration in milliseconds */\n    slotDuration: Duration.Type;\n}\n\nexport interface ConcordiumBftStatus {\n    /** Current duration before a round times out, in milliseconds */\n    currentTimeoutDuration: Duration.Type;\n    /** Current round */\n    currentRound: Round;\n    /** Current epoch */\n    currentEpoch: Epoch;\n    /**\n     * The first block in the epoch with timestamp at least this is considered to be\n     * the trigger block for the epoch transition.\n     */\n    triggerBlockTime: Date;\n}\n\n/** Consensus status used from protocol version 6 */\nexport type ConsensusStatusV1 = ConsensusStatusCommon & {\n    version: 1;\n    concordiumBFTStatus: ConcordiumBftStatus;\n};\n\n/** Union of consensus status types used across all protocol versions */\nexport type ConsensusStatus = ConsensusStatusV0 | ConsensusStatusV1;\n\nexport interface CryptographicParameters {\n    onChainCommitmentKey: string;\n    bulletproofGenerators: string;\n    genesisString: string;\n}\n\nexport interface NextAccountNonce {\n    nonce: SequenceNumber.Type;\n    allFinal: boolean;\n}\n\nexport interface ReleaseSchedule {\n    timestamp: Date;\n    amount: CcdAmount.Type;\n}\n\nexport interface ReleaseScheduleWithTransactions extends ReleaseSchedule {\n    transactions: string[];\n}\n\nexport interface AccountReleaseSchedule {\n    total: CcdAmount.Type;\n    schedule: ReleaseScheduleWithTransactions[];\n}\n\nexport interface AccountEncryptedAmount {\n    selfAmount: HexString;\n    startIndex: bigint;\n    incomingAmounts: HexString[];\n    numAggregated?: number;\n    aggregatedAmount?: HexString;\n}\n\nexport interface VerifyKey {\n    schemeId: string;\n    verifyKey: HexString;\n}\n\n/**\n * Represents a public key used for chain updates.\n */\nexport type UpdatePublicKey = {\n    /** The key in hex format */\n    verifyKey: HexString;\n};\n\nexport interface CredentialPublicKeys {\n    /**\n     * keys for the credential\n     *\n     * **Please note**, these can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     *\n     * In case this is used as part of a transaction sent to the node, none of the values contained can be `null`,\n     * as this will cause the transation to fail.\n     */\n    keys: Record<number, Upward<VerifyKey>>;\n    threshold: number;\n}\n\nexport interface ChainArData {\n    encIdCredPubShare: string;\n}\n\nexport interface Policy {\n    validTo: string; // \"YYYYMM\"\n    createdAt: string; // \"YYYYMM\"\n    revealedAttributes: Partial<Record<AttributeKey, string>>;\n}\n\ninterface SharedCredentialDeploymentValues {\n    ipIdentity: number;\n    credentialPublicKeys: CredentialPublicKeys;\n    policy: Policy;\n}\n\nexport interface CredentialDeploymentValues extends SharedCredentialDeploymentValues {\n    credId: string;\n    revocationThreshold: number;\n    arData: Record<string, ChainArData>;\n    commitments: CredentialDeploymentCommitments;\n}\n\nexport interface InitialCredentialDeploymentValues extends SharedCredentialDeploymentValues {\n    regId: string;\n}\n\nexport interface CredentialDeploymentCommitments {\n    cmmPrf: string;\n    cmmCredCounter: string;\n    cmmIdCredSecSharingCoeff: string[];\n    cmmAttributes: Partial<Record<AttributeKey, string>>;\n    cmmMaxAccounts: string;\n}\n\nexport interface NormalAccountCredential {\n    type: 'normal';\n    contents: CredentialDeploymentValues;\n}\n\nexport interface InitialAccountCredential {\n    type: 'initial';\n    contents: InitialCredentialDeploymentValues;\n}\n\nexport enum StakePendingChangeType {\n    ReduceStake = 'ReduceStake',\n    RemoveStake = 'RemoveStake',\n}\n\ninterface StakePendingChangeCommon {\n    effectiveTime: Date;\n}\n\nexport interface ReduceStakePendingChange extends StakePendingChangeCommon {\n    change: StakePendingChangeType.ReduceStake;\n    newStake: bigint;\n}\n\nexport interface RemovalPendingChange extends StakePendingChangeCommon {\n    change: StakePendingChangeType.RemoveStake;\n}\n\nexport type StakePendingChange = ReduceStakePendingChange | RemovalPendingChange;\n\nexport enum OpenStatus {\n    OpenForAll = 0,\n    ClosedForNew = 1,\n    ClosedForAll = 2,\n}\n\n/**\n * How the node translates OpenStatus to JSON.\n */\nexport enum OpenStatusText {\n    OpenForAll = 'openForAll',\n    ClosedForNew = 'closedForNew',\n    ClosedForAll = 'closedForAll',\n}\n\nexport type BakerId = bigint;\nexport type DelegatorId = bigint;\n\nexport interface BakerPoolInfo {\n    /**\n     * The status of validator pool\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    openStatus: Upward<OpenStatusText>;\n    metadataUrl: UrlString;\n    commissionRates: CommissionRates;\n}\n\nexport interface CommissionRates {\n    transactionCommission: number;\n    bakingCommission: number;\n    finalizationCommission: number;\n}\n\n/** Information about a baker pool in the current reward period. */\nexport interface CurrentPaydayBakerPoolStatus {\n    /** The number of blocks baked in the current reward period. */\n    blocksBaked: bigint;\n    /** The number of blocks baked in the current reward period. */\n    finalizationLive: boolean;\n    /** The transaction fees accruing to the pool in the current reward period. */\n    transactionFeesEarned: CcdAmount.Type;\n    /** The effective stake of the baker in the current reward period. */\n    effectiveStake: CcdAmount.Type;\n    /** The lottery power of the baker in the current reward period. */\n    lotteryPower: number;\n    /** The effective equity capital of the baker for the current reward period. */\n    bakerEquityCapital: CcdAmount.Type;\n    /** The effective delegated capital to the pool for the current reward period. */\n    delegatedCapital: CcdAmount.Type;\n    /** The commission rates that apply for the current reward period. */\n    commissionRates: CommissionRates;\n    /** A flag indicating whether the pool owner is primed for suspension. Will always be `false` if the protocol version does not support validator suspension. */\n    isPrimedForSuspension: boolean;\n    /** The number of missed rounds in the current reward period. Will always be `0n` if the protocol version does not support validator suspension. */\n    missedRounds: bigint;\n}\n\nexport enum BakerPoolPendingChangeType {\n    ReduceBakerCapital = 'ReduceBakerCapital',\n    RemovePool = 'RemovePool',\n    NoChange = 'NoChange',\n}\n\ntype BakerPoolPendingChangeWrapper<\n    T extends keyof typeof BakerPoolPendingChangeType,\n    S extends Record<string, any>,\n> = S & {\n    pendingChangeType: T;\n};\n\nexport interface BakerPoolPendingChangeReduceBakerCapitalDetails {\n    bakerEquityCapital: CcdAmount.Type;\n    effectiveTime: Date;\n}\n\nexport type BakerPoolPendingChangeReduceBakerCapital = BakerPoolPendingChangeWrapper<\n    BakerPoolPendingChangeType.ReduceBakerCapital,\n    BakerPoolPendingChangeReduceBakerCapitalDetails\n>;\n\nexport interface BakerPoolPendingChangeRemovePoolDetails {\n    effectiveTime: Date;\n}\n\nexport type BakerPoolPendingChangeRemovePool = BakerPoolPendingChangeWrapper<\n    BakerPoolPendingChangeType.RemovePool,\n    BakerPoolPendingChangeRemovePoolDetails\n>;\n\nexport type BakerPoolPendingChangeNoChange = BakerPoolPendingChangeWrapper<\n    BakerPoolPendingChangeType.NoChange,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    {}\n>;\n\nexport type BakerPoolPendingChange =\n    | BakerPoolPendingChangeReduceBakerCapital\n    | BakerPoolPendingChangeRemovePool\n    | BakerPoolPendingChangeNoChange;\n\nexport enum PoolStatusType {\n    BakerPool = 'BakerPool',\n    PassiveDelegation = 'PassiveDelegation',\n}\n\ntype PoolStatusWrapper<T extends keyof typeof PoolStatusType, S> = S & {\n    poolType: T;\n};\n\nexport interface BakerPoolStatusDetails {\n    /** The pool owner */\n    bakerId: BakerId;\n    /** The account address of the pool owner */\n    bakerAddress: AccountAddress.Type;\n    /** The equity capital provided by the pool owner. Absent if the pool is removed. */\n    bakerEquityCapital?: CcdAmount.Type;\n    /** The capital delegated to the pool by other accounts. Absent if the pool is removed. */\n    delegatedCapital?: CcdAmount.Type;\n    /**\n     * The maximum amount that may be delegated to the pool, accounting for leverage and stake limits.\n     * Absent if the pool is removed\n     */\n    delegatedCapitalCap?: CcdAmount.Type;\n    /**\n     * The pool info associated with the pool: open status, metadata URL and commission rates.\n     * Absent if the pool is removed\n     */\n    poolInfo?: BakerPoolInfo;\n    /** Any pending change to the equity capital. This is not used from protocol version 7 onwards, as stake changes are immediate. */\n    bakerStakePendingChange: BakerPoolPendingChange;\n    /** Information of the pool in the current reward period. */\n    currentPaydayStatus?: CurrentPaydayBakerPoolStatus;\n    /** Total capital staked across all pools, including passive delegation. */\n    allPoolTotalCapital: CcdAmount.Type;\n    /**\n     * A flag indicating whether the pool owner is suspended.\n     * Will always be `false` if the protocol version does not support validator suspension.\n     */\n    isSuspended: boolean;\n}\n\n/**\n * Contains information about a given pool at the end of a given block.\n * From protocol version 7, pool removal has immediate effect, however, the\n * pool may still be present for the current (and possibly next) reward period.\n * In this case, the `current_payday_info` field will be set, but the\n * `equity_capital`, `delegated_capital`, `delegated_capital_cap` and,\n * `pool_info` fields will all be absent. The `equity_pending_change` field\n * will also be absent, as stake changes are immediate.\n */\nexport type BakerPoolStatus = PoolStatusWrapper<PoolStatusType.BakerPool, BakerPoolStatusDetails>;\n\nexport interface PassiveDelegationStatusDetails {\n    /** The total capital delegated passively. */\n    delegatedCapital: CcdAmount.Type;\n    /** The passive delegation commission rates. */\n    commissionRates: CommissionRates;\n    /** The transaction fees accruing to the passive delegators in the current reward period. */\n    currentPaydayTransactionFeesEarned: CcdAmount.Type;\n    /** The effective delegated capital of passive delegators for the current reward period. */\n    currentPaydayDelegatedCapital: CcdAmount.Type;\n    /** Total capital staked across all pools, including passive delegation. */\n    allPoolTotalCapital: CcdAmount.Type;\n}\n\n/**\n * Contains information about passive delegators at the end of a given block.\n */\nexport type PassiveDelegationStatus = PoolStatusWrapper<\n    PoolStatusType.PassiveDelegation,\n    PassiveDelegationStatusDetails\n>;\n\nexport type PoolStatus = BakerPoolStatus | PassiveDelegationStatus;\n\nexport enum DelegationTargetType {\n    PassiveDelegation = 'Passive',\n    Baker = 'Baker',\n}\n\nexport interface DelegationTargetPassiveDelegation {\n    delegateType: DelegationTargetType.PassiveDelegation;\n}\n\nexport interface DelegationTargetBaker {\n    delegateType: DelegationTargetType.Baker;\n    bakerId: BakerId;\n}\nexport type EventDelegationTarget =\n    | {\n          delegateType: DelegationTargetType.Baker;\n          bakerId: number;\n      }\n    | DelegationTargetPassiveDelegation;\n\nexport type DelegationTarget = DelegationTargetPassiveDelegation | DelegationTargetBaker;\n\ninterface AccountBakerDetailsCommon {\n    restakeEarnings: boolean;\n    bakerId: BakerId;\n    bakerAggregationVerifyKey: string;\n    bakerElectionVerifyKey: string;\n    bakerSignatureVerifyKey: string;\n    stakedAmount: CcdAmount.Type;\n    pendingChange?: StakePendingChange;\n    /**\n     * A flag indicating whether the validator is currently suspended or not.\n     * In protocol versions prior to protocol version 8, this will always be `false`.\n     * A suspended validator will not be included in the validator committee the next time it is calculated.\n     */\n    isSuspended: boolean;\n}\n\n/** Protocol version 1-3. */\nexport interface AccountBakerDetailsV0 extends AccountBakerDetailsCommon {\n    version: 0;\n}\n\n/** Protocol version 4 and later. */\nexport interface AccountBakerDetailsV1 extends AccountBakerDetailsCommon {\n    version: 1;\n    bakerPoolInfo: BakerPoolInfo;\n}\n\nexport type AccountBakerDetails = AccountBakerDetailsV0 | AccountBakerDetailsV1;\n\nexport interface AccountDelegationDetails {\n    restakeEarnings: boolean;\n    stakedAmount: CcdAmount.Type;\n    delegationTarget: DelegationTarget;\n    pendingChange?: StakePendingChange;\n}\n\nexport type AccountCredential = Versioned<InitialAccountCredential | NormalAccountCredential>;\n\nexport enum AccountInfoType {\n    Simple = 'simple',\n    Baker = 'baker',\n    Delegator = 'delegator',\n    Unknown = 'unknown',\n}\n\ninterface AccountInfoCommon {\n    /** Canonical address of the account. This is derived from the first credential that created the account. */\n    accountAddress: AccountAddress.Type;\n    /** Next sequence number to be used for transactions signed from this account. */\n    accountNonce: SequenceNumber.Type;\n    /** Current (unencrypted) balance of the account. */\n    accountAmount: CcdAmount.Type;\n    /**\n     * Internal index of the account. Accounts on the chain get sequential\n     * indices. These should generally not be used outside of the chain,\n     * the account address is meant to be used to refer to accounts,\n     * however the account index serves the role of the baker id, if the\n     * account is a baker. Hence it is exposed here as well.\n     */\n    accountIndex: bigint;\n    /**\n     * Lower bound on how many credentials must sign any given transaction from this account\n     */\n    accountThreshold: number;\n    /** The public key for sending encrypted balances to the account. */\n    accountEncryptionKey: string;\n    /** The encrypted balance of the account. */\n    accountEncryptedAmount: AccountEncryptedAmount;\n    /** Release schedule for any locked up amount. This could be an empty release schedule. */\n    accountReleaseSchedule: AccountReleaseSchedule;\n    /**\n     * Map of all currently active credentials on the account.\n     * This includes public keys that can sign for the given credentials, as\n     * well as any revealed attributes. This map always contains a credential\n     * with index 0.\n     */\n    accountCredentials: Record<number, AccountCredential>;\n    /**\n     * The stake on the account that is in cooldown.\n     * There can be multiple amounts in cooldown that expire at different times.\n     * This was introduced in protocol version 7, and will be empty in\n     * earlier protocol versions.\n     */\n    accountCooldowns: Cooldown[];\n    /**\n     * The available (unencrypted) balance of the account (i.e. that can be transferred\n     * or used to pay for transactions). This is the balance minus the locked amount.\n     * The locked amount is the maximum of the amount in the release schedule and\n     * the total amount that is actively staked or in cooldown (inactive stake).\n     * This was introduced with node version 7.0\n     */\n    accountAvailableBalance: CcdAmount.Type;\n    /** The protocol leveltokens held by the account. */\n    accountTokens: TokenAccountInfo[];\n}\n\nexport interface AccountInfoSimple extends AccountInfoCommon {\n    type: AccountInfoType.Simple;\n}\n\nexport interface AccountInfoBaker extends AccountInfoCommon {\n    type: AccountInfoType.Baker;\n    accountBaker: AccountBakerDetails;\n}\n\n/** Protocol version 4 and later. */\nexport interface AccountInfoDelegator extends AccountInfoCommon {\n    type: AccountInfoType.Delegator;\n    accountDelegation: AccountDelegationDetails;\n}\n\nexport interface AccountInfoUnknown extends AccountInfoCommon {\n    type: AccountInfoType.Unknown;\n    /**\n     * This will only ever be `null`, which represents a variant of staking info for the account which is\n     * unknown to the SDK, for known staking variants this is represented by either {@linkcode AccountInfoBaker}\n     * or {@linkcode AccountInfoDelegator}.\n     *\n     * **Note**: This field is named `accountBaker` to align with the JSON representation produced by the\n     * corresponding rust SDK.\n     */\n    accountBaker: Upward<never>;\n}\n\nexport type AccountInfo = AccountInfoSimple | AccountInfoBaker | AccountInfoDelegator | AccountInfoUnknown;\n\nexport interface Description {\n    name: string;\n    url: UrlString;\n    description: string;\n}\n\nexport interface IpInfo {\n    ipIdentity: number;\n    ipDescription: Description;\n    ipVerifyKey: string;\n    ipCdiVerifyKey: string;\n}\n\nexport interface ArInfo {\n    arIdentity: number;\n    arDescription: Description;\n    arPublicKey: string;\n}\n\ninterface DelegatorInfoCommon {\n    account: AccountAddress.Type;\n    stake: CcdAmount.Type;\n}\nexport interface DelegatorInfo extends DelegatorInfoCommon {\n    pendingChange?: StakePendingChange;\n}\n\nexport type DelegatorRewardPeriodInfo = DelegatorInfoCommon;\n\nexport interface Branch {\n    blockHash: BlockHash.Type;\n    children: Branch[];\n}\n\nexport interface BakerElectionInfo {\n    baker: BakerId;\n    account: AccountAddress.Type;\n    lotteryPower: number;\n}\n\n/** Common properties for election info across all protocol versions */\nexport interface ElectionInfoCommon {\n    electionNonce: HexString;\n    bakerElectionInfo: BakerElectionInfo[];\n}\n\n/** Election info used for protocol version 1-5 */\nexport interface ElectionInfoV0 extends ElectionInfoCommon {\n    version: 0;\n    electionDifficulty: number;\n}\n\n/** Election info used from protocol version 6 */\nexport interface ElectionInfoV1 extends ElectionInfoCommon {\n    version: 1;\n}\n\n/**\n * Union of different versions of election info across all protocol versions.\n * Contains information related to baker election for a particular block\n */\nexport type ElectionInfo = ElectionInfoV0 | ElectionInfoV1;\n\nexport interface NextUpdateSequenceNumbers {\n    rootKeys: bigint;\n    level1Keys: bigint;\n    level2Keys: bigint;\n    protocol: bigint;\n    electionDifficulty: bigint;\n    euroPerEnergy: bigint;\n    microCcdPerEuro: bigint;\n    foundationAccount: bigint;\n    mintDistribution: bigint;\n    transactionFeeDistribution: bigint;\n    gasRewards: bigint;\n    poolParameters: bigint;\n    addAnonymityRevoker: bigint;\n    addIdentityProvider: bigint;\n    cooldownParameters: bigint;\n    timeParameters: bigint;\n    timeoutParameters: bigint;\n    minBlockTime: bigint;\n    blockEnergyLimit: bigint;\n    finalizationCommiteeParameters: bigint;\n    validatorScoreParameters: bigint;\n    protocolLevelTokens: bigint;\n}\n\nexport type BlockFinalizationSummary = BlockFinalizationSummary_None | BlockFinalizationSummary_Record;\n\nexport interface BlockFinalizationSummary_None {\n    tag: 'none';\n}\n\nexport interface BlockFinalizationSummary_Record {\n    tag: 'record';\n    record: FinalizationSummary;\n}\n\nexport interface FinalizationSummary {\n    block: BlockHash.Type;\n    index: bigint;\n    delay: bigint;\n    finalizers: FinalizationSummaryParty[];\n}\n\nexport interface FinalizationSummaryParty {\n    baker: BakerId;\n    weight: bigint;\n    signed: boolean;\n}\n\nexport enum BlockItemKind {\n    AccountTransactionKind = 0,\n    CredentialDeploymentKind = 1,\n    UpdateInstructionKind = 2,\n}\n\n/**\n * The different types of account transactions. The number value\n * is important as it is part of the serialization of a particular\n * transaction.\n */\nexport enum AccountTransactionType {\n    DeployModule = 0,\n    InitContract = 1,\n    Update = 2,\n    Transfer = 3,\n    AddBaker = 4,\n    RemoveBaker = 5,\n    UpdateBakerStake = 6,\n    UpdateBakerRestakeEarnings = 7,\n    UpdateBakerKeys = 8,\n    UpdateCredentialKeys = 13,\n    EncryptedAmountTransfer = 16,\n    TransferToEncrypted = 17,\n    TransferToPublic = 18,\n    TransferWithSchedule = 19,\n    UpdateCredentials = 20,\n    RegisterData = 21,\n    TransferWithMemo = 22,\n    EncryptedAmountTransferWithMemo = 23,\n    TransferWithScheduleAndMemo = 24,\n    ConfigureBaker = 25,\n    ConfigureDelegation = 26,\n    TokenUpdate = 27,\n}\n\nexport function isAccountTransactionType(candidate: number): candidate is AccountTransactionType {\n    return candidate in AccountTransactionType;\n}\n\nexport interface DeployModulePayload {\n    /** Version of the wasm module. This should only be supplied if wasm module is not already versioned. */\n    version?: number;\n\n    /** Wasm module to be deployed */\n    source: Uint8Array;\n}\n\nexport interface VersionedModuleSource {\n    version: 0 | 1;\n    source: Uint8Array;\n}\n\nexport interface InitContractPayload {\n    /** CCD amount to transfer */\n    amount: CcdAmount.Type;\n\n    /** Hash of the module on chain */\n    moduleRef: ModuleReference.Type;\n\n    /** Name of the contract */\n    initName: ContractName.Type;\n\n    /** Parameters for the init function */\n    param: Parameter.Type;\n\n    /** The amount of energy that can be used for contract execution.\n    The base energy amount for transaction verification will be added to this cost.*/\n    maxContractExecutionEnergy: Energy.Type;\n}\n\nexport interface UpdateContractPayload {\n    /** CCD amount to transfer */\n    amount: CcdAmount.Type;\n\n    /** Address of contract instance consisting of an index and a subindex */\n    address: ContractAddress.Type;\n\n    /** Name of receive function including <contractName>. prefix */\n    receiveName: ReceiveName.Type;\n\n    /** Parameters for the update function */\n    message: Parameter.Type;\n\n    /** The amount of energy that can be used for contract execution.\n    The base energy amount for transaction verification will be added to this cost.*/\n    maxContractExecutionEnergy: Energy.Type;\n}\n\nexport interface AccountTransactionHeader {\n    /** account address that is source of this transaction */\n    sender: AccountAddress.Type;\n\n    /**\n     * the nonce for the transaction, usually acquired by\n     * getting the next account nonce from the node\n     */\n    nonce: SequenceNumber.Type;\n\n    /** expiration of the transaction */\n    expiry: TransactionExpiry.Type;\n}\n\nexport interface SimpleTransferPayload {\n    /** CCD amount to transfer */\n    amount: CcdAmount.Type;\n\n    /** the recipient of the transfer */\n    toAddress: AccountAddress.Type;\n}\n\nexport interface SimpleTransferWithMemoPayload extends SimpleTransferPayload {\n    /** The byte representation of the memo of the transaction  */\n    memo: DataBlob;\n}\n\nexport interface RegisterDataPayload {\n    /** The byte representation of the data to be registered  */\n    data: DataBlob;\n}\n\nexport interface IndexedCredentialDeploymentInfo {\n    /** the index of the credential, has to fit in 1 byte */\n    index: number;\n\n    /** the credential signed by the credential owner */\n    cdi: CredentialDeploymentInfo;\n}\n\nexport interface UpdateCredentialsPayload {\n    /** the credentials to be added to the account */\n    newCredentials: IndexedCredentialDeploymentInfo[];\n\n    /** the ids of the credentials to be removed */\n    removeCredentialIds: string[];\n\n    /** the new credential threshold required to sign transactions */\n    threshold: number;\n\n    /**\n     * the current number of credentials on the account. This\n     * is required to be able to calculate the energy cost, but\n     * is not part of the actual transaction.\n     */\n    currentNumberOfCredentials: bigint;\n}\n\nexport interface PublicBakerKeys {\n    signatureVerifyKey: HexString;\n    electionVerifyKey: HexString;\n    aggregationVerifyKey: HexString;\n}\n\nexport interface PrivateBakerKeys {\n    aggregationSignKey: HexString;\n    signatureSignKey: HexString;\n    electionPrivateKey: HexString;\n}\n\nexport interface BakerKeyProofs {\n    proofAggregation: HexString;\n    proofSig: HexString;\n    proofElection: HexString;\n}\n\nexport type BakerKeysWithProofs = PublicBakerKeys & BakerKeyProofs;\n\nexport type GenerateBakerKeysOutput = PublicBakerKeys & PrivateBakerKeys & BakerKeyProofs;\n\nexport interface ConfigureBakerPayload {\n    /** stake to bake. if set to 0, this removes the account as a baker */\n    stake?: CcdAmount.Type;\n    /** should earnings from baking be added to staked amount  */\n    restakeEarnings?: boolean;\n    openForDelegation?: OpenStatus;\n    keys?: BakerKeysWithProofs;\n    metadataUrl?: UrlString;\n    transactionFeeCommission?: number;\n    bakingRewardCommission?: number;\n    finalizationRewardCommission?: number;\n    /**\n     * Describes whether the validator should change its suspended status. This field is only from protocol version 8\n     * and later.\n     */\n    suspended?: boolean;\n}\n\nexport interface ConfigureDelegationPayload {\n    /* stake to delegate. if set to 0, this removes the account as a delegator */\n    stake?: CcdAmount.Type;\n    /* should earnings from delegation be added to staked amount  */\n    restakeEarnings?: boolean;\n    /* determines if the account should use passive delegation, or which specific baker to delegate to  */\n    delegationTarget?: DelegationTarget;\n}\n\n/**\n * The payload for a token update transaction. The contents of the byte array is a CBOR encoding of the update type and\n * (e.g. \"mint\") and the associated update details.\n *\n * @example\n * const payload = Cbor.encode(['mint', {amount}]); // plt v1 mint payload\n */\nexport type TokenUpdatePayload = {\n    /** The token id identifying the token to perform the list of operations on */\n    tokenId: TokenId.Type;\n    /**\n     * The CBOR encoded operations\n     *\n     * @example\n     * const operations = Cbor.encode([{mint: { amount } }]); // plt mint payload\n     */\n    operations: Cbor.Type;\n};\n\nexport type AccountTransactionPayload =\n    | SimpleTransferPayload\n    | SimpleTransferWithMemoPayload\n    | RegisterDataPayload\n    | DeployModulePayload\n    | InitContractPayload\n    | UpdateContractPayload\n    | UpdateCredentialsPayload\n    | ConfigureBakerPayload\n    | ConfigureDelegationPayload\n    | TokenUpdatePayload;\n\nexport interface AccountTransaction {\n    type: AccountTransactionType;\n    header: AccountTransactionHeader;\n    payload: AccountTransactionPayload;\n}\n\nexport interface InstanceInfoCommon {\n    /** Version of the smart contract module. */\n    version: number;\n    /** Total balance of CCD hold by this instance. */\n    amount: CcdAmount.Type;\n    /** Module reference of the current module being used by this instance. */\n    sourceModule: ModuleReference.Type;\n    /** Account used to instantiate this smart contract instance. */\n    owner: AccountAddress.Type;\n    /** List of receive functions currently exposed by this smart contract. These are of the form '<contractName>.<entrypointName>'. */\n    methods: ReceiveName.Type[];\n    /** Name of the smart contract. This is of the form 'init_<contractName>'. */\n    name: InitName.Type;\n}\n\nexport interface InstanceInfoV0 extends InstanceInfoCommon {\n    version: 0;\n    model: ArrayBuffer;\n}\n\nexport interface InstanceInfoV1 extends InstanceInfoCommon {\n    version: 1;\n}\n\nexport type InstanceInfo = InstanceInfoV0 | InstanceInfoV1;\n\nexport type CredentialSignature = Record<number, string>;\nexport type AccountTransactionSignature = Record<number, CredentialSignature>;\n\nexport interface InstanceInfoSerializedCommon {\n    version?: number;\n    amount: string;\n    sourceModule: string;\n    owner: string;\n    methods: string[];\n    name: string;\n}\n\nexport interface InstanceInfoSerializedV0 extends InstanceInfoSerializedCommon {\n    version?: 0;\n    model: string;\n}\n\nexport interface InstanceInfoSerializedV1 extends InstanceInfoSerializedCommon {\n    version: 1;\n}\n\nexport type InstanceInfoSerialized = InstanceInfoSerializedV0 | InstanceInfoSerializedV1;\n\nexport interface InstanceStateKVPair {\n    key: HexString;\n    value: HexString;\n}\n\nexport interface ContractContext {\n    invoker?: ContractAddress.Type | AccountAddress.Type;\n    contract: ContractAddress.Type;\n    amount?: CcdAmount.Type;\n    method: ReceiveName.Type;\n    parameter?: Parameter.Type;\n    energy?: Energy.Type;\n}\n\nexport interface InvokeContractSuccessResult {\n    tag: 'success';\n    usedEnergy: Energy.Type;\n    /**\n     * The events related to the contract invocation.\n     *\n     * **Please note**, these can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    events: Upward<ContractTraceEvent>[];\n    returnValue?: ReturnValue.Type;\n}\n\nexport interface InvokeContractFailedResult {\n    tag: 'failure';\n    usedEnergy: Energy.Type;\n    /**\n     * The reject reason for the failed contract invocation.\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    reason: Upward<RejectReason>;\n    /**\n     * Return value from smart contract call, used to provide error messages.\n     * Is only defined when smart contract instance is a V1 smart contract and\n     * the transaction was rejected by the smart contract logic i.e. `reason.tag === \"RejectedReceive\"`.\n     */\n    returnValue?: ReturnValue.Type;\n}\n\nexport type InvokeContractResult = InvokeContractSuccessResult | InvokeContractFailedResult;\n\nexport interface CredentialDeploymentDetails {\n    expiry: TransactionExpiry.Type;\n    unsignedCdi: UnsignedCredentialDeploymentInformation;\n}\n\nexport interface IdOwnershipProofs {\n    challenge: string;\n    commitments: string;\n    credCounterLessThanMaxAccounts: string;\n    proofIdCredPub: Record<string, string>;\n    proofIpSig: string;\n    proofRegId: string;\n    sig: string;\n}\n\nexport interface UnsignedCredentialDeploymentInformation extends CredentialDeploymentValues {\n    proofs: IdOwnershipProofs;\n}\n\ntype AttributesRandomness = Record<AttributeKey, string>;\n\nexport interface CommitmentsRandomness {\n    idCredSecRand: string;\n    prfRand: string;\n    credCounterRand: string;\n    maxAccountsRand: string;\n    attributesRand: AttributesRandomness;\n}\n\ninterface CdiRandomness {\n    randomness: CommitmentsRandomness;\n}\n\nexport type CredentialDeploymentPayload = CredentialDeploymentDetails & CdiRandomness;\n/** Internal type used when building credentials */\nexport type UnsignedCdiWithRandomness = {\n    unsignedCdi: Known<UnsignedCredentialDeploymentInformation>;\n} & CdiRandomness;\n\nexport interface CredentialDeploymentInfo extends CredentialDeploymentValues {\n    proofs: string;\n}\n\nexport interface SignedCredentialDeploymentDetails {\n    expiry: TransactionExpiry.Type;\n    cdi: CredentialDeploymentInfo;\n}\n\nexport type TypedCredentialDeployment =\n    | {\n          type: 'normal';\n          contents: CredentialDeploymentInfo;\n      }\n    | {\n          type: 'initial';\n          contents: InitialCredentialDeploymentValues & { sig: string };\n      };\n\nexport interface IdentityProvider {\n    arsInfos: Record<number, ArInfo>;\n    ipInfo: IpInfo;\n}\n\nexport interface IdentityInput {\n    identityProvider: IdentityProvider;\n    identityObject: any;\n    prfKey: string;\n    idCredSecret: string;\n    randomness: string;\n}\n\nexport enum SchemaVersion {\n    V0 = 0, // Used by version 0 smart contracts.\n    V1 = 1, // Used by version 1 smart contracts.\n    V2 = 2, // Used by version 1 smart contracts.\n}\n\nexport type IpArData = {\n    encPrfKeyShare: string;\n    proofComEncEq: string;\n};\n\nexport interface IdObjectRequestV1 {\n    idCredPub: string;\n    choiceArData: {\n        arIdentities: number[];\n        threshold: number;\n    };\n    ipArData: Record<string, IpArData>;\n    idCredSecCommitment: string;\n    prfKeyCommitmentWithIP: string;\n    prfKeySharingCoeffCommitments: string[];\n    proofsOfKnowledge: string;\n}\n\nexport interface IdRecoveryRequest {\n    idCredPub: string;\n    timestamp: Timestamp.Type;\n    proof: string;\n}\n\nexport interface AttributeList {\n    validTo: string; // \"YYYYMM\"\n    createdAt: string; // \"YYYYMM\"\n    maxAccounts: number;\n    chosenAttributes: Partial<Record<AttributeKey, string>>;\n}\n\nexport type IdentityObjectV1 = {\n    preIdentityObject: IdObjectRequestV1;\n    attributeList: AttributeList;\n    signature: string;\n};\n\nexport type Network = 'Testnet' | 'Mainnet';\n\nexport type SmartContractTypeValues =\n    | { [key: string]: SmartContractTypeValues }\n    | SmartContractTypeValues[]\n    | number\n    | bigint\n    | string\n    | boolean;\n\n/**\n * Certificates for a block for protocols supporting\n * ConcordiumBFT.\n */\nexport interface BlockCertificates {\n    /**\n     * The quorum certificate. Is present if and only if the block is\n     * not a genesis block.\n     */\n    quorumCertificate?: QuorumCertificate;\n    /**\n     * The timeout certificate. Is present only if the round prior to the\n     * round of the block timed out.\n     */\n    timeoutCertificate?: TimeoutCertificate;\n    /**\n     * The epoch finalization entry. Is present only if the block initiates\n     * a new epoch.\n     */\n    epochFinalizationEntry?: EpochFinalizationEntry;\n}\n\n/**\n * A quorum certificate is the certificate that the\n * finalization comittee issues in order to certify a block.\n * A block must be certified before it will be part of the\n * authorative part of the chain.\n */\nexport interface QuorumCertificate {\n    /**\n     * The hash of the block that the quorum certificate refers to.\n     */\n    blockHash: HexString;\n    /**\n     * The round of the block.\n     */\n    round: Round;\n    /**\n     * The epoch of the block.\n     */\n    epoch: Epoch;\n    /**\n     * The aggregated signature by the finalization committee on the block.\n     */\n    aggregateSignature: QuorumSignature;\n    /**\n     * A list of the finalizers that formed the quorum certificate\n     * i.e., the ones who have contributed to the 'aggregateSignature'.\n     * The finalizers are identified by their baker id as this is stable\n     * across protocols and epochs.\n     */\n    signatories: BakerId[];\n}\n\n/**\n * A timeout certificate is the certificate that the\n * finalization committee issues when a round times out,\n * thus making it possible for the protocol to proceed to the\n * next round.\n */\nexport interface TimeoutCertificate {\n    /**\n     * The round that timed out.\n     */\n    round: Round;\n    /**\n     * The minimum epoch of which signatures are included\n     * in the 'aggregate_signature'.\n     */\n    minEpoch: Epoch;\n    /**\n     * The rounds of which finalizers have their best\n     * quorum certificates in the 'minEpoch'.\n     */\n    qcRoundsFirstEpoch: FinalizerRound[];\n    /**\n     * The rounds of which finalizers have their best\n     * quorum certificates in the epoch 'minEpoch' + 1.\n     */\n    qcRoundsSecondEpoch: FinalizerRound[];\n    /**\n     * The aggregated signature by the finalization committee that witnessed\n     * the 'round' timed out.\n     */\n    aggregateSignature: TimeoutSignature;\n}\n\n/**\n * The finalizer round is a map from a 'Round'\n * to the list of finalizers (identified by their 'BakerId') that signed\n * off the round.\n */\nexport interface FinalizerRound {\n    /**\n     * The round that was signed off.\n     */\n    round: Round;\n    /**\n     * The finalizers (identified by their 'BakerId' that\n     * signed off the in 'round'.\n     */\n    finalizers: BakerId[];\n}\n\n/**\n * The epoch finalization entry is the proof that\n * makes the protocol able to advance to a new epoch.\n * I.e. the 'EpochFinalizationEntry' is present if and only if\n * the block is the first block of a new 'Epoch'.\n */\nexport interface EpochFinalizationEntry {\n    /**\n     * The quorum certificate for the finalized block.\n     */\n    finalizedQc: QuorumCertificate;\n    /**\n     * The quorum certificate for the block that finalizes\n     * the block that 'finalizedQc' points to.\n     */\n    successorQc: QuorumCertificate;\n    /**\n     * A proof that the successor block is an immediate\n     * successor of the finalized block.\n     */\n    successorProof: SuccessorProof;\n}\n\n/**\n * Information about a particular baker with respect to\n * the current reward period.\n */\nexport interface BakerRewardPeriodInfo {\n    /**\n     * The baker id and public keys for the baker.\n     */\n    baker: BakerInfo;\n    /**\n     * The effective stake of the baker for the consensus protocol.\n     * The returned amount accounts for delegation, capital bounds and leverage bounds.\n     */\n    effectiveStake: CcdAmount.Type;\n    /**\n     * The effective commission rate for the baker that applies for the reward period.\n     */\n    commissionRates: CommissionRates;\n    /**\n     * The amount staked by the baker itself.\n     */\n    equityCapital: CcdAmount.Type;\n    /**\n     * The total amount of capital delegated to this baker pool.\n     */\n    delegatedCapital: CcdAmount.Type;\n    /**\n     * Whether the baker is a finalizer or not.\n     */\n    isFinalizer: boolean;\n}\n\n/**\n * Information about a baker.\n */\nexport interface BakerInfo {\n    /**\n     * Identity of the baker. This is actually the account index of\n     * the account controlling the baker.\n     */\n    bakerId: BakerId;\n    /**\n     * Baker's public key used to check whether they won the lottery or not.\n     */\n    electionKey: BakerElectionVerifyKey;\n    /**\n     * Baker's public key used to check that they are indeed the ones who\n     * produced the block.\n     */\n    signatureKey: BakerSignatureVerifyKey;\n    /**\n     * Baker's public key used to check signatures on finalization records.\n     * This is only used if the baker has sufficient stake to participate in\n     * finalization.\n     */\n    aggregationKey: BakerAggregationVerifyKey;\n}\n\n/**\n * Request an epoch by number at a given genesis index.\n */\nexport interface RelativeEpochRequest {\n    /**\n     * The genesis index to query at. The query is restricted to this genesis index, and\n     * will not return results for other indices even if the epoch number is out of bounds.\n     */\n    genesisIndex: GenesisIndex;\n    /**\n     * The epoch number to query at.\n     */\n    epoch: Epoch;\n}\n\n/**\n * Details of which baker won the lottery in a given round in consensus version 1.\n */\nexport interface WinningBaker {\n    /**\n     * The round number.\n     */\n    round: Round;\n    /**\n     * The baker that won the round.\n     */\n    winner: BakerId;\n    /**\n     * True if the baker produced a block in this round on the finalized chain, and False otherwise.\n     */\n    present: boolean;\n}\n\nexport type HealthCheckResponse =\n    | {\n          isHealthy: true;\n      }\n    | {\n          isHealthy: false;\n          message?: string;\n      };\n\n/**\n * Type representing an item which is included in a block, such as account transactions, chain updates or deployments of new credentials.\n */\nexport type BlockItem =\n    | {\n          kind: BlockItemKind.AccountTransactionKind;\n          transaction: {\n              accountTransaction: AccountTransaction;\n              signatures: AccountTransactionSignature;\n          };\n      }\n    | {\n          kind: BlockItemKind.CredentialDeploymentKind;\n          transaction: {\n              credential: TypedCredentialDeployment;\n              expiry: number;\n          };\n      };\n\n/**\n * The status of a cooldown. When stake is removed from a baker or delegator\n * (from protocol version 7) it first enters the pre-pre-cooldown state.\n * The next time the stake snaphot is taken (at the epoch transition before\n * a payday) it enters the pre-cooldown state. At the subsequent payday, it\n * enters the cooldown state. At the payday after the end of the cooldown\n * period, the stake is finally released.\n */\nexport enum CooldownStatus {\n    /**\n     * The amount is in cooldown and will expire at the specified time, becoming available\n     * at the subsequent pay day.\n     */\n    Cooldown,\n    /**\n     * The amount will enter cooldown at the next pay day. The specified end time is\n     * projected to be the end of the cooldown period, but the actual end time will be\n     * determined at the payday, and may be different if the global cooldown period\n     * changes.\n     */\n    PreCooldown,\n    /**\n     * The amount will enter pre-cooldown at the next snapshot epoch (i.e. the epoch\n     * transition before a pay day transition). As with pre-cooldown, the specified\n     * end time is projected, but the actual end time will be determined later.\n     */\n    PrePreCooldown,\n}\n\n/**\n * Describes a cooldown associated with removal of stake from a baker/delegator account\n */\nexport type Cooldown = {\n    /** The time at which the cooldown will end  */\n    timestamp: Timestamp.Type;\n    /** The amount that is in cooldown and set to be released at the end of the cooldown period */\n    amount: CcdAmount.Type;\n    /**\n     * The status of the cooldown\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    status: Upward<CooldownStatus>;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.all = exports.whereNumeric = exports.whereAlpha3 = exports.whereAlpha2 = exports.whereCountry = void 0;\nconst iso_3166_1 = __importDefault(require(\"./iso-3166\"));\n/**\n * Get country by country name\n *\n * @param {string} name\n * @returns {Country | undefined}\n */\nexports.whereCountry = (name) => {\n    return iso_3166_1.default.find((country) => country.country.toUpperCase() === name.toUpperCase());\n};\n/**\n * Get country by ISO 3166-1 Alpha-2\n *\n * @param {string} alpha2\n * @returns {Country | undefined}\n */\nexports.whereAlpha2 = (alpha2) => {\n    return iso_3166_1.default.find((country) => country.alpha2 === alpha2.toUpperCase());\n};\n/**\n * Get country by ISO 3166-1 Alpha-3\n *\n * @param {string} alpha3\n * @returns {Country | undefined}\n */\nexports.whereAlpha3 = (alpha3) => {\n    return iso_3166_1.default.find((country) => country.alpha3 === alpha3.toUpperCase());\n};\n/**\n * Get country by ISO 3166-1 Numeric\n *\n * @param {string | number} numeric\n * @returns {Country | undefined}\n */\nexports.whereNumeric = (numeric) => {\n    return iso_3166_1.default.find((country) => country.numeric === String(numeric));\n};\n/**\n * Get all countries.\n *\n * @returns {Array<Country>}\n */\nexports.all = () => iso_3166_1.default;\nexports.default = {\n    all: exports.all,\n    whereCountry: exports.whereCountry,\n    whereAlpha2: exports.whereAlpha2,\n    whereAlpha3: exports.whereAlpha3,\n    whereNumeric: exports.whereNumeric,\n};\n","export {\n    Type,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    instanceOf,\n    fromSerializable,\n    toSerializable,\n    create,\n} from '../../types/Energy.js';\n","// Functionality revolving around concordium domain types, which require the WASM at entrypoint `@concordium/rust-bindings/wallet`.\nexport * from '../wasm/index.js';\n","import * as wasm from '@concordium/rust-bindings/wallet';\nimport { stringify } from 'json-bigint';\n\nimport { CryptographicParameters } from '../types.js';\nimport { VerifiablePresentation } from '../types/VerifiablePresentation.js';\nimport { VerifyWeb3IdCredentialSignatureInput } from '../web3-id/helpers.js';\nimport { CredentialsInputs, Web3IdProofInput, Web3IdProofRequest } from '../web3-id/types.js';\n\n/**\n * Verifies that the given signature is correct for the given values/randomness/holder/issuerPublicKey/issuerContract\n */\nexport function verifyWeb3IdCredentialSignature(input: VerifyWeb3IdCredentialSignatureInput): boolean {\n    // Use json-bigint stringify to ensure we can handle bigints\n    return wasm.verifyWeb3IdCredentialSignature(stringify(input));\n}\n\n/**\n * Given a statement about an identity and the inputs necessary to prove the statement, produces a proof that the associated identity fulfills the statement.\n */\nexport function getVerifiablePresentation(input: Web3IdProofInput): VerifiablePresentation {\n    try {\n        const s: VerifiablePresentation = VerifiablePresentation.fromString(\n            // Use json-bigint stringify to ensure we can handle bigints\n            wasm.createWeb3IdProof(stringify(input))\n        );\n        return s;\n    } catch (e) {\n        throw new Error(e as string);\n    }\n}\n\n/**\n * Verify the proofs contained in the {@linkcode VerifiablePresentation}.\n *\n * @param presentation - The verifiable presentation to verify.\n * @param globalContext - The cryptographic parameters of the chain the presentation is created on.\n * @param publicData - The public data corresponding to the proofs contained in the presentation.\n *\n * @returns The request corresponding to the verifable presentation, if verification is successful.\n * @throws If the verification is not successful for any reason.\n */\nexport function verifyPresentation(\n    presentation: VerifiablePresentation,\n    globalContext: CryptographicParameters,\n    publicData: CredentialsInputs[]\n): Web3IdProofRequest {\n    const input = stringify({ presentation, globalContext, publicData });\n    const result = wasm.verifyPresentation(input);\n    return JSON.parse(result);\n}\n","import bs58check from 'bs58check';\nimport { Buffer } from 'buffer/index.js';\n\nimport {\n    ContractTransactionMetadata,\n    ContractUpdateTransactionWithSchema,\n    CreateContractTransactionMetadata,\n} from '../GenericContract.js';\nimport { deserializeUint8 } from '../deserialization.js';\nimport { Cursor, deserializeBigUInt64LE, makeDeserializeListResponse } from '../deserializationHelpers.js';\nimport { isKnown } from '../grpc/index.js';\nimport {\n    encodeWord8,\n    encodeWord64,\n    makeSerializeList,\n    makeSerializeOptional,\n    packBufferWithWord8Length,\n    packBufferWithWord16Length,\n} from '../serializationHelpers.js';\nimport {\n    type Base58String,\n    BlockItemSummary,\n    ContractTraceEvent,\n    type HexString,\n    type InvokeContractSuccessResult,\n    RejectedReceive,\n    type SmartContractTypeValues,\n    TransactionKindString,\n    TransactionSummaryType,\n} from '../types.js';\nimport * as AccountAddress from '../types/AccountAddress.js';\nimport * as ContractAddress from '../types/ContractAddress.js';\nimport * as ContractEvent from '../types/ContractEvent.js';\nimport * as EntrypointName from '../types/EntrypointName.js';\nimport { uleb128Decode, uleb128DecodeWithIndex, uleb128Encode } from '../uleb128.js';\n\nconst TOKEN_ID_MAX_LENGTH = 255;\nconst TOKEN_AMOUNT_MAX_LENGTH = 37;\nconst TOKEN_RECEIVE_HOOK_MAX_LENGTH = 100;\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace CIS2 {\n    /**\n     * Union between `ContractAddress` and an account address `AccountAddress`.\n     */\n    export type Address = ContractAddress.Type | AccountAddress.Type;\n\n    /**\n     * A Token ID that uniquely identifies the CIS-2 Token.\n     */\n    export type TokenId = HexString;\n\n    /**\n     * An amount of CIS-2 tokens.\n     */\n    export type TokenAmount = bigint;\n\n    /**\n     * A Token Address, that contains both a Contract Address and the unique\n     * CIS-2 Token ID.\n     */\n    export type TokenAddress = {\n        contract: ContractAddress.Type;\n        id: TokenId;\n    };\n\n    /**\n     * A contract address along with the name of the hook to be triggered when receiving a CIS-2 transfer.\n     */\n    export type ContractReceiver = {\n        /** Contract address to receive tokens */\n        address: ContractAddress.Type;\n        /** Name of the entrypoint to be called on receiver contract. This is only the name of the function, NOT including the contract name */\n        hookName: EntrypointName.Type;\n    };\n\n    /**\n     * Union between an account address represented by an `AccountAddress` and a `ContractReceiver`.\n     */\n    export type Receiver = AccountAddress.Type | ContractReceiver;\n\n    /**\n     * Data needed to perform a \"transfer\" invocation according to the CIS-2 standard.\n     */\n    export type Transfer = {\n        /** The ID of the token to transfer */\n        tokenId: HexString;\n        /** The amount of tokens to transfer, cannot be negative. */\n        tokenAmount: TokenAmount;\n        /** The address to transfer from */\n        from: Address;\n        /** The receiver of the transfer */\n        to: Receiver;\n        /** Optional additional data to include in the transaction */\n        data?: HexString;\n    };\n\n    /**\n     * Data needed to perform an \"updateOperator\" invocation according to the CIS-2 standard.\n     */\n    export type UpdateOperator = {\n        /** The type of the update */\n        type: 'add' | 'remove';\n        /** The address be used for the operator update */\n        address: Address;\n    };\n\n    /**\n     * Metadata necessary for CIS-2 transactions\n     */\n    export type TransactionMetadata = ContractTransactionMetadata;\n\n    /**\n     * Metadata necessary for creating a {@link UpdateTransaction}\n     */\n    export type CreateTransactionMetadata = CreateContractTransactionMetadata;\n\n    /**\n     * Data needed for CIS-2 \"balanceOf\" query.\n     */\n    export type BalanceOfQuery = {\n        /** The ID of the token to query */\n        tokenId: HexString;\n        /** The address to query balance for */\n        address: Address;\n    };\n\n    /**\n     * Structure for holding metadata URL response from \"tokenMetadata\" query.\n     */\n    export type MetadataUrl = {\n        /** The URL of the metadata */\n        url: string;\n        /** An optional checksum for the URL */\n        hash?: HexString;\n    };\n\n    /**\n     * Data needed for CIS-2 \"operatorOf\" query.\n     */\n    export type OperatorOfQuery = {\n        /** The owner address for the query */\n        owner: Address;\n        /** The address to check whether it is an operator of `owner` */\n        address: Address;\n    };\n\n    /**\n     * An update transaction without header. This is useful for sending through a wallet, which supplies the header information.\n     */\n    export type UpdateTransaction<J extends SmartContractTypeValues> = ContractUpdateTransactionWithSchema<J>;\n\n    /**\n     * The type of a CIS-2 event.\n     * @see {@linkcode Event}\n     */\n    export enum EventType {\n        Transfer,\n        Mint,\n        Burn,\n        UpdateOperatorOf,\n        TokenMetadata,\n        Custom,\n    }\n\n    /**\n     * A CIS-2 transfer event.\n     */\n    export type TransferEvent = {\n        /** The type of the event */\n        type: EventType.Transfer;\n        /** The ID of the token transferred */\n        tokenId: TokenId;\n        /** The amount of tokens transferred */\n        tokenAmount: TokenAmount;\n        /** The address the tokens were transferred from */\n        from: Address;\n        /** The address the tokens were transferred to */\n        to: Address;\n    };\n\n    /**\n     * A CIS-2 mint event.\n     */\n    export type MintEvent = {\n        /** The type of the event */\n        type: EventType.Mint;\n        /** The ID of the token minted */\n        tokenId: TokenId;\n        /** The amount of tokens minted */\n        tokenAmount: TokenAmount;\n        /** The address the tokens were minted for */\n        owner: Address;\n    };\n\n    /**\n     * A CIS-2 burn event.\n     */\n    export type BurnEvent = {\n        /** The type of the event */\n        type: EventType.Burn;\n        /** The ID of the token burned */\n        tokenId: TokenId;\n        /** The amount of tokens burned */\n        tokenAmount: TokenAmount;\n        /** The address the tokens were burned for */\n        owner: Address;\n    };\n\n    /**\n     * A CIS-2 update operator event.\n     */\n    export type UpdateOperatorEvent = {\n        /** The type of the event */\n        type: EventType.UpdateOperatorOf;\n        /** The operator update data */\n        updateOperatorData: UpdateOperator;\n        /** The owner address for the updated operator */\n        owner: Address;\n    };\n\n    /**\n     * A CIS-2 token metadata event.\n     */\n    export type TokenMetadataEvent = {\n        /** The type of the event */\n        type: EventType.TokenMetadata;\n        /** The ID of the token for which the metadata was updated */\n        tokenId: TokenId;\n        /** The updated metadata URL */\n        metadataUrl: MetadataUrl;\n    };\n\n    /**\n     * A custom event outside CIS-2.\n     */\n    export type CustomEvent = {\n        /** The type of the event */\n        type: EventType.Custom;\n        /** The raw data of the custom event */\n        data: Uint8Array;\n    };\n\n    /**\n     * A CIS-2 event.\n     */\n    export type Event = TransferEvent | MintEvent | BurnEvent | UpdateOperatorEvent | TokenMetadataEvent | CustomEvent;\n\n    /**\n     * A CIS-2 event that is not a {@linkcode CustomEvent}.\n     * @see {@linkcode Event}\n     */\n    export type NonCustomEvent = Exclude<Event, CustomEvent>;\n\n    /**\n     * The type of a CIS-2 rejection error.\n     * @see {@linkcode RejectionError}\n     */\n    export enum ErrorType {\n        InvalidTokenId,\n        InsufficientFunds,\n        Unauthorized,\n        Custom,\n    }\n\n    /**\n     * An invalid token CIS-2 rejection error.\n     */\n    export type InvalidTokenIdError = {\n        /** The type of the error */\n        type: ErrorType.InvalidTokenId;\n        /** The error tag specified in the CIS-2 standard */\n        tag: -42000001;\n    };\n\n    /**\n     * An insufficient funds CIS-2 rejection error.\n     */\n    export type InsufficientFundsError = {\n        /** The type of the error */\n        type: ErrorType.InsufficientFunds;\n        /** The error tag specified in the CIS-2 standard */\n        tag: -42000002;\n    };\n\n    /**\n     * An unauthorized CIS-2 rejection error.\n     */\n    export type UnauthorizedError = {\n        /** The type of the error */\n        type: ErrorType.Unauthorized;\n        /** The error tag specified in the CIS-2 standard */\n        tag: -42000003;\n    };\n\n    /**\n     * A rejection error outside of CIS-2.\n     */\n    export type CustomError = {\n        /** The type of the error */\n        type: ErrorType.Custom;\n        /** A custom error tag */\n        tag: number;\n    };\n\n    /**\n     * A CIS-2 rejection error.\n     */\n    export type RejectionError = InvalidTokenIdError | InsufficientFundsError | UnauthorizedError | CustomError;\n\n    /**\n     * Structure of a JSON-formatted address parameter.\n     */\n    export type AddressParamJson = { Account: [Base58String] } | { Contract: [{ index: number; subindex: number }] };\n\n    /**\n     * Structure of JSON formatted receiver parameter\n     */\n    export type ReceiverParamJson =\n        | { Account: [Base58String] }\n        | { Contract: [{ index: number; subindex: number }, string] };\n\n    /**\n     * Structure of JSON formatted parameter used for CIS-2 \"transfer\" transactions\n     */\n    export type TransferParamJson = {\n        token_id: HexString;\n        amount: string;\n        from: AddressParamJson;\n        to: ReceiverParamJson;\n        data: HexString;\n    };\n\n    /**\n     * Structure of JSON formatted parameter used for CIS-2 \"updateOperator\" transactions\n     */\n    export type UpdateOperatorParamJson = {\n        update: { Add: Record<string, never> } | { Remove: Record<string, never> };\n        operator: AddressParamJson;\n    };\n}\n\nfunction serializeCIS2TokenId(tokenId: CIS2.TokenId): Buffer {\n    const serialized = Buffer.from(tokenId, 'hex');\n\n    if (serialized.length > TOKEN_ID_MAX_LENGTH) {\n        throw new Error(`Token ID exceeds maximum size of ${TOKEN_ID_MAX_LENGTH} bytes`);\n    }\n\n    return packBufferWithWord8Length(serialized);\n}\n\nfunction deserializeCIS2TokenId(buffer: Uint8Array): CIS2.TokenId {\n    if (buffer.length > TOKEN_ID_MAX_LENGTH) {\n        throw Error(`Token ID exceeds maximum size of ${TOKEN_ID_MAX_LENGTH} bytes`);\n    }\n    return Buffer.from(buffer).toString('hex');\n}\n\nfunction serializeTokenAmount(amount: CIS2.TokenAmount): Buffer {\n    if (amount < 0) {\n        throw new Error('Negative token amount is not allowed');\n    }\n\n    const serialized = uleb128Encode(amount);\n\n    if (serialized.length > TOKEN_AMOUNT_MAX_LENGTH) {\n        throw new Error(`Token amount exceeds maximum size of ${TOKEN_AMOUNT_MAX_LENGTH} bytes`);\n    }\n\n    return serialized;\n}\n\nexport function serializeAccountAddress(address: AccountAddress.Type): Uint8Array {\n    return AccountAddress.toBuffer(address);\n}\n\n/**\n * Serializes {@link ContractAddress} into bytes compatible with smart contract parameter deserialization\n *\n * @param {ContractAddress} address - The address to serialize\n *\n * @returns {Buffer} the address serialized to bytes\n */\nexport function serializeContractAddress(address: ContractAddress.Type): Uint8Array {\n    const index = encodeWord64(address.index, true);\n    const subindex = encodeWord64(address.subindex, true);\n    return Buffer.concat([index, subindex]);\n}\n\nfunction serializeAddress(address: CIS2.Address): Buffer {\n    return Buffer.concat(\n        ContractAddress.instanceOf(address)\n            ? [encodeWord8(1), serializeContractAddress(address)]\n            : [encodeWord8(0), serializeAccountAddress(address)]\n    );\n}\n\n/**\n * Serializes {@link EntrypointName.Type} contract entrypoint into bytes, prefixed by a 2-byte length\n *\n * @param {EntrypointName.Type} hook - the entrypoint to serialize\n *\n * @returns {Uint8Array} the entrypoint serialized to bytes\n */\nexport function serializeReceiveHookName(hook: EntrypointName.Type): Uint8Array {\n    const serialized = Buffer.from(EntrypointName.toString(hook), 'ascii');\n\n    if (serialized.length > TOKEN_RECEIVE_HOOK_MAX_LENGTH) {\n        throw new Error(`Token receive hook name exceeds maximum size of ${TOKEN_RECEIVE_HOOK_MAX_LENGTH} bytes`);\n    }\n\n    return packBufferWithWord16Length(serialized, true);\n}\n\nfunction serializeContractReceiver(receiver: CIS2.ContractReceiver): Buffer {\n    const address = serializeContractAddress(receiver.address);\n    const hook = serializeReceiveHookName(receiver.hookName);\n    return Buffer.concat([address, hook]);\n}\n\nfunction serializeReceiver(receiver: CIS2.Receiver): Buffer {\n    return Buffer.concat(\n        AccountAddress.instanceOf(receiver)\n            ? [encodeWord8(0), AccountAddress.toBuffer(receiver)]\n            : [encodeWord8(1), serializeContractReceiver(receiver)]\n    );\n}\n\nfunction serializeAdditionalData(data: HexString): Buffer {\n    const serialized = Buffer.from(data, 'hex');\n    return packBufferWithWord16Length(serialized, true);\n}\n\nfunction serializeCIS2Transfer(transfer: CIS2.Transfer): Buffer {\n    const id = serializeCIS2TokenId(transfer.tokenId);\n    const amount = serializeTokenAmount(transfer.tokenAmount);\n    const from = serializeAddress(transfer.from);\n    const to = serializeReceiver(transfer.to);\n    const data = serializeAdditionalData(transfer.data ?? '');\n\n    return Buffer.concat([id, amount, from, to, data]);\n}\n\n/**\n * Serializes a list of {@link CIS2.Transfer} data objects according to the CIS-2 standard.\n *\n * @param {CIS2.Transfer[]} transfers - A list of {@link CIS2.Transfer} objects\n *\n * @example\n * const transfers = [{\n    tokenId: '';\n    tokenAmount: 100n;\n    from: '3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi',\n    to: '3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi',\n    data: '48656c6c6f20776f726c6421';\n}];\n * const bytes = serializeCIS2Transfers(transfers);\n */\nexport const serializeCIS2Transfers = makeSerializeList(serializeCIS2Transfer);\n\nfunction serializeCIS2UpdateOperator(update: CIS2.UpdateOperator): Buffer {\n    const type = encodeWord8(update.type === 'add' ? 1 : 0);\n    const address = serializeAddress(update.address);\n    return Buffer.concat([type, address]);\n}\n\n/**\n * Serializes a list of {@link CIS2.UpdateOperator} data objects according to the CIS-2 standard.\n *\n * @param {CIS2.UpdateOperator[]} updates - A list of {@link CIS2.UpdateOperator} objects\n *\n * @example\n * const updates = [{\n*       type: 'add',\n*       address: '3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi'\n    }];\n * const bytes = serializeCIS2UpdateOperators(updates);\n */\nexport const serializeCIS2UpdateOperators = makeSerializeList(serializeCIS2UpdateOperator);\n\n/**\n * Serializes {@link CIS2BalanceOfQuery} data objects according to CIS-2 standard.\n */\nfunction serializeCIS2BalanceOfQuery(query: CIS2.BalanceOfQuery): Buffer {\n    const token = serializeCIS2TokenId(query.tokenId);\n    const address = serializeAddress(query.address);\n    return Buffer.concat([token, address]);\n}\n\n/**\n * Serializes a list of {@link CIS2.BalanceOfQuery} data objects according to the CIS-2 standard.\n *\n * @param {CIS2.BalanceOfQuery[]} queries - A list of {@link CIS2.BalanceOfQuery} objects\n *\n * @example\n * const queries = [{tokenId: '', address: '3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi'}];\n * const bytes = serializeCIS2BalanceOfQueries(queries);\n */\nexport const serializeCIS2BalanceOfQueries = makeSerializeList(serializeCIS2BalanceOfQuery);\n\n/**\n * Deserializes response of CIS-2 balanceOf query according to CIS-2 standard.\n *\n * @param {HexString} value - The hex string value to deserialize\n *\n * @returns {TokenAmount[]} A list of token balances.\n */\nexport const deserializeCIS2BalanceOfResponse = makeDeserializeListResponse((cursor) => {\n    const end = cursor.remainingBytes.findIndex((b) => b < 2 ** 7) + 1; // Find the first byte with most significant bit not set, signaling the last byte in the leb128 slice.\n    if (end === 0) {\n        throw new Error('Could not find leb128 end');\n    }\n\n    const leb128Slice = cursor.read(end);\n    if (leb128Slice.length > TOKEN_AMOUNT_MAX_LENGTH) {\n        throw new Error(`Found token amount with size exceeding the maximum allowed of ${TOKEN_AMOUNT_MAX_LENGTH}`);\n    }\n\n    const value = uleb128Decode(Buffer.from(leb128Slice));\n    return value;\n});\n\n/**\n * Serializes a list of {@link HexString} token ID's according to the CIS-2 standard.\n *\n * @param {HexString[]} tokenIds - A list of {@link HexString} values\n *\n * @example\n * const tokenIds = ['', '01', 'e2'];\n * const bytes = serializeCIS2TokenIds(tokenIds);\n */\nexport const serializeCIS2TokenIds = makeSerializeList(serializeCIS2TokenId);\n\n/**\n * Serializes {@link CIS2.MetadataUrl} metadata URL into bytes\n *\n * @param {CIS2.MetadataUrl} metadataUrl - the metadata URL to serialize\n *\n * @returns {Buffer} the metadata URL serialized to bytes\n */\nexport function serializeCIS2MetadataUrl({ url, hash }: CIS2.MetadataUrl): Buffer {\n    const bUrl = packBufferWithWord16Length(Buffer.from(url, 'utf8'), true);\n    const bHash = makeSerializeOptional<HexString>((h) => Buffer.from(h, 'hex'))(hash);\n\n    return Buffer.concat([bUrl, bHash]);\n}\n\n/**\n * Attempts to deserialize some data into a {@link CIS2.MetadataUrl}\n *\n * @param {Cursor | HexString} value - the value to deserialize\n *\n * @throws if deserialization fails\n *\n * @returns {CIS2.MetadataUrl} the metadata URL\n */\nexport function deserializeCIS2MetadataUrl(value: Cursor | HexString): CIS2.MetadataUrl {\n    const cursor = typeof value === 'string' ? Cursor.fromHex(value) : value;\n    const length = cursor.read(2).readUInt16LE(0);\n\n    const url = cursor.read(length).toString('utf8');\n\n    const hasChecksum = cursor.read(1).readUInt8(0);\n\n    let metadataUrl: CIS2.MetadataUrl;\n    if (hasChecksum === 1) {\n        const hash = cursor.read(32).toString('hex');\n        metadataUrl = { url, hash };\n    } else if (hasChecksum === 0) {\n        metadataUrl = { url };\n    } else {\n        throw new Error('Deserialization failed: boolean value had an unexpected value');\n    }\n\n    return metadataUrl;\n}\n\n/**\n * Deserializes response of CIS-2 tokenMetadata query according to CIS-2 standard.\n *\n * @param {HexString} value - The hex string value to deserialize\n *\n * @returns {CIS2MetadataUrl[]} A list of metadata URL objects.\n */\nexport const deserializeCIS2TokenMetadataResponse =\n    makeDeserializeListResponse<CIS2.MetadataUrl>(deserializeCIS2MetadataUrl);\n\nfunction serializeCIS2OperatorOfQuery(query: CIS2.OperatorOfQuery): Buffer {\n    const owner = serializeAddress(query.owner);\n    const address = serializeAddress(query.address);\n    return Buffer.concat([owner, address]);\n}\n\n/**\n * Parses a token address from a Base58-string. Will throw if the Base58\n * encoding is not a valid token address.\n *\n * @param str A Base58 encoded token address\n * @returns A parsed token address\n */\nexport function tokenAddressFromBase58(str: Base58String): CIS2.TokenAddress {\n    const bytes = new Buffer(bs58check.decode(str));\n\n    const firstByte = bytes[0];\n    const [index, i] = uleb128DecodeWithIndex(bytes, 1);\n    const [subindex, j] = uleb128DecodeWithIndex(bytes, i);\n    const tokenIdBytes = new Buffer(bytes.subarray(j));\n\n    if (firstByte !== 2) {\n        throw Error('Invalid token address: The Base58Check version byte is expected to be 2');\n    }\n\n    const contract = ContractAddress.create(index, subindex);\n\n    const id = deserializeCIS2TokenId(tokenIdBytes);\n\n    return {\n        contract,\n        id,\n    };\n}\n\n/**\n * Returns the Base58-encoding of the given CIS2 Token Address.\n *\n * @param tokenAddress A token address to convert into the base58-string format\n * @returns The base58-formatted string\n */\nexport function tokenAddressToBase58(tokenAddress: CIS2.TokenAddress): Base58String {\n    const firstByte = Buffer.from('02', 'hex');\n    const indexBytes = uleb128Encode(tokenAddress.contract.index);\n    const subindexBytes = uleb128Encode(tokenAddress.contract.subindex);\n    const tokenBytes = Buffer.from(tokenAddress.id, 'hex');\n    const bytes = Buffer.concat([firstByte, indexBytes, subindexBytes, tokenBytes]);\n\n    return bs58check.encode(bytes);\n}\n\n/**\n * Serializes a list of {@link CIS2.OperatorOfQuery} queries according to the CIS-2 standard.\n *\n * @param {CIS2.OperatorOfQuery[]} queries - A list of {@link CIS2.OperatorOfQuery} objects\n *\n * @example\n * const queries = [{owner: \"3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi\", address: {index: 123n, subindex: 0n}}];\n * const bytes = serializeCIS2OperatorOfQueries(tokenIds);\n */\nexport const serializeCIS2OperatorOfQueries = makeSerializeList(serializeCIS2OperatorOfQuery);\n\n/**\n * Deserializes response of CIS-2 operatorOf query according to CIS-2 standard.\n *\n * @param {HexString} value - The hex string value to deserialize\n *\n * @returns {boolean[]} A list of boolean values.\n */\nexport const deserializeCIS2OperatorOfResponse = makeDeserializeListResponse((cursor) => {\n    const value = Boolean(cursor.read(1).readUInt8(0));\n    return value;\n});\n\n/**\n * Format {@link CIS2.UpdateOperator} as JSON compatible with serialization wtih corresponding schema.\n */\nexport function formatCIS2UpdateOperator(input: CIS2.UpdateOperator): CIS2.UpdateOperatorParamJson {\n    return {\n        update: input.type === 'add' ? { Add: {} } : { Remove: {} },\n        operator: ContractAddress.instanceOf(input.address)\n            ? {\n                  Contract: [\n                      {\n                          index: Number(input.address.index),\n                          subindex: Number(input.address.subindex),\n                      },\n                  ],\n              }\n            : { Account: [AccountAddress.toBase58(input.address)] },\n    };\n}\n\n/**\n * Format {@link CIS2.Transfer} as JSON compatible with serialization wtih corresponding schema.\n */\nexport function formatCIS2Transfer(input: CIS2.Transfer): CIS2.TransferParamJson {\n    const from: CIS2.AddressParamJson = ContractAddress.instanceOf(input.from)\n        ? {\n              Contract: [\n                  {\n                      index: Number(input.from.index),\n                      subindex: Number(input.from.subindex),\n                  },\n              ],\n          }\n        : { Account: [AccountAddress.toBase58(input.from)] };\n    let to: CIS2.ReceiverParamJson;\n    if (AccountAddress.instanceOf(input.to)) {\n        to = { Account: [AccountAddress.toBase58(input.to)] };\n    } else {\n        to = {\n            Contract: [\n                {\n                    index: Number(input.to.address.index),\n                    subindex: Number(input.to.address.subindex),\n                },\n                EntrypointName.toString(input.to.hookName),\n            ],\n        };\n    }\n    return {\n        token_id: input.tokenId,\n        amount: input.tokenAmount.toString(),\n        from,\n        to,\n        data: input.data ?? '',\n    };\n}\n\nfunction addressDeserializer(cursor: Cursor): CIS2.Address {\n    const kind = deserializeUint8(cursor);\n    switch (kind) {\n        case 0:\n            return AccountAddress.fromBuffer(cursor.read(32));\n        case 1:\n            const index = deserializeBigUInt64LE(cursor);\n            const subindex = deserializeBigUInt64LE(cursor);\n            return ContractAddress.create(index, subindex);\n        default:\n            throw new Error('Invalid address kind');\n    }\n}\n\n/**\n * Deserializes a CIS-2 event according to the CIS-2 standard.\n *\n * @param {ContractEvent.Type} event - The event to deserialize\n *\n * @returns {CIS2.Event} The deserialized event\n */\nexport function deserializeCIS2Event(event: ContractEvent.Type): CIS2.Event {\n    const buffer = event.buffer;\n    // An empty buffer is a valid custom event\n    if (buffer.length === 0) {\n        return {\n            type: CIS2.EventType.Custom,\n            data: buffer,\n        };\n    }\n\n    const tag = buffer[0];\n    if (tag == 255) {\n        // Transfer event\n        const n = buffer[1];\n        const tokenId = deserializeCIS2TokenId(buffer.subarray(1, 2 + n));\n\n        const [tokenAmount, i] = uleb128DecodeWithIndex(buffer, 2 + n);\n\n        const cursor = Cursor.fromBuffer(buffer.subarray(i));\n        const from = addressDeserializer(cursor);\n        const to = addressDeserializer(cursor);\n\n        return {\n            type: CIS2.EventType.Transfer,\n            tokenId,\n            tokenAmount,\n            from,\n            to,\n        };\n    } else if (tag == 254) {\n        // Mint event\n        const n = buffer[1];\n        const tokenId = deserializeCIS2TokenId(buffer.subarray(1, 2 + n));\n\n        const [tokenAmount, i] = uleb128DecodeWithIndex(buffer, 2 + n);\n\n        const cursor = Cursor.fromBuffer(buffer.subarray(i));\n        const owner = addressDeserializer(cursor);\n\n        return {\n            type: CIS2.EventType.Mint,\n            tokenId,\n            tokenAmount,\n            owner,\n        };\n    } else if (tag == 253) {\n        // Burn event\n        const n = buffer[1];\n        const tokenId = deserializeCIS2TokenId(buffer.subarray(1, 2 + n));\n\n        const [tokenAmount, i] = uleb128DecodeWithIndex(buffer, 2 + n);\n\n        const cursor = Cursor.fromBuffer(buffer.subarray(i));\n        const owner = addressDeserializer(cursor);\n\n        return {\n            type: CIS2.EventType.Burn,\n            tokenId,\n            tokenAmount,\n            owner,\n        };\n    } else if (tag == 252) {\n        // UpdateOperator event\n        let updateType: 'add' | 'remove' = 'add';\n        if (buffer[1] === 0) {\n            updateType = 'remove';\n        }\n\n        const cursor = Cursor.fromBuffer(buffer.subarray(2));\n        const owner = addressDeserializer(cursor);\n        const operator = addressDeserializer(cursor);\n\n        return {\n            type: CIS2.EventType.UpdateOperatorOf,\n            updateOperatorData: {\n                type: updateType,\n                address: operator,\n            },\n            owner,\n        };\n    } else if (tag == 251) {\n        // TokenMetadata event\n        const n = buffer[1];\n        const tokenId = deserializeCIS2TokenId(buffer.subarray(1, 2 + n));\n\n        const cursor = Cursor.fromBuffer(buffer.subarray(2 + n));\n        const metadataUrl = deserializeCIS2MetadataUrl(cursor);\n\n        return {\n            type: CIS2.EventType.TokenMetadata,\n            tokenId,\n            metadataUrl,\n        };\n    } else {\n        // Custom event\n        return {\n            type: CIS2.EventType.Custom,\n            data: buffer,\n        };\n    }\n}\n\n/**\n * Deserializes a successful contract invokation to a list of CIS-2 events according to the CIS-2 standard.\n *\n * @param {InvokeContractSuccessResult} result - The contract invokation result to deserialize\n *\n * @returns {CIS2.NonCustomEvent[]} The deserialized events\n */\nexport function deserializeCIS2EventsFromInvokationResult(result: InvokeContractSuccessResult): CIS2.NonCustomEvent[] {\n    return deserializeCIS2ContractTraceEvents(result.events.filter(isKnown));\n}\n\n/**\n * Parses the {@linkcode CIS2.RejectionError} from a rejected receive error.\n *\n * @param {RejectedReceive} rejection - The rejected receive error\n *\n * @returns {CIS2.RejectionError} The parsed rejection error\n */\nexport function parseCIS2RejectionError(rejection: RejectedReceive): CIS2.RejectionError {\n    switch (rejection.rejectReason) {\n        case -42000001:\n            return {\n                type: CIS2.ErrorType.InvalidTokenId,\n                tag: -42000001,\n            };\n        case -42000002:\n            return {\n                type: CIS2.ErrorType.InsufficientFunds,\n                tag: -42000002,\n            };\n        case -42000003:\n            return {\n                type: CIS2.ErrorType.Unauthorized,\n                tag: -42000003,\n            };\n        default:\n            return {\n                type: CIS2.ErrorType.Custom,\n                tag: rejection.rejectReason,\n            };\n    }\n}\n\n/**\n * Deserializes all CIS-2 events (skipping custom events) from a {@linkcode BlockItemSummary}.\n *\n * @param {BlockItemSummary} summary - The summary to deserialize\n *\n * @returns {CIS2.NonCustomEvent[]} The deserialized events\n */\nexport function deserializeCIS2EventsFromSummary(summary: BlockItemSummary): CIS2.NonCustomEvent[] {\n    if (summary.type !== TransactionSummaryType.AccountTransaction) {\n        return [];\n    }\n\n    switch (summary.transactionType) {\n        case TransactionKindString.Update:\n            return deserializeCIS2ContractTraceEvents(summary.events.filter(isKnown));\n        case TransactionKindString.InitContract:\n            const deserializedEvents = [];\n            for (const event of summary.contractInitialized.events) {\n                const deserializedEvent = deserializeCIS2Event(ContractEvent.fromHexString(event));\n                if (deserializedEvent.type !== CIS2.EventType.Custom) {\n                    deserializedEvents.push(deserializedEvent);\n                }\n            }\n            return deserializedEvents;\n        default:\n            return [];\n    }\n}\n\n/**\n * Deserializes a list of {@linkcode ContractTraceEvent} into a list of CIS-2 events.\n * This function filters out any custom events.\n *\n * @param {ContractTraceEvent[]} events - The list of contract trace events to deserialize\n *\n * @returns {CIS2.NonCustomEvent[]} The deserialized CIS-2 events\n */\nfunction deserializeCIS2ContractTraceEvents(events: ContractTraceEvent[]): CIS2.NonCustomEvent[] {\n    const deserializedEvents = [];\n    for (const traceEvent of events) {\n        if (!('events' in traceEvent)) {\n            continue;\n        }\n        for (const event of traceEvent.events) {\n            const deserializedEvent = deserializeCIS2Event(event);\n            if (deserializedEvent.type !== CIS2.EventType.Custom) {\n                deserializedEvents.push(deserializedEvent);\n            }\n        }\n    }\n    return deserializedEvents;\n}\n","import { lowerCamelCase } from \"@protobuf-ts/runtime\";\n/**\n * Turns PartialMethodInfo into MethodInfo.\n */\nexport function normalizeMethodInfo(method, service) {\n    var _a, _b, _c;\n    let m = method;\n    m.service = service;\n    m.localName = (_a = m.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(m.name);\n    // noinspection PointlessBooleanExpressionJS\n    m.serverStreaming = !!m.serverStreaming;\n    // noinspection PointlessBooleanExpressionJS\n    m.clientStreaming = !!m.clientStreaming;\n    m.options = (_b = m.options) !== null && _b !== void 0 ? _b : {};\n    m.idempotency = (_c = m.idempotency) !== null && _c !== void 0 ? _c : undefined;\n    return m;\n}\n/**\n * Read custom method options from a generated service client.\n *\n * @deprecated use readMethodOption()\n */\nexport function readMethodOptions(service, methodName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = service.methods.find((m, i) => m.localName === methodName || i === methodName)) === null || _a === void 0 ? void 0 : _a.options;\n    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readMethodOption(service, methodName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = service.methods.find((m, i) => m.localName === methodName || i === methodName)) === null || _a === void 0 ? void 0 : _a.options;\n    if (!options) {\n        return undefined;\n    }\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readServiceOption(service, extensionName, extensionType) {\n    const options = service.options;\n    if (!options) {\n        return undefined;\n    }\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\n","import { normalizeMethodInfo } from \"./reflection-info\";\nexport class ServiceType {\n    constructor(typeName, methods, options) {\n        this.typeName = typeName;\n        this.methods = methods.map(i => normalizeMethodInfo(i, this));\n        this.options = options !== null && options !== void 0 ? options : {};\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * A client streaming RPC call. This means that the clients sends 0, 1, or\n * more messages to the server, and the server replies with exactly one\n * message.\n */\nexport class ClientStreamingCall {\n    constructor(method, requestHeaders, request, headers, response, status, trailers) {\n        this.method = method;\n        this.requestHeaders = requestHeaders;\n        this.requests = request;\n        this.headers = headers;\n        this.response = response;\n        this.status = status;\n        this.trailers = trailers;\n    }\n    /**\n     * Instead of awaiting the response status and trailers, you can\n     * just as well await this call itself to receive the server outcome.\n     * Note that it may still be valid to send more request messages.\n     */\n    then(onfulfilled, onrejected) {\n        return this.promiseFinished().then(value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));\n    }\n    promiseFinished() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let [headers, response, status, trailers] = yield Promise.all([this.headers, this.response, this.status, this.trailers]);\n            return {\n                method: this.method,\n                requestHeaders: this.requestHeaders,\n                headers,\n                response,\n                status,\n                trailers\n            };\n        });\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * A duplex streaming RPC call. This means that the clients sends an\n * arbitrary amount of messages to the server, while at the same time,\n * the server sends an arbitrary amount of messages to the client.\n */\nexport class DuplexStreamingCall {\n    constructor(method, requestHeaders, request, headers, response, status, trailers) {\n        this.method = method;\n        this.requestHeaders = requestHeaders;\n        this.requests = request;\n        this.headers = headers;\n        this.responses = response;\n        this.status = status;\n        this.trailers = trailers;\n    }\n    /**\n     * Instead of awaiting the response status and trailers, you can\n     * just as well await this call itself to receive the server outcome.\n     * Note that it may still be valid to send more request messages.\n     */\n    then(onfulfilled, onrejected) {\n        return this.promiseFinished().then(value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));\n    }\n    promiseFinished() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let [headers, status, trailers] = yield Promise.all([this.headers, this.status, this.trailers]);\n            return {\n                method: this.method,\n                requestHeaders: this.requestHeaders,\n                headers,\n                status,\n                trailers,\n            };\n        });\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { RpcError } from \"./rpc-error\";\nimport { assert } from \"@protobuf-ts/runtime\";\nimport { RpcOutputStreamController } from \"./rpc-output-stream\";\nimport { mergeRpcOptions } from \"./rpc-options\";\nimport { UnaryCall } from \"./unary-call\";\nimport { ServerStreamingCall } from \"./server-streaming-call\";\nimport { ClientStreamingCall } from \"./client-streaming-call\";\nimport { DuplexStreamingCall } from \"./duplex-streaming-call\";\n/**\n * Transport for testing.\n */\nexport class TestTransport {\n    /**\n     * Initialize with mock data. Omitted fields have default value.\n     */\n    constructor(data) {\n        /**\n         * Suppress warning / error about uncaught rejections of\n         * \"status\" and \"trailers\".\n         */\n        this.suppressUncaughtRejections = true;\n        this.headerDelay = 10;\n        this.responseDelay = 50;\n        this.betweenResponseDelay = 10;\n        this.afterResponseDelay = 10;\n        this.data = data !== null && data !== void 0 ? data : {};\n    }\n    /**\n     * Sent message(s) during the last operation.\n     */\n    get sentMessages() {\n        if (this.lastInput instanceof TestInputStream) {\n            return this.lastInput.sent;\n        }\n        else if (typeof this.lastInput == \"object\") {\n            return [this.lastInput.single];\n        }\n        return [];\n    }\n    /**\n     * Sending message(s) completed?\n     */\n    get sendComplete() {\n        if (this.lastInput instanceof TestInputStream) {\n            return this.lastInput.completed;\n        }\n        else if (typeof this.lastInput == \"object\") {\n            return true;\n        }\n        return false;\n    }\n    // Creates a promise for response headers from the mock data.\n    promiseHeaders() {\n        var _a;\n        const headers = (_a = this.data.headers) !== null && _a !== void 0 ? _a : TestTransport.defaultHeaders;\n        return headers instanceof RpcError\n            ? Promise.reject(headers)\n            : Promise.resolve(headers);\n    }\n    // Creates a promise for a single, valid, message from the mock data.\n    promiseSingleResponse(method) {\n        if (this.data.response instanceof RpcError) {\n            return Promise.reject(this.data.response);\n        }\n        let r;\n        if (Array.isArray(this.data.response)) {\n            assert(this.data.response.length > 0);\n            r = this.data.response[0];\n        }\n        else if (this.data.response !== undefined) {\n            r = this.data.response;\n        }\n        else {\n            r = method.O.create();\n        }\n        assert(method.O.is(r));\n        return Promise.resolve(r);\n    }\n    /**\n     * Pushes response messages from the mock data to the output stream.\n     * If an error response, status or trailers are mocked, the stream is\n     * closed with the respective error.\n     * Otherwise, stream is completed successfully.\n     *\n     * The returned promise resolves when the stream is closed. It should\n     * not reject. If it does, code is broken.\n     */\n    streamResponses(method, stream, abort) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // normalize \"data.response\" into an array of valid output messages\n            const messages = [];\n            if (this.data.response === undefined) {\n                messages.push(method.O.create());\n            }\n            else if (Array.isArray(this.data.response)) {\n                for (let msg of this.data.response) {\n                    assert(method.O.is(msg));\n                    messages.push(msg);\n                }\n            }\n            else if (!(this.data.response instanceof RpcError)) {\n                assert(method.O.is(this.data.response));\n                messages.push(this.data.response);\n            }\n            // start the stream with an initial delay.\n            // if the request is cancelled, notify() error and exit.\n            try {\n                yield delay(this.responseDelay, abort)(undefined);\n            }\n            catch (error) {\n                stream.notifyError(error);\n                return;\n            }\n            // if error response was mocked, notify() error (stream is now closed with error) and exit.\n            if (this.data.response instanceof RpcError) {\n                stream.notifyError(this.data.response);\n                return;\n            }\n            // regular response messages were mocked. notify() them.\n            for (let msg of messages) {\n                stream.notifyMessage(msg);\n                // add a short delay between responses\n                // if the request is cancelled, notify() error and exit.\n                try {\n                    yield delay(this.betweenResponseDelay, abort)(undefined);\n                }\n                catch (error) {\n                    stream.notifyError(error);\n                    return;\n                }\n            }\n            // error status was mocked, notify() error (stream is now closed with error) and exit.\n            if (this.data.status instanceof RpcError) {\n                stream.notifyError(this.data.status);\n                return;\n            }\n            // error trailers were mocked, notify() error (stream is now closed with error) and exit.\n            if (this.data.trailers instanceof RpcError) {\n                stream.notifyError(this.data.trailers);\n                return;\n            }\n            // stream completed successfully\n            stream.notifyComplete();\n        });\n    }\n    // Creates a promise for response status from the mock data.\n    promiseStatus() {\n        var _a;\n        const status = (_a = this.data.status) !== null && _a !== void 0 ? _a : TestTransport.defaultStatus;\n        return status instanceof RpcError\n            ? Promise.reject(status)\n            : Promise.resolve(status);\n    }\n    // Creates a promise for response trailers from the mock data.\n    promiseTrailers() {\n        var _a;\n        const trailers = (_a = this.data.trailers) !== null && _a !== void 0 ? _a : TestTransport.defaultTrailers;\n        return trailers instanceof RpcError\n            ? Promise.reject(trailers)\n            : Promise.resolve(trailers);\n    }\n    maybeSuppressUncaught(...promise) {\n        if (this.suppressUncaughtRejections) {\n            for (let p of promise) {\n                p.catch(() => {\n                });\n            }\n        }\n    }\n    mergeOptions(options) {\n        return mergeRpcOptions({}, options);\n    }\n    unary(method, input, options) {\n        var _a;\n        const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {}, headersPromise = this.promiseHeaders()\n            .then(delay(this.headerDelay, options.abort)), responsePromise = headersPromise\n            .catch(_ => {\n        })\n            .then(delay(this.responseDelay, options.abort))\n            .then(_ => this.promiseSingleResponse(method)), statusPromise = responsePromise\n            .catch(_ => {\n        })\n            .then(delay(this.afterResponseDelay, options.abort))\n            .then(_ => this.promiseStatus()), trailersPromise = responsePromise\n            .catch(_ => {\n        })\n            .then(delay(this.afterResponseDelay, options.abort))\n            .then(_ => this.promiseTrailers());\n        this.maybeSuppressUncaught(statusPromise, trailersPromise);\n        this.lastInput = { single: input };\n        return new UnaryCall(method, requestHeaders, input, headersPromise, responsePromise, statusPromise, trailersPromise);\n    }\n    serverStreaming(method, input, options) {\n        var _a;\n        const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {}, headersPromise = this.promiseHeaders()\n            .then(delay(this.headerDelay, options.abort)), outputStream = new RpcOutputStreamController(), responseStreamClosedPromise = headersPromise\n            .then(delay(this.responseDelay, options.abort))\n            .catch(() => {\n        })\n            .then(() => this.streamResponses(method, outputStream, options.abort))\n            .then(delay(this.afterResponseDelay, options.abort)), statusPromise = responseStreamClosedPromise\n            .then(() => this.promiseStatus()), trailersPromise = responseStreamClosedPromise\n            .then(() => this.promiseTrailers());\n        this.maybeSuppressUncaught(statusPromise, trailersPromise);\n        this.lastInput = { single: input };\n        return new ServerStreamingCall(method, requestHeaders, input, headersPromise, outputStream, statusPromise, trailersPromise);\n    }\n    clientStreaming(method, options) {\n        var _a;\n        const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {}, headersPromise = this.promiseHeaders()\n            .then(delay(this.headerDelay, options.abort)), responsePromise = headersPromise\n            .catch(_ => {\n        })\n            .then(delay(this.responseDelay, options.abort))\n            .then(_ => this.promiseSingleResponse(method)), statusPromise = responsePromise\n            .catch(_ => {\n        })\n            .then(delay(this.afterResponseDelay, options.abort))\n            .then(_ => this.promiseStatus()), trailersPromise = responsePromise\n            .catch(_ => {\n        })\n            .then(delay(this.afterResponseDelay, options.abort))\n            .then(_ => this.promiseTrailers());\n        this.maybeSuppressUncaught(statusPromise, trailersPromise);\n        this.lastInput = new TestInputStream(this.data, options.abort);\n        return new ClientStreamingCall(method, requestHeaders, this.lastInput, headersPromise, responsePromise, statusPromise, trailersPromise);\n    }\n    duplex(method, options) {\n        var _a;\n        const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {}, headersPromise = this.promiseHeaders()\n            .then(delay(this.headerDelay, options.abort)), outputStream = new RpcOutputStreamController(), responseStreamClosedPromise = headersPromise\n            .then(delay(this.responseDelay, options.abort))\n            .catch(() => {\n        })\n            .then(() => this.streamResponses(method, outputStream, options.abort))\n            .then(delay(this.afterResponseDelay, options.abort)), statusPromise = responseStreamClosedPromise\n            .then(() => this.promiseStatus()), trailersPromise = responseStreamClosedPromise\n            .then(() => this.promiseTrailers());\n        this.maybeSuppressUncaught(statusPromise, trailersPromise);\n        this.lastInput = new TestInputStream(this.data, options.abort);\n        return new DuplexStreamingCall(method, requestHeaders, this.lastInput, headersPromise, outputStream, statusPromise, trailersPromise);\n    }\n}\nTestTransport.defaultHeaders = {\n    responseHeader: \"test\"\n};\nTestTransport.defaultStatus = {\n    code: \"OK\", detail: \"all good\"\n};\nTestTransport.defaultTrailers = {\n    responseTrailer: \"test\"\n};\nfunction delay(ms, abort) {\n    return (v) => new Promise((resolve, reject) => {\n        if (abort === null || abort === void 0 ? void 0 : abort.aborted) {\n            reject(new RpcError(\"user cancel\", \"CANCELLED\"));\n        }\n        else {\n            const id = setTimeout(() => resolve(v), ms);\n            if (abort) {\n                abort.addEventListener(\"abort\", ev => {\n                    clearTimeout(id);\n                    reject(new RpcError(\"user cancel\", \"CANCELLED\"));\n                });\n            }\n        }\n    });\n}\nclass TestInputStream {\n    constructor(data, abort) {\n        this._completed = false;\n        this._sent = [];\n        this.data = data;\n        this.abort = abort;\n    }\n    get sent() {\n        return this._sent;\n    }\n    get completed() {\n        return this._completed;\n    }\n    send(message) {\n        if (this.data.inputMessage instanceof RpcError) {\n            return Promise.reject(this.data.inputMessage);\n        }\n        const delayMs = this.data.inputMessage === undefined\n            ? 10\n            : this.data.inputMessage;\n        return Promise.resolve(undefined)\n            .then(() => {\n            this._sent.push(message);\n        })\n            .then(delay(delayMs, this.abort));\n    }\n    complete() {\n        if (this.data.inputComplete instanceof RpcError) {\n            return Promise.reject(this.data.inputComplete);\n        }\n        const delayMs = this.data.inputComplete === undefined\n            ? 10\n            : this.data.inputComplete;\n        return Promise.resolve(undefined)\n            .then(() => {\n            this._completed = true;\n        })\n            .then(delay(delayMs, this.abort));\n    }\n}\n","import { assertNever } from \"@protobuf-ts/runtime\";\n/**\n * Creates a \"stack\" of of all interceptors specified in the given `RpcOptions`.\n * Used by generated client implementations.\n * @internal\n */\nexport function stackIntercept(kind, transport, method, options, input) {\n    var _a, _b, _c, _d;\n    if (kind == \"unary\") {\n        let tail = (mtd, inp, opt) => transport.unary(mtd, inp, opt);\n        for (const curr of ((_a = options.interceptors) !== null && _a !== void 0 ? _a : []).filter(i => i.interceptUnary).reverse()) {\n            const next = tail;\n            tail = (mtd, inp, opt) => curr.interceptUnary(next, mtd, inp, opt);\n        }\n        return tail(method, input, options);\n    }\n    if (kind == \"serverStreaming\") {\n        let tail = (mtd, inp, opt) => transport.serverStreaming(mtd, inp, opt);\n        for (const curr of ((_b = options.interceptors) !== null && _b !== void 0 ? _b : []).filter(i => i.interceptServerStreaming).reverse()) {\n            const next = tail;\n            tail = (mtd, inp, opt) => curr.interceptServerStreaming(next, mtd, inp, opt);\n        }\n        return tail(method, input, options);\n    }\n    if (kind == \"clientStreaming\") {\n        let tail = (mtd, opt) => transport.clientStreaming(mtd, opt);\n        for (const curr of ((_c = options.interceptors) !== null && _c !== void 0 ? _c : []).filter(i => i.interceptClientStreaming).reverse()) {\n            const next = tail;\n            tail = (mtd, opt) => curr.interceptClientStreaming(next, mtd, opt);\n        }\n        return tail(method, options);\n    }\n    if (kind == \"duplex\") {\n        let tail = (mtd, opt) => transport.duplex(mtd, opt);\n        for (const curr of ((_d = options.interceptors) !== null && _d !== void 0 ? _d : []).filter(i => i.interceptDuplex).reverse()) {\n            const next = tail;\n            tail = (mtd, opt) => curr.interceptDuplex(next, mtd, opt);\n        }\n        return tail(method, options);\n    }\n    assertNever(kind);\n}\n/**\n * @deprecated replaced by `stackIntercept()`, still here to support older generated code\n */\nexport function stackUnaryInterceptors(transport, method, input, options) {\n    return stackIntercept(\"unary\", transport, method, options, input);\n}\n/**\n * @deprecated replaced by `stackIntercept()`, still here to support older generated code\n */\nexport function stackServerStreamingInterceptors(transport, method, input, options) {\n    return stackIntercept(\"serverStreaming\", transport, method, options, input);\n}\n/**\n * @deprecated replaced by `stackIntercept()`, still here to support older generated code\n */\nexport function stackClientStreamingInterceptors(transport, method, options) {\n    return stackIntercept(\"clientStreaming\", transport, method, options);\n}\n/**\n * @deprecated replaced by `stackIntercept()`, still here to support older generated code\n */\nexport function stackDuplexStreamingInterceptors(transport, method, options) {\n    return stackIntercept(\"duplex\", transport, method, options);\n}\n","export class ServerCallContextController {\n    constructor(method, headers, deadline, sendResponseHeadersFn, defaultStatus = { code: 'OK', detail: '' }) {\n        this._cancelled = false;\n        this._listeners = [];\n        this.method = method;\n        this.headers = headers;\n        this.deadline = deadline;\n        this.trailers = {};\n        this._sendRH = sendResponseHeadersFn;\n        this.status = defaultStatus;\n    }\n    /**\n     * Set the call cancelled.\n     *\n     * Invokes all callbacks registered with onCancel() and\n     * sets `cancelled = true`.\n     */\n    notifyCancelled() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (let l of this._listeners) {\n                l();\n            }\n        }\n    }\n    /**\n     * Send response headers.\n     */\n    sendResponseHeaders(data) {\n        this._sendRH(data);\n    }\n    /**\n     * Is the call cancelled?\n     *\n     * When the client closes the connection before the server\n     * is done, the call is cancelled.\n     *\n     * If you want to cancel a request on the server, throw a\n     * RpcError with the CANCELLED status code.\n     */\n    get cancelled() {\n        return this._cancelled;\n    }\n    /**\n     * Add a callback for cancellation.\n     */\n    onCancel(callback) {\n        const l = this._listeners;\n        l.push(callback);\n        return () => {\n            let i = l.indexOf(callback);\n            if (i >= 0)\n                l.splice(i, 1);\n        };\n    }\n}\n","import { Buffer } from 'buffer/index.js';\n\nimport { getAccountTransactionHandler } from './accountTransactions.js';\nimport { calculateEnergyCost } from './energyCost.js';\nimport { Known, isKnown } from './grpc/upward.js';\nimport { sha256 } from './hash.js';\nimport {\n    encodeWord8,\n    encodeWord8FromString,\n    encodeWord16,\n    encodeWord32,\n    encodeWord64,\n    serializeMap,\n    serializeVerifyKey,\n    serializeYearMonth,\n} from './serializationHelpers.js';\nimport {\n    AccountTransaction,\n    AccountTransactionHeader,\n    AccountTransactionSignature,\n    AccountTransactionType,\n    AttributesKeys,\n    BlockItemKind,\n    CredentialDeploymentDetails,\n    CredentialDeploymentInfo,\n    CredentialDeploymentValues,\n    CredentialSignature,\n    IdOwnershipProofs,\n    UnsignedCredentialDeploymentInformation,\n} from './types.js';\nimport * as AccountAddress from './types/AccountAddress.js';\nimport * as Energy from './types/Energy.js';\nimport { countSignatures } from './util.js';\n\nfunction serializeAccountTransactionType(type: AccountTransactionType): Buffer {\n    return Buffer.from(Uint8Array.of(type));\n}\n\n/**\n * Serialization of an account transaction header. The payload size is a part of the header,\n * but is factored out of the type as it always has to be derived from the serialized\n * transaction payload, which cannot happen until the payload has been constructed.\n * @param header the account transaction header with metadata about the transaction\n * @param payloadSize the byte size of the serialized payload\n * @param energyAmount dedicated amount of energy for this transaction, if it is insufficient, the transaction will fail\n * @returns the serialized account transaction header\n */\nfunction serializeAccountTransactionHeader(\n    header: AccountTransactionHeader,\n    payloadSize: number,\n    energyAmount: Energy.Type\n) {\n    const serializedSender = AccountAddress.toBuffer(header.sender);\n    const serializedNonce = encodeWord64(header.nonce.value);\n    const serializedEnergyAmount = encodeWord64(energyAmount.value);\n    const serializedPayloadSize = encodeWord32(payloadSize);\n    const serializedExpiry = encodeWord64(header.expiry.expiryEpochSeconds);\n    return Buffer.concat([\n        serializedSender,\n        serializedNonce,\n        serializedEnergyAmount,\n        serializedPayloadSize,\n        serializedExpiry,\n    ]);\n}\n\n/**\n * Serializes a map of account transaction signatures. If no signatures are provided,\n * then an error is thrown.\n */\nexport function serializeAccountTransactionSignature(signatures: AccountTransactionSignature): Buffer {\n    if (Object.keys(signatures).length === 0) {\n        throw new Error('No signatures were provided');\n    }\n\n    const putSignature = (signature: string) => {\n        const signatureBytes = Buffer.from(signature, 'hex');\n        const length = Buffer.alloc(2);\n        length.writeUInt16BE(signatureBytes.length, 0);\n        return Buffer.concat([length, signatureBytes]);\n    };\n    const putCredentialSignatures = (credSig: CredentialSignature) =>\n        serializeMap(credSig, encodeWord8, encodeWord8FromString, putSignature);\n    return serializeMap(signatures, encodeWord8, encodeWord8FromString, putCredentialSignatures);\n}\n\n/**\n * Serializes a transaction and its signatures. This serialization when sha256 hashed\n * is considered as the transaction hash, and is used to look up the status of a\n * submitted transaction.\n * @param accountTransaction the transaction to serialize\n * @param signatures signatures on the signed digest of the transaction\n * @returns the serialization of the account transaction, which is used to calculate the transaction hash\n */\nexport function serializeAccountTransaction(\n    accountTransaction: AccountTransaction,\n    signatures: AccountTransactionSignature\n): Buffer {\n    const serializedBlockItemKind = encodeWord8(BlockItemKind.AccountTransactionKind);\n    const serializedAccountTransactionSignatures = serializeAccountTransactionSignature(signatures);\n\n    const accountTransactionHandler = getAccountTransactionHandler(accountTransaction.type);\n    const serializedPayload = serializeAccountTransactionPayload(accountTransaction);\n\n    const baseEnergyCost = accountTransactionHandler.getBaseEnergyCost(accountTransaction.payload);\n    const energyCost = calculateEnergyCost(\n        countSignatures(signatures),\n        BigInt(serializedPayload.length),\n        baseEnergyCost\n    );\n    const serializedHeader = serializeAccountTransactionHeader(\n        accountTransaction.header,\n        serializedPayload.length,\n        energyCost\n    );\n\n    return Buffer.concat([\n        serializedBlockItemKind,\n        serializedAccountTransactionSignatures,\n        serializedHeader,\n        serializedPayload,\n    ]);\n}\n\n/**\n * Serializes a transaction payload.\n * @param accountTransaction the transaction which payload is to be serialized\n * @returns the account transaction payload serialized as a buffer.\n */\nexport function serializeAccountTransactionPayload(accountTransaction: Omit<AccountTransaction, 'header'>): Buffer {\n    const serializedType = serializeAccountTransactionType(accountTransaction.type);\n\n    const accountTransactionHandler = getAccountTransactionHandler(accountTransaction.type);\n    const serializedPayload = accountTransactionHandler.serialize(accountTransaction.payload);\n\n    return Buffer.concat([serializedType, serializedPayload]);\n}\n\n/**\n * Gets the transaction hash that is used to look up the status of a transaction.\n * @param accountTransaction the transaction to hash\n * @param signatures the signatures that will also be part of the hash\n * @returns the sha256 hash of the serialized block item kind, signatures, header, type and payload\n */\nexport function getAccountTransactionHash(\n    accountTransaction: AccountTransaction,\n    signatures: AccountTransactionSignature\n): string {\n    const serializedAccountTransaction = serializeAccountTransaction(accountTransaction, signatures);\n    return sha256([serializedAccountTransaction]).toString('hex');\n}\n\n/**\n * Returns the digest of the transaction that has to be signed.\n * @param accountTransaction the transaction to hash\n * @param signatureCount number of expected signatures\n * @returns the sha256 hash on the serialized header, type and payload\n */\nexport function getAccountTransactionSignDigest(accountTransaction: AccountTransaction, signatureCount = 1n): Buffer {\n    const accountTransactionHandler = getAccountTransactionHandler(accountTransaction.type);\n    const serializedPayload = serializeAccountTransactionPayload(accountTransaction);\n\n    const baseEnergyCost = accountTransactionHandler.getBaseEnergyCost(accountTransaction.payload);\n    const energyCost = calculateEnergyCost(signatureCount, BigInt(serializedPayload.length), baseEnergyCost);\n    const serializedHeader = serializeAccountTransactionHeader(\n        accountTransaction.header,\n        serializedPayload.length,\n        energyCost\n    );\n\n    return sha256([serializedHeader, serializedPayload]);\n}\n\n/**\n * Serializes an account transaction so that it is ready for being submitted\n * to the node. This consists of the standard serialization of an account transaction\n * prefixed by a version byte.\n * @param accountTransaction the transaction to serialize\n * @param signatures the signatures on the hash of the account transaction\n * @returns the serialization of the account transaction ready for being submitted to a node\n */\nexport function serializeAccountTransactionForSubmission(\n    accountTransaction: AccountTransaction,\n    signatures: AccountTransactionSignature\n): Buffer {\n    const serializedAccountTransaction = serializeAccountTransaction(accountTransaction, signatures);\n\n    const serializedVersion = encodeWord8(0);\n    return Buffer.concat([serializedVersion, serializedAccountTransaction]);\n}\n\n/**\n * Serializes the credential deployment values as expected by the node. This constitutes\n * a part of the serialization of a credential deployment.\n * @param credential the credential deployment values to serialize\n * @returns the serialization of CredentialDeploymentValues\n */\nfunction serializeCredentialDeploymentValues(credential: CredentialDeploymentValues) {\n    // Check that we don't attempt to serialize unknown variants\n    if (Object.values(credential.credentialPublicKeys.keys).some((v) => !isKnown(v)))\n        throw new Error('Cannot serialize unknown key variants');\n\n    const buffers = [];\n    buffers.push(\n        serializeMap(\n            credential.credentialPublicKeys.keys as Known<typeof credential.credentialPublicKeys.keys>,\n            encodeWord8,\n            encodeWord8FromString,\n            serializeVerifyKey\n        )\n    );\n\n    buffers.push(encodeWord8(credential.credentialPublicKeys.threshold));\n    buffers.push(Buffer.from(credential.credId, 'hex'));\n    buffers.push(encodeWord32(credential.ipIdentity));\n    buffers.push(encodeWord8(credential.revocationThreshold));\n    buffers.push(\n        serializeMap(\n            credential.arData,\n            encodeWord16,\n            (key) => encodeWord32(parseInt(key, 10)),\n            (arData) => Buffer.from(arData.encIdCredPubShare, 'hex')\n        )\n    );\n    buffers.push(serializeYearMonth(credential.policy.validTo));\n    buffers.push(serializeYearMonth(credential.policy.createdAt));\n    const revealedAttributes = Object.entries(credential.policy.revealedAttributes);\n    buffers.push(encodeWord16(revealedAttributes.length));\n\n    const revealedAttributeTags: [number, string][] = revealedAttributes.map(([tagName, value]) => [\n        AttributesKeys[tagName as keyof typeof AttributesKeys],\n        value,\n    ]);\n    revealedAttributeTags\n        .sort((a, b) => a[0] - b[0])\n        .forEach(([tag, value]) => {\n            const serializedAttributeValue = Buffer.from(value, 'utf-8');\n            const serializedTag = encodeWord8(tag);\n            const serializedAttributeValueLength = encodeWord8(serializedAttributeValue.length);\n            buffers.push(Buffer.concat([serializedTag, serializedAttributeValueLength]));\n            buffers.push(serializedAttributeValue);\n        });\n\n    return Buffer.concat(buffers);\n}\n\n/**\n * Serializes the IdOwnershipProofs as expected by the node. This constitutes\n * a part of the serialization of a credential deployment.\n * @param proofs the proofs the serialize\n * @returns the serialization of IdOwnershipProofs\n */\nfunction serializeIdOwnershipProofs(proofs: IdOwnershipProofs) {\n    const proofIdCredPub = encodeWord32(Object.entries(proofs.proofIdCredPub).length);\n    const idCredPubProofs = Buffer.concat(\n        Object.entries(proofs.proofIdCredPub)\n            .sort(([indexA], [indexB]) => parseInt(indexA, 10) - parseInt(indexB, 10))\n            .map(([index, value]) => {\n                const serializedIndex = encodeWord32(parseInt(index, 10));\n                const serializedValue = Buffer.from(value, 'hex');\n                return Buffer.concat([serializedIndex, serializedValue]);\n            })\n    );\n\n    return Buffer.concat([\n        Buffer.from(proofs.sig, 'hex'),\n        Buffer.from(proofs.commitments, 'hex'),\n        Buffer.from(proofs.challenge, 'hex'),\n        proofIdCredPub,\n        idCredPubProofs,\n        Buffer.from(proofs.proofIpSig, 'hex'),\n        Buffer.from(proofs.proofRegId, 'hex'),\n        Buffer.from(proofs.credCounterLessThanMaxAccounts, 'hex'),\n    ]);\n}\n\n/**\n * Serializes a signed credential used as part of an update credentials account\n * transaction.\n * @param credential the already signed credential deployment information\n * @returns the serialization of the signed credential\n */\nexport function serializeCredentialDeploymentInfo(credential: CredentialDeploymentInfo): Buffer {\n    const serializedCredentialDeploymentValues = serializeCredentialDeploymentValues(credential);\n    const serializedProofs = Buffer.from(credential.proofs, 'hex');\n    const serializedProofsLength = encodeWord32(serializedProofs.length);\n    return Buffer.concat([serializedCredentialDeploymentValues, serializedProofsLength, serializedProofs]);\n}\n\n/**\n * Returns the digest to be signed for a credential that has been generated for\n * deployment to an existing account.\n * @param unsignedCredentialDeploymentInfo the credential information to be deployed to an existing account\n * @returns the sha256 of the serialization of the unsigned credential\n */\nexport function getCredentialForExistingAccountSignDigest(\n    unsignedCredentialDeploymentInfo: UnsignedCredentialDeploymentInformation,\n    address: AccountAddress.Type\n): Buffer {\n    const serializedCredentialValues = serializeCredentialDeploymentValues(unsignedCredentialDeploymentInfo);\n    const serializedIdOwnershipProofs = serializeIdOwnershipProofs(unsignedCredentialDeploymentInfo.proofs);\n    const existingAccountByte = encodeWord8(1);\n    return sha256([\n        serializedCredentialValues,\n        serializedIdOwnershipProofs,\n        existingAccountByte,\n        AccountAddress.toBuffer(address),\n    ]);\n}\n\n/**\n * Returns the digest of the credential deployment transaction that has to be signed.\n * @param credentialDeployment the credential deployment transaction\n * @returns the sha256 of the serialized unsigned credential deployment information\n */\nexport function getCredentialDeploymentSignDigest(credentialDeployment: CredentialDeploymentDetails): Buffer {\n    const serializedCredentialValues = serializeCredentialDeploymentValues(credentialDeployment.unsignedCdi);\n    const serializedIdOwnershipProofs = serializeIdOwnershipProofs(credentialDeployment.unsignedCdi.proofs);\n    const newAccountByte = encodeWord8(0);\n    return sha256([\n        serializedCredentialValues,\n        serializedIdOwnershipProofs,\n        newAccountByte,\n        encodeWord64(credentialDeployment.expiry.expiryEpochSeconds),\n    ]);\n}\n","import { isAsciiAlphaNumericPunctuation } from '../contractHelpers.js';\nimport type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport * as ContractName from './ContractName.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.InitName;\n/**\n * @deprecated\n */\nexport type Serializable = string;\n\n/** The name of an init-function for a smart contract. Note: This is of the form 'init_<contractName>'. */\nclass InitName {\n    /**\n     * @deprecated Use the {@linkcode InitName.toJSON} method instead.\n     */\n    protected get serializable(): Serializable {\n        return this.value;\n    }\n\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** The internal string corresponding to the init-function. */\n        public readonly value: string\n    ) {}\n\n    /**\n     * Get a string representation of the init-function name.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.value;\n    }\n\n    /**\n     * Get a JSON-serializable representation of the init-function name.\n     * @returns {string} The JSON-serializable representation.\n     */\n    public toJSON(): string {\n        return this.value;\n    }\n}\n\n/**\n * Converts a `string` to an init-function name.\n * @param {string} json The JSON representation of the init-function name.\n * @throws If the string is not a valid init-function name.\n * @returns {InitName} The init-function name.\n */\nexport function fromJSON(json: string): InitName {\n    return fromString(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode InitName.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON(value: Type): Serializable {\n    return toString(value);\n}\n\n/** The name of an init-function for a smart contract. Note: This is of the form 'init_<contractName>'. */\nexport type Type = InitName;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is InitName {\n    return value instanceof InitName;\n}\n\n/**\n * Create an InitName directly from a string, ensuring it follows the format of an init-function name.\n * @param {string} value String with the init-function name.\n * @throws If the string is not a valid init-function name.\n * @returns {InitName}\n */\nexport function fromString(value: string): InitName {\n    if (value.length > 100) {\n        throw new Error('Invalid InitName: Can be atmost 100 characters long.');\n    }\n    if (!value.startsWith('init_')) {\n        throw new Error(\"Invalid InitName: Must be prefixed with 'init_'.\");\n    }\n    if (value.includes('.')) {\n        throw new Error(\"Invalid InitName: Must not contain a '.' character.\");\n    }\n    if (!isAsciiAlphaNumericPunctuation(value)) {\n        throw new Error('Invalid InitName: Must only contain ASCII alpha, numeric and punctuation characters.');\n    }\n    return new InitName(value);\n}\n\n/**\n * Create an InitName directly from a string.\n * It is up to the caller to ensure the provided string follows the format of an init-function name.\n * @param {string} value String with the init-function name.\n * @returns {InitName}\n */\nexport function fromStringUnchecked(value: string): InitName {\n    return new InitName(value);\n}\n\n/**\n * Create an InitName from a contract name.\n * @param {ContractName.Type} contractName The contract name to convert into an init-function name.\n * @returns {InitName}\n */\nexport function fromContractName(contractName: ContractName.Type): InitName {\n    return fromStringUnchecked('init_' + contractName.value);\n}\n\n/**\n * Get the string representation of the smart contract init-function name.\n * @deprecated Use the {@linkcode InitName.toString} method instead.\n * @param {InitName} initName The init-function name of the smart contract.\n * @returns {string} a string.\n */\nexport function toString(initName: InitName): string {\n    return initName.value;\n}\n\n/**\n * Convert a smart contract init name from its protobuf encoding.\n * @param {Proto.InitName} initName The protobuf encoding.\n * @returns {InitName}\n */\nexport function fromProto(initName: Proto.InitName): InitName {\n    return fromStringUnchecked(initName.value);\n}\n\n/**\n * Convert a smart contract init name into its protobuf encoding.\n * @param {InitName} initName The init name.\n * @returns {Proto.InitName} The protobuf encoding.\n */\nexport function toProto(initName: InitName): Proto.InitName {\n    return {\n        value: initName.value,\n    };\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode InitName.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: InitName): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toString(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromString);\n","export {\n    Type,\n    instanceOf,\n    fromMillis,\n    fromString,\n    toMillis,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    toSchemaValue,\n    fromSchemaValue,\n    SchemaValue,\n    toSerializable,\n    fromSerializable,\n} from '../../types/Duration.js';\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * A unary RPC call. Unary means there is exactly one input message and\n * exactly one output message unless an error occurred.\n */\nexport class UnaryCall {\n    constructor(method, requestHeaders, request, headers, response, status, trailers) {\n        this.method = method;\n        this.requestHeaders = requestHeaders;\n        this.request = request;\n        this.headers = headers;\n        this.response = response;\n        this.status = status;\n        this.trailers = trailers;\n    }\n    /**\n     * If you are only interested in the final outcome of this call,\n     * you can await it to receive a `FinishedUnaryCall`.\n     */\n    then(onfulfilled, onrejected) {\n        return this.promiseFinished().then(value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));\n    }\n    promiseFinished() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let [headers, response, status, trailers] = yield Promise.all([this.headers, this.response, this.status, this.trailers]);\n            return {\n                method: this.method,\n                requestHeaders: this.requestHeaders,\n                request: this.request,\n                headers,\n                response,\n                status,\n                trailers\n            };\n        });\n    }\n}\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","/**\n * assert that condition is true or throw error (with message)\n */\nexport function assert(condition, msg) {\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n/**\n * assert that value cannot exist = type `never`. throw runtime error if it does.\n */\nexport function assertNever(value, msg) {\n    throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);\n}\nconst FLOAT32_MAX = 3.4028234663852886e+38, FLOAT32_MIN = -3.4028234663852886e+38, UINT32_MAX = 0xFFFFFFFF, INT32_MAX = 0X7FFFFFFF, INT32_MIN = -0X80000000;\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid int 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error('invalid int 32: ' + arg);\n}\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid uint 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error('invalid uint 32: ' + arg);\n}\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid float 32: ' + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error('invalid float 32: ' + arg);\n}\n","export {\n    Type,\n    toBase58,\n    fromBase58,\n    toBuffer,\n    fromBuffer,\n    getAlias,\n    isAlias,\n    toSchemaValue,\n    fromSchemaValue,\n    equals,\n    SchemaValue,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    instanceOf,\n    fromJSON,\n} from '../../types/AccountAddress.js';\n","// Copyright 2016 gRPC authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * See [grpc status_code_enum.h](https://github.com/grpc/grpc/blob/a19d8dcfb50caa81cddc25bc1a6afdd7a2f497b7/include/grpcpp/impl/codegen/status_code_enum.h#L24)\n *\n * Copyright 2020 Google LLC\n */\nexport var GrpcStatusCode;\n(function (GrpcStatusCode) {\n    /**\n     * Not an error; returned on success.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"OK\"] = 0] = \"OK\";\n    /**\n     * The operation was cancelled (typically by the caller).\n     */\n    GrpcStatusCode[GrpcStatusCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    /**\n     * Unknown error. An example of where this error may be returned is if a\n     * Status value received from another address space belongs to an error-space\n     * that is not known in this address space. Also errors raised by APIs that\n     * do not return enough error information may be converted to this error.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n    /**\n     * Client specified an invalid argument. Note that this differs from\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n     * problematic regardless of the state of the system (e.g., a malformed file\n     * name).\n     */\n    GrpcStatusCode[GrpcStatusCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n    /**\n     * Deadline expired before operation could complete. For operations that\n     * change the state of the system, this error may be returned even if the\n     * operation has completed successfully. For example, a successful response\n     * from a server could have been delayed long enough for the deadline to\n     * expire.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n    /**\n     * Some requested entity (e.g., file or directory) was not found.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n    /**\n     * Some entity that we attempted to create (e.g., file or directory) already\n     * exists.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n    /**\n     * The caller does not have permission to execute the specified operation.\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n     * PERMISSION_DENIED must not be used if the caller can not be identified\n     * (use UNAUTHENTICATED instead for those errors).\n     */\n    GrpcStatusCode[GrpcStatusCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n    /**\n     * The request does not have valid authentication credentials for the\n     * operation.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n    /**\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n     * entire file system is out of space.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n    /**\n     * Operation was rejected because the system is not in a state required for\n     * the operations execution. For example, directory to be deleted may be\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\n     *\n     * A litmus test that may help a service implementor in deciding\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n     *  (b) Use ABORTED if the client should retry at a higher-level\n     *      (e.g., restarting a read-modify-write sequence).\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\n     *      should be returned since the client should not retry unless\n     *      they have first fixed up the directory by deleting files from it.\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\n     *      REST Get/Update/Delete on a resource and the resource on the\n     *      server does not match the condition. E.g., conflicting\n     *      read-modify-write on the same resource.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n    /**\n     * The operation was aborted, typically due to a concurrency issue like\n     * sequencer check failures, transaction aborts, etc.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"ABORTED\"] = 10] = \"ABORTED\";\n    /**\n     * Operation was attempted past the valid range. E.g., seeking or reading\n     * past end of file.\n     *\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n     * if the system state changes. For example, a 32-bit file system will\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n     * an offset past the current file size.\n     *\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n     * when it applies so that callers who are iterating through a space can\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n    /**\n     * Operation is not implemented or not supported/enabled in this service.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n    /**\n     * Internal errors. Means some invariants expected by underlying System has\n     * been broken. If you see one of these errors, Something is very broken.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n    /**\n     * The service is currently unavailable. This is a most likely a transient\n     * condition and may be corrected by retrying with a backoff.\n     *\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n     * and UNAVAILABLE.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n    /**\n     * Unrecoverable data loss or corruption.\n     */\n    GrpcStatusCode[GrpcStatusCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(GrpcStatusCode || (GrpcStatusCode = {}));\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { base64decode, base64encode } from \"@protobuf-ts/runtime\";\nimport { RpcError } from \"@protobuf-ts/runtime-rpc\";\nimport { GrpcStatusCode } from \"./goog-grpc-status-code\";\n/**\n * Create fetch API headers for a grpc-web request.\n */\nexport function createGrpcWebRequestHeader(headers, format, timeout, meta, userAgent) {\n    // add meta as headers\n    if (meta) {\n        for (let [k, v] of Object.entries(meta)) {\n            if (typeof v == \"string\")\n                headers.append(k, v);\n            else\n                for (let i of v)\n                    headers.append(k, i);\n        }\n    }\n    // set standard headers (possibly overwriting meta)\n    headers.set('Content-Type', format === \"text\" ? \"application/grpc-web-text\" : \"application/grpc-web+proto\");\n    if (format == \"text\") {\n        // The client library should indicate to the server via the \"Accept\" header that\n        // the response stream needs to be text encoded e.g. when XHR is used or due to\n        // security policies with XHR\n        headers.set(\"Accept\", \"application/grpc-web-text\");\n    }\n    headers.set('X-Grpc-Web', \"1\");\n    if (userAgent)\n        headers.set(\"X-User-Agent\", userAgent);\n    if (typeof timeout === \"number\") {\n        if (timeout <= 0) {\n            // we raise an error ourselves because header \"grpc-timeout\" must be a positive integer\n            throw new RpcError(`timeout ${timeout} ms exceeded`, GrpcStatusCode[GrpcStatusCode.DEADLINE_EXCEEDED]);\n        }\n        headers.set('grpc-timeout', `${timeout}m`);\n    }\n    else if (timeout) {\n        const deadline = timeout.getTime();\n        const now = Date.now();\n        if (deadline <= now) {\n            // we raise an error ourselves because header \"grpc-timeout\" must be a positive integer\n            throw new RpcError(`deadline ${timeout} exceeded`, GrpcStatusCode[GrpcStatusCode.DEADLINE_EXCEEDED]);\n        }\n        headers.set('grpc-timeout', `${deadline - now}m`);\n    }\n    return headers;\n}\nexport function createGrpcWebRequestBody(message, format) {\n    let body = new Uint8Array(5 + message.length); // we need 5 bytes for frame type + message length\n    body[0] = GrpcWebFrame.DATA; // first byte is frame type\n    // 4 bytes message length\n    for (let msgLen = message.length, i = 4; i > 0; i--) {\n        body[i] = (msgLen % 256);\n        msgLen >>>= 8;\n    }\n    body.set(message, 5); // reset is message\n    return format === \"binary\" ? body : base64encode(body);\n}\nexport function readGrpcWebResponseHeader(headersOrFetchResponse, httpStatus, httpStatusText) {\n    if (arguments.length === 1) {\n        let fetchResponse = headersOrFetchResponse;\n        // Cloudflare Workers throw when the type property of a fetch response\n        // is accessed, so wrap access with try/catch. See:\n        // * https://developers.cloudflare.com/workers/runtime-apis/response/#properties\n        // * https://github.com/cloudflare/miniflare/blob/72f046e/packages/core/src/standards/http.ts#L646\n        let responseType;\n        try {\n            responseType = fetchResponse.type;\n        }\n        catch (_a) { }\n        switch (responseType) {\n            case \"error\":\n            case \"opaque\":\n            case \"opaqueredirect\":\n                // see https://developer.mozilla.org/en-US/docs/Web/API/Response/type\n                throw new RpcError(`fetch response type ${fetchResponse.type}`, GrpcStatusCode[GrpcStatusCode.UNKNOWN]);\n        }\n        return readGrpcWebResponseHeader(fetchHeadersToHttp(fetchResponse.headers), fetchResponse.status, fetchResponse.statusText);\n    }\n    let headers = headersOrFetchResponse, httpOk = httpStatus >= 200 && httpStatus < 300, responseMeta = parseMetadata(headers), [statusCode, statusDetail] = parseStatus(headers);\n    if ((statusCode === undefined || statusCode === GrpcStatusCode.OK) && !httpOk) {\n        statusCode = httpStatusToGrpc(httpStatus);\n        statusDetail = httpStatusText;\n    }\n    return [statusCode, statusDetail, responseMeta];\n}\n/**\n * Parses a grpc status (code and optional text) and meta data from response\n * trailers.\n *\n * Response trailers are expected as a byte array, but are actually just an\n * ASCII string with HTTP headers. Just pass the data of a grpc-web trailer\n * frame.\n */\nexport function readGrpcWebResponseTrailer(data) {\n    let headers = parseTrailer(data), [code, detail] = parseStatus(headers), meta = parseMetadata(headers);\n    return [code !== null && code !== void 0 ? code : GrpcStatusCode.OK, detail, meta];\n}\n/**\n * A grpc-frame type. Can be used to determine type of frame emitted by\n * `readGrpcWebResponseBody()`.\n */\nexport var GrpcWebFrame;\n(function (GrpcWebFrame) {\n    GrpcWebFrame[GrpcWebFrame[\"DATA\"] = 0] = \"DATA\";\n    GrpcWebFrame[GrpcWebFrame[\"TRAILER\"] = 128] = \"TRAILER\";\n})(GrpcWebFrame || (GrpcWebFrame = {}));\n/**\n * Parses a grpc-web response (unary or server streaming) from a fetch API\n * stream.\n *\n * Emits grpc-web frames.\n *\n * The returned promise resolves when the response is complete.\n */\nexport function readGrpcWebResponseBody(stream, contentType, onFrame) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let streamReader, base64queue = \"\", byteQueue = new Uint8Array(0), format = parseFormat(contentType);\n        // allows to read streams from the 'node-fetch' polyfill which uses\n        // node.js ReadableStream instead of the what-wg streams api ReadableStream\n        if (isReadableStream(stream)) {\n            let whatWgReadableStream = stream.getReader();\n            streamReader = {\n                next: () => whatWgReadableStream.read()\n            };\n        }\n        else {\n            streamReader = stream[Symbol.asyncIterator]();\n        }\n        while (true) {\n            let result = yield streamReader.next();\n            if (result.value !== undefined) {\n                if (format === \"text\") {\n                    // the statements below just decode base64 and append to `bytesUnread`\n                    // add incoming base64 to queue\n                    for (let i = 0; i < result.value.length; i++)\n                        base64queue += String.fromCharCode(result.value[i]);\n                    // if the base64 queue is not a multiple of 4,\n                    // we have to wait for more data\n                    let safeLen = base64queue.length - base64queue.length % 4;\n                    if (safeLen === 0)\n                        continue;\n                    // decode safe chunk of base64 and add to byte queue\n                    byteQueue = concatBytes(byteQueue, base64decode(base64queue.substring(0, safeLen)));\n                    base64queue = base64queue.substring(safeLen);\n                }\n                else {\n                    byteQueue = concatBytes(byteQueue, result.value);\n                }\n                // read all fully available data frames\n                while (byteQueue.length >= 5 && byteQueue[0] === GrpcWebFrame.DATA) {\n                    let msgLen = 0;\n                    for (let i = 1; i < 5; i++)\n                        msgLen = (msgLen << 8) + byteQueue[i];\n                    if (byteQueue.length - 5 >= msgLen) {\n                        // we have the entire message\n                        onFrame(GrpcWebFrame.DATA, byteQueue.subarray(5, 5 + msgLen));\n                        byteQueue = byteQueue.subarray(5 + msgLen);\n                    }\n                    else\n                        break; //  wait for more data\n                }\n            }\n            // exit, but emit trailer if exists\n            if (result.done) {\n                if (byteQueue.length === 0)\n                    break;\n                if (byteQueue[0] !== GrpcWebFrame.TRAILER || byteQueue.length < 5)\n                    throw new RpcError(\"premature EOF\", GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);\n                onFrame(GrpcWebFrame.TRAILER, byteQueue.subarray(5));\n                break;\n            }\n        }\n    });\n}\n// internal\nconst isReadableStream = (s) => {\n    return typeof s.getReader == \"function\";\n};\n// internal\nfunction concatBytes(a, b) {\n    let n = new Uint8Array(a.length + b.length);\n    n.set(a);\n    n.set(b, a.length);\n    return n;\n}\n// determines format from response \"content-type\" value.\n// throws if value is unknown or missing.\nfunction parseFormat(contentType) {\n    // > the sender *should* always specify the message format, e.g. +proto, +json\n    //\n    // > the receiver should assume the default is \"+proto\" when the message format is\n    // > missing in Content-Type (as \"application/grpc-web\")\n    //\n    // see https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md\n    switch (contentType) {\n        case \"application/grpc-web-text\":\n        case \"application/grpc-web-text+proto\":\n            return \"text\";\n        case \"application/grpc-web\":\n        case \"application/grpc-web+proto\":\n            return \"binary\";\n        case undefined:\n        case null:\n            throw new RpcError(\"missing response content type\", GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n        default:\n            throw new RpcError(\"unexpected response content type: \" + contentType, GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n    }\n}\n// returns error code on parse failure\nfunction parseStatus(headers) {\n    let code, message;\n    let m = headers['grpc-message'];\n    if (m !== undefined) {\n        if (Array.isArray(m))\n            return [GrpcStatusCode.INTERNAL, \"invalid grpc-web message\"];\n        message = m;\n    }\n    let s = headers['grpc-status'];\n    if (s !== undefined) {\n        if (Array.isArray(s))\n            return [GrpcStatusCode.INTERNAL, \"invalid grpc-web status\"];\n        code = parseInt(s, 10);\n        if (GrpcStatusCode[code] === undefined)\n            return [GrpcStatusCode.INTERNAL, \"invalid grpc-web status\"];\n    }\n    return [code, message];\n}\n// skips grpc-web headers\nfunction parseMetadata(headers) {\n    let meta = {};\n    for (let [k, v] of Object.entries(headers))\n        switch (k) {\n            case 'grpc-message':\n            case 'grpc-status':\n            case 'content-type':\n                break;\n            default:\n                meta[k] = v;\n        }\n    return meta;\n}\n// parse trailer data (ASCII) to our headers rep\nfunction parseTrailer(trailerData) {\n    let headers = {};\n    for (let chunk of String.fromCharCode.apply(String, trailerData).trim().split(\"\\r\\n\")) {\n        if (chunk == \"\")\n            continue;\n        let [key, ...val] = chunk.split(\":\");\n        const value = val.join(\":\").trim();\n        key = key.trim();\n        let e = headers[key];\n        if (typeof e == \"string\")\n            headers[key] = [e, value];\n        else if (Array.isArray(e))\n            e.push(value);\n        else\n            headers[key] = value;\n    }\n    return headers;\n}\n// fetch API to our headers rep\nfunction fetchHeadersToHttp(fetchHeaders) {\n    let headers = {};\n    fetchHeaders.forEach((value, key) => {\n        let e = headers[key];\n        if (typeof e == \"string\")\n            headers[key] = [e, value];\n        else if (Array.isArray(e))\n            e.push(value);\n        else\n            headers[key] = value;\n    });\n    return headers;\n}\n// internal\nfunction httpStatusToGrpc(httpStatus) {\n    switch (httpStatus) {\n        case 200:\n            return GrpcStatusCode.OK;\n        case 400:\n            return GrpcStatusCode.INVALID_ARGUMENT;\n        case 401:\n            return GrpcStatusCode.UNAUTHENTICATED;\n        case 403:\n            return GrpcStatusCode.PERMISSION_DENIED;\n        case 404:\n            return GrpcStatusCode.NOT_FOUND;\n        case 409:\n            return GrpcStatusCode.ABORTED;\n        case 412:\n            return GrpcStatusCode.FAILED_PRECONDITION;\n        case 429:\n            return GrpcStatusCode.RESOURCE_EXHAUSTED;\n        case 499:\n            return GrpcStatusCode.CANCELLED;\n        case 500:\n            return GrpcStatusCode.UNKNOWN;\n        case 501:\n            return GrpcStatusCode.UNIMPLEMENTED;\n        case 503:\n            return GrpcStatusCode.UNAVAILABLE;\n        case 504:\n            return GrpcStatusCode.DEADLINE_EXCEEDED;\n        default:\n            return GrpcStatusCode.UNKNOWN;\n    }\n}\n","import { Deferred, RpcError, RpcOutputStreamController, ServerStreamingCall, UnaryCall, mergeRpcOptions } from \"@protobuf-ts/runtime-rpc\";\nimport { GrpcWebFrame, createGrpcWebRequestBody, createGrpcWebRequestHeader, readGrpcWebResponseBody, readGrpcWebResponseHeader, readGrpcWebResponseTrailer } from \"./grpc-web-format\";\nimport { GrpcStatusCode } from \"./goog-grpc-status-code\";\n/**\n * Implements the grpc-web protocol, supporting text format or binary\n * format on the wire. Uses the fetch API to do the HTTP requests.\n *\n * Does not support client streaming or duplex calls because grpc-web\n * does not support them.\n */\nexport class GrpcWebFetchTransport {\n    constructor(defaultOptions) {\n        this.defaultOptions = defaultOptions;\n    }\n    mergeOptions(options) {\n        return mergeRpcOptions(this.defaultOptions, options);\n    }\n    /**\n     * Create an URI for a gRPC web call.\n     *\n     * Takes the `baseUrl` option and appends:\n     * - slash \"/\"\n     * - package name\n     * - dot \".\"\n     * - service name\n     * - slash \"/\"\n     * - method name\n     *\n     * If the service was declared without a package, the package name and dot\n     * are omitted.\n     *\n     * All names are used exactly like declared in .proto.\n     */\n    makeUrl(method, options) {\n        let base = options.baseUrl;\n        if (base.endsWith('/'))\n            base = base.substring(0, base.length - 1);\n        return `${base}/${method.service.typeName}/${method.name}`;\n    }\n    clientStreaming(method /*, options: RpcOptions*/) {\n        const e = new RpcError('Client streaming is not supported by grpc-web', GrpcStatusCode[GrpcStatusCode.UNIMPLEMENTED]);\n        e.methodName = method.name;\n        e.serviceName = method.service.typeName;\n        throw e;\n    }\n    duplex(method /*, options: RpcOptions*/) {\n        const e = new RpcError('Duplex streaming is not supported by grpc-web', GrpcStatusCode[GrpcStatusCode.UNIMPLEMENTED]);\n        e.methodName = method.name;\n        e.serviceName = method.service.typeName;\n        throw e;\n    }\n    serverStreaming(method, input, options) {\n        var _a, _b, _c, _d;\n        let opt = options, format = (_a = opt.format) !== null && _a !== void 0 ? _a : 'text', fetchInit = (_b = opt.fetchInit) !== null && _b !== void 0 ? _b : {}, url = this.makeUrl(method, opt), inputBytes = method.I.toBinary(input, opt.binaryOptions), defHeader = new Deferred(), responseStream = new RpcOutputStreamController(), responseEmptyBody = true, maybeStatus, defStatus = new Deferred(), maybeTrailer, defTrailer = new Deferred();\n        globalThis.fetch(url, Object.assign(Object.assign({}, fetchInit), { method: 'POST', headers: createGrpcWebRequestHeader(new globalThis.Headers(), format, opt.timeout, opt.meta), body: createGrpcWebRequestBody(inputBytes, format), signal: (_c = options.abort) !== null && _c !== void 0 ? _c : null // node-fetch@3.0.0-beta.9 rejects `undefined`\n         }))\n            .then(fetchResponse => {\n            let [code, detail, meta] = readGrpcWebResponseHeader(fetchResponse);\n            defHeader.resolve(meta);\n            if (code != null && code !== GrpcStatusCode.OK)\n                throw new RpcError(detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code], GrpcStatusCode[code], meta);\n            if (code != null)\n                maybeStatus = {\n                    code: GrpcStatusCode[code],\n                    detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]\n                };\n            return fetchResponse;\n        })\n            .then(fetchResponse => {\n            if (!fetchResponse.body)\n                throw new RpcError('missing response body', GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            return readGrpcWebResponseBody(fetchResponse.body, fetchResponse.headers.get('content-type'), (type, data) => {\n                switch (type) {\n                    case GrpcWebFrame.DATA:\n                        responseStream.notifyMessage(method.O.fromBinary(data, opt.binaryOptions));\n                        responseEmptyBody = false;\n                        break;\n                    case GrpcWebFrame.TRAILER:\n                        let code, detail;\n                        [code, detail, maybeTrailer] = readGrpcWebResponseTrailer(data);\n                        maybeStatus = {\n                            code: GrpcStatusCode[code],\n                            detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]\n                        };\n                        break;\n                }\n            });\n        })\n            .then(() => {\n            if (!maybeTrailer && !responseEmptyBody)\n                throw new RpcError(`missing trailers`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);\n            // istanbul ignore if - this should be impossible and only here to satisfy TypeScript\n            if (!maybeStatus)\n                throw new RpcError(`missing status`, GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            if (maybeStatus.code !== 'OK')\n                throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);\n            responseStream.notifyComplete();\n            defStatus.resolve(maybeStatus);\n            defTrailer.resolve(maybeTrailer || {});\n        })\n            .catch(reason => {\n            let error;\n            if (reason instanceof RpcError)\n                error = reason;\n            else if (reason instanceof Error && reason.name === 'AbortError')\n                // aborted\n                error = new RpcError(reason.message, GrpcStatusCode[GrpcStatusCode.CANCELLED]);\n            else\n                // RpcErrors are thrown by us, everything else is an internal error\n                error = new RpcError(reason instanceof Error ? reason.message : \"\" + reason, GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            error.methodName = method.name;\n            error.serviceName = method.service.typeName;\n            defHeader.rejectPending(error);\n            responseStream.notifyError(error);\n            defStatus.rejectPending(error);\n            defTrailer.rejectPending(error);\n        });\n        return new ServerStreamingCall(method, (_d = opt.meta) !== null && _d !== void 0 ? _d : {}, input, defHeader.promise, responseStream, defStatus.promise, defTrailer.promise);\n    }\n    unary(method, input, options) {\n        var _a, _b, _c, _d;\n        let opt = options, format = (_a = opt.format) !== null && _a !== void 0 ? _a : 'text', fetchInit = (_b = opt.fetchInit) !== null && _b !== void 0 ? _b : {}, url = this.makeUrl(method, opt), inputBytes = method.I.toBinary(input, opt.binaryOptions), defHeader = new Deferred(), maybeMessage, defMessage = new Deferred(), maybeStatus, defStatus = new Deferred(), maybeTrailer, defTrailer = new Deferred();\n        globalThis.fetch(url, Object.assign(Object.assign({}, fetchInit), { method: 'POST', headers: createGrpcWebRequestHeader(new globalThis.Headers(), format, opt.timeout, opt.meta), body: createGrpcWebRequestBody(inputBytes, format), signal: (_c = options.abort) !== null && _c !== void 0 ? _c : null // node-fetch@3.0.0-beta.9 rejects `undefined`\n         }))\n            .then(fetchResponse => {\n            let [code, detail, meta] = readGrpcWebResponseHeader(fetchResponse);\n            defHeader.resolve(meta);\n            if (code != null && code !== GrpcStatusCode.OK)\n                throw new RpcError(detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code], GrpcStatusCode[code], meta);\n            if (code != null)\n                maybeStatus = {\n                    code: GrpcStatusCode[code],\n                    detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]\n                };\n            return fetchResponse;\n        })\n            .then(fetchResponse => {\n            if (!fetchResponse.body)\n                throw new RpcError('missing response body', GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            return readGrpcWebResponseBody(fetchResponse.body, fetchResponse.headers.get('content-type'), (type, data) => {\n                switch (type) {\n                    case GrpcWebFrame.DATA:\n                        if (maybeMessage)\n                            throw new RpcError(`unary call received 2nd message`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);\n                        maybeMessage = method.O.fromBinary(data, opt.binaryOptions);\n                        break;\n                    case GrpcWebFrame.TRAILER:\n                        let code, detail;\n                        [code, detail, maybeTrailer] = readGrpcWebResponseTrailer(data);\n                        maybeStatus = {\n                            code: GrpcStatusCode[code],\n                            detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]\n                        };\n                        break;\n                }\n            });\n        })\n            .then(() => {\n            if (!maybeTrailer && maybeMessage)\n                throw new RpcError(`missing trailers`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);\n            // istanbul ignore if - this should be impossible and only here to satisfy TypeScript\n            if (!maybeStatus)\n                throw new RpcError(`missing status`, GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            if (!maybeMessage && maybeStatus.code === 'OK')\n                throw new RpcError('expected error status', GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);\n            if (!maybeMessage)\n                throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);\n            defMessage.resolve(maybeMessage);\n            if (maybeStatus.code !== 'OK')\n                throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);\n            defStatus.resolve(maybeStatus);\n            defTrailer.resolve(maybeTrailer || {});\n        })\n            .catch(reason => {\n            let error;\n            if (reason instanceof RpcError)\n                error = reason;\n            else if (reason instanceof Error && reason.name === 'AbortError')\n                // aborted\n                error = new RpcError(reason.message, GrpcStatusCode[GrpcStatusCode.CANCELLED]);\n            else\n                // RpcErrors are thrown by us, everything else is an internal error\n                error = new RpcError(reason instanceof Error ? reason.message : \"\" + reason, GrpcStatusCode[GrpcStatusCode.INTERNAL]);\n            error.methodName = method.name;\n            error.serviceName = method.service.typeName;\n            defHeader.rejectPending(error);\n            defMessage.rejectPending(error);\n            defStatus.rejectPending(error);\n            defTrailer.rejectPending(error);\n        });\n        return new UnaryCall(method, (_d = opt.meta) !== null && _d !== void 0 ? _d : {}, input, defHeader.promise, defMessage.promise, defStatus.promise, defTrailer.promise);\n    }\n}\n","var json_stringify = require('./lib/stringify.js').stringify;\nvar json_parse     = require('./lib/parse.js');\n\nmodule.exports = function(options) {\n    return  {\n        parse: json_parse(options),\n        stringify: json_stringify\n    }\n};\n//create the default method members with no options applied for backwards compatibility\nmodule.exports.parse = json_parse();\nmodule.exports.stringify = json_stringify;\n","import {\n    CISContract,\n    ContractDryRun,\n    ContractTransactionMetadata,\n    ContractUpdateTransactionWithSchema,\n    CreateContractTransactionMetadata,\n} from '../GenericContract.js';\nimport { ensureMatchesInput } from '../deserializationHelpers.js';\nimport { ConcordiumGRPCClient } from '../grpc/GRPCClient.js';\nimport { AccountSigner } from '../signHelpers.js';\nimport { InvokeContractResult } from '../types.js';\nimport * as AccountAddress from '../types/AccountAddress.js';\nimport * as BlockHash from '../types/BlockHash.js';\nimport * as ContractAddress from '../types/ContractAddress.js';\nimport * as ContractName from '../types/ContractName.js';\nimport * as EntrypointName from '../types/EntrypointName.js';\nimport * as TransactionHash from '../types/TransactionHash.js';\nimport { makeDynamicFunction } from '../util.js';\nimport {\n    CIS3,\n    deserializeCIS3SupportsPermitResponse,\n    formatCIS3PermitParam,\n    serializeCIS3PermitParam,\n    serializeCIS3SupportsPermitQueryParams,\n} from './util.js';\n\ntype View = 'supportsPermit';\ntype Update = 'permit';\n\n/**\n * Contains methods for performing dry-run invocations of update instructions on CIS3 smart contracts.\n */\nclass CIS3DryRun extends ContractDryRun<Update> {\n    /**\n     * Performs a dry-run invocation of the `permit` entrypoint.\n     *\n     * @param {AccountAddress.Type | ContractAddress.Type} sender - The address of the sender of the transaction.\n     * @param {CIS3.PermitParam} params - The parameters for the `permit` entrypoint.\n     * @param {BlockHash.Type} blockHash - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {InvokeContractResult} The contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.\n     */\n    public permit(\n        sender: AccountAddress.Type | ContractAddress.Type,\n        params: CIS3.PermitParam,\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult> {\n        return this.invokeMethod(\n            EntrypointName.fromStringUnchecked('permit'),\n            sender,\n            serializeCIS3PermitParam,\n            params,\n            blockHash\n        );\n    }\n}\n\n/**\n * Defines methods for interacting with CIS3 contracts.\n */\nexport class CIS3Contract extends CISContract<Update, View, CIS3DryRun> {\n    /**\n     * Parameter schema for the `permit` CIS3 entrypoint.\n     */\n    public schema: Record<Update, string> = {\n        /** Parameter schema for `permit` entrypoint */\n        permit: 'FAADAAAACQAAAHNpZ25hdHVyZRIAAhIAAhUBAAAABwAAAEVkMjU1MTkBAQAAAB5AAAAABgAAAHNpZ25lcgsHAAAAbWVzc2FnZRQABQAAABAAAABjb250cmFjdF9hZGRyZXNzDAUAAABub25jZQUJAAAAdGltZXN0YW1wDQsAAABlbnRyeV9wb2ludBYBBwAAAHBheWxvYWQQAQI=',\n    };\n\n    /**\n     * Creates a new `CIS3Contract` instance by querying the node for the necessary information through the supplied `grpcClient`.\n     *\n     * @param {ConcordiumGRPCClient} grpcClient - The client used for contract invocations and updates.\n     * @param {ContractAddress} contractAddress - Address of the contract instance.\n     *\n     * @throws If `InstanceInfo` could not be received for the contract,\n     * or if the contract name could not be parsed from the information received from the node.\n     */\n    public static async create(\n        grpcClient: ConcordiumGRPCClient,\n        contractAddress: ContractAddress.Type\n    ): Promise<CIS3Contract> {\n        const contractName = await super.getContractName(grpcClient, contractAddress);\n        return new CIS3Contract(grpcClient, contractAddress, contractName);\n    }\n\n    protected makeDryRunInstance(\n        grpcClient: ConcordiumGRPCClient,\n        contractAddress: ContractAddress.Type,\n        contractName: ContractName.Type\n    ): CIS3DryRun {\n        return new CIS3DryRun(grpcClient, contractAddress, contractName);\n    }\n\n    /**\n     * Creates a CIS3 `permit` update transaction.\n     * This is a CIS3 sponsored transaction that allows a sponsor to send a transaction on behalf of a sponsoree.\n     *\n     * @param {CreateContractTransactionMetadata} metadata - Metadata needed for the transaction creation.\n     * @param {CIS3.PermitParam} params - The parameters for the `permit` entrypoint.\n     *     Includes the signature of the sponsoree, the address of the sponsoree, and the signed message.\n     *\n     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a `CIS3.permit` update.\n     */\n    public createPermit(\n        metadata: CreateContractTransactionMetadata,\n        params: CIS3.PermitParam\n    ): ContractUpdateTransactionWithSchema {\n        return this.createUpdateTransaction(\n            EntrypointName.fromStringUnchecked('permit'),\n            serializeCIS3PermitParam,\n            metadata,\n            params,\n            formatCIS3PermitParam\n        );\n    }\n\n    /**\n     * Sends a `permit` update transaction to the network.\n     * This is a CIS3 sponsored transaction that allows a sponsor to send a transaction on behalf of a sponsoree.\n     *\n     * @param {ContractTransactionMetadata} metadata - Metadata needed for the transaction creation.\n     * @param {CIS3.PermitParam} params - The parameters for the `permit` entrypoint.\n     *     Includes the signature of the sponsoree, the address of the sponsoree, and the signed message.\n     * @param {AccountSigner} signer - The signer (of the sponsor) to use for the transaction.\n     *\n     * @returns {Promise<TransactionHash>} The hash of the transaction.\n     */\n    public permit(\n        metadata: ContractTransactionMetadata,\n        params: CIS3.PermitParam,\n        signer: AccountSigner\n    ): Promise<TransactionHash.Type> {\n        const transaction = this.createPermit(metadata, params);\n        return this.sendUpdateTransaction(transaction, metadata, signer);\n    }\n\n    /**\n     * Queries the contract to determine if the `permit` function supports a given entrypoint.\n     *\n     * @param {EntrypointName.Type} entrypoint - The entrypoint to check for support.\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {Promise<boolean>} Whether the contract supports the entrypoint.\n     */\n    public supportsPermit(entrypoint: EntrypointName.Type, blockHash?: BlockHash.Type): Promise<boolean>;\n    /**\n     * Queries the contract with a list of entrypoints to determine if the `permit` function\n     * supports the given entrypoints. Returns an array of booleans indicating support for each entrypoint.\n     *\n     * @param {EntrypointName.Type[]} entrypoints - The entrypoint to check for support.\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {Promise<boolean[]>} An array of booleans indicating support for each given entrypoint.\n     */\n    public supportsPermit(entrypoints: EntrypointName.Type[], blockHash?: BlockHash.Type): Promise<boolean[]>;\n    public supportsPermit(\n        entrypoints: EntrypointName.Type | EntrypointName.Type[],\n        blockHash?: BlockHash.Type\n    ): Promise<boolean | boolean[]> {\n        const serialize = makeDynamicFunction(serializeCIS3SupportsPermitQueryParams);\n        const deserialize = ensureMatchesInput(entrypoints, deserializeCIS3SupportsPermitResponse);\n        return this.invokeView(\n            EntrypointName.fromStringUnchecked('supportsPermit'),\n            serialize,\n            deserialize,\n            entrypoints,\n            blockHash\n        );\n    }\n}\n","import type {\n    AtomicProof,\n    GenericAtomicStatement,\n    GenericMembershipStatement,\n    GenericNonMembershipStatement,\n    GenericRangeStatement,\n    GenericRevealStatement,\n} from '../commonProofTypes.js';\nimport type { AttributeKey, CryptographicParameters, IdentityObjectV1, Network, Versioned } from '../types.js';\n\nexport type RangeStatement = GenericRangeStatement<AttributeKey, string>;\nexport type NonMembershipStatement = GenericNonMembershipStatement<AttributeKey, string>;\nexport type MembershipStatement = GenericMembershipStatement<AttributeKey, string>;\nexport type RevealStatement = GenericRevealStatement<AttributeKey>;\n\nexport type AtomicStatement = GenericAtomicStatement<AttributeKey, string>;\nexport type IdStatement = AtomicStatement[];\n\nexport type IdProofInput = {\n    idObject: IdentityObjectV1;\n    globalContext: CryptographicParameters;\n    seedAsHex: string;\n    net: Network;\n    identityProviderIndex: number;\n    identityIndex: number;\n    credNumber: number;\n    statement: IdStatement;\n    challenge: string; // Hex\n};\n\nexport type IdProof = {\n    proofs: AtomicProof<string>[];\n};\n\nexport type IdProofOutput = {\n    credential: string;\n    proof: Versioned<IdProof>;\n};\n\n/**\n * The attributes that can be used for range statements\n */\nexport const attributesWithRange: AttributeKey[] = ['dob', 'idDocIssuedAt', 'idDocExpiresAt'];\n\n/**\n * The attributes that can be used for (non)membership statements\n */\nexport const attributesWithSet: AttributeKey[] = [\n    'countryOfResidence',\n    'nationality',\n    'idDocType',\n    'idDocIssuer',\n    'legalCountry',\n];\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = exports.HMAC = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0, _assert_js_1.hash)(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0, _assert_js_1.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.exists)(this);\n        (0, _assert_js_1.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nexports.HMAC = HMAC;\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","export {\n    Type,\n    JSON,\n    instanceOf,\n    fromCBOR,\n    parse,\n    toCBOR,\n    fromAny,\n    fromString,\n    registerCBORDecoder,\n    registerCBOREncoder,\n} from '../../plt/CborMemo.js';\n","import { CIS4Contract } from '../cis4/CIS4Contract.js';\nimport { CIS4 } from '../cis4/util.js';\nimport { ConcordiumGRPCClient } from '../grpc/GRPCClient.js';\nimport { BlockHash, ContractAddress, CredentialRegistrationId, Network, VerifiablePresentation } from '../pub/types.js';\nimport {\n    VerifiableCredentialProof,\n    VerifiableCredentialProofAccount,\n    VerifiableCredentialProofWeb3Id,\n    isWeb3IdProof,\n} from '../types/VerifiablePresentation.js';\nimport { bail } from '../util.js';\nimport { parseYearMonth } from './helpers.js';\nimport { CredentialWithMetadata, CredentialsInputsAccount, CredentialsInputsWeb3 } from './types.js';\n\nfunction parseAccountProofMetadata(cred: VerifiableCredentialProofAccount): {\n    credId: CredentialRegistrationId.Type;\n    issuer: number;\n} {\n    const _bail = () => bail('Failed to parse metedata from credential proof');\n    const [, c] = cred.credentialSubject.id.match(/.*:cred:(.*)$/) ?? _bail();\n    const [, i] = cred.issuer.match(/.*:idp:(\\d*)$/) ?? _bail();\n\n    const credId = CredentialRegistrationId.fromHexString(c);\n    const issuer = Number(i);\n\n    return { credId, issuer };\n}\n\nfunction parseWeb3IdProofMetadata(cred: VerifiableCredentialProofWeb3Id): {\n    contract: ContractAddress.Type;\n    holder: string;\n} {\n    const _bail = () => bail('Failed to parse metedata from credential proof');\n    const [, index, subindex] = cred.issuer.match(/.*:sci:(\\d*):(\\d*)\\/issuer$/) ?? _bail();\n    const [, h] = cred.credentialSubject.id.match(/.*:pkc:(.*)$/) ?? _bail();\n\n    const contract = ContractAddress.create(BigInt(index), BigInt(subindex));\n    const holder = h;\n\n    return { contract, holder };\n}\n\n/**\n * Verifies the public metadata of the {@linkcode VerifiableCredentialProof}.\n *\n * @param grpc - The {@linkcode ConcordiumGRPCClient} to use for querying\n * @param network - The target network\n * @param credential - The credential proof to verify metadata for\n * @param [blockHash] - The block to verify the proof at. If not specified, the last finalized block is used.\n *\n * @returns The corresponding {@linkcode CredentialWithMetadata} if successful.\n * @throws If credential proof could not be successfully verified\n */\nexport async function verifyCredentialMetadata(\n    grpc: ConcordiumGRPCClient,\n    network: Network,\n    credential: VerifiableCredentialProof,\n    blockHash?: BlockHash.Type\n): Promise<CredentialWithMetadata> {\n    const [, parsedNetwork] =\n        credential.credentialSubject.id.match(/did:ccd:(.*):.*:.*/) ?? bail('Failed to parse network from credential');\n    if (parsedNetwork.toLowerCase() !== network.toLowerCase()) {\n        bail(\n            `Network found in credential (${parsedNetwork.toLowerCase()}) did not match expected network (${network.toLowerCase()})`\n        );\n    }\n\n    if (isWeb3IdProof(credential)) {\n        const { contract, holder } = parseWeb3IdProofMetadata(credential);\n        const cis4 = await CIS4Contract.create(grpc, contract);\n\n        const issuerPk = await cis4.issuer();\n        const status = await cis4.credentialStatus(holder);\n\n        const inputs: CredentialsInputsWeb3 = { type: 'web3', issuerPk };\n        return { status, inputs };\n    } else {\n        const { credId, issuer } = parseAccountProofMetadata(credential);\n        const ai = await grpc.getAccountInfo(credId, blockHash);\n\n        const cred =\n            Object.values(ai.accountCredentials).find((c) => {\n                const _credId = c.value.type === 'initial' ? c.value.contents.regId : c.value.contents.credId;\n                return credId.credId === _credId;\n            }) ?? bail(`Could not find credential for account ${ai.accountAddress}`);\n\n        if (cred.value.type === 'initial') {\n            throw new Error(`Initial credential ${cred.value.contents.regId} cannot be used`);\n        }\n        const { ipIdentity, policy, commitments } = cred.value.contents;\n        if (ipIdentity !== issuer) {\n            throw new Error('Mismatch between expected issuer and found issuer for credential');\n        }\n\n        // At this point, we know we're dealing with a \"normal\" account credential.\n        const validFrom = parseYearMonth(policy.createdAt);\n        const validUntil = parseYearMonth(policy.validTo);\n\n        const { blockSlotTime: now } = await grpc.getBlockInfo(blockHash);\n        let status = CIS4.CredentialStatus.Active;\n        if (validFrom > now) status = CIS4.CredentialStatus.NotActivated;\n        if (validUntil < now) status = CIS4.CredentialStatus.Expired;\n\n        const inputs: CredentialsInputsAccount = {\n            type: 'account',\n            commitments: commitments.cmmAttributes,\n        };\n        return { status, inputs };\n    }\n}\n\n/**\n * Get all public metadata of the {@linkcode VerifiablePresentation}. The metadata is verified as part of this.\n *\n * @param grpc - The {@linkcode ConcordiumGRPCClient} to use for querying\n * @param network - The target network\n * @param presentation - The verifiable presentation to verify\n * @param [blockHash] - The block to verify the proof at. If not specified, the last finalized block is used.\n *\n * @returns The corresponding list of {@linkcode CredentialWithMetadata} if successful.\n * @throws If presentation could not be successfully verified\n */\nexport async function getPublicData(\n    grpc: ConcordiumGRPCClient,\n    network: Network,\n    presentation: VerifiablePresentation,\n    blockHash?: BlockHash.Type\n): Promise<CredentialWithMetadata[]> {\n    const promises = presentation.verifiableCredential.map((vc) =>\n        verifyCredentialMetadata(grpc, network, vc, blockHash)\n    );\n\n    return await Promise.all(promises);\n}\n","import { Buffer } from 'buffer/index.js';\n\nimport * as H from '../contractHelpers.js';\nimport { Cursor, deserializeUInt32BE } from '../deserializationHelpers.js';\nimport { sha256 } from '../hash.js';\nimport { RawModuleSchema, UnversionedSchemaVersion } from '../schemaTypes.js';\nimport { encodeWord32 } from '../serializationHelpers.js';\nimport { VersionedModuleSource } from '../types.js';\nimport * as ModuleReference from './ModuleReference.js';\n\n/** Interface of a smart contract containing the name of the contract and every entrypoint. */\nexport type ContractInterface = {\n    /** The name of the smart contract. Note: This does _not_ including the 'init_' prefix. */\n    contractName: H.ContractName;\n    /** A set of entrypoints exposed by the smart contract. Note: These do _not_ include the '<contractName>.' prefix. */\n    entrypointNames: Set<H.EntrypointName>;\n};\n\n/** Interface of a smart contract module containing the interface of every contract in the module. */\nexport type ModuleInterface = Map<H.ContractName, ContractInterface>;\n\n/**\n * Parse a smart contract module source from bytes, potentially read from a file.\n * @param {ArrayBuffer} buffer Bytes encoding a versioned smart contract module.\n * @throws When provided bytes fails to be parsed or are using an unknown smart contract module version.\n */\nexport function versionedModuleSourceFromBuffer(buffer: ArrayBuffer): VersionedModuleSource {\n    const cursor = Cursor.fromBuffer(buffer);\n    const version = deserializeUInt32BE(cursor);\n    const sourceLength = deserializeUInt32BE(cursor);\n    const source = cursor.read(sourceLength);\n    if (version !== 0 && version !== 1) {\n        throw new Error(`Unsupported module version ${version}, The only supported versions are 0 and 1.`);\n    }\n    return {\n        version,\n        source,\n    };\n}\n\n/**\n * Serialize a versioned module source. Useful when saving to file.\n * @param {VersionedModuleSource} moduleSource The versioned module source to serialize.\n * @returns {Uint8Array} Buffer with serialized module source.\n */\nexport function versionedModuleSourceToBuffer(moduleSource: VersionedModuleSource): Uint8Array {\n    const versionBytes = encodeWord32(moduleSource.version);\n    const lengthBytes = encodeWord32(moduleSource.source.byteLength);\n    return Buffer.concat([versionBytes, lengthBytes, moduleSource.source]);\n}\n\n/**\n * Calculate the module reference from the module source.\n * @param {VersionedModuleSource} moduleSource The smart contract module source.\n * @returns {ModuleReference} The calculated reference of the module\n */\nexport function calculateModuleReference(moduleSource: VersionedModuleSource): ModuleReference.Type {\n    const prefix = Buffer.alloc(8);\n    prefix.writeUInt32BE(moduleSource.version, 0);\n    prefix.writeUInt32BE(moduleSource.source.length, 4);\n    const hash = sha256([prefix, moduleSource.source]);\n    return ModuleReference.fromBuffer(hash);\n}\n\n/**\n * Build a module interface based on exports from the WebAssembly module.\n *\n * @param {VersionedModuleSource} moduleSource The smart contract module source.\n * @returns The interface of the smart contract module.\n */\nexport async function parseModuleInterface(moduleSource: VersionedModuleSource): Promise<ModuleInterface> {\n    const wasmModule = await WebAssembly.compile(moduleSource.source);\n    const map = new Map<string, ContractInterface>();\n    const wasmExports = WebAssembly.Module.exports(wasmModule);\n\n    for (const exp of wasmExports) {\n        if (exp.kind !== 'function') {\n            continue;\n        }\n        if (H.isInitName(exp.name)) {\n            const contractName = H.getContractNameFromInit(exp.name);\n            getOrInsert(map, contractName, {\n                contractName: contractName,\n                entrypointNames: new Set(),\n            });\n        } else if (H.isReceiveName(exp.name)) {\n            const parts = H.getNamesFromReceive(exp.name);\n            const entry = getOrInsert(map, parts.contractName, {\n                contractName: parts.contractName,\n                entrypointNames: new Set(),\n            });\n            entry.entrypointNames.add(parts.entrypointName);\n        }\n    }\n    return map;\n}\n\n/**\n * Extract the embedded smart contract schema bytes. Returns `undefined` if no schema is embedded.\n * @param {VersionedModuleSource} moduleSource The smart contract module source.\n * @returns {RawModuleSchema | undefined} The raw module schema if found.\n * @throws If the module source cannot be parsed or contains duplicate schema sections.\n */\nexport async function getEmbeddedModuleSchema({\n    source,\n    version,\n}: VersionedModuleSource): Promise<RawModuleSchema | undefined> {\n    const sections = findCustomSections(await WebAssembly.compile(source), version);\n    if (sections === undefined) {\n        return undefined;\n    }\n    const { sectionName, unversionedSchemaVersion, contents } = sections;\n    if (contents.length !== 1) {\n        throw new Error(\n            `invalid module: expected to find at most one custom section named \"${sectionName}\", but found ${contents.length}`\n        );\n    }\n    const schema = contents[0];\n    if (unversionedSchemaVersion !== undefined) {\n        return {\n            type: 'unversioned',\n            version: unversionedSchemaVersion,\n            buffer: schema,\n        };\n    }\n    return { type: 'versioned', buffer: schema };\n}\n\nfunction findCustomSections(m: WebAssembly.Module, moduleVersion: number) {\n    function getCustomSections(sectionName: string, unversionedSchemaVersion: UnversionedSchemaVersion | undefined) {\n        const s = WebAssembly.Module.customSections(m, sectionName);\n        return s.length === 0 ? undefined : { sectionName, unversionedSchemaVersion, contents: s };\n    }\n\n    // First look for section containing schema with embedded version, then \"-v1\" or \"-v2\" depending on the module version.\n    switch (moduleVersion) {\n        case 0:\n            return (\n                getCustomSections('concordium-schema', undefined) || // always v0\n                getCustomSections('concordium-schema-v1', 0) // v0 (not a typo)\n            );\n        case 1:\n            return (\n                getCustomSections('concordium-schema', undefined) || // v1, v2, or v3\n                getCustomSections('concordium-schema-v2', 1) // v1 (not a typo)\n            );\n    }\n    return getCustomSections('concordium-schema', undefined); // expecting to find this section in future module versions\n}\n\n/**\n * Get a key from a map, if not present, insert a new value and return this.\n * @param map The map to get or insert into.\n * @param key The key to lookup or insert to.\n * @param value The value to be inserted if nothing is present.\n * @returns The value currently in the map or just insert into it.\n */\nfunction getOrInsert<K, V>(map: Map<K, V>, key: K, value: V): V {\n    const current = map.get(key);\n    if (current !== undefined) {\n        return current;\n    }\n    map.set(key, value);\n    return value;\n}\n","export * from './types.js';\nexport * from './module.js';\nexport * from './TokenModuleRejectReason.js';\nexport * from './TokenModuleEvent.js';\nexport * from './TokenOperation.js';\n\nexport * as TokenId from './TokenId.js';\nexport * as TokenModuleReference from './TokenModuleReference.js';\nexport * as TokenMetadataUrl from './TokenMetadataUrl.js';\nexport * as TokenAmount from './TokenAmount.js';\nexport * as Token from './Token.js';\nexport * as Cbor from './Cbor.js';\nexport * as CborMemo from './CborMemo.js';\nexport * as CborAccountAddress from './CborAccountAddress.js';\nexport * as TokenHolder from './TokenHolder.js';\nexport * as CborContractAddress from './CborContractAddress.js';\n","import { bail } from '../util.js';\n\nexport type Unknown = null;\n\n/**\n * Represents types returned by the GRPC API of a Concordium node which are\n * possibly unknown to the SDK version. {@linkcode Unknown} means that the type is unknown.\n *\n * @template T - The type representing the known variants\n *\n * @example\n * // fail on unknown value\n * const upwardValue: Upward<string> = ...\n * if (!isKnown(upwardValue)) {\n *   throw new Error('Uncountered unknown value')\n * }\n * // the value is known from this point\n *\n * @example\n * // gracefully handle unknown values\n * const upwardValue: Upward<string> = ...\n * if (!isKnown(upwardValue)) {\n *   console.warn('Uncountered unknown value')\n * } else {\n *   // the value is known from this point\n * }\n */\nexport type Upward<T> = T | Unknown;\n\n// Recursively remove all occurrences of `null` (or `Unknown`) from a type. Since `null` is only\n// used via the Upward<T> sentinel (and never intentionally in other field types),\n// this yields a type appropriate for constructing outbound payloads where all\n// values must be known.\nexport type Known<T> = T extends Unknown\n    ? never\n    : T extends Function\n      ? T\n      : T extends Map<infer K, infer V>\n        ? Map<Known<K>, Known<V>>\n        : T extends Set<infer S>\n          ? Set<Known<S>>\n          : T extends readonly (infer U)[]\n            ? T extends readonly [any, ...any[]]\n                ? { [I in keyof T]: Known<T[I]> }\n                : Known<U>[]\n            : T extends object\n              ? { [P in keyof T]: Known<T[P]> }\n              : T;\n\n/**\n * Type guard that checks whether an Upward<T> holds a known value.\n *\n * @template T - The type representing the known variants\n * @param value - The possibly {@linkcode Unknown} value returned from gRPC.\n * @returns True if value is not {@linkcode Unknown} (i.e., is T).\n */\nexport function isKnown<T>(value: Upward<T>): value is T {\n    return value !== null;\n}\n\n/**\n * Asserts that an Upward<T> is known, otherwise throws the provided error.\n *\n * Useful when {@linkcode Unknown} values should be treated as hard failures.\n *\n * @template T - The type representing the known variants\n * @param value - The possibly {@linkcode Unknown} value returned from gRPC.\n * @param error - Error to throw if value is unknown.\n * @returns True as a type predicate when value is known.\n */\nexport function assertKnown<T>(value: Upward<T>, error: Error | string): value is T {\n    return isKnown(value) || bail(error);\n}\n\n/**\n * Returns the known value or throws the provided error when unknown.\n *\n * @template T - The type representing the known variants\n * @param value - The possibly {@linkcode Unknown} value returned from gRPC.\n * @param error - Error to throw if value is unknown.\n * @returns The unwrapped known value of type T.\n */\nexport function knownOrError<T>(value: Upward<T>, error: Error | string): T {\n    if (!isKnown(value)) throw error instanceof Error ? error : new Error(error);\n    return value;\n}\n","import { Buffer } from 'buffer/index.js';\nimport { stringify } from 'json-bigint';\n\nimport { makeDeserializeListResponse } from './deserializationHelpers.js';\nimport { ConcordiumGRPCClient } from './grpc/GRPCClient.js';\nimport { encodeWord16, packBufferWithWord8Length } from './serializationHelpers.js';\nimport * as BlockHash from './types/BlockHash.js';\nimport * as ContractAddress from './types/ContractAddress.js';\nimport * as ContractName from './types/ContractName.js';\nimport * as EntrypointName from './types/EntrypointName.js';\nimport * as Parameter from './types/Parameter.js';\nimport * as ReceiveName from './types/ReceiveName.js';\nimport * as ReturnValue from './types/ReturnValue.js';\nimport { makeDynamicFunction } from './util.js';\n\n/**\n * Namespace with types for CIS-0 standard contracts\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace CIS0 {\n    /** Identifier to query for support, f.x. 'CIS-2' */\n    export type StandardIdentifier = 'CIS-0' | 'CIS-1' | 'CIS-2' | 'CIS-3' | string;\n    /** Possible response types for a query */\n    export enum SupportType {\n        /** The standard is not supported */\n        NoSupport,\n        /** The standard is supported */\n        Support,\n        /** The standard is supported by another contract */\n        SupportBy,\n    }\n    type SupportResponse<T extends SupportType> = {\n        /** The {@link SupportType} of the support response */\n        type: T;\n    };\n    /** The standard is not supported */\n    export type NoSupport = SupportResponse<SupportType.NoSupport>;\n    /** The standard is supported */\n    export type Support = SupportResponse<SupportType.Support>;\n    /** The standard is supported by another contract located at `address` */\n    export type SupportBy = SupportResponse<SupportType.SupportBy> & {\n        /** The address supporting the standard queried */\n        addresses: ContractAddress.Type[];\n    };\n    /** Union of the different possible support query results. */\n    export type SupportResult = NoSupport | Support | SupportBy;\n}\n\nfunction serializeSupportIdentifier(id: CIS0.StandardIdentifier): Buffer {\n    const buf = Buffer.from(id, 'ascii');\n    return packBufferWithWord8Length(buf);\n}\n\nfunction serializeSupportIdentifiers(ids: CIS0.StandardIdentifier[]): Buffer {\n    const n = encodeWord16(ids.length, true);\n    return Buffer.concat([n, ...ids.map(serializeSupportIdentifier)]);\n}\n\nconst deserializeSupportResult = makeDeserializeListResponse<CIS0.SupportResult>((cursor) => {\n    const type = cursor.read(1).readUInt8(0);\n\n    if (type > 2) {\n        throw new Error('Unsupported support result type');\n    }\n\n    if (type !== CIS0.SupportType.SupportBy) {\n        return { type };\n    }\n\n    const numAddresses = cursor.read(1).readUInt8(0);\n    const addresses: ContractAddress.Type[] = [];\n\n    for (let i = 0; i < numAddresses; i++) {\n        const index = cursor.read(8).readBigUInt64LE(0).valueOf();\n        const subindex = cursor.read(8).readBigUInt64LE(0).valueOf();\n        addresses.push(ContractAddress.create(index, subindex));\n    }\n\n    return {\n        type,\n        addresses,\n    };\n});\n\n/**\n * Queries a CIS-0 contract for support for a {@link CIS0.StandardIdentifier}.\n *\n * @param {ConcordiumGRPCClient} grpcClient - The client to be used for the query.\n * @param {ContractAddress.Type} contractAddress - The address of the contract to query.\n * @param {CIS0.StandardIdentifier} standardId - The standard identifier to query for support in contract.\n * @param {BlockHash.Type} [blockHash] - The hash of the block to query at.\n *\n * @throws If the query could not be invoked successfully.\n *\n * @returns {CIS0.SupportResult} The support result of the query, or `undefined` if the contract does not support CIS-0.\n */\nexport function cis0Supports(\n    grpcClient: ConcordiumGRPCClient,\n    contractAddress: ContractAddress.Type,\n    standardId: CIS0.StandardIdentifier,\n    blockHash?: BlockHash.Type\n): Promise<CIS0.SupportResult | undefined>;\n/**\n * Queries a CIS-0 contract for support for a {@link CIS0.StandardIdentifier}.\n *\n * @param {ConcordiumGRPCClient} grpcClient - The client to be used for the query.\n * @param {ContractAddress.Type} contractAddress - The address of the contract to query.\n * @param {CIS0.StandardIdentifier[]} standardIds - The standard identifiers to query for support in contract.\n * @param {BlockHash.Type} [blockHash] - The hash of the block to query at.\n *\n * @throws If the query could not be invoked successfully.\n *\n * @returns {CIS0.SupportResult[]} The support results of the query ordered by the ID's supplied by the `ids` param, or `undefined` if the contract does not support CIS-0.\n */\nexport function cis0Supports(\n    grpcClient: ConcordiumGRPCClient,\n    contractAddress: ContractAddress.Type,\n    standardIds: CIS0.StandardIdentifier[],\n    blockHash?: BlockHash.Type\n): Promise<CIS0.SupportResult[] | undefined>;\nexport async function cis0Supports(\n    grpcClient: ConcordiumGRPCClient,\n    contractAddress: ContractAddress.Type,\n    standardIds: CIS0.StandardIdentifier | CIS0.StandardIdentifier[],\n    blockHash?: BlockHash.Type\n): Promise<CIS0.SupportResult | CIS0.SupportResult[] | undefined> {\n    const instanceInfo = await grpcClient.getInstanceInfo(contractAddress).catch((e) => {\n        throw new Error(\n            `Could not get contract instance info for contract at address ${stringify(\n                contractAddress\n            )}: ${e.message ?? e}`\n        );\n    });\n\n    const contractName = ContractName.fromInitName(instanceInfo.name);\n    const supportReceiveName = ReceiveName.create(contractName, EntrypointName.fromStringUnchecked('supports'));\n\n    if (!instanceInfo.methods.some((methods) => ReceiveName.equals(methods, supportReceiveName))) {\n        return undefined;\n    }\n\n    const parameter = Parameter.fromBuffer(makeDynamicFunction(serializeSupportIdentifiers)(standardIds));\n\n    const response = await grpcClient.invokeContract(\n        {\n            contract: contractAddress,\n            parameter,\n            method: supportReceiveName,\n        },\n        blockHash\n    );\n\n    if (response === undefined || response.tag === 'failure' || response.returnValue === undefined) {\n        throw new Error(\n            `Failed to invoke support for contract at ${stringify(contractAddress)}${\n                response.tag === 'failure' && ` with error ${stringify(response.reason)}`\n            }`\n        );\n    }\n    const results = deserializeSupportResult(ReturnValue.toHexString(response.returnValue));\n    const isListInput = Array.isArray(standardIds);\n    const expectedValuesLength = isListInput ? standardIds.length : 1;\n\n    if (results.length !== expectedValuesLength) {\n        throw new Error('Mismatch between length of queries in request and values in response.');\n    }\n\n    if (isListInput) {\n        return results;\n    } else {\n        return results[0];\n    }\n}\n","import { Buffer } from 'buffer/index.js';\n\nimport { ContractName, EntrypointName } from './contractHelpers.js';\nimport {\n    Cursor,\n    Deserializer,\n    deserializeBigUInt64LE,\n    deserializeUInt8,\n    deserializeUInt16LE,\n    deserializeUInt32LE,\n} from './deserializationHelpers.js';\nimport { encodeWord8, encodeWord16, encodeWord32, encodeWord64 } from './serializationHelpers.js';\n\n/**\n * The JSON schema representation of a rust Option\n *\n * @template T - The type to represent as optional\n */\nexport type OptionJson<T> = { None: [] } | { Some: [T] };\n\n/**\n * Takes a value and wraps it in a {@link OptionJson}.\n *\n * @template T - The type to represent as optional\n *\n * @param {T} value - The value to wrap.\n *\n * @returns {OptionJson<T>} the wrapped value\n */\nexport function toOptionJson<T>(value: T | undefined): OptionJson<T> {\n    if (value === undefined) {\n        return { None: [] };\n    }\n\n    return { Some: [value] };\n}\n\n/** Schema version from before the schema bytes contained version information. */\nexport type UnversionedSchemaVersion = 0 | 1;\n\n/**\n * Represents unparsed bytes for a smart contract module schema.\n */\nexport type RawModuleSchema =\n    | {\n          /** The bytes does contain the version information. */\n          readonly type: 'versioned';\n          /** Buffer containing the schema module bytes, assumed to contain the version information. */\n          readonly buffer: ArrayBuffer;\n      }\n    | {\n          /** The bytes does not contain the version information. */\n          readonly type: 'unversioned';\n          /** Buffer containing the schema module bytes. Assumed to be without the version information */\n          readonly buffer: ArrayBuffer;\n          /** Smart contract module schema version. */\n          readonly version: UnversionedSchemaVersion;\n      };\n\n/**\n * Parse a raw smart contract module schema into a structured type.\n *\n * @param {RawModuleSchema} rawModuleSchema The raw smart contract module schema.\n * @returns {VersionedSchemaModule} A structured representation of the smart contract module schema.\n * @throws If unable to deserialize the module schema from provided bytes.\n */\nexport function parseRawModuleSchema(rawModuleSchema: RawModuleSchema): VersionedSchemaModule {\n    const cursor = Cursor.fromBuffer(rawModuleSchema.buffer);\n    if (rawModuleSchema.type === 'versioned') {\n        return deserializeVersionedSchemaModule(cursor);\n    } else {\n        return deserializeUnversionedSchemaModule(rawModuleSchema.version, cursor);\n    }\n}\n\n/**\n * Represents the different schema versions.\n *\n * The serialization of this type includes the versioning information.\n * The serialization of this is always prefixed with two 255u8 in order to distinguish this versioned schema from the unversioned.\n * When embedded into a smart contract module, name the custom section `concordium-schema`.\n */\nexport type VersionedSchemaModule =\n    | {\n          version: 0;\n          module: SchemaModuleV0;\n      }\n    | {\n          version: 1;\n          module: SchemaModuleV1;\n      }\n    | {\n          version: 2;\n          module: SchemaModuleV2;\n      }\n    | {\n          version: 3;\n          module: SchemaModuleV3;\n      };\n\n/**\n * Contains all schemas for a smart contract module V0.\n * Older versions of smart contracts might have this embedded in the custom section labelled `concordium-schema-v1`.\n */\nexport type SchemaModuleV0 = {\n    /** Map from contract name to a collection of schemas for that contract. */\n    contracts: Map<ContractName, SchemaContractV1>;\n};\n\n/**\n * Contains all schemas for a smart contract module V1.\n * Older versions of smart contracts might have this embedded in the custom section labelled `concordium-schema-v2`.\n */\nexport type SchemaModuleV1 = {\n    /** Map from contract name to a collection of schemas for that contract. */\n    contracts: Map<ContractName, SchemaContractV1>;\n};\n\n/** Contains all the contract schemas for a smart contract module V1. */\nexport type SchemaModuleV2 = {\n    /** Map from contract name to a collection of schemas for that contract. */\n    contracts: Map<ContractName, SchemaContractV2>;\n};\n\n/** Contains all the contract schemas for a smart contract module V1. */\nexport type SchemaModuleV3 = {\n    /** Map from contract name to a collection of schemas for that contract. */\n    contracts: Map<ContractName, SchemaContractV3>;\n};\n\n/** Describes all the schemas of a V0 smart contract. */\nexport type SchemaContractV0 = {\n    /** Schema for the smart contract state. */\n    state?: SchemaType;\n    /** Schemas for the init-function. */\n    init?: SchemaFunctionV1;\n    /** Map of schemas for the receive-functions. */\n    receive: Map<EntrypointName, SchemaFunctionV1>;\n};\n\n/** Describes schemas of a smart contract in a V1 smart contract module. */\nexport type SchemaContractV1 = {\n    /** Schemas for the init-function. */\n    init?: SchemaFunctionV1;\n    /** Map of schemas for the receive-functions. */\n    receive: Map<EntrypointName, SchemaFunctionV1>;\n};\n\n/** Describes schemas of a smart contract in a V1 smart contract module. */\nexport type SchemaContractV2 = {\n    /** Schemas for the init-function. */\n    init?: SchemaFunctionV2;\n    /** Map of schemas for the receive-functions. */\n    receive: Map<EntrypointName, SchemaFunctionV2>;\n};\n\n/** Describes schemas of a smart contract in a V1 smart contract module. */\nexport type SchemaContractV3 = {\n    /** Schemas for the init-function. */\n    init?: SchemaFunctionV2;\n    /** Map of schemas for the receive-functions. */\n    receive: Map<EntrypointName, SchemaFunctionV2>;\n    /** Schema for events logged by this contract. */\n    event?: SchemaType;\n};\n\n/** Describes schemas of a init or receive function in a smart contract in a V1 smart contract module. */\nexport type SchemaFunctionV1 = {\n    /** Schema for the parameter of this function. */\n    parameter?: SchemaType;\n    /** Schema for the return value of this function. */\n    returnValue?: SchemaType;\n};\n\n/** Describes schemas of a init or receive function in a smart contract in a V1 smart contract module. */\nexport type SchemaFunctionV2 = {\n    /** Schema for the parameter of this function. */\n    parameter?: SchemaType;\n    /** Schema for the return value of this function. */\n    returnValue?: SchemaType;\n    /** Schema for error message of this function. */\n    error?: SchemaType;\n};\n\n/** Type of the variable used to encode the length collections such as Sets, List, Maps and more. */\nexport type SchemaSizeLength = 'U8' | 'U16' | 'U32' | 'U64';\n\n/** Schema information for some variant of an enum (here it is an enum in Rust terms). */\nexport type SchemaEnumVariant = {\n    /** Name of the variant. */\n    name: string;\n    /** Fields of this variant */\n    fields: SchemaFields;\n};\n\n/**\n * Schema information of fields in either a struct or a variant of some enum (here it is an enum in Rust terms).\n * The fields are either named, unnamed or none.\n */\nexport type SchemaFields =\n    | { type: 'Named'; fields: SchemaNamedField[] }\n    | { type: 'Unnamed'; fields: SchemaType[] }\n    | { type: 'None' };\n\n/**\n * Schema information of a single named field in either a struct or a variant of some enum (here it is an enum in Rust terms).\n */\nexport type SchemaNamedField = { name: string; field: SchemaType };\n\n/** The schema type information. Provides information of how to serialize or deserialzie some binary information into a structure. */\nexport type SchemaType =\n    | {\n          type:\n              | 'Unit'\n              | 'Bool'\n              | 'U8'\n              | 'U16'\n              | 'U32'\n              | 'U64'\n              | 'U128'\n              | 'I8'\n              | 'I16'\n              | 'I32'\n              | 'I64'\n              | 'I128'\n              | 'Amount'\n              | 'AccountAddress'\n              | 'ContractAddress'\n              | 'Timestamp'\n              | 'Duration';\n      }\n    | { type: 'Pair'; first: SchemaType; second: SchemaType }\n    | { type: 'List'; sizeLength: SchemaSizeLength; item: SchemaType }\n    | { type: 'Set'; sizeLength: SchemaSizeLength; item: SchemaType }\n    | {\n          type: 'Map';\n          sizeLength: SchemaSizeLength;\n          key: SchemaType;\n          value: SchemaType;\n      }\n    | { type: 'Array'; size: number; item: SchemaType }\n    | { type: 'Struct'; fields: SchemaFields }\n    | { type: 'Enum'; variants: SchemaEnumVariant[] }\n    | { type: 'String'; sizeLength: SchemaSizeLength }\n    | { type: 'ContractName'; sizeLength: SchemaSizeLength }\n    | { type: 'ReceiveName'; sizeLength: SchemaSizeLength }\n    | { type: 'ULeb128'; maxByteSize: number }\n    | { type: 'ILeb128'; maxByteSize: number }\n    | { type: 'ByteList'; sizeLength: SchemaSizeLength }\n    | { type: 'ByteArray'; size: number }\n    | { type: 'TaggedEnum'; variants: Map<number, SchemaEnumVariant> };\n\n/**\n * Prefix of versioned smart contract module schemas.\n * This allows tooling to distinguish a module schema with version information from a schema without, since the versioned must have this exact prefix.\n */\nconst magicPrefixVersionedSchema = Buffer.alloc(2, 255);\n\n/**\n * Deserialize a versioned smart contract module schema. This checks for the prefix of two max-value u8 bytes and fails otherwise.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @throws If provided smart contract module schema is not prefixed with two max-value u8 bytes, or if the deserialization fails.\n * @returns {VersionedSchemaModule} The structured representation of a smart contract schema module.\n */\nexport function deserializeVersionedSchemaModule(cursor: Cursor): VersionedSchemaModule {\n    const prefix = cursor.read(2);\n    if (!prefix.equals(magicPrefixVersionedSchema)) {\n        throw new Error('Deserialization failed: Unable to find prefix for versioned module.');\n    }\n    const version = deserializeUInt8(cursor);\n    switch (version) {\n        case 0:\n            return { version, module: deserializeSchemaModuleV0(cursor) };\n        case 1:\n            return { version, module: deserializeSchemaModuleV1(cursor) };\n        case 2:\n            return { version, module: deserializeSchemaModuleV2(cursor) };\n        case 3:\n            return { version, module: deserializeSchemaModuleV3(cursor) };\n        default:\n            throw new Error('Deserialization failed: Unsupported version for schema module.');\n    }\n}\n\n/**\n * Deserialize a smart contract module schema which does not contain version information.\n * This is only relevant for old versions of the smart contract module schema.\n * @param {UnversionedSchemaVersion} version The version of the smart contract schema module.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @throws If the deserialization fails.\n * @returns {VersionedSchemaModule} The structured representation of a smart contract schema module.\n */\nexport function deserializeUnversionedSchemaModule(\n    version: UnversionedSchemaVersion,\n    cursor: Cursor\n): VersionedSchemaModule {\n    switch (version) {\n        case 0:\n            return { version, module: deserializeSchemaModuleV0(cursor) };\n        case 1:\n            return { version, module: deserializeSchemaModuleV1(cursor) };\n        default:\n            throw new Error('Deserialization failed: Unsupported version provided for unversioned schema module.');\n    }\n}\n\n/**\n * Deserialize maps provided the size length and functions for deserializing keys and values.\n * It will first deserialize the size of the map, then deserialize this number of key-value pairs building the map.\n *\n * @template K Type representing the key in the map.\n * @template V Type representing the value in the map.\n * @param {SchemaSizeLength} sizeLength Size of the encoding of the collection lenght.\n * @param {Deserializer<K>} deserialKey Function for deserializing a key.\n * @param {Deserializer<V>} deserialValue Function for deserializing a value.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {Map<K, V>}\n */\nfunction deserializeMap<K, V>(\n    sizeLength: SchemaSizeLength,\n    deserialKey: Deserializer<K>,\n    deserialValue: Deserializer<V>,\n    cursor: Cursor\n): Map<K, V> {\n    const itemLen = deserializeSize(sizeLength, cursor);\n    const map = new Map<K, V>();\n    for (let i = 0; i < itemLen; i++) {\n        const key = deserialKey(cursor);\n        const value = deserialValue(cursor);\n        map.set(key, value);\n    }\n    return map;\n}\n\n/**\n * Deserialize a schema size length.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaSizeLength}\n */\nfunction deserializeSizeLength(cursor: Cursor): SchemaSizeLength {\n    const sizeLength = deserializeUInt8(cursor);\n    switch (sizeLength) {\n        case 0:\n            return 'U8';\n        case 1:\n            return 'U16';\n        case 2:\n            return 'U32';\n        case 3:\n            return 'U64';\n        default:\n            throw new Error('Deserialization failed: Unknown size length tag: ' + sizeLength);\n    }\n}\n\n/**\n * Deserialize a size provided some size length.\n * @param {SchemaSizeLength} sizeLength The size length to use for deserializing.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {bigint} The deserialized size.\n */\nfunction deserializeSize(sizeLength: SchemaSizeLength, cursor: Cursor): bigint {\n    switch (sizeLength) {\n        case 'U8':\n            return BigInt(deserializeUInt8(cursor));\n        case 'U16':\n            return BigInt(deserializeUInt16LE(cursor));\n        case 'U32':\n            return BigInt(deserializeUInt32LE(cursor));\n        case 'U64':\n            return deserializeBigUInt64LE(cursor);\n    }\n}\n\n/**\n * Deserialize a string provided the length of the size encoding.\n * The function will first deserialize size of the string and then this number of bytes for the content encoded as uft8.\n *\n * @param {SchemaSizeLength} sizeLength The size length to use for deserializing the string length.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {string} The deserialized string.\n */\nfunction deserializeString(sizeLength: SchemaSizeLength, cursor: Cursor): string {\n    const byteLen = deserializeSize(sizeLength, cursor);\n    if (byteLen > BigInt(Number.MAX_SAFE_INTEGER)) {\n        throw new Error('Deserialization failed: Unsupported string length: ' + byteLen);\n    }\n    const bytes = cursor.read(Number(byteLen)); // Converting bigint to number here is safe becuase of the check above.\n    return bytes.toString('utf8');\n}\n\n/**\n * Deserialize a list of items provided the length of the size encoding.\n * The function will first deserialize the size of the list and then this number of items.\n *\n * @template A Type representing an item in the list.\n * @param {SchemaSizeLength} sizeLength The size length to use for deserializing the list size.\n * @param {Deserializer<A>} deserializeItem Function for deserializing an item in this list.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {A[]} The deserialized list of items.\n */\nfunction deserializeList<A>(sizeLength: SchemaSizeLength, deserializeItem: Deserializer<A>, cursor: Cursor): A[] {\n    const len = deserializeSize(sizeLength, cursor);\n    const out = [];\n    for (let i = 0n; i < len; i++) {\n        out.push(deserializeItem(cursor));\n    }\n    return out;\n}\n\n/**\n * Deserialize an optional value.\n * The function will first deserialize a byte indicating whether a value is present or not, if present it will deserialize the value.\n *\n * @template A Type representing the optional value.\n * @param {Deserializer<A>} deserializeValue Function for deserializing the value.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {A | undefined} The deserialized optional item.\n */\nfunction deserializeOption<A>(deserializeValue: Deserializer<A>, cursor: Cursor): A | undefined {\n    const byte = deserializeUInt8(cursor);\n    if (byte === 0) {\n        return undefined;\n    } else if (byte === 1) {\n        return deserializeValue(cursor);\n    } else {\n        throw new Error('Deserialization failed: Unexpected tag for optional value: ' + byte);\n    }\n}\n\n/**\n * Deserialize a schema type.\n * @param {ArrayBuffer} buffer The buffer to deserialize.\n * @returns {SchemaType} The deserialized schema type.\n */\nexport function deserializeSchemaType(buffer: ArrayBuffer): SchemaType {\n    const cursor = Cursor.fromBuffer(buffer);\n    return deserialSchemaType(cursor);\n}\n\n/**\n * Deserialize a schema type.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaType} The deserialized schema type.\n */\nfunction deserialSchemaType(cursor: Cursor): SchemaType {\n    const tag = deserializeUInt8(cursor);\n    switch (tag) {\n        case 0:\n            return { type: 'Unit' };\n        case 1:\n            return { type: 'Bool' };\n        case 2:\n            return { type: 'U8' };\n        case 3:\n            return { type: 'U16' };\n        case 4:\n            return { type: 'U32' };\n        case 5:\n            return { type: 'U64' };\n        case 6:\n            return { type: 'I8' };\n        case 7:\n            return { type: 'I16' };\n        case 8:\n            return { type: 'I32' };\n        case 9:\n            return { type: 'I64' };\n        case 10:\n            return { type: 'Amount' };\n        case 11:\n            return { type: 'AccountAddress' };\n        case 12:\n            return { type: 'ContractAddress' };\n        case 13:\n            return { type: 'Timestamp' };\n        case 14:\n            return { type: 'Duration' };\n        case 15:\n            return {\n                type: 'Pair',\n                first: deserialSchemaType(cursor),\n                second: deserialSchemaType(cursor),\n            };\n        case 16:\n            return {\n                type: 'List',\n                sizeLength: deserializeSizeLength(cursor),\n                item: deserialSchemaType(cursor),\n            };\n        case 17:\n            return {\n                type: 'Set',\n                sizeLength: deserializeSizeLength(cursor),\n                item: deserialSchemaType(cursor),\n            };\n        case 18:\n            return {\n                type: 'Map',\n                sizeLength: deserializeSizeLength(cursor),\n                key: deserialSchemaType(cursor),\n                value: deserialSchemaType(cursor),\n            };\n        case 19:\n            return {\n                type: 'Array',\n                size: deserializeUInt32LE(cursor),\n                item: deserialSchemaType(cursor),\n            };\n        case 20:\n            return {\n                type: 'Struct',\n                fields: deserializeFields(cursor),\n            };\n        case 21:\n            return {\n                type: 'Enum',\n                variants: deserializeList('U32', deserializeEnumVariant, cursor),\n            };\n        case 22:\n            return {\n                type: 'String',\n                sizeLength: deserializeSizeLength(cursor),\n            };\n        case 23:\n            return { type: 'U128' };\n        case 24:\n            return { type: 'I128' };\n        case 25:\n            return {\n                type: 'ContractName',\n                sizeLength: deserializeSizeLength(cursor),\n            };\n        case 26:\n            return {\n                type: 'ReceiveName',\n                sizeLength: deserializeSizeLength(cursor),\n            };\n        case 27:\n            return {\n                type: 'ULeb128',\n                maxByteSize: deserializeUInt32LE(cursor),\n            };\n        case 28:\n            return {\n                type: 'ILeb128',\n                maxByteSize: deserializeUInt32LE(cursor),\n            };\n        case 29:\n            return {\n                type: 'ByteList',\n                sizeLength: deserializeSizeLength(cursor),\n            };\n        case 30:\n            return {\n                type: 'ByteArray',\n                size: deserializeUInt32LE(cursor),\n            };\n        case 31:\n            return {\n                type: 'TaggedEnum',\n                variants: deserializeMap('U32', deserializeUInt8, deserializeEnumVariant, cursor),\n            };\n\n        default:\n            throw new Error('Deserialization failed: Unexpected tag for SchemaType: ' + tag);\n    }\n}\n\n/**\n * Deserialize fields for schema type struct or enum variant.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaFields} The deserialized contract schemas.\n */\nfunction deserializeFields(cursor: Cursor): SchemaFields {\n    const tag = deserializeUInt8(cursor);\n    switch (tag) {\n        case 0:\n            return {\n                type: 'Named',\n                fields: deserializeList('U32', deserializeNamedField, cursor),\n            };\n        case 1:\n            return {\n                type: 'Unnamed',\n                fields: deserializeList('U32', deserialSchemaType, cursor),\n            };\n        case 2:\n            return { type: 'None' };\n        default:\n            throw new Error('Deserialization failed: Unexpected tag for Fields: ' + tag);\n    }\n}\n\n/**\n * Deserialize a named field for schema type struct or enum variant.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaNamedField} The deserialized contract schemas.\n */\nfunction deserializeNamedField(cursor: Cursor): SchemaNamedField {\n    return {\n        name: deserializeString('U32', cursor),\n        field: deserialSchemaType(cursor),\n    };\n}\n\n/**\n * Deserialize an enum variant.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaEnumVariant} The deserialized contract schemas.\n */\nfunction deserializeEnumVariant(cursor: Cursor): SchemaEnumVariant {\n    return {\n        name: deserializeString('U32', cursor),\n        fields: deserializeFields(cursor),\n    };\n}\n\n/**\n * Deserialize schemas for a smart contract init- or receive function.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaFunctionV1} The deserialized function schemas.\n */\nfunction deserializeSchemaFunctionV1(cursor: Cursor): SchemaFunctionV1 {\n    const idx = deserializeUInt8(cursor);\n    const out: SchemaFunctionV1 = {};\n    if ([0, 2].includes(idx)) {\n        out.parameter = deserialSchemaType(cursor);\n    }\n    if ([1, 2].includes(idx)) {\n        out.returnValue = deserialSchemaType(cursor);\n    }\n    return out;\n}\n\n/**\n * Deserialize schemas for a smart contract init- or receive function.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaFunctionV2} The deserialized function schemas.\n */\nfunction deserializeSchemaFunctionV2(cursor: Cursor): SchemaFunctionV2 {\n    const idx = deserializeUInt8(cursor);\n    if (idx > 7) {\n        throw new Error('Deserialization failed: Unexpected ');\n    }\n    const out: SchemaFunctionV2 = {};\n    if ([0, 2, 4, 6].includes(idx)) {\n        out.parameter = deserialSchemaType(cursor);\n    }\n    if ([1, 2, 5, 6].includes(idx)) {\n        out.returnValue = deserialSchemaType(cursor);\n    }\n    if ([3, 4, 5, 6].includes(idx)) {\n        out.error = deserialSchemaType(cursor);\n    }\n    return out;\n}\n\n/**\n * Deserialize schemas for a smart contract.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaContractV0} The deserialized contract schemas.\n */\nfunction deserializeContractV0(cursor: Cursor): SchemaContractV0 {\n    return {\n        state: deserializeOption(deserialSchemaType, cursor),\n        init: deserializeOption(deserializeSchemaFunctionV1, cursor),\n        receive: deserializeMap('U32', deserializeString.bind(undefined, 'U32'), deserializeSchemaFunctionV1, cursor),\n    };\n}\n\n/**\n * Deserialize schemas for a smart contract.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaContractV1} The deserialized contract schemas.\n */\nfunction deserializeContractV1(cursor: Cursor): SchemaContractV1 {\n    return {\n        init: deserializeOption(deserializeSchemaFunctionV1, cursor),\n        receive: deserializeMap('U32', deserializeString.bind(undefined, 'U32'), deserializeSchemaFunctionV1, cursor),\n    };\n}\n\n/**\n * Deserialize schemas for a smart contract.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaContractV2} The deserialized contract schemas.\n */\nfunction deserializeContractV2(cursor: Cursor): SchemaContractV2 {\n    return {\n        init: deserializeOption(deserializeSchemaFunctionV2, cursor),\n        receive: deserializeMap('U32', deserializeString.bind(undefined, 'U32'), deserializeSchemaFunctionV2, cursor),\n    };\n}\n\n/**\n * Deserialize schemas for a smart contract.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaContractV3} The deserialized contract schemas.\n */\nfunction deserializeContractV3(cursor: Cursor): SchemaContractV3 {\n    return {\n        init: deserializeOption(deserializeSchemaFunctionV2, cursor),\n        receive: deserializeMap('U32', deserializeString.bind(undefined, 'U32'), deserializeSchemaFunctionV2, cursor),\n        event: deserializeOption(deserialSchemaType, cursor),\n    };\n}\n\n/**\n * Deserialize schemas for a smart contract module.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaModuleV0} The deserialized module schemas.\n */\nfunction deserializeSchemaModuleV0(cursor: Cursor): SchemaModuleV0 {\n    return {\n        contracts: deserializeMap('U32', deserializeString.bind(undefined, 'U32'), deserializeContractV0, cursor),\n    };\n}\n\n/**\n * Deserialize schemas for a smart contract module.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaModuleV1} The deserialized module schemas.\n */\nfunction deserializeSchemaModuleV1(cursor: Cursor): SchemaModuleV1 {\n    return {\n        contracts: deserializeMap('U32', deserializeString.bind(undefined, 'U32'), deserializeContractV1, cursor),\n    };\n}\n\n/**\n * Deserialize schemas for a smart contract module.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaModuleV2} The deserialized module schemas.\n */\nfunction deserializeSchemaModuleV2(cursor: Cursor): SchemaModuleV2 {\n    return {\n        contracts: deserializeMap('U32', deserializeString.bind(undefined, 'U32'), deserializeContractV2, cursor),\n    };\n}\n\n/**\n * Deserialize schemas for a smart contract module.\n * @param {Cursor} cursor A cursor over the buffer to deserialize.\n * @returns {SchemaModuleV3} The deserialized module schemas.\n */\nfunction deserializeSchemaModuleV3(cursor: Cursor): SchemaModuleV3 {\n    return {\n        contracts: deserializeMap('U32', deserializeString.bind(undefined, 'U32'), deserializeContractV3, cursor),\n    };\n}\n\n/**\n * Serialize a schema type.\n * @param {SchemaType} schemaType The schema type to serialize\n * @returns {Uint8Array} The buffer containing the serialized schema type.\n */\nexport function serializeSchemaType(schemaType: SchemaType): Uint8Array {\n    switch (schemaType.type) {\n        case 'Unit':\n            return Uint8Array.of(0);\n        case 'Bool':\n            return Uint8Array.of(1);\n        case 'U8':\n            return Uint8Array.of(2);\n        case 'U16':\n            return Uint8Array.of(3);\n        case 'U32':\n            return Uint8Array.of(4);\n        case 'U64':\n            return Uint8Array.of(5);\n        case 'I8':\n            return Uint8Array.of(6);\n        case 'I16':\n            return Uint8Array.of(7);\n        case 'I32':\n            return Uint8Array.of(8);\n        case 'I64':\n            return Uint8Array.of(9);\n        case 'Amount':\n            return Uint8Array.of(10);\n        case 'AccountAddress':\n            return Uint8Array.of(11);\n        case 'ContractAddress':\n            return Uint8Array.of(12);\n        case 'Timestamp':\n            return Uint8Array.of(13);\n        case 'Duration':\n            return Uint8Array.of(14);\n        case 'Pair':\n            return Buffer.concat([\n                Uint8Array.of(15),\n                serializeSchemaType(schemaType.first),\n                serializeSchemaType(schemaType.second),\n            ]);\n        case 'List':\n            return Buffer.concat([\n                Uint8Array.of(16),\n                serialSizeLength(schemaType.sizeLength),\n                serializeSchemaType(schemaType.item),\n            ]);\n        case 'Set':\n            return Buffer.concat([\n                Uint8Array.of(17),\n                serialSizeLength(schemaType.sizeLength),\n                serializeSchemaType(schemaType.item),\n            ]);\n        case 'Map':\n            return Buffer.concat([\n                Uint8Array.of(18),\n                serialSizeLength(schemaType.sizeLength),\n                serializeSchemaType(schemaType.key),\n                serializeSchemaType(schemaType.value),\n            ]);\n        case 'Array':\n            return Buffer.concat([\n                Uint8Array.of(19),\n                encodeWord32(schemaType.size, true),\n                serializeSchemaType(schemaType.item),\n            ]);\n        case 'Struct':\n            return Buffer.concat([Uint8Array.of(20), serialFields(schemaType.fields)]);\n        case 'Enum':\n            return Buffer.concat([Uint8Array.of(21), serializeList('U32', serializeEnumVariant, schemaType.variants)]);\n        case 'String':\n            return Buffer.concat([Uint8Array.of(22), serialSizeLength(schemaType.sizeLength)]);\n        case 'U128':\n            return Uint8Array.of(23);\n        case 'I128':\n            return Uint8Array.of(24);\n        case 'ContractName':\n            return Buffer.concat([Uint8Array.of(25), serialSizeLength(schemaType.sizeLength)]);\n        case 'ReceiveName':\n            return Buffer.concat([Uint8Array.of(26), serialSizeLength(schemaType.sizeLength)]);\n        case 'ULeb128':\n            return Buffer.concat([Uint8Array.of(27), encodeWord32(schemaType.maxByteSize, true)]);\n        case 'ILeb128':\n            return Buffer.concat([Uint8Array.of(28), encodeWord32(schemaType.maxByteSize, true)]);\n        case 'ByteList':\n            return Buffer.concat([Uint8Array.of(29), serialSizeLength(schemaType.sizeLength)]);\n        case 'ByteArray':\n            return Buffer.concat([Uint8Array.of(30), encodeWord32(schemaType.size, true)]);\n        case 'TaggedEnum':\n            return Buffer.concat([\n                Uint8Array.of(31),\n                serializeMap('U32', encodeWord8, serializeEnumVariant, schemaType.variants),\n            ]);\n        default:\n            throw new Error('Deserialization failed: Unexpected tag for SchemaType: ');\n    }\n}\n\n/**\n * Serialize the size length itself.\n * @param {SchemaSizeLength} sizeLength Size length to serialize.\n * @returns {Uint8Array} Buffer with serialization.\n */\nfunction serialSizeLength(sizeLength: SchemaSizeLength): Uint8Array {\n    switch (sizeLength) {\n        case 'U8':\n            return new Uint8Array([0]);\n        case 'U16':\n            return new Uint8Array([1]);\n        case 'U32':\n            return new Uint8Array([2]);\n        case 'U64':\n            return new Uint8Array([3]);\n    }\n}\n\n/**\n * Serialize the size of some collection using the size length.\n * @param {SchemaSizeLength} sizeLength Size length to use when serializing the size.\n * @param {bigint | number} size Size to serialize.\n * @returns {Uint8Array} Buffer with serialization.\n */\nfunction serialSize(sizeLength: SchemaSizeLength, size: bigint | number): Uint8Array {\n    switch (sizeLength) {\n        case 'U8':\n            return encodeWord8(Number(size));\n        case 'U16':\n            return encodeWord16(Number(size), true);\n        case 'U32':\n            return encodeWord32(Number(size), true);\n        case 'U64':\n            return encodeWord64(BigInt(size), true);\n    }\n}\n\n/**\n * Serialize fields for schema type struct or enum variant.\n * @param {SchemaFields} fields Fields for a struct or enum variant.\n * @returns {Uint8Array} Buffer with serialization.\n */\nfunction serialFields(fields: SchemaFields): Uint8Array {\n    switch (fields.type) {\n        case 'Named':\n            return Buffer.concat([Uint8Array.of(0), serializeList('U32', serialNamedField, fields.fields)]);\n        case 'Unnamed':\n            return Buffer.concat([Uint8Array.of(1), serializeList('U32', serializeSchemaType, fields.fields)]);\n        case 'None':\n            return Uint8Array.of(2);\n    }\n}\n\n/**\n * Serialize named field for schema fields.\n * @param {SchemaNamedField} named The named field to serialize.\n * @returns {Uint8Array} Buffer with serialization.\n */\nfunction serialNamedField(named: SchemaNamedField): Uint8Array {\n    return Buffer.concat([serializeString('U32', named.name), serializeSchemaType(named.field)]);\n}\n\n/**\n * Serialize an enum variant.\n * @param {SchemaEnumVariant} variant The enum variant to serialize.\n * @returns {Uint8Array} Buffer with serialization.\n */\nfunction serializeEnumVariant(variant: SchemaEnumVariant): Uint8Array {\n    return Buffer.concat([serializeString('U32', variant.name), serialFields(variant.fields)]);\n}\n\n/**\n * Represent a function for serializing a type A.\n * @template A Item to be serialized.\n */\ntype Serializer<A> = (a: A) => Uint8Array;\n\n/**\n * Serialize a list of items.\n * @template A Type of a list item.\n * @param {SchemaSizeLength} sizeLength The size length to use for serializing the size.\n * @param {Serializer<A>} serialItem Function for serializing each item.\n * @param {A[]} list List of items to serialize.\n * @returns {Uint8Array} Buffer with serialization.\n */\nfunction serializeList<A>(sizeLength: SchemaSizeLength, serialItem: Serializer<A>, list: A[]): Uint8Array {\n    return Buffer.concat([serialSize(sizeLength, list.length), ...list.map(serialItem)]);\n}\n\n/**\n * Serialize a string.\n * @param {SchemaSizeLength} sizeLength The size length to use for serializing the size.\n * @returns {Uint8Array} Buffer with serialization.\n */\nfunction serializeString(sizeLength: SchemaSizeLength, value: string): Uint8Array {\n    return Buffer.concat([serialSize(sizeLength, value.length), Buffer.from(value, 'utf8')]);\n}\n\n/**\n * Serialize a map.\n * @template K Type for keys used in the map.\n * @template V Type for values used in the map.\n * @param {SchemaSizeLength} sizeLength The size length to use for serializing the size.\n * @param {Serializer<K>} serialKey Function for serializing a key.\n * @param {Serializer<v>} serialValue Function for serializing a value.\n * @param {Map<K, V>} map The map to serialize.\n * @returns {Uint8Array} Buffer with serialization.\n */\nfunction serializeMap<K, V>(\n    sizeLength: SchemaSizeLength,\n    serialKey: Serializer<K>,\n    serialValue: Serializer<V>,\n    map: Map<K, V>\n): Uint8Array {\n    const buffers: Uint8Array[] = [serialSize(sizeLength, map.size)];\n    for (const [k, v] of map.entries()) {\n        buffers.push(serialKey(k), serialValue(v));\n    }\n    return Buffer.concat(buffers);\n}\n","export {\n    Type,\n    toBuffer,\n    fromBuffer,\n    toHexString,\n    fromHexString,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    instanceOf,\n    fromJSON,\n    empty,\n    fromSchemaType,\n    fromBufferUnchecked,\n    parseWithSchemaType,\n    fromBase64SchemaType,\n    parseWithSchemaTypeBase64,\n} from '../../types/Parameter.js';\n","import Big, { BigSource } from 'big.js';\nimport { decode } from 'cbor2/decoder';\nimport { encode, registerEncoder } from 'cbor2/encoder';\nimport { Tag } from 'cbor2/tag';\n\nimport { MAX_U8, MAX_U64 } from '../constants.js';\nimport type * as Proto from '../grpc-api/v2/concordium/protocol-level-tokens.js';\n\n/**\n * Protocol level token (PLT) amount JSON representation.\n *\n * Please note that `bigint` is used to represent the token amount, which is needed for precise representation of large numbers.\n * As such, extra steps must be taken to serialize and deserialize the token amount.\n */\nexport type JSON = {\n    /** The integer representation of the token amount as a string. */\n    value: string;\n    /** The decimals of the token amount, defining the precision at which amounts of the token can be specified. */\n    decimals: number;\n};\n\n/**\n * Enum representing the types of errors that can occur with token amounts.\n */\nexport enum ErrorType {\n    /** Error type indicating the token amount exceeds the maximum allowed value. */\n    EXCEEDS_MAX_VALUE = 'EXCEEDS_MAX_VALUE',\n    /** Error type indicating the token amount is negative. */\n    NEGATIVE = 'NEGATIVE',\n    /** Error type indicating the token amount has more decimals than allowed. */\n    EXCEEDS_MAX_DECIMALS = 'EXCEEDS_MAX_DECIMALS',\n    /** Error type indicating the token decimals were specified as a fractional number. */\n    FRACTIONAL_DECIMALS = 'FRACTIONAL_DECIMALS',\n}\n\n/**\n * Custom error to represent issues with token amounts.\n */\nexport class Err extends Error {\n    private constructor(\n        /** The {@linkcode ErrorType} of the error. Can be used as to distinguish different types of errors. */\n        public readonly type: ErrorType,\n        message: string\n    ) {\n        super(message);\n        this.name = `TokenAmount.Err.${type}`;\n    }\n\n    /**\n     * Creates a TokenAmount.Err indicating that the token amount exceeds the maximum allowed value.\n     */\n    public static exceedsMaxValue(): Err {\n        return new Err(ErrorType.EXCEEDS_MAX_VALUE, `Token amounts cannot be larger than ${MAX_U64}`);\n    }\n\n    /**\n     * Creates a TokenAmount.Err indicating that the token amount/decimals is negative.\n     */\n    public static negative(): Err {\n        return new Err(ErrorType.NEGATIVE, 'Token amounts/decimals cannot be negative');\n    }\n\n    /**\n     * Creates a TokenAmount.Err indicating that the token amount has more decimals than allowed.\n     */\n    public static exceedsMaxDecimals(): Err {\n        return new Err(ErrorType.EXCEEDS_MAX_DECIMALS, `Token amounts cannot have more than than ${MAX_U8}`);\n    }\n\n    /** Creates a TokenAmount.Err indicating the token decimals were specified as a fractional number. */\n    public static fractionalDecimals(): Err {\n        return new Err(ErrorType.FRACTIONAL_DECIMALS, `Token decimals must be specified as whole numbers`);\n    }\n}\n\n/**\n * Protocol level token (PLT) amount representation.\n */\nclass TokenAmount {\n    #nominal = true;\n\n    /**\n     * Constructs a new TokenAmount instance.\n     * Validates that the value is within the allowed range and is non-negative.\n     *\n     * @throws {Err} If the value/decimals exceeds the maximum allowed or is negative.\n     */\n    constructor(\n        /** The unsigned integer representation of the token amount. */\n        public readonly value: bigint,\n        /** The decimals of the token amount, defining the precision at which amounts of the token can be specified. */\n        public readonly decimals: number\n    ) {\n        if (value > MAX_U64) {\n            throw Err.exceedsMaxValue();\n        }\n        if (value < 0n) {\n            throw Err.negative();\n        }\n        if (decimals > MAX_U8) {\n            throw Err.exceedsMaxDecimals();\n        }\n        if (decimals < 0) {\n            throw Err.negative();\n        }\n        if (!Number.isInteger(decimals)) {\n            throw Err.fractionalDecimals();\n        }\n    }\n\n    /**\n     * Get a string representation of the token amount.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        const amountString = this.value.toString();\n        if (this.decimals === 0) {\n            return amountString;\n        }\n\n        const padded = amountString.padStart(this.decimals + 1, '0');\n        return `${padded.slice(0, -this.decimals)}.${padded.slice(-this.decimals)}`;\n    }\n\n    /**\n     * Get a JSON-serializable representation of the token amount. This is called implicitly when serialized with JSON.stringify.\n     * @returns {HexString} The JSON representation.\n     */\n    public toJSON(): JSON {\n        return { value: this.value.toString(), decimals: this.decimals };\n    }\n}\n\n/**\n * Protocol level token (PLT) amount representation.\n */\nexport type Type = TokenAmount;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is TokenAmount {\n    return value instanceof TokenAmount;\n}\n\n/**\n * Get decimal places from a Big {@linkcode Big}.\n *\n * @param big The number to get the decimal places.\n * @returns {number} The number of decimal places in above number.\n */\nfunction getDecimalPlaces(big: Big): number {\n    // `b.c` is an array of single digits (coefficient), `b.e` is the exponent (0-based index of highest digit)\n    const decimals = big.c.length - (big.e + 1);\n    return decimals > 0 ? decimals : 0;\n}\n\n/**\n * Creates a TokenAmount from a number, string, {@linkcode Big}, or bigint.\n *\n * @param amount The amount of tokens as a number, string, big or bigint.\n * @returns {TokenAmount} The token amount.\n *\n * @throws {Err} If the value exceeds the maximum allowed or is negative.\n */\nexport function fromDecimal(amount: BigSource | bigint, decimals: number): TokenAmount {\n    let parsed: BigSource;\n    if (typeof amount !== 'bigint') {\n        parsed = Big(amount);\n    } else {\n        parsed = amount.toString();\n    }\n\n    const bigAmount = Big(parsed);\n    const parsedDecimals = getDecimalPlaces(bigAmount);\n    if (parsedDecimals > decimals) {\n        throw new Error('The amount has more decimal places than the specified decimals.');\n    }\n\n    const intAmount = bigAmount.mul(Big((10n ** BigInt(decimals)).toString()));\n    return new TokenAmount(BigInt(intAmount.toFixed(0)), decimals);\n}\n\n/**\n * Convert a token amount into a decimal value represented as a {@linkcode Big}\n *\n * @param {TokenAmount} amount\n * @returns {Big} The token amount as a {@linkcode Big}.\n */\nexport function toDecimal(amount: TokenAmount): Big {\n    return Big(amount.toString());\n}\n\n/**\n * Converts {@linkcode JSON} to a token amount.\n *\n * @param {JSON} json The JSON representation of the token amount.\n * @returns {TokenAmount} The token amount.\n * @throws {Err} If the value/decimals exceeds the maximum allowed or is negative.\n */\nexport function fromJSON(json: JSON): TokenAmount {\n    return new TokenAmount(BigInt(json.value), Number(json.decimals));\n}\n\n/**\n * Creates a token amount from its integer representation and a number of decimals.\n *\n * @param {bigint} value The integer representation of the token amount.\n * @param {number} decimals The decimals of the token amount, defining the precision at which amounts of the token can be specified.\n *\n * @returns {TokenAmount} The token amount.\n * @throws {Err} If the value/decimals exceeds the maximum allowed or is negative.\n */\nexport function create(value: bigint, decimals: number): TokenAmount {\n    return new TokenAmount(value, decimals);\n}\n\n/**\n * Creates a token amount with a value of zero.\n *\n * @param {number} decimals The decimals of the token amount, defining the precision at which amounts of the token can be specified.\n * @returns {TokenAmount} The token amount.\n */\nexport function zero(decimals: number): TokenAmount {\n    return new TokenAmount(BigInt(0), decimals);\n}\n\n/**\n * Convert token amount from its protobuf encoding.\n * @param {Proto.TokenAmount} amount\n * @returns {Type} The token amount.\n * @throws {Err} If the value/decimals exceeds the maximum allowed or is negative.\n */\nexport function fromProto(amount: Proto.TokenAmount): Type {\n    return create(amount.value, amount.decimals);\n}\n\n/**\n * Convert token amount into its protobuf encoding.\n * @param {TokenAmount} amount\n * @returns {Proto.TokenAmount} The protobuf encoding.\n */\nexport function toProto(amount: Type): Proto.TokenAmount {\n    return {\n        value: amount.value,\n        decimals: amount.decimals,\n    };\n}\n\n/**\n * Check if two token amounts are the same. This tests for numeric equlity, not equality of object values.\n *\n * @example\n * const a = TokenAmount.create(1, 2);\n * const b = TokenAmount.create(100, 4);\n * console.log(TokenAmount.equals(a, b)); // true\n *\n * @param {TokenAmount} left\n * @param {TokenAmount} right\n * @returns {boolean} True if they are equal.\n */\nexport function equals(left: TokenAmount, right: TokenAmount): boolean {\n    return toDecimal(left).eq(toDecimal(right));\n}\n\nconst DECIMAL_FRACTION_TAG = 4; // 4 is the CBOR tag for decimal fraction\n\nfunction toCBORDecFrac(value: TokenAmount): [number, bigint] {\n    return [\n        -value.decimals, // Exponent is negative of decimals\n        value.value, // Mantissa is the value\n    ];\n}\n\n/**\n * Converts a TokenAmount to its CBOR (Concise Binary Object Representation) `decfrac` encoding.\n *\n * @param {TokenAmount} value - The token amount to convert to CBOR format.\n * @returns {Uint8Array} The CBOR encoded representation of the token amount.\n */\nexport function toCBOR(value: TokenAmount): Uint8Array {\n    const tagged = new Tag(DECIMAL_FRACTION_TAG, toCBORDecFrac(value));\n    return new Uint8Array(encode(tagged));\n}\n\n/**\n * Function to parse a CBOR-decoded `decfrac` value into a TokenAmount instance.\n * This handles the internal conversion from the CBOR representation to our TokenAmount type.\n *\n * @param {unknown} decoded - The decoded CBOR value\n * @returns {TokenAmount} The parsed TokenAmount instance\n * @throws {Error} If the value is not in the expected `decfrac` format\n */\nexport function fromCBORValue(decoded: unknown): TokenAmount {\n    // Verify we have a tagged value with tag DECIMAL_FRACTION_TAG (decimal fraction)\n    if (!(decoded instanceof Tag) || decoded.tag !== DECIMAL_FRACTION_TAG) {\n        throw new Error(`Invalid CBOR encoded token amount: expected tag ${DECIMAL_FRACTION_TAG} (decimal fraction)`);\n    }\n\n    const value = decoded.contents;\n    // The value should be an array [exponent, mantissa]\n    if (!Array.isArray(value) || value.length !== 2) {\n        throw new Error('Invalid CBOR encoded token amount: expected an array with two elements [exponent, mantissa]');\n    }\n\n    const [exponent, mantissa] = value;\n\n    if (typeof exponent !== 'number') {\n        throw new Error('Invalid CBOR encoded token amount: exponent must be a number');\n    }\n\n    if (typeof mantissa !== 'number' && typeof mantissa !== 'bigint') {\n        throw new Error('Invalid CBOR encoded token amount: mantissa must be a number or bigint');\n    }\n\n    // Convert to TokenAmount (decimals is negative of exponent)\n    if (exponent > 0) {\n        throw new Error('Invalid CBOR encoded token amount: exponent cannot have a positive amount');\n    }\n    if (exponent < -MAX_U8) {\n        throw new Error(`Invalid CBOR encoded token amount: exponent is too small (minimum value is -${MAX_U8})`);\n    }\n\n    const decimals = Math.abs(exponent);\n    return create(typeof mantissa === 'bigint' ? mantissa : BigInt(mantissa), decimals);\n}\n\n/**\n * Decodes a CBOR `decfrac` encoding into a TokenAmount instance.\n *\n * @param {Uint8Array} bytes - The CBOR `decfrac` encoding.\n * @throws {Error} - If the input is not a valid CBOR encoding of a token amount.\n * @returns {TokenAmount} The decoded TokenAmount instance.\n */\nexport function fromCBOR(bytes: Uint8Array): TokenAmount {\n    return fromCBORValue(decode(bytes));\n}\n\n/**\n * Registers a CBOR encoder for the TokenAmount type with the `cbor2` library.\n * This allows TokenAmount instances to be automatically encoded when used with\n * the `cbor2` library's encode function.\n *\n * @returns {void}\n * @example\n * // Register the encoder\n * registerCBOREncoder();\n * // Now TokenAmount instances can be encoded directly\n * const encoded = encode(myTokenAmount);\n */\nexport function registerCBOREncoder(): void {\n    registerEncoder(TokenAmount, (value) => [DECIMAL_FRACTION_TAG, toCBORDecFrac(value)]);\n}\n\n/**\n * Registers a CBOR decoder for the decimal fraction (tag 4) format with the `cbor2` library.\n * This enables automatic decoding of CBOR data containing token amounts\n * when using the `cbor2` library's decode function.\n *\n * @returns {() => void} A cleanup function that, when called, will restore the previous\n * decoder (if any) that was registered for the decimal fraction format. This is useful\n * when used in an existing `cbor2` use-case.\n *\n * @example\n * // Register the decoder\n * const cleanup = registerCBORDecoder();\n * // Use the decoder\n * const tokenAmount = decode(cborBytes); // Returns TokenAmount if format matches\n * // Later, unregister the decoder\n * cleanup();\n */\nexport function registerCBORDecoder(): () => void {\n    const old = Tag.registerDecoder(DECIMAL_FRACTION_TAG, fromCBORValue);\n\n    // Return cleanup function to restore the old decoder\n    return () => {\n        if (old) {\n            Tag.registerDecoder(DECIMAL_FRACTION_TAG, old);\n        } else {\n            Tag.clearDecoder(DECIMAL_FRACTION_TAG);\n        }\n    };\n}\n","const defaultsWrite = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n}, defaultsRead = {\n    ignoreUnknownFields: false,\n};\n/**\n * Make options for reading JSON data from partial options.\n */\nexport function jsonReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\n/**\n * Make options for writing JSON data from partial options.\n */\nexport function jsonWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Merges JSON write or read options. Later values override earlier values. Type registries are merged.\n */\nexport function mergeJsonOptions(a, b) {\n    var _a, _b;\n    let c = Object.assign(Object.assign({}, a), b);\n    c.typeRegistry = [...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []), ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : [])];\n    return c;\n}\n","// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size\n// @generated from protobuf file \"v2/concordium/protocol-level-tokens.proto\" (package \"concordium.v2.plt\", syntax proto3)\n// tslint:disable\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { Memo } from \"./kernel.js\";\nimport { AccountAddress } from \"./kernel.js\";\n/**\n * A Cbor encoded bytestring\n *\n * @generated from protobuf message concordium.v2.plt.CBor\n */\nexport interface CBor {\n    /**\n     * A CBOR encoded byte string.\n     *\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * The unique symbol and identifier of a protocol level token.\n *\n * @generated from protobuf message concordium.v2.plt.TokenId\n */\nexport interface TokenId {\n    /**\n     * Unique identifier for the token, guaranteed to be distinct across the\n     * entire concordium blockchain.\n     *\n     * @generated from protobuf field: string value = 1;\n     */\n    value: string;\n}\n/**\n * A token module reference. This is always 32 bytes long.\n *\n * @generated from protobuf message concordium.v2.plt.TokenModuleRef\n */\nexport interface TokenModuleRef {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * PLT amount representation. The actual amount is computed as\n * `value * 10^(-decimals)`.\n *\n * @generated from protobuf message concordium.v2.plt.TokenAmount\n */\nexport interface TokenAmount {\n    /**\n     * The digits of the amount.\n     *\n     * @generated from protobuf field: uint64 value = 1;\n     */\n    value: bigint;\n    /**\n     * Number of decimals in the representation\n     *\n     * @generated from protobuf field: uint32 decimals = 2;\n     */\n    decimals: number;\n}\n/**\n * Token state at the block level\n *\n * @generated from protobuf message concordium.v2.plt.TokenState\n */\nexport interface TokenState {\n    /**\n     * The reference of the module implementing this token.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenModuleRef token_module_ref = 1;\n     */\n    tokenModuleRef?: TokenModuleRef;\n    /**\n     * Number of decimals in the decimal number representation of amounts.\n     *\n     * @generated from protobuf field: uint32 decimals = 3;\n     */\n    decimals: number;\n    /**\n     * The total available token supply.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenAmount total_supply = 4;\n     */\n    totalSupply?: TokenAmount;\n    /**\n     * Token module specific state, such as token name, feature flags, meta data.\n     *\n     * @generated from protobuf field: concordium.v2.plt.CBor module_state = 5;\n     */\n    moduleState?: CBor;\n}\n/**\n * Token state at the account level\n *\n * @generated from protobuf message concordium.v2.plt.TokenAccountState\n */\nexport interface TokenAccountState {\n    /**\n     * The available balance.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenAmount balance = 1;\n     */\n    balance?: TokenAmount;\n    /**\n     * Token module specific account state, such as whether the account is on\n     * the allow or deny list.\n     *\n     * @generated from protobuf field: optional concordium.v2.plt.CBor module_state = 4;\n     */\n    moduleState?: CBor;\n}\n/**\n * Single token event originating from a token module as part of a token\n * transaction.\n *\n * @generated from protobuf message concordium.v2.plt.TokenModuleEvent\n */\nexport interface TokenModuleEvent {\n    /**\n     * The type of the event.\n     *\n     * @generated from protobuf field: string type = 1;\n     */\n    type: string;\n    /**\n     * The CBOR encoded event details.\n     *\n     * @generated from protobuf field: concordium.v2.plt.CBor details = 2;\n     */\n    details?: CBor;\n}\n/**\n * A token holder is an entity that can hold tokens. Currently, this is limited\n * to accounts, but in the future it may be extended to other entities.\n *\n * @generated from protobuf message concordium.v2.plt.TokenHolder\n */\nexport interface TokenHolder {\n    /**\n     * @generated from protobuf oneof: address\n     */\n    address: {\n        oneofKind: \"account\";\n        /**\n         * The account address of the holder.\n         *\n         * @generated from protobuf field: concordium.v2.AccountAddress account = 1;\n         */\n        account: AccountAddress;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * An event emitted when a transfer of tokens from `from` to `to` is performed.\n *\n * @generated from protobuf message concordium.v2.plt.TokenTransferEvent\n */\nexport interface TokenTransferEvent {\n    /**\n     * The token holder from which the tokens are transferred.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenHolder from = 1;\n     */\n    from?: TokenHolder;\n    /**\n     * The token holder to which the tokens are transferred.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenHolder to = 2;\n     */\n    to?: TokenHolder;\n    /**\n     * The amount of tokens transferred.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenAmount amount = 3;\n     */\n    amount?: TokenAmount;\n    /**\n     * An optional memo field that can be used to attach a message to the token\n     * transfer.\n     *\n     * @generated from protobuf field: optional concordium.v2.Memo memo = 4;\n     */\n    memo?: Memo;\n}\n/**\n * An event emitted when the token supply is updated, i.e. by minting/burning\n * tokens to/from the balance of the `target`.\n *\n * @generated from protobuf message concordium.v2.plt.TokenSupplyUpdateEvent\n */\nexport interface TokenSupplyUpdateEvent {\n    /**\n     * The token holder the balance update is performed on.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenHolder target = 1;\n     */\n    target?: TokenHolder;\n    /**\n     * The balance difference to be applied to the target.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenAmount amount = 2;\n     */\n    amount?: TokenAmount;\n}\n/**\n * Token event originating from token transactions.\n *\n * @generated from protobuf message concordium.v2.plt.TokenEvent\n */\nexport interface TokenEvent {\n    /**\n     * The unique token symbol.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenId token_id = 1;\n     */\n    tokenId?: TokenId;\n    /**\n     * @generated from protobuf oneof: event\n     */\n    event: {\n        oneofKind: \"moduleEvent\";\n        /**\n         * An event emitted by the token module.\n         *\n         * @generated from protobuf field: concordium.v2.plt.TokenModuleEvent module_event = 2;\n         */\n        moduleEvent: TokenModuleEvent;\n    } | {\n        oneofKind: \"transferEvent\";\n        /**\n         * An event emitted when a transfer of tokens is performed.\n         *\n         * @generated from protobuf field: concordium.v2.plt.TokenTransferEvent transfer_event = 3;\n         */\n        transferEvent: TokenTransferEvent;\n    } | {\n        oneofKind: \"mintEvent\";\n        /**\n         * An event emitted when the token supply is updated by minting tokens to a\n         * token holder.\n         *\n         * @generated from protobuf field: concordium.v2.plt.TokenSupplyUpdateEvent mint_event = 4;\n         */\n        mintEvent: TokenSupplyUpdateEvent;\n    } | {\n        oneofKind: \"burnEvent\";\n        /**\n         * An event emitted when the token supply is updated by burning tokens from\n         * the balance of a token holder.\n         *\n         * @generated from protobuf field: concordium.v2.plt.TokenSupplyUpdateEvent burn_event = 5;\n         */\n        burnEvent: TokenSupplyUpdateEvent;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Token events originating from token transactions.\n *\n * @generated from protobuf message concordium.v2.plt.TokenEffect\n */\nexport interface TokenEffect {\n    /**\n     * Events emitted by the token.\n     *\n     * @generated from protobuf field: repeated concordium.v2.plt.TokenEvent events = 1;\n     */\n    events: TokenEvent[];\n}\n/**\n * Details provided by the token module in the event of rejecting a transaction.\n *\n * @generated from protobuf message concordium.v2.plt.TokenModuleRejectReason\n */\nexport interface TokenModuleRejectReason {\n    /**\n     * The identifier of the protocol-level token.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenId token_id = 1;\n     */\n    tokenId?: TokenId;\n    /**\n     * The type of the reject reason.\n     *\n     * @generated from protobuf field: string type = 2;\n     */\n    type: string;\n    /**\n     * (Optional) CBOR-encoded details.\n     *\n     * @generated from protobuf field: optional concordium.v2.plt.CBor details = 3;\n     */\n    details?: CBor;\n}\n/**\n * Update payload for creating a new protocol-level token\n *\n * @generated from protobuf message concordium.v2.plt.CreatePLT\n */\nexport interface CreatePLT {\n    /**\n     * The identifier of the protocol-level token.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenId token_id = 1;\n     */\n    tokenId?: TokenId;\n    /**\n     * The hash that identifies the token module implementation.\n     *\n     * @generated from protobuf field: concordium.v2.plt.TokenModuleRef token_module = 2;\n     */\n    tokenModule?: TokenModuleRef;\n    /**\n     * The number of decimal places used in the representation of amounts of this\n     * token. This determines the smallest representable fraction of the token.\n     * This can be at most 255.\n     *\n     * @generated from protobuf field: uint32 decimals = 4;\n     */\n    decimals: number;\n    /**\n     * The initialization parameters of the token, encoded in CBOR.\n     *\n     * @generated from protobuf field: concordium.v2.plt.CBor initialization_parameters = 5;\n     */\n    initializationParameters?: CBor;\n}\n/**\n * Details about the creation of a protocol-level token.\n *\n * @generated from protobuf message concordium.v2.plt.TokenCreationDetails\n */\nexport interface TokenCreationDetails {\n    /**\n     * The update payload used to create the token.\n     *\n     * @generated from protobuf field: concordium.v2.plt.CreatePLT create_plt = 1;\n     */\n    createPlt?: CreatePLT;\n    /**\n     * The events generated by the token module during the creation of the token.\n     *\n     * @generated from protobuf field: repeated concordium.v2.plt.TokenEvent events = 2;\n     */\n    events: TokenEvent[];\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass CBor$Type extends MessageType<CBor> {\n    constructor() {\n        super(\"concordium.v2.plt.CBor\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.CBor\n */\nexport const CBor = new CBor$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenId$Type extends MessageType<TokenId> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenId\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenId\n */\nexport const TokenId = new TokenId$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenModuleRef$Type extends MessageType<TokenModuleRef> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenModuleRef\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenModuleRef\n */\nexport const TokenModuleRef = new TokenModuleRef$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenAmount$Type extends MessageType<TokenAmount> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenAmount\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"decimals\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenAmount\n */\nexport const TokenAmount = new TokenAmount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenState$Type extends MessageType<TokenState> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenState\", [\n            { no: 1, name: \"token_module_ref\", kind: \"message\", T: () => TokenModuleRef },\n            { no: 3, name: \"decimals\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 4, name: \"total_supply\", kind: \"message\", T: () => TokenAmount },\n            { no: 5, name: \"module_state\", kind: \"message\", T: () => CBor }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenState\n */\nexport const TokenState = new TokenState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenAccountState$Type extends MessageType<TokenAccountState> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenAccountState\", [\n            { no: 1, name: \"balance\", kind: \"message\", T: () => TokenAmount },\n            { no: 4, name: \"module_state\", kind: \"message\", T: () => CBor }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenAccountState\n */\nexport const TokenAccountState = new TokenAccountState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenModuleEvent$Type extends MessageType<TokenModuleEvent> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenModuleEvent\", [\n            { no: 1, name: \"type\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"details\", kind: \"message\", T: () => CBor }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenModuleEvent\n */\nexport const TokenModuleEvent = new TokenModuleEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenHolder$Type extends MessageType<TokenHolder> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenHolder\", [\n            { no: 1, name: \"account\", kind: \"message\", oneof: \"address\", T: () => AccountAddress }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenHolder\n */\nexport const TokenHolder = new TokenHolder$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenTransferEvent$Type extends MessageType<TokenTransferEvent> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenTransferEvent\", [\n            { no: 1, name: \"from\", kind: \"message\", T: () => TokenHolder },\n            { no: 2, name: \"to\", kind: \"message\", T: () => TokenHolder },\n            { no: 3, name: \"amount\", kind: \"message\", T: () => TokenAmount },\n            { no: 4, name: \"memo\", kind: \"message\", T: () => Memo }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenTransferEvent\n */\nexport const TokenTransferEvent = new TokenTransferEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenSupplyUpdateEvent$Type extends MessageType<TokenSupplyUpdateEvent> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenSupplyUpdateEvent\", [\n            { no: 1, name: \"target\", kind: \"message\", T: () => TokenHolder },\n            { no: 2, name: \"amount\", kind: \"message\", T: () => TokenAmount }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenSupplyUpdateEvent\n */\nexport const TokenSupplyUpdateEvent = new TokenSupplyUpdateEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenEvent$Type extends MessageType<TokenEvent> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenEvent\", [\n            { no: 1, name: \"token_id\", kind: \"message\", T: () => TokenId },\n            { no: 2, name: \"module_event\", kind: \"message\", oneof: \"event\", T: () => TokenModuleEvent },\n            { no: 3, name: \"transfer_event\", kind: \"message\", oneof: \"event\", T: () => TokenTransferEvent },\n            { no: 4, name: \"mint_event\", kind: \"message\", oneof: \"event\", T: () => TokenSupplyUpdateEvent },\n            { no: 5, name: \"burn_event\", kind: \"message\", oneof: \"event\", T: () => TokenSupplyUpdateEvent }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenEvent\n */\nexport const TokenEvent = new TokenEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenEffect$Type extends MessageType<TokenEffect> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenEffect\", [\n            { no: 1, name: \"events\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TokenEvent }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenEffect\n */\nexport const TokenEffect = new TokenEffect$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenModuleRejectReason$Type extends MessageType<TokenModuleRejectReason> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenModuleRejectReason\", [\n            { no: 1, name: \"token_id\", kind: \"message\", T: () => TokenId },\n            { no: 2, name: \"type\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"details\", kind: \"message\", T: () => CBor }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenModuleRejectReason\n */\nexport const TokenModuleRejectReason = new TokenModuleRejectReason$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CreatePLT$Type extends MessageType<CreatePLT> {\n    constructor() {\n        super(\"concordium.v2.plt.CreatePLT\", [\n            { no: 1, name: \"token_id\", kind: \"message\", T: () => TokenId },\n            { no: 2, name: \"token_module\", kind: \"message\", T: () => TokenModuleRef },\n            { no: 4, name: \"decimals\", kind: \"scalar\", T: 13 /*ScalarType.UINT32*/ },\n            { no: 5, name: \"initialization_parameters\", kind: \"message\", T: () => CBor }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.CreatePLT\n */\nexport const CreatePLT = new CreatePLT$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TokenCreationDetails$Type extends MessageType<TokenCreationDetails> {\n    constructor() {\n        super(\"concordium.v2.plt.TokenCreationDetails\", [\n            { no: 1, name: \"create_plt\", kind: \"message\", T: () => CreatePLT },\n            { no: 2, name: \"events\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TokenEvent }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.plt.TokenCreationDetails\n */\nexport const TokenCreationDetails = new TokenCreationDetails$Type();\n","import * as wasm from '@concordium/rust-bindings/wallet';\n\nimport type { IdProofInput, IdProofOutput } from '../id/index.js';\nimport type {\n    ArInfo,\n    CryptographicParameters,\n    IdObjectRequestV1,\n    IdRecoveryRequest,\n    IpInfo,\n    Network,\n    Versioned,\n} from '../types.js';\nimport { ConcordiumHdWallet } from './HdWallet.js';\n\ninterface IdentityRequestInputCommon {\n    ipInfo: IpInfo;\n    globalContext: CryptographicParameters;\n    arsInfos: Record<string, ArInfo>;\n    arThreshold: number;\n}\n\n/**\n * The input parameter for creating an identity object request where\n * the secret keys are derived from the provided seed.\n */\nexport type IdentityRequestInput = IdentityRequestInputCommon & {\n    seed: string;\n    net: Network;\n    identityIndex: number;\n};\n\n/**\n * The input parameter for creating an identity object request where\n * the secret keys and randomness are provided directly.\n */\nexport type IdentityRequestWithKeysInput = IdentityRequestInputCommon & {\n    prfKey: string;\n    idCredSec: string;\n    blindingRandomness: string;\n};\n\n/**\n * Creates a V1 identity request by providing the secret keys directly.\n * This allows for the generation of the keys separately from creating\n * the request.\n */\nexport function createIdentityRequestWithKeys(input: IdentityRequestWithKeysInput): Versioned<IdObjectRequestV1> {\n    const rawRequest = wasm.createIdRequestV1(JSON.stringify(input));\n    try {\n        return JSON.parse(rawRequest).idObjectRequest;\n    } catch (e) {\n        throw new Error(rawRequest);\n    }\n}\n\n/**\n * Creates a V1 identity request from a seed. This will derive the corresponding\n * keys based on the provided identity index, identity provider index and seed.\n * The identity provider index is extracted from the provided IpInfo.\n */\nexport function createIdentityRequest(input: IdentityRequestInput): Versioned<IdObjectRequestV1> {\n    const wallet = ConcordiumHdWallet.fromHex(input.seed, input.net);\n    const identityProviderIndex = input.ipInfo.ipIdentity;\n    const identityIndex = input.identityIndex;\n    const idCredSec = wallet.getIdCredSec(identityProviderIndex, identityIndex).toString('hex');\n    const prfKey = wallet.getPrfKey(identityProviderIndex, identityIndex).toString('hex');\n    const blindingRandomness = wallet\n        .getSignatureBlindingRandomness(identityProviderIndex, identityIndex)\n        .toString('hex');\n\n    const inputWithKeys: IdentityRequestWithKeysInput = {\n        arsInfos: input.arsInfos,\n        arThreshold: input.arThreshold,\n        globalContext: input.globalContext,\n        ipInfo: input.ipInfo,\n        idCredSec,\n        prfKey,\n        blindingRandomness,\n    };\n\n    return createIdentityRequestWithKeys(inputWithKeys);\n}\n\ntype IdentityRecoveryRequestInputCommon = {\n    ipInfo: IpInfo;\n    globalContext: CryptographicParameters;\n    timestamp: number;\n};\n\n/**\n * The input parameter for creating an identity recovery request where\n * the secret keys are derived from the provided seed.\n */\nexport type IdentityRecoveryRequestInput = IdentityRecoveryRequestInputCommon & {\n    seedAsHex: string;\n    net: Network;\n    identityIndex: number;\n};\n\n/**\n * The input parameter for creating an identity recovery request where\n * the secret keys and randomness are provided directly.\n */\nexport type IdentityRecoveryRequestWithKeysInput = IdentityRecoveryRequestInputCommon & {\n    idCredSec: string;\n};\n\n/**\n * Creates an identity recovery request from a seed. This will derive the\n * corresponding keys based on the provided identity index, identity provider index\n * and seed. The identity provider index is extracted from the provided IpInfo.\n */\nexport function createIdentityRecoveryRequest(input: IdentityRecoveryRequestInput): Versioned<IdRecoveryRequest> {\n    const wallet = ConcordiumHdWallet.fromHex(input.seedAsHex, input.net);\n    const idCredSec = wallet.getIdCredSec(input.ipInfo.ipIdentity, input.identityIndex).toString('hex');\n\n    const inputWithKeys: IdentityRecoveryRequestWithKeysInput = {\n        globalContext: input.globalContext,\n        ipInfo: input.ipInfo,\n        timestamp: input.timestamp,\n        idCredSec,\n    };\n\n    return createIdentityRecoveryRequestWithKeys(inputWithKeys);\n}\n\n/**\n * Creates an indentity recovery request by providing the secret key directly.\n * This allows for the generation of the keys separately from creating\n * the request.\n */\nexport function createIdentityRecoveryRequestWithKeys(\n    input: IdentityRecoveryRequestWithKeysInput\n): Versioned<IdRecoveryRequest> {\n    const rawRequest = wasm.createIdentityRecoveryRequest(JSON.stringify(input));\n    try {\n        return JSON.parse(rawRequest).idRecoveryRequest;\n    } catch (e) {\n        throw new Error(rawRequest);\n    }\n}\n\n/**\n * Given a statement about an identity and the inputs necessary to prove the statement, produces a proof that the associated identity fulfills the statement.\n */\nexport function getIdProof(input: IdProofInput): IdProofOutput {\n    const rawRequest = wasm.createIdProof(JSON.stringify(input));\n    let out: IdProofOutput;\n    try {\n        out = JSON.parse(rawRequest);\n    } catch (e) {\n        throw new Error(rawRequest);\n    }\n    return out;\n}\n","import * as wasm from '@concordium/rust-bindings/wallet';\nimport { Buffer } from 'buffer/index.js';\nimport JSONbig from 'json-bigint';\n\nimport type { CredentialDeploymentDetails, CredentialDeploymentPayload } from '../types.js';\n\ninterface DeploymentDetailsResult {\n    credInfo: string;\n    serializedTransaction: string;\n    transactionHash: string;\n}\n\n/**\n * Gets the transaction hash that is used to look up the status of a credential\n * deployment transaction.\n * @param credentialDeployment the transaction to hash\n * @param signatures the signatures that will also be part of the hash\n * @returns the sha256 hash of the serialized block item kind, signatures, and credential deployment transaction\n */\nexport function getCredentialDeploymentTransactionHash(\n    credentialDeployment: CredentialDeploymentDetails,\n    signatures: string[]\n): string {\n    const credentialDeploymentInfo: DeploymentDetailsResult = JSON.parse(\n        wasm.getDeploymentDetails(\n            signatures,\n            JSONbig.stringify(credentialDeployment.unsignedCdi),\n            credentialDeployment.expiry.expiryEpochSeconds\n        )\n    );\n    return credentialDeploymentInfo.transactionHash;\n}\n\n/**\n * Serializes a credential deployment transaction of a new account, so that it is ready for being\n * submitted to the node.\n * @param credentialDeployment the credenetial deployment transaction\n * @param signatures the signatures on the hash of unsigned credential deployment information\n * @returns the serialization of the credential deployment transaction ready for being submitted to a node\n */\nexport function serializeCredentialDeploymentTransactionForSubmission(\n    credentialDeployment: CredentialDeploymentDetails,\n    signatures: string[]\n): Buffer {\n    const credentialDeploymentInfo: DeploymentDetailsResult = JSON.parse(\n        wasm.getDeploymentDetails(\n            signatures,\n            JSONbig.stringify(credentialDeployment.unsignedCdi),\n            credentialDeployment.expiry.expiryEpochSeconds\n        )\n    );\n    return Buffer.from(credentialDeploymentInfo.serializedTransaction, 'hex');\n}\n\nexport function serializeCredentialDeploymentPayload(\n    signatures: string[],\n    credentialDeploymentTransaction: CredentialDeploymentPayload\n): Buffer {\n    const payloadByteArray = wasm.serializeCredentialDeploymentPayload(\n        signatures,\n        JSONbig.stringify(credentialDeploymentTransaction.unsignedCdi)\n    );\n    return Buffer.from(payloadByteArray);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\nexports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","export {\n    Type,\n    JSON,\n    fromJSON,\n    fromBuffer,\n    toBuffer,\n    toHexString,\n    fromHexString,\n    instanceOf,\n    encode,\n    decode,\n} from '../../plt/Cbor.js';\n","import * as wasm from '@concordium/rust-bindings/wallet';\nimport { mnemonicToSeedSync, validateMnemonic } from '@scure/bip39';\nimport { wordlist } from '@scure/bip39/wordlists/english';\nimport { Buffer } from 'buffer/index.js';\n\nimport { AttributesKeys, CryptographicParameters, Network } from '../types.js';\nimport type * as ContractAddress from '../types/ContractAddress.js';\nimport { isHex } from '../util.js';\n\n/**\n * Class for Hierarchical Deterministic key derivation for Concordium identities and accounts.\n */\nexport class ConcordiumHdWallet {\n    static fromSeedPhrase(seedPhrase: string, network: Network): ConcordiumHdWallet {\n        if (!validateMnemonic(seedPhrase, wordlist)) {\n            throw new Error('Invalid seed phrase.');\n        }\n        const seedAsHex = Buffer.from(mnemonicToSeedSync(seedPhrase)).toString('hex');\n        return new ConcordiumHdWallet(seedAsHex, network);\n    }\n\n    static fromHex(seedAsHex: string, network: Network): ConcordiumHdWallet {\n        if (seedAsHex.length !== 128) {\n            throw new Error('The provided seed ' + seedAsHex + ' is invalid as its length was not 128');\n        }\n        if (!isHex(seedAsHex)) {\n            throw new Error('The provided seed ' + seedAsHex + ' does not represent a hexidecimal value');\n        }\n        return new ConcordiumHdWallet(seedAsHex, network);\n    }\n    private constructor(\n        private seedAsHex: string,\n        private network: Network\n    ) {}\n\n    getAccountSigningKey(identityProviderIndex: number, identityIndex: number, credentialCounter: number): Buffer {\n        return Buffer.from(\n            wasm.getAccountSigningKey(\n                this.seedAsHex,\n                this.network,\n                identityProviderIndex,\n                identityIndex,\n                credentialCounter\n            ),\n            'hex'\n        );\n    }\n    getAccountPublicKey(identityProviderIndex: number, identityIndex: number, credentialCounter: number): Buffer {\n        return Buffer.from(\n            wasm.getAccountPublicKey(\n                this.seedAsHex,\n                this.network,\n                identityProviderIndex,\n                identityIndex,\n                credentialCounter\n            ),\n            'hex'\n        );\n    }\n\n    getCredentialId(\n        identityProviderIndex: number,\n        identityIndex: number,\n        credentialCounter: number,\n        { onChainCommitmentKey }: Pick<CryptographicParameters, 'onChainCommitmentKey'>\n    ): Buffer {\n        return Buffer.from(\n            wasm.getCredentialId(\n                this.seedAsHex,\n                this.network,\n                identityProviderIndex,\n                identityIndex,\n                credentialCounter,\n                onChainCommitmentKey\n            ),\n            'hex'\n        );\n    }\n\n    getPrfKey(identityProviderIndex: number, identityIndex: number): Buffer {\n        return Buffer.from(wasm.getPrfKey(this.seedAsHex, this.network, identityProviderIndex, identityIndex), 'hex');\n    }\n\n    getIdCredSec(identityProviderIndex: number, identityIndex: number): Buffer {\n        return Buffer.from(\n            wasm.getIdCredSec(this.seedAsHex, this.network, identityProviderIndex, identityIndex),\n            'hex'\n        );\n    }\n\n    getSignatureBlindingRandomness(identityProviderIndex: number, identityIndex: number): Buffer {\n        return Buffer.from(\n            wasm.getSignatureBlindingRandomness(this.seedAsHex, this.network, identityProviderIndex, identityIndex),\n            'hex'\n        );\n    }\n    getAttributeCommitmentRandomness(\n        identityProviderIndex: number,\n        identityIndex: number,\n        credentialCounter: number,\n        attribute: AttributesKeys\n    ): Buffer {\n        return Buffer.from(\n            wasm.getAttributeCommitmentRandomness(\n                this.seedAsHex,\n                this.network,\n                identityProviderIndex,\n                identityIndex,\n                credentialCounter,\n                attribute\n            ),\n            'hex'\n        );\n    }\n\n    getVerifiableCredentialSigningKey(issuer: ContractAddress.Type, verifiableCredentialIndex: number): Buffer {\n        return Buffer.from(\n            wasm.getVerifiableCredentialSigningKey(\n                this.seedAsHex,\n                this.network,\n                issuer.index,\n                issuer.subindex,\n                verifiableCredentialIndex\n            ),\n            'hex'\n        );\n    }\n\n    getVerifiableCredentialPublicKey(issuer: ContractAddress.Type, verifiableCredentialIndex: number): Buffer {\n        return Buffer.from(\n            wasm.getVerifiableCredentialPublicKey(\n                this.seedAsHex,\n                this.network,\n                issuer.index,\n                issuer.subindex,\n                verifiableCredentialIndex\n            ),\n            'hex'\n        );\n    }\n\n    getVerifiableCredentialBackupEncryptionKey(): Buffer {\n        return Buffer.from(wasm.getVerifiableCredentialBackupEncryptionKey(this.seedAsHex, this.network), 'hex');\n    }\n}\n","import { mergeBinaryOptions, mergeJsonOptions } from \"@protobuf-ts/runtime\";\n/**\n * Merges custom RPC options with defaults. Returns a new instance and keeps\n * the \"defaults\" and the \"options\" unmodified.\n *\n * Merges `RpcMetadata` \"meta\", overwriting values from \"defaults\" with\n * values from \"options\". Does not append values to existing entries.\n *\n * Merges \"jsonOptions\", including \"jsonOptions.typeRegistry\", by creating\n * a new array that contains types from \"options.jsonOptions.typeRegistry\"\n * first, then types from \"defaults.jsonOptions.typeRegistry\".\n *\n * Merges \"binaryOptions\".\n *\n * Merges \"interceptors\" by creating a new array that contains interceptors\n * from \"defaults\" first, then interceptors from \"options\".\n *\n * Works with objects that extend `RpcOptions`, but only if the added\n * properties are of type Date, primitive like string, boolean, or Array\n * of primitives. If you have other property types, you have to merge them\n * yourself.\n */\nexport function mergeRpcOptions(defaults, options) {\n    if (!options)\n        return defaults;\n    let o = {};\n    copy(defaults, o);\n    copy(options, o);\n    for (let key of Object.keys(options)) {\n        let val = options[key];\n        switch (key) {\n            case \"jsonOptions\":\n                o.jsonOptions = mergeJsonOptions(defaults.jsonOptions, o.jsonOptions);\n                break;\n            case \"binaryOptions\":\n                o.binaryOptions = mergeBinaryOptions(defaults.binaryOptions, o.binaryOptions);\n                break;\n            case \"meta\":\n                o.meta = {};\n                copy(defaults.meta, o.meta);\n                copy(options.meta, o.meta);\n                break;\n            case \"interceptors\":\n                o.interceptors = defaults.interceptors ? defaults.interceptors.concat(val) : val.concat();\n                break;\n        }\n    }\n    return o;\n}\nfunction copy(a, into) {\n    if (!a)\n        return;\n    let c = into;\n    for (let [k, v] of Object.entries(a)) {\n        if (v instanceof Date)\n            c[k] = new Date(v.getTime());\n        else if (Array.isArray(v))\n            c[k] = v.concat();\n        else\n            c[k] = v;\n    }\n}\n","export interface StatementBuilder<ValueType, AttributeType> {\n    addRange(attribute: AttributeType, lower: ValueType, upper: ValueType): this;\n\n    addMembership(attribute: AttributeType, set: ValueType[]): this;\n\n    addNonMembership(attribute: AttributeType, set: ValueType[]): this;\n    revealAttribute(attribute: AttributeType): this;\n    getStatement(): GenericAtomicStatement<AttributeType, ValueType>[];\n}\n\nexport const MIN_DATE = '18000101';\nexport const MAX_DATE = '99990101';\nexport const EU_MEMBERS = [\n    'AT',\n    'BE',\n    'BG',\n    'CY',\n    'CZ',\n    'DK',\n    'EE',\n    'FI',\n    'FR',\n    'DE',\n    'GR',\n    'HU',\n    'IE',\n    'IT',\n    'LV',\n    'LT',\n    'LU',\n    'MT',\n    'NL',\n    'PL',\n    'PT',\n    'RO',\n    'SK',\n    'SI',\n    'ES',\n    'SE',\n    'HR',\n];\n\nexport enum StatementTypes {\n    RevealAttribute = 'RevealAttribute',\n    AttributeInSet = 'AttributeInSet',\n    AttributeNotInSet = 'AttributeNotInSet',\n    AttributeInRange = 'AttributeInRange',\n}\n\ntype LaxStringEnum<E extends string> = `${E}`;\n\nexport type GenericRevealStatement<TagType> = {\n    type: LaxStringEnum<StatementTypes.RevealAttribute>;\n    attributeTag: TagType;\n};\n\nexport type GenericMembershipStatement<TagType, ValueType> = {\n    type: LaxStringEnum<StatementTypes.AttributeInSet>;\n    attributeTag: TagType;\n    set: ValueType[];\n};\n\nexport type GenericNonMembershipStatement<TagType, ValueType> = {\n    type: LaxStringEnum<StatementTypes.AttributeNotInSet>;\n    attributeTag: TagType;\n    set: ValueType[];\n};\n\nexport type GenericRangeStatement<TagType, ValueType> = {\n    type: LaxStringEnum<StatementTypes.AttributeInRange>;\n    attributeTag: TagType;\n    lower: ValueType;\n    upper: ValueType;\n};\n\nexport type GenericAtomicStatement<TagType, ValueType> =\n    | GenericRevealStatement<TagType>\n    | GenericMembershipStatement<TagType, ValueType>\n    | GenericNonMembershipStatement<TagType, ValueType>\n    | GenericRangeStatement<TagType, ValueType>;\n\nexport type RevealProof<ValueType> = {\n    type: StatementTypes.RevealAttribute;\n    proof: string;\n    attribute: ValueType;\n};\n\n// Type for proofs that do not have additional fields\nexport type GenericAtomicProof = {\n    type: Exclude<StatementTypes, StatementTypes.RevealAttribute>;\n    proof: string;\n};\n\nexport type AtomicProof<ValueType> = RevealProof<ValueType> | GenericAtomicProof;\n","import { CIS4 } from '../cis4/util.js';\nimport {\n    GenericAtomicStatement,\n    GenericMembershipStatement,\n    GenericNonMembershipStatement,\n    GenericRangeStatement,\n    GenericRevealStatement,\n} from '../commonProofTypes.js';\nimport type { AttributeKey, CryptographicParameters, HexString } from '../types.js';\nimport type * as ContractAddress from '../types/ContractAddress.js';\n\nexport type TimestampAttribute = {\n    type: 'date-time';\n    timestamp: string;\n};\nexport type AttributeType = string | bigint | TimestampAttribute;\nexport type StatementAttributeType = AttributeType | Date;\n\nexport function isTimestampAttribute(attribute: AttributeType): attribute is TimestampAttribute {\n    return (\n        (attribute as TimestampAttribute).type === 'date-time' &&\n        typeof (attribute as TimestampAttribute).timestamp === 'string'\n    );\n}\n\nexport type AccountCommitmentInput = {\n    type: 'account';\n    issuer: number;\n    values: Record<string, string>;\n    randomness: Record<string, string>;\n};\n\nexport type Web3IssuerCommitmentInput = {\n    type: 'web3Issuer';\n    signature: string;\n    signer: string;\n    values: Record<string, AttributeType>;\n    randomness: Record<string, string>;\n};\n\nexport type CommitmentInput = AccountCommitmentInput | Web3IssuerCommitmentInput;\n\nexport type Web3IdProofRequest = {\n    challenge: string;\n    credentialStatements: RequestStatement[];\n};\n\nexport type Web3IdProofInput = {\n    request: Web3IdProofRequest;\n    globalContext: CryptographicParameters;\n    commitmentInputs: CommitmentInput[];\n};\n\nexport type TimestampProperty = {\n    title: string;\n    type: 'object';\n    properties: {\n        type: {\n            type: 'string';\n            const: 'date-time';\n        };\n        timestamp: {\n            type: 'string';\n            format?: 'date-time';\n        };\n    };\n    required: ['type', 'timestamp'];\n    description?: string;\n};\n\nexport type SimpleProperty = {\n    title: string;\n    description?: string;\n    type: 'string' | 'integer';\n    format?: string;\n};\n\nexport type CredentialSchemaProperty = SimpleProperty | TimestampProperty;\n\ntype IdDetails = {\n    title: string;\n    description?: string;\n    type: 'string';\n};\n\ntype CredentialSchemaAttributes = {\n    title?: string;\n    description?: string;\n    type: 'object';\n    properties: Record<string, CredentialSchemaProperty | TimestampProperty>;\n    required: string[];\n};\n\nexport type CredentialSchemaSubject = {\n    type: 'object';\n    properties: {\n        id: IdDetails;\n        attributes: CredentialSchemaAttributes;\n    };\n    required: string[];\n};\n\nexport const IDENTITY_SUBJECT_SCHEMA: CredentialSchemaSubject = {\n    type: 'object',\n    properties: {\n        id: {\n            title: 'id',\n            type: 'string',\n            description: 'Credential subject identifier',\n        },\n        attributes: {\n            type: 'object',\n            properties: {\n                firstName: {\n                    title: 'First name',\n                    type: 'string',\n                },\n                lastName: {\n                    title: 'Last name',\n                    type: 'string',\n                },\n                sex: {\n                    title: 'Sex',\n                    type: 'string',\n                },\n                dob: {\n                    title: 'Date of birth',\n                    type: 'string',\n                },\n                countryOfResidence: {\n                    title: 'Country of residence',\n                    type: 'string',\n                },\n                nationality: {\n                    title: 'Nationality',\n                    type: 'string',\n                },\n                idDocType: {\n                    title: 'ID Document Type',\n                    type: 'string',\n                },\n                idDocNo: {\n                    title: 'ID Document Number',\n                    type: 'string',\n                },\n                idDocIssuer: {\n                    title: 'ID Document Issuer',\n                    type: 'string',\n                },\n                idDocIssuedAt: {\n                    title: 'ID Document Issued At',\n                    type: 'string',\n                },\n                idDocExpiresAt: {\n                    title: 'ID Document Expires At',\n                    type: 'string',\n                },\n                nationalIdNo: {\n                    title: 'National ID Number',\n                    type: 'string',\n                },\n                taxIdNo: {\n                    title: 'Tax ID Number',\n                    type: 'string',\n                },\n                lei: {\n                    title: 'Legal Entity Identifier (LEI)',\n                    type: 'string',\n                },\n                legalName: {\n                    title: 'Legal Name',\n                    type: 'string',\n                },\n                legalCountry: {\n                    title: 'Legal Country',\n                    type: 'string',\n                },\n                businessNumber: {\n                    title: 'Business Number',\n                    type: 'string',\n                },\n                registrationAuth: {\n                    title: 'Registration Authority',\n                    type: 'string',\n                },\n            },\n            required: [],\n        },\n    },\n    required: [],\n};\n\nexport type RangeStatementV2 = GenericRangeStatement<string, AttributeType>;\nexport type NonMembershipStatementV2 = GenericNonMembershipStatement<string, AttributeType>;\nexport type MembershipStatementV2 = GenericMembershipStatement<string, AttributeType>;\nexport type RevealStatementV2 = GenericRevealStatement<string>;\n\nexport type AtomicStatementV2 = GenericAtomicStatement<string, AttributeType>;\n\nexport type VerifiableCredentialQualifier = {\n    type: 'sci';\n    issuers: ContractAddress.Type[];\n};\n\ntype IdentityProviderIndex = number;\n\nexport type IdentityQualifier = {\n    type: 'cred';\n    issuers: IdentityProviderIndex[];\n};\n\nexport type StatementProverQualifier = VerifiableCredentialQualifier | IdentityQualifier;\n\nexport function isAccountCredentialStatement(statement: CredentialStatement): statement is AccountCredentialStatement {\n    return statement.idQualifier.type === 'cred';\n}\n\nexport function isVerifiableCredentialStatement(\n    statement: CredentialStatement\n): statement is VerifiableCredentialStatement {\n    return statement.idQualifier.type === 'sci';\n}\n\nexport interface AccountCredentialStatement extends CredentialStatement {\n    idQualifier: IdentityQualifier;\n    statement: AtomicStatementV2[];\n}\n\nexport interface VerifiableCredentialStatement extends CredentialStatement {\n    idQualifier: VerifiableCredentialQualifier;\n    statement: AtomicStatementV2[];\n}\n\nexport type CredentialStatement = {\n    idQualifier: StatementProverQualifier;\n    statement: AtomicStatementV2[];\n};\n\nexport type RequestStatement = {\n    id: string;\n    statement: AtomicStatementV2[];\n    /** The type field is present iff the request is for a verifiable credential */\n    type?: string[];\n};\n\nexport function isVerifiableCredentialRequestStatement(statement: RequestStatement): boolean {\n    return Boolean(statement.type);\n}\n\nexport type CredentialStatements = CredentialStatement[];\n\nexport type CredentialSubject = {\n    id: string;\n    attributes: Record<string, AttributeType>;\n};\n\n/** The credentials inputs required to verify the proof of account proofs */\nexport type CredentialsInputsAccount = {\n    /** Union tag */\n    type: 'account';\n    /** Commitments for the ID attributes of the account */\n    commitments: Partial<Record<AttributeKey, HexString>>;\n};\n\n/** The credentials inputs required to verify the proof of Web3 ID proofs */\nexport type CredentialsInputsWeb3 = {\n    /** Union tag */\n    type: 'web3';\n    /** The public key of the Web3 ID issuer */\n    issuerPk: HexString;\n};\n\n/** Union of the different inputs required to verify corresponding proofs */\nexport type CredentialsInputs = CredentialsInputsAccount | CredentialsInputsWeb3;\n\n/** Contains the credential status and inputs required to verify a corresponding credential proof */\nexport type CredentialWithMetadata = {\n    /** The credential status */\n    status: CIS4.CredentialStatus;\n    /** The public data required to verify a corresponding credential proof */\n    inputs: CredentialsInputs;\n};\n","import { Buffer } from 'buffer/index.js';\nimport { stringify } from 'json-bigint';\n\nimport { ConcordiumGRPCClient } from './grpc/GRPCClient.js';\nimport { AccountSigner, signTransaction } from './signHelpers.js';\nimport {\n    AccountTransactionType,\n    Base64String,\n    HexString,\n    InstanceInfo,\n    InvokeContractResult,\n    MakeOptional,\n    SmartContractTypeValues,\n    UpdateContractPayload,\n} from './types.js';\nimport * as AccountAddress from './types/AccountAddress.js';\nimport * as BlockHash from './types/BlockHash.js';\nimport * as CcdAmount from './types/CcdAmount.js';\nimport * as ContractAddress from './types/ContractAddress.js';\nimport * as ContractName from './types/ContractName.js';\nimport * as Energy from './types/Energy.js';\nimport * as EntrypointName from './types/EntrypointName.js';\nimport * as ModuleReference from './types/ModuleReference.js';\nimport * as Parameter from './types/Parameter.js';\nimport * as ReceiveName from './types/ReceiveName.js';\nimport * as ReturnValue from './types/ReturnValue.js';\nimport * as TransactionExpiry from './types/TransactionExpiry.js';\nimport * as TransactionHash from './types/TransactionHash.js';\n\n/**\n * Metadata necessary for smart contract transactions\n */\nexport type ContractTransactionMetadata = {\n    /** Amount to include in the transaction. Defaults to 0 */\n    amount?: CcdAmount.Type;\n    /** The sender address of the transaction */\n    senderAddress: AccountAddress.Type;\n    /** Expiry date of the transaction. Defaults to 5 minutes in the future */\n    expiry?: TransactionExpiry.Type;\n    /** Max energy to be used for the transaction */\n    energy: Energy.Type;\n};\n\n/**\n * Metadata necessary for invocating a smart contract.\n */\nexport type ContractInvokeMetadata = {\n    /** Amount to include in the transaction. Defaults to 0 */\n    amount?: CcdAmount.Type;\n    /**\n     * Invoker of the contract.\n     * If this is not supplied then the contract will be invoked by an account with address 0,\n     * no credentials and sufficient amount of CCD to cover the transfer amount.\n     * If given, the relevant address (either account or contract) must exist in the blockstate.\n     */\n    invoker?: ContractAddress.Type | AccountAddress.Type;\n    /** Max energy to be used for the transaction, if not provided the max energy is used. */\n    energy?: Energy.Type;\n};\n\n/**\n * Metadata necessary for creating a {@link UpdateTransaction}\n */\nexport type CreateContractTransactionMetadata = Pick<ContractTransactionMetadata, 'amount' | 'energy'>;\n\n/**\n * Holds either a contract module schema, or the schema for a single parameters of a contract entrypoint\n */\nexport type ContractSchema = {\n    /** Base64 encoded schema for the parameter type */\n    value: Base64String;\n    /** Type of the schema */\n    type: 'parameter' | 'module';\n};\n\n/**\n * An update transaction without header.\n */\nexport type ContractUpdateTransaction = {\n    /** The type of the transaction, which will always be of type {@link AccountTransactionType.Update} */\n    type: AccountTransactionType.Update;\n    /** The payload of the transaction, which will always be of type {@link UpdateContractPayload} */\n    payload: UpdateContractPayload;\n};\n\n/**\n * An update transaction without header, including schema information.\n * This is useful for sending through a wallet, which supplies the header information.\n *\n * @template J - The type of the parameter formatted as JSON compatible with the corresponding contract schema\n */\nexport type ContractUpdateTransactionWithSchema<J extends SmartContractTypeValues = SmartContractTypeValues> =\n    ContractUpdateTransaction & {\n        /** Parameter of the update */\n        parameter: {\n            /** Hex encoded parameter for the update */\n            hex: HexString;\n            /** JSON representation of the parameter to be used with the corresponding contract schema */\n            json: J;\n        };\n        /** The schema needed to serialize the parameter */\n        schema: ContractSchema;\n    };\n\n/**\n * Default expiry date used for contract update transactions.\n */\nexport function getContractUpdateDefaultExpiryDate(): TransactionExpiry.Type {\n    return TransactionExpiry.futureMinutes(5);\n}\n\n/**\n * Defines methods for performing dry-run invocations of updates on a Contract with entrypoints `E`\n *\n * @template E - union of entrypoints\n */\nexport class ContractDryRun<E extends string = string> {\n    constructor(\n        protected grpcClient: ConcordiumGRPCClient,\n        protected contractAddress: ContractAddress.Type,\n        protected contractName: ContractName.Type\n    ) {}\n\n    /**\n     * Performs a dry-run of a contract entrypoint invocation.\n     * Useful for getting an indication of the result of an invocation of the entrypoint (e.g. getting a cost estimate).\n     *\n     * @template T - The type of the input given\n     *\n     * @param {EntrypointName.Type} entrypoint - The name of the receive function to invoke.\n     * @param {ContractInvokeMetadata | ContractAddress | AccountAddress.Type} metaOrInvoker - Metadata for contract invocation of the address of the invoker.\n     * @param {Function} serializer - A function for serializing the input to bytes.\n     * @param {T} input - Input for for contract function.\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.\n     */\n    public invokeMethod<T>(\n        entrypoint: EntrypointName.Type<E>,\n        metaOrInvoker: ContractInvokeMetadata | ContractAddress.Type | AccountAddress.Type,\n        serializer: (input: T) => ArrayBuffer,\n        input: T,\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult> {\n        const parameter = Parameter.fromBuffer(serializer(input));\n        const meta =\n            AccountAddress.instanceOf(metaOrInvoker) || ContractAddress.instanceOf(metaOrInvoker)\n                ? { invoker: metaOrInvoker }\n                : metaOrInvoker;\n        return this.grpcClient.invokeContract(\n            {\n                ...meta,\n                contract: this.contractAddress,\n                parameter,\n                method: ReceiveName.create(this.contractName, entrypoint),\n            },\n            blockHash\n        );\n    }\n}\n\n/** Options for checking contract instance information on chain. */\nexport type ContractCheckOnChainOptions = {\n    /**\n     * Hash of the block to check the information at.\n     * When not provided the last finalized block is used.\n     */\n    blockHash?: BlockHash.Type;\n    /**\n     * The expected module reference to be used by the contract instance.\n     * When not provided no check is done against the module reference.\n     */\n    moduleReference?: ModuleReference.Type;\n};\n\n/**\n * Either a module schema, or a `Record` of parameter schemas per entrypoint `E`\n *\n * @template E - union of entrypoints\n */\nexport type Schema<E extends string = string> = Base64String | Record<E, Base64String>;\n\n/**\n * Base class for interacting with arbitrary contracts. Public version is {@link Contract}.\n *\n * @template E - union of update entrypoints\n * @template V - union of view entrypoints\n */\nclass ContractBase<E extends string = string, V extends string = string> {\n    /** The dry-run instance, accessible through {@link ContractBase.dryRun} */\n    protected dryRunInstance: ContractDryRun<E>;\n\n    constructor(\n        protected grpcClient: ConcordiumGRPCClient,\n        protected contractAddress: ContractAddress.Type,\n        protected contractName: ContractName.Type,\n        protected schema?: Schema<E>\n    ) {\n        this.dryRunInstance = new ContractDryRun(grpcClient, contractAddress, contractName);\n    }\n\n    /**\n     * Helper function for getting the {@link InstanceInfo} of a contract\n     *\n     * @param {ConcordiumGRPCClient} grpcClient - The GRPC client for accessing a node.\n     * @param {ContractAddress.Type} contractAddress - The address of the contract.\n     *\n     * @throws if the {@link InstanceInfo} of the contract could not be found.\n     *\n     * @returns {InstanceInfo} the instance info.\n     */\n    protected static async getInstanceInfo(\n        grpcClient: ConcordiumGRPCClient,\n        contractAddress: ContractAddress.Type\n    ): Promise<InstanceInfo> {\n        try {\n            return await grpcClient.getInstanceInfo(contractAddress);\n        } catch (e) {\n            throw new Error(\n                `Could not get contract instance info for contract at address ${ContractAddress.toString(\n                    contractAddress\n                )}: ${(e as Error).message ?? e}`\n            );\n        }\n    }\n\n    /**\n     * Helper function for getting the name of a contract\n     *\n     * @param {ConcordiumGRPCClient} grpcClient - The GRPC client for accessing a node.\n     * @param {ContractAddress.Type} contractAddress - The address of the contract.\n     *\n     * @throws if the {@link InstanceInfo} of the contract could not be found.\n     *\n     * @returns {ContractName.Type} the name of the contract.\n     */\n    protected static async getContractName(\n        grpcClient: ConcordiumGRPCClient,\n        contractAddress: ContractAddress.Type\n    ): Promise<ContractName.Type> {\n        const instanceInfo = await this.getInstanceInfo(grpcClient, contractAddress);\n        return ContractName.fromInitName(instanceInfo.name);\n    }\n\n    /**\n     * Get information on this smart contract instance.\n     *\n     * @param {BlockHash.Type} [blockHash] Hash of the block to check information at. When not provided the last finalized block is used.\n\n     * @throws if the {@link InstanceInfo} of the contract could not be found.\n\n     * @returns {InstanceInfo} The instance info.\n     */\n    public async getInstanceInfo(blockHash?: BlockHash.Type): Promise<InstanceInfo> {\n        return this.grpcClient.getInstanceInfo(this.contractAddress, blockHash);\n    }\n\n    /**\n     * Check if the smart contract instance exists on the blockchain and whether it uses a matching contract name.\n     * Optionally a module reference can be provided to check if the contract instance uses this module.\n     *\n     * @param {ContractCheckOnChainOptions} [options] Options for checking information on chain.\n     *\n     * @throws {RpcError} If failing to communicate with the concordium node or if the instance does not exist on chain or fails the checks.\n     */\n    public async checkOnChain(options: ContractCheckOnChainOptions = {}): Promise<void> {\n        const info = await this.getInstanceInfo(options.blockHash);\n        const contractNameOnChain = ContractName.fromInitName(info.name);\n\n        if (!ContractName.equals(contractNameOnChain, this.contractName)) {\n            throw new Error(\n                `Instance ${ContractAddress.toString(this.contractAddress)} has contract name '${\n                    contractNameOnChain.value\n                }' on chain. The client expected: '${this.contractName.value}'.`\n            );\n        }\n\n        if (\n            options.moduleReference !== undefined &&\n            info.sourceModule.moduleRef !== options.moduleReference.moduleRef\n        ) {\n            throw new Error(\n                `Instance ${ContractAddress.toString(this.contractAddress)} uses module with reference '${\n                    info.sourceModule.moduleRef\n                }' expected '${options.moduleReference.moduleRef}'`\n            );\n        }\n    }\n\n    /**\n     * A dry-run instance, providing access to methods for performing dry-run invocations of update instructions.\n     */\n    public get dryRun(): ContractDryRun<E> {\n        return this.dryRunInstance;\n    }\n\n    /**\n     * Creates a {@link ContractUpdateTransactionWithSchema} contract update transaction, holding the necessary parts to sign/submit to the chain.\n     *\n     * @template T - The type of the input\n     *\n     * @param {EntrypointName.Type} entrypoint - The name of the receive function to invoke.\n     * @param {Function} serializeInput - A function to serialize the `input` to bytes.\n     * @param {ContractTransactionMetadata} metadata - Metadata to be used for the transaction creation (with defaults).\n     * @param {T} input - Input for for contract function.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {ContractUpdateTransaction} Details necesary for submitting the contract update transaction.\n     */\n    public createUpdateTransaction<T>(\n        entrypoint: EntrypointName.Type<E>,\n        serializeInput: (input: T) => ArrayBuffer,\n        metadata: CreateContractTransactionMetadata,\n        input: T\n    ): ContractUpdateTransaction;\n\n    /**\n     * Creates a {@link ContractUpdateTransactionWithSchema} contract update transaction, holding the necessary parts to sign/submit to the chain.\n     *\n     * @template T - The type of the input\n     * @template J - The type of the input formatted as JSON compatible with the corresponding contract schema\n     *\n     * @param {EntrypointName.Type} entrypoint - The name of the receive function to invoke.\n     * @param {Function} serializeInput - A function to serialize the `input` to bytes.\n     * @param {ContractTransactionMetadata} metadata - Metadata to be used for the transaction creation (with defaults).\n     * @param {T} input - Input for for contract function.\n     * @param {Function} inputJsonFormatter - A function to format the `input` as JSON format serializable by the contract schema.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {ContractUpdateTransactionWithSchema} Details necessary for submitting the contract update transaction (with JSON to be serialized with corresponding schema)\n     */\n    public createUpdateTransaction<T, J extends SmartContractTypeValues>(\n        entrypoint: EntrypointName.Type<E>,\n        serializeInput: (input: T) => ArrayBuffer,\n        metadata: CreateContractTransactionMetadata,\n        input: T,\n        inputJsonFormatter: (input: T) => J\n    ): MakeOptional<ContractUpdateTransactionWithSchema<J>, 'schema'>;\n    public createUpdateTransaction<T, J extends SmartContractTypeValues>(\n        entrypoint: EntrypointName.Type<E>,\n        serializeInput: (input: T) => ArrayBuffer,\n        { amount = CcdAmount.zero(), energy }: CreateContractTransactionMetadata,\n        input: T,\n        inputJsonFormatter?: (input: T) => J\n    ): ContractUpdateTransaction | MakeOptional<ContractUpdateTransactionWithSchema<J>, 'schema'> {\n        const parameter = Parameter.fromBuffer(serializeInput(input));\n\n        const payload: UpdateContractPayload = {\n            amount,\n            address: this.contractAddress,\n            receiveName: ReceiveName.create(this.contractName, entrypoint),\n            maxContractExecutionEnergy: energy,\n            message: parameter,\n        };\n        const transaction: ContractUpdateTransaction = {\n            type: AccountTransactionType.Update,\n            payload,\n        };\n\n        if (inputJsonFormatter === undefined) {\n            return transaction;\n        }\n\n        const jsonParameter = inputJsonFormatter(input);\n\n        let schema: ContractSchema | undefined;\n        if (typeof this.schema === 'string') {\n            schema = {\n                value: this.schema,\n                type: 'module',\n            };\n        } else if (this.schema?.[EntrypointName.toString(entrypoint)] !== undefined) {\n            schema = {\n                value: this.schema[EntrypointName.toString(entrypoint)],\n                type: 'parameter',\n            };\n        }\n\n        return {\n            ...transaction,\n            parameter: {\n                hex: Parameter.toHexString(parameter),\n                json: jsonParameter,\n            },\n            schema,\n        };\n    }\n\n    /**\n     * Submits a {@link ContractUpdateTransaction} contract update transaction.\n     *\n     * @param {ContractUpdateTransaction} transactionBase - The details of the transaction to send.\n     * @param {ContractTransactionMetadata} metadata - Metadata to be used for the transaction (with defaults).\n     * @param {AccountSigner} signer - An object to use for signing the transaction.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {TransactionHash.Type} The transaction hash of the update transaction\n     */\n    protected async sendUpdateTransaction(\n        transactionBase: ContractUpdateTransaction,\n        { senderAddress, expiry = getContractUpdateDefaultExpiryDate() }: ContractTransactionMetadata,\n        signer: AccountSigner\n    ): Promise<TransactionHash.Type> {\n        const { nonce } = await this.grpcClient.getNextAccountNonce(senderAddress);\n        const header = {\n            expiry,\n            nonce: nonce,\n            sender: senderAddress,\n        };\n        const transaction = {\n            ...transactionBase,\n            header,\n        };\n        const signature = await signTransaction(transaction, signer);\n        return this.grpcClient.sendAccountTransaction(transaction, signature);\n    }\n\n    /**\n     * Creates and sends a contract update transaction with parameter `input` to `entrypoint`.\n     *\n     * @template T - The type of the input\n     *\n     * @param {EntrypointName.Type} entrypoint - The name of the receive function to invoke.\n     * @param {Function} serializeInput - A function to serialize the `input` to bytes.\n     * @param {CIS2.TransactionMetadata} metadata - Metadata to be used for the transaction (with defaults).\n     * @param {T} input - Input for for contract function.\n     * @param {AccountSigner} signer - An object to use for signing the transaction.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {TransactionHash.Type} The transaction hash of the update transaction\n     */\n    public async createAndSendUpdateTransaction<T>(\n        entrypoint: EntrypointName.Type<E>,\n        serializeInput: (input: T) => ArrayBuffer,\n        metadata: ContractTransactionMetadata,\n        input: T,\n        signer: AccountSigner\n    ): Promise<TransactionHash.Type> {\n        const transactionBase = this.createUpdateTransaction(entrypoint, serializeInput, metadata, input);\n        return this.sendUpdateTransaction(transactionBase, metadata, signer);\n    }\n\n    /**\n     * Invokes `entrypoint` view function on contract.\n     *\n     * @template T - The type of the input\n     * @template R - The type the invocation response should be deserialized into.\n     *\n     * @param {EntrypointName.Type} entrypoint - The name of the view function to invoke.\n     * @param {Function} serializeInput - A function to serialize the `input` to bytes.\n     * @param {Function} deserializeResponse - A function to deserialize the value returned from the view invocation.\n     * @param {T | T[]} input - Input for for contract function.\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {R} The transaction hash of the update transaction\n     */\n    public async invokeView<T, R>(\n        entrypoint: EntrypointName.Type<V>,\n        serializeInput: (input: T) => ArrayBuffer,\n        deserializeResponse: (value: HexString) => R,\n        input: T,\n        blockHash?: BlockHash.Type\n    ): Promise<R> {\n        const parameter = Parameter.fromBuffer(serializeInput(input));\n\n        const response = await this.grpcClient.invokeContract(\n            {\n                contract: this.contractAddress,\n                parameter,\n                method: ReceiveName.create(this.contractName, entrypoint),\n            },\n            blockHash\n        );\n        if (response === undefined || response.tag === 'failure' || response.returnValue === undefined) {\n            throw new Error(\n                `Failed to invoke view ${entrypoint} for contract at ${ContractAddress.toString(this.contractAddress)}${\n                    response.tag === 'failure' && ` with error ${stringify(response.reason)}`\n                }`\n            );\n        }\n\n        return deserializeResponse(ReturnValue.toHexString(response.returnValue));\n    }\n}\n\n/**\n * Base class for interacting with arbitrary contracts. Public version is {@link Contract}.\n *\n * @template E - union of update entrypoints\n * @template V - union of view entrypoints\n */\nexport class Contract<E extends string = string, V extends string = string> extends ContractBase<E, V> {\n    /**\n     * Creates a new `Contract` instance by querying the node for the necessary information through the supplied `grpcClient`.\n     *\n     * @param {ConcordiumGRPCClient} grpcClient - The client used for contract invocations and updates.\n     * @param {ContractAddress} contractAddress - Address of the contract instance.\n     * @param {Schema} [schema] - The schema of the contract, either defined as parameter schemas per entrypoint `E` or as a single module schema.\n     * If no schema is defined, an attempt to get an embedded schema from the contract is made.\n     *\n     * @throws If `InstanceInfo` could not be received for the contract,\n     *\n     * or if the contract name could not be parsed from the information received from the node.\n     */\n    public static async create<E extends string = string, V extends string = string>(\n        grpcClient: ConcordiumGRPCClient,\n        contractAddress: ContractAddress.Type,\n        schema?: Schema<E>\n    ): Promise<Contract<E, V>> {\n        const instanceInfo = await super.getInstanceInfo(grpcClient, contractAddress);\n        // No reason to run checks, since this is from chain.\n        const contractName = ContractName.fromInitName(instanceInfo.name);\n\n        let mSchema: string | undefined;\n        if (!schema) {\n            try {\n                const raw = await grpcClient.getEmbeddedSchema(instanceInfo.sourceModule);\n                if (raw) {\n                    const encoded = Buffer.from(raw.buffer).toString('base64');\n                    if (encoded) {\n                        mSchema = encoded;\n                    }\n                }\n            } catch {\n                // Do nothing.\n            }\n        }\n\n        return new Contract(grpcClient, contractAddress, contractName, schema ?? mSchema);\n    }\n}\n\n/**\n * Abstract class for defining \"clients\" for enabling users to seemlessly interact with\n * contracts adhering to standards (i.e. CIS contracts)\n *\n * @template E - union of update entrypoints\n * @template V - union of view entrypoints\n * @template D - {@link ContractDryRun} extension\n */\nexport abstract class CISContract<E extends string, V extends string, D extends ContractDryRun<E>> extends ContractBase<\n    E,\n    V\n> {\n    /** Parameter schema for each entrypoint `E` */\n    protected abstract override schema: Record<E, Base64String>;\n    /** The dry-run instance accessible through the {@link CISContract.dryRun} `dryRun` getter */\n    protected override dryRunInstance: D;\n\n    constructor(\n        protected grpcClient: ConcordiumGRPCClient,\n        protected contractAddress: ContractAddress.Type,\n        protected contractName: ContractName.Type\n    ) {\n        super(grpcClient, contractAddress, contractName);\n\n        this.dryRunInstance = this.makeDryRunInstance(grpcClient, contractAddress, contractName);\n    }\n\n    /**\n     * Function for creating the {@CISContract.dryRunInstance}.\n     */\n    protected abstract makeDryRunInstance(\n        grpcClient: ConcordiumGRPCClient,\n        contractAddress: ContractAddress.Type,\n        contractName: ContractName.Type\n    ): D;\n\n    /**\n     * A dry-run instance, providing access to methods for performing dry-run invocations of update instructions.\n     */\n    public override get dryRun(): D {\n        return this.dryRunInstance;\n    }\n\n    /**\n     * Creates a {@link ContractUpdateTransactionWithSchema} contract update transaction, holding the necessary parts to sign/submit to the chain.\n     *\n     * @param {EntrypointName.Type} entrypoint - The name of the receive function to invoke.\n     * @param {Function} serializeInput - A function to serialize the `input` to bytes.\n     * @param {ContractTransactionMetadata} metadata - Metadata to be used for the transaction creation (with defaults).\n     * @param {T} input - Input for for contract function.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {ContractUpdateTransaction} The transaction hash of the update transaction\n     */\n    public createUpdateTransaction<T>(\n        entrypoint: EntrypointName.Type<E>,\n        serializeInput: (input: T) => ArrayBuffer,\n        metadata: CreateContractTransactionMetadata,\n        input: T\n    ): ContractUpdateTransaction;\n\n    /**\n     * Creates a {@link ContractUpdateTransactionWithSchema} contract update transaction, holding the necessary parts to sign/submit to the chain.\n     *\n     * @param {EntrypointName.Type} entrypoint - The name of the receive function to invoke.\n     * @param {Function} serializeInput - A function to serialize the `input` to bytes.\n     * @param {ContractTransactionMetadata} metadata - Metadata to be used for the transaction creation (with defaults).\n     * @param {T} input - Input for for contract function.\n     * @param {Function} inputJsonFormatter - A function to format the `input` as JSON format serializable by the contract schema.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {ContractUpdateTransactionWithSchema} The transaction hash of the update transaction\n     */\n    public createUpdateTransaction<T, J extends SmartContractTypeValues>(\n        entrypoint: EntrypointName.Type<E>,\n        serializeInput: (input: T) => ArrayBuffer,\n        metadata: CreateContractTransactionMetadata,\n        input: T,\n        inputJsonFormatter: (input: T) => J\n    ): ContractUpdateTransactionWithSchema<J>;\n    public override createUpdateTransaction<T, J extends SmartContractTypeValues>(\n        entrypoint: EntrypointName.Type<E>,\n        serializeInput: (input: T) => ArrayBuffer,\n        metadata: CreateContractTransactionMetadata,\n        input: T,\n        inputJsonFormatter?: (input: T) => J\n    ): ContractUpdateTransaction | ContractUpdateTransactionWithSchema<J> {\n        if (inputJsonFormatter === undefined) {\n            return super.createUpdateTransaction(entrypoint, serializeInput, metadata, input);\n        }\n\n        const transaction = super.createUpdateTransaction(\n            entrypoint,\n            serializeInput,\n            metadata,\n            input,\n            inputJsonFormatter\n        );\n\n        if (transaction.schema === undefined) {\n            throw new Error(`Could not find schema for entrypoint ${entrypoint}`);\n        }\n\n        return transaction;\n    }\n}\n","// Functionality for working with the CIS3 standard\nexport * from '../cis3/index.js';\n","import { Buffer } from 'buffer/index.js';\nimport { decode } from 'cbor2/decoder';\nimport { encode, registerEncoder } from 'cbor2/encoder';\nimport { Tag } from 'cbor2/tag';\n\nimport * as Proto from '../grpc-api/v2/concordium/kernel.js';\nimport type { HexString } from '../types.js';\nimport { cborDecode } from '../types/cbor.js';\n\nconst TAGGED_MEMO = 24;\n\n/**\n * The JSON representation of a {@linkcode Type} cbor memo\n */\nexport type JSON = HexString;\n\n/**\n * Representation of a Memo, which enforces that it:\n * - Is a valid byte array with a maximum length of 256 bytes.\n */\nclass CborMemo {\n    #nominal = true;\n\n    constructor(public readonly content: Uint8Array) {\n        if (content.length > 256) {\n            throw new Error(`Memo content exceeds the maximum allowed length of 256 bytes.`);\n        }\n    }\n\n    /**\n     * Get a string representation of the memo.\n     *\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return Buffer.from(this.content).toString('hex');\n    }\n\n    /**\n     * Get a JSON-serializable representation of the memo.\n     * @returns {JSON} The JSON-serializable representation.\n     */\n    public toJSON(): JSON {\n        return this.toString();\n    }\n}\n\n/**\n * Representation of a Memo, which enforces that it:\n * - Is a valid byte array with a maximum length of 256 bytes.\n */\nexport type Type = CborMemo;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is CborMemo {\n    return value instanceof CborMemo;\n}\n\n/**\n * Converts a string into a CborMemo object.\n *\n * @param value - The string to be encoded.\n * @returns A new CborMemo object containing the encoded string.\n */\nexport function fromString(value: string): CborMemo {\n    return new CborMemo(encode(value));\n}\n\n/**\n * Converts any value to a CborMemo instance.\n *\n * @param value - The value to be encoded and wrapped in a CborMemo.\n * @returns A new CborMemo instance containing the encoded value.\n */\nexport function fromAny(value: unknown): CborMemo {\n    return new CborMemo(encode(value));\n}\n\n/**\n * Convert CBOR memo from its protobuf encoding.\n * @param {Proto.Memo} memo The protobuf encoding.\n * @returns {CborMemo}\n */\nexport function fromProto(memo: Proto.Memo): CborMemo {\n    return new CborMemo(memo.value);\n}\n\n/**\n * Convert CBOR memo into its protobuf encoding.\n * @param {CborMemo} memo module event.\n * @returns {Proto.Memo}\n */\nexport function toProto(memo: CborMemo): Proto.Memo {\n    return {\n        value: memo.content,\n    };\n}\n\n/**\n * Parses a CBOR-encoded memo and returns the decoded value.\n *\n * @param {CborMemo} value - The CBOR memo to parse.\n * @returns {unknown} The decoded value.\n */\nexport function parse(value: CborMemo): unknown {\n    return cborDecode(value.content);\n}\n\n/**\n * Converts a Memo to its CBOR (Concise Binary Object Representation) encoding.\n * This encodes the memo as a CBOR tagged value with tag 24.\n *\n * @param {CborMemo} value - The memo to convert to CBOR format.\n * @returns {Uint8Array} The CBOR encoded representation of the memo.\n */\nexport function toCBOR(value: CborMemo): Uint8Array {\n    const tagged = new Tag(TAGGED_MEMO, value.content);\n    return new Uint8Array(encode(tagged));\n}\n\nfunction fromCBORValue(decoded: unknown): CborMemo {\n    if (!(decoded instanceof Tag) || decoded.tag !== TAGGED_MEMO) {\n        throw new Error('Invalid CBOR tag for Memo.');\n    }\n\n    const content = decoded.contents;\n    if (!(content instanceof Uint8Array)) {\n        throw new Error('Invalid CBOR value: expected UInt8Array');\n    }\n\n    return new CborMemo(new Uint8Array(content));\n}\n\n/**\n * Decodes a CBOR-encoded memo into a CborMemo instance.\n *\n * @param {Uint8Array} bytes - The CBOR encoded representation of a memo.\n\n/**\n * Decodes a CBOR-encoded memo into a CborMemo instance.\n *\n * @param {Uint8Array} bytes - The CBOR encoded representation of a memo.\n * @returns {CborMemo} The decoded CborMemo instance.\n */\nexport function fromCBOR(bytes: Uint8Array): CborMemo {\n    return fromCBORValue(decode(bytes));\n}\n\n/**\n * Registers a CBOR encoder for the Memo type with the `cbor2` library.\n * This allows CborMemo instances to be automatically encoded when used with\n * the `cbor2` library's encode function.\n *\n * @returns {void}\n * @example\n * // Register the encoder\n * registerCBOREncoder();\n * // Now CborMemo instances can be encoded directly\n * const encoded = encode(memo);\n */\nexport function registerCBOREncoder(): void {\n    registerEncoder(CborMemo, (value) => [TAGGED_MEMO, value.content]);\n}\n\n/**\n * Registers a CBOR decoder for tag 24 (encoded-cbor-data-item) with the `cbor2` library.\n * This enables automatic decoding of CBOR data containing a Memo\n * when using the `cbor2` library's decode function.\n *\n * @returns {() => void} A cleanup function that, when called, will restore the previous\n * decoder (if any) that was registered for the tagged-address format. This is useful\n * when used in an existing `cbor2` use-case.\n *\n * @example\n * // Register the decoder\n * const cleanup = registerCBORDecoder();\n * // Use the decoder\n * const memo = decode(cborBytes); // Returns Memo if format matches\n * // Later, unregister the decoder\n * cleanup();\n */\nexport function registerCBORDecoder(): () => void {\n    const old = Tag.registerDecoder(TAGGED_MEMO, fromCBORValue);\n\n    // return cleanup function to restore the old decoder\n    return () => {\n        if (old) {\n            Tag.registerDecoder(TAGGED_MEMO, old);\n        } else {\n            Tag.clearDecoder(TAGGED_MEMO);\n        }\n    };\n}\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","import * as wasm from '@concordium/rust-bindings/wallet';\n\nimport { deserializeAccountTransaction, deserializeUint8 } from '../deserialization.js';\nimport { Cursor } from '../deserializationHelpers.js';\nimport { BlockItem, BlockItemKind } from '../types.js';\n\nfunction deserializeCredentialDeployment(serializedDeployment: Cursor) {\n    const raw = wasm.deserializeCredentialDeployment(serializedDeployment.read().toString('hex'));\n    try {\n        const parsed = JSON.parse(raw);\n        return {\n            credential: parsed.credential,\n            expiry: parsed.messageExpiry,\n        };\n    } catch {\n        // If the return value is not a proper JSON, it should be an error message.\n        throw new Error(raw);\n    }\n}\n\n/**\n * Deserializes a transaction, from the binary format used to send it to the node, back into an js object.\n * @param serializedTransaction A buffer containing the binary transaction. It is expected to start with the version and blockItemKind.\n * @returns An object specifiying the blockItemKind that the transaction has. The object also contains the actual transaction under the transaction field.\n **/\nexport function deserializeTransaction(serializedTransaction: ArrayBuffer): BlockItem {\n    const cursor = Cursor.fromBuffer(serializedTransaction);\n\n    const version = deserializeUint8(cursor);\n    if (version !== 0) {\n        throw new Error(\n            'Supplied version ' + version + ' is not valid. Only transactions with version 0 format are supported'\n        );\n    }\n    const blockItemKind = deserializeUint8(cursor);\n    switch (blockItemKind) {\n        case BlockItemKind.AccountTransactionKind:\n            return {\n                kind: BlockItemKind.AccountTransactionKind,\n                transaction: deserializeAccountTransaction(cursor),\n            };\n        case BlockItemKind.CredentialDeploymentKind:\n            return {\n                kind: BlockItemKind.CredentialDeploymentKind,\n                transaction: deserializeCredentialDeployment(cursor),\n            };\n        case BlockItemKind.UpdateInstructionKind:\n            throw new Error('deserialization of UpdateInstructions is not supported');\n        default:\n            throw new Error('Invalid blockItemKind');\n    }\n}\n","// Functionality for working with smart contract schemas. This uses the WASM at entrypoint `@concordium/rust-bindings/dapp`.\nexport * from '../schema.js';\nexport * from '../schemaTypes.js';\n","import { Buffer } from 'buffer/index.js';\n\nimport {\n    BakerKeysWithProofs,\n    ConfigureBakerPayload,\n    ConfigureDelegationPayload,\n    DelegationTarget,\n    DelegationTargetType,\n    UrlString,\n    VerifyKey,\n} from './types.js';\nimport { DataBlob } from './types/DataBlob.js';\nimport { isDefined } from './util.js';\n\nexport function serializeMap<K extends string | number | symbol, T>(\n    map: Record<K, T>,\n    encodeSize: (size: number) => Uint8Array,\n    encodeKey: (k: string) => Uint8Array,\n    encodeValue: (t: T) => Uint8Array\n): Buffer {\n    const keys = Object.keys(map);\n    const buffers = [encodeSize(keys.length)];\n    keys.forEach((key) => {\n        buffers.push(encodeKey(key));\n        buffers.push(encodeValue(map[key as K]));\n    });\n    return Buffer.concat(buffers);\n}\n\nexport function serializeList<T>(\n    list: T[],\n    putSize: (size: number) => Uint8Array,\n    putMember: (t: T) => Uint8Array\n): Buffer {\n    const buffers = [putSize(list.length)];\n    list.forEach((member: T) => {\n        buffers.push(putMember(member));\n    });\n    return Buffer.concat(buffers);\n}\n\n/**\n * Encodes a boolean to a Buffer using big endian.\n * @param value a boolean value\n * @returns boolean serialization of the input\n */\nexport function encodeBool(value: boolean): Buffer {\n    const result = value === true ? 1 : 0;\n    const arr = new ArrayBuffer(1);\n    const view = new DataView(arr);\n    view.setInt8(0, result);\n    return Buffer.from(new Int8Array(arr));\n}\n\n/**\n * Encodes a 64 bit unsigned integer to a Buffer using big endian.\n * @param value a 64 bit integer\n * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.\n * @returns big endian serialization of the input\n */\nexport function encodeWord64(value: bigint, useLittleEndian = false): Buffer {\n    if (value > 18446744073709551615n || value < 0n) {\n        throw new Error('The input has to be a 64 bit unsigned integer but it was: ' + value);\n    }\n    const arr = new ArrayBuffer(8);\n    const view = new DataView(arr);\n    view.setBigUint64(0, value, useLittleEndian);\n    return Buffer.from(new Uint8Array(arr));\n}\n\n/**\n * Encodes a 32 bit signed integer to a Buffer using big endian.\n * @param value a 32 bit integer\n * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.\n * @returns big endian serialization of the input\n */\nexport function encodeInt32(value: number, useLittleEndian = false): Buffer {\n    if (value < -2147483648 || value > 2147483647 || !Number.isInteger(value)) {\n        throw new Error('The input has to be a 32 bit signed integer but it was: ' + value);\n    }\n    const arr = new ArrayBuffer(4);\n    const view = new DataView(arr);\n    view.setInt32(0, value, useLittleEndian);\n    return Buffer.from(new Int8Array(arr));\n}\n\n/**\n * Encodes a 32 bit unsigned integer to a Buffer.\n * @param value a 32 bit integer\n * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.\n * @returns big endian serialization of the input\n */\nexport function encodeWord32(value: number, useLittleEndian = false): Buffer {\n    if (value > 4294967295 || value < 0 || !Number.isInteger(value)) {\n        throw new Error('The input has to be a 32 bit unsigned integer but it was: ' + value);\n    }\n    const arr = new ArrayBuffer(4);\n    const view = new DataView(arr);\n    view.setUint32(0, value, useLittleEndian);\n    return Buffer.from(new Uint8Array(arr));\n}\n\n/**\n * Encodes a 16 bit signed integer to a Buffer.\n * @param value a 16 bit integer\n * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.\n * @returns big endian serialization of the input\n */\nexport function encodeInt16(value: number, useLittleEndian = false): Buffer {\n    if (value < -32768 || value > 32767 || !Number.isInteger(value)) {\n        throw new Error('The input has to be a 16 bit signed integer but it was: ' + value);\n    }\n    const arr = new ArrayBuffer(2);\n    const view = new DataView(arr);\n    view.setInt16(0, value, useLittleEndian);\n    return Buffer.from(new Int8Array(arr));\n}\n\n/**\n * Encodes a 16 bit unsigned integer to a Buffer using big endian.\n * @param value a 16 bit integer\n * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.\n * @returns big endian serialization of the input\n */\nexport function encodeWord16(value: number, useLittleEndian = false): Buffer {\n    if (value > 65535 || value < 0 || !Number.isInteger(value)) {\n        throw new Error('The input has to be a 16 bit unsigned integer but it was: ' + value);\n    }\n    const arr = new ArrayBuffer(2);\n    const view = new DataView(arr);\n    view.setUint16(0, value, useLittleEndian);\n    return Buffer.from(new Uint8Array(arr));\n}\n\n/**\n * Encodes a 8 bit signed integer to a Buffer using big endian.\n * @param value a 8 bit integer\n * @returns big endian serialization of the input\n */\nexport function encodeInt8(value: number): Buffer {\n    if (value > 127 || value < -128 || !Number.isInteger(value)) {\n        throw new Error('The input has to be a 8 bit signed integer but it was: ' + value);\n    }\n\n    return Buffer.from(Buffer.of(value));\n}\n\n/**\n * Encodes a 8 bit unsigned integer to a Buffer using big endian.\n * @param value a 8 bit integer\n * @returns big endian serialization of the input\n */\nexport function encodeWord8(value: number): Buffer {\n    if (value > 255 || value < 0 || !Number.isInteger(value)) {\n        throw new Error('The input has to be a 8 bit unsigned integer but it was: ' + value);\n    }\n    return Buffer.from(Buffer.of(value));\n}\n\nexport function encodeWord8FromString(value: string): Buffer {\n    return encodeWord8(Number(value));\n}\n\nexport function encodeWord16FromString(value: string, useLittleEndian = false): Buffer {\n    return encodeWord16(Number(value), useLittleEndian);\n}\n\n/**\n * Encodes a Datablob.\n * @param blob Datablob containing data bytes.\n * @returns Buffer containing the length of the data and the data bytes.\n */\nexport function encodeDataBlob(blob: DataBlob): Buffer {\n    const length = encodeWord16(blob.data.length);\n    return Buffer.concat([length, blob.data]);\n}\n\n/**\n * Packing a buffer along with its length in 32 bits\n * @param buffer\n * @param useLittleEndian a boolean value, if not given, the value is serialized in big endian.\n * @returns Buffer containing the 32 bit length of buffer and buffer.\n */\nexport function packBufferWithWord32Length(buffer: Uint8Array, useLittleEndian = false): Buffer {\n    const length = encodeWord32(buffer.length, useLittleEndian);\n    return Buffer.concat([length, buffer]);\n}\n\n/**\n * Packing a buffer along the with offset of 16 bit length\n * @param buffer containing the buffer\n * @returns Buffer containing the length of the buffer of 16 bit and buffer.\n */\nexport function packBufferWithWord16Length(buffer: Uint8Array, useLittleEndian = false): Buffer {\n    const length = encodeWord16(buffer.length, useLittleEndian);\n    return Buffer.concat([length, buffer]);\n}\n\n/**\n * Packing a buffer along the with offset of 8 bit length\n * @param buffer containing the buffer\n * @returns Buffer containing the length of the buffer of 8 bit and buffer.\n */\nexport function packBufferWithWord8Length(buffer: Uint8Array): Buffer {\n    const length = encodeWord8(buffer.length);\n    return Buffer.concat([length, buffer]);\n}\n\n/**\n * Convert a hex string to a Buffer\n * @param str hex-encoded string\n * @returns Buffer\n */\nexport function encodeHexString(s: string): Buffer {\n    return Buffer.from(s, 'hex');\n}\n\nenum SchemeId {\n    Ed25519 = 0,\n}\n\n/**\n * Serializes a public key. The serialization includes the\n * scheme used for the key/\n * @param key the key to serialize\n * @returns the serialization of the key\n */\nexport function serializeVerifyKey(key: VerifyKey): Buffer {\n    const scheme = key.schemeId as keyof typeof SchemeId;\n    let schemeId;\n    if (SchemeId[scheme] !== undefined) {\n        schemeId = SchemeId[scheme];\n    } else {\n        throw new Error(`Unknown key type: ${scheme}`);\n    }\n    const keyBuffer = Buffer.from(key.verifyKey, 'hex');\n    const serializedScheme = encodeWord8(schemeId);\n    return Buffer.concat([serializedScheme, keyBuffer]);\n}\n\n/**\n * Serializes a year and month string.\n * @param yearMonth year and month formatted as \"YYYYMM\"\n * @returns the serialization of the year and month string\n */\nexport function serializeYearMonth(yearMonth: string): Buffer {\n    const year = parseInt(yearMonth.substring(0, 4), 10);\n    const month = parseInt(yearMonth.substring(4, 6), 10);\n    const serializedYear = encodeWord16(year);\n    const serializedMonth = encodeWord8(month);\n    return Buffer.concat([serializedYear, serializedMonth]);\n}\n\n/**\n * Makes a bitmap for transactions with optional payload fields, where each bit indicates whether a value is included or not.\n *\n * @param payload the payload to generate the bitmap for\n * @param fieldOrder the order the payload fields are serialized in. The order is represented in the bitmap from right to left, i.e index 0 of the order translates to first bit.\n *\n * @example\n * getPayloadBitmap<{test?: string; test2?: string}>({test2: 'yes'}, ['test', 'test2']) // returns 2 (00000010 as bits of UInt8)\n * getPayloadBitmap<{test?: string; test2?: string; test3?: number}>({test: 'yes', test3: 100}, ['test', 'test2', 'test3']) // returns 5 (00000101 as bits of UInt8)\n */\nfunction getPayloadBitmap<T>(payload: T, fieldOrder: Array<keyof T>) {\n    return fieldOrder\n        .map((k) => payload[k])\n        .reduceRight(\n            // eslint-disable-next-line no-bitwise\n            (acc, cur) => (acc << 1) | Number(cur !== undefined),\n            0\n        );\n}\n\n/**\n * Makes a type with keys from Object and values being functions that take values with types of respective original values, returning a Buffer or undefined.\n */\ntype SerializationSpec<T> = Required<{\n    [P in keyof T]: (v: T[P]) => Uint8Array | undefined;\n}>;\n\n/**\n * Given a specification describing how to serialize the fields of a payload of type T, this function produces a function\n * that serializes payloads of type T, returning a buffer of the serialized fields by order of occurance in serialization spec.\n */\nconst serializeFromSpec =\n    <T>(spec: SerializationSpec<T>) =>\n    (payload: T) => {\n        const buffers = Object.keys(spec)\n            .map((k) => {\n                const v = payload[k as keyof T];\n                const f = spec[k as keyof typeof spec] as (x: typeof v) => Uint8Array | undefined;\n                return f(v);\n            })\n            .filter(isDefined);\n\n        return Buffer.concat(buffers);\n    };\n\n/**\n * Takes a callback function taking 1 argument, returning a new function taking same argument, applying callback only if supplied argument is defined.\n */\nexport const orUndefined =\n    <A, R>(fun: (v: A) => R) =>\n    (v: A | undefined): R | undefined =>\n        v !== undefined ? fun(v) : undefined;\n\nfunction serializeDelegationTarget(target: DelegationTarget) {\n    if (target.delegateType === DelegationTargetType.PassiveDelegation) {\n        return encodeInt8(0);\n    } else {\n        return Buffer.concat([encodeInt8(1), encodeWord64(target.bakerId)]);\n    }\n}\n\nexport const configureDelegationSerializationSpec: SerializationSpec<ConfigureDelegationPayload> = {\n    stake: orUndefined((x) => encodeWord64(x.microCcdAmount)),\n    restakeEarnings: orUndefined(encodeBool),\n    delegationTarget: orUndefined(serializeDelegationTarget),\n};\n\nexport const getSerializedConfigureDelegationBitmap = (payload: ConfigureDelegationPayload): Buffer =>\n    encodeWord16(\n        getPayloadBitmap(\n            payload,\n            Object.keys(configureDelegationSerializationSpec) as Array<keyof ConfigureDelegationPayload>\n        )\n    );\n\nexport function serializeConfigureDelegationPayload(payload: ConfigureDelegationPayload): Buffer {\n    const bitmap = getSerializedConfigureDelegationBitmap(payload);\n    const serializedPayload = serializeFromSpec(configureDelegationSerializationSpec)(payload);\n\n    return Buffer.concat([bitmap, serializedPayload]);\n}\n\nconst serializeVerifyKeys = serializeFromSpec<BakerKeysWithProofs>({\n    electionVerifyKey: encodeHexString,\n    proofElection: encodeHexString,\n    signatureVerifyKey: encodeHexString,\n    proofSig: encodeHexString,\n    aggregationVerifyKey: encodeHexString,\n    proofAggregation: encodeHexString,\n});\n\nconst serializeUrl = (url: UrlString) => {\n    const data = Buffer.from(new TextEncoder().encode(url));\n    const length = encodeWord16(data.length);\n    return Buffer.concat([length, data]);\n};\n\nconst configureBakerSerializationSpec: SerializationSpec<ConfigureBakerPayload> = {\n    stake: orUndefined((v) => encodeWord64(v.microCcdAmount)),\n    restakeEarnings: orUndefined(encodeBool),\n    openForDelegation: orUndefined(encodeWord8),\n    keys: orUndefined(serializeVerifyKeys),\n    metadataUrl: orUndefined(serializeUrl),\n    transactionFeeCommission: orUndefined(encodeWord32),\n    bakingRewardCommission: orUndefined(encodeWord32),\n    finalizationRewardCommission: orUndefined(encodeWord32),\n    suspended: orUndefined(encodeBool),\n};\n\nconst getSerializedConfigureBakerBitmap = (payload: ConfigureBakerPayload): Buffer =>\n    encodeWord16(\n        getPayloadBitmap(payload, Object.keys(configureBakerSerializationSpec) as Array<keyof ConfigureBakerPayload>)\n    );\n\nexport function serializeConfigureBakerPayload(payload: ConfigureBakerPayload): Buffer {\n    const bitmap = getSerializedConfigureBakerBitmap(payload);\n    const serializedPayload = serializeFromSpec(configureBakerSerializationSpec)(payload);\n\n    return Buffer.concat([bitmap, serializedPayload]);\n}\n\n/**\n * Takes a function which serializes a value, and returns a function that serializes an optional value\n * Prefixed with a byte indicating if a value follows or not.\n */\nexport const makeSerializeOptional =\n    <T>(fun: (value: T) => Uint8Array): ((value: T | undefined) => Uint8Array) =>\n    (value) => {\n        if (value === undefined) {\n            return encodeBool(false);\n        }\n\n        return Buffer.concat([encodeBool(true), fun(value)]);\n    };\n\nexport const makeSerializeList =\n    <T>(serialize: (input: T) => Uint8Array) =>\n    (input: T[]): Buffer => {\n        const n = encodeWord16(input.length, true);\n        return Buffer.concat([n, ...input.map(serialize)]);\n    };\n","import { Buffer } from 'buffer/index.js';\n\nimport {\n    CISContract,\n    ContractDryRun,\n    ContractTransactionMetadata,\n    ContractUpdateTransactionWithSchema,\n    CreateContractTransactionMetadata,\n    getContractUpdateDefaultExpiryDate,\n} from '../GenericContract.js';\nimport { ConcordiumGRPCClient } from '../grpc/GRPCClient.js';\nimport { AccountSigner } from '../signHelpers.js';\nimport type { HexString, InvokeContractResult } from '../types.js';\nimport * as AccountAddress from '../types/AccountAddress.js';\nimport * as BlockHash from '../types/BlockHash.js';\nimport * as ContractAddress from '../types/ContractAddress.js';\nimport * as ContractName from '../types/ContractName.js';\nimport * as EntrypointName from '../types/EntrypointName.js';\nimport * as Timestamp from '../types/Timestamp.js';\nimport * as TransactionExpiry from '../types/TransactionExpiry.js';\nimport * as TransactionHash from '../types/TransactionHash.js';\nimport {\n    CIS4,\n    REVOKE_DOMAIN,\n    Web3IdSigner,\n    deserializeCIS4CredentialEntry,\n    deserializeCIS4CredentialStatus,\n    deserializeCIS4MetadataResponse,\n    deserializeCIS4RevocationKeys,\n    formatCIS4RegisterCredential,\n    formatCIS4RevokeCredentialHolder,\n    formatCIS4RevokeCredentialIssuer,\n    formatCIS4RevokeCredentialOther,\n    formatCIS4UpdateRevocationKeys,\n    serializeCIS4RegisterCredentialParam,\n    serializeCIS4RevocationDataHolder,\n    serializeCIS4RevocationDataOther,\n    serializeCIS4RevokeCredentialIssuerParam,\n    serializeCIS4UpdateRevocationKeysParam,\n} from './util.js';\n\ntype Views = 'credentialEntry' | 'credentialStatus' | 'issuer' | 'registryMetadata' | 'revocationKeys';\n\ntype Updates =\n    | 'registerCredential'\n    | 'revokeCredentialIssuer'\n    | 'revokeCredentialHolder'\n    | 'revokeCredentialOther'\n    | 'registerRevocationKeys'\n    | 'removeRevocationKeys';\n\n/**\n * Defines methods for performing dry-run invocations of CIS4 contract updates.\n * Is accessible throught the `dryRun` property of a `CIS4Contract` instance.\n */\nclass CIS4DryRun extends ContractDryRun<Updates> {\n    /**\n     * Performs a dry-run invocation of \"CIS4.registerCredential\"\n     *\n     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.\n     * @param {CIS4.CredentialInfo} credInfo - the credential info to register\n     * @param {HexString} [additionalData] - any additional data to include\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.\n     */\n    public registerCredential(\n        sender: AccountAddress.Type | ContractAddress.Type,\n        credInfo: CIS4.CredentialInfo,\n        additionalData: HexString = '',\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult> {\n        return this.invokeMethod(\n            EntrypointName.fromStringUnchecked('registerCredential'),\n            sender,\n            serializeCIS4RegisterCredentialParam,\n            { credInfo, additionalData },\n            blockHash\n        );\n    }\n\n    /**\n     * Performs a dry-run invocation of \"CIS4.revokeCredentialIssuer\"\n     *\n     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.\n     * @param {HexString} credHolderPubKey - the public key of the credential holder (hex encoded)\n     * @param {string} [reason] - the reason for the revocation\n     * @param {HexString} [additionalData] - any additional data to include\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.\n     */\n    public revokeCredentialAsIssuer(\n        sender: AccountAddress.Type | ContractAddress.Type,\n        credHolderPubKey: HexString,\n        reason?: string,\n        additionalData: HexString = '',\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult> {\n        return this.invokeMethod(\n            EntrypointName.fromStringUnchecked('revokeCredentialIssuer'),\n            sender,\n            serializeCIS4RevokeCredentialIssuerParam,\n            { credHolderPubKey, reason, additionalData },\n            blockHash\n        );\n    }\n\n    /**\n     * Performs a dry-run invocation of \"CIS4.revokeCredentialHolder\"\n     *\n     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.\n     * @param {Web3IdSigner} credHolderSigner - A signer structure for the credential holder\n     * @param {bigint} nonce - the nonce of the owner inside the contract\n     * @param {Date} expiry - Expiry time of the revocation message\n     * @param {string} [reason] - the reason for the revocation\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.\n     */\n    public async revokeCredentialAsHolder(\n        sender: AccountAddress.Type | ContractAddress.Type,\n        credHolderSigner: Web3IdSigner,\n        nonce: bigint,\n        expiry: Date,\n        reason?: string,\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult> {\n        const credentialPubKey = credHolderSigner.pubKey;\n        const entrypoint = EntrypointName.fromStringUnchecked('revokeCredentialHolder');\n        const signingData: CIS4.SigningData = {\n            contractAddress: this.contractAddress,\n            entrypoint,\n            nonce,\n            timestamp: Timestamp.fromDate(expiry),\n        };\n        const serializedData = serializeCIS4RevocationDataHolder({\n            credentialPubKey,\n            signingData,\n            reason,\n        });\n        const digest = Buffer.concat([REVOKE_DOMAIN, serializedData]);\n        const signature = await credHolderSigner.sign(digest);\n\n        return this.invokeMethod(\n            entrypoint,\n            sender,\n            () => Buffer.concat([signature, serializedData]), // Reuse existing serialization\n            undefined,\n            blockHash\n        );\n    }\n\n    /**\n     * Performs a dry-run invocation of \"CIS4.revokeCredentialOther\"\n     *\n     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.\n     * @param {Web3IdSigner} revokerSigner - A signer structure for the credential holder\n     * @param {HexString} credentialPubKey - the public key (hex encoded) for the credential to revoke\n     * @param {bigint} nonce - the nonce of the owner inside the contract\n     * @param {Date} expiry - Expiry time of the revocation message\n     * @param {string} [reason] - the reason for the revocation\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.\n     */\n    public async revokeCredentialAsOther(\n        sender: AccountAddress.Type | ContractAddress.Type,\n        revokerSigner: Web3IdSigner,\n        credentialPubKey: HexString,\n        nonce: bigint,\n        expiry: Date,\n        reason?: string,\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult> {\n        const revocationPubKey = revokerSigner.pubKey;\n        const entrypoint = EntrypointName.fromStringUnchecked('revokeCredentialOther');\n        const signingData: CIS4.SigningData = {\n            contractAddress: this.contractAddress,\n            entrypoint,\n            nonce,\n            timestamp: Timestamp.fromDate(expiry),\n        };\n        const serializedData = serializeCIS4RevocationDataOther({\n            credentialPubKey,\n            signingData,\n            revocationPubKey,\n            reason,\n        });\n        const digest = Buffer.concat([REVOKE_DOMAIN, serializedData]);\n        const signature = await revokerSigner.sign(digest);\n\n        return this.invokeMethod(\n            entrypoint,\n            sender,\n            () => Buffer.concat([signature, serializedData]), // Reuse existing serialization\n            undefined,\n            blockHash\n        );\n    }\n\n    /**\n     * Performs a dry-run invocation of \"CIS4.registerRevocationKeys\"\n     *\n     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.\n     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be used for revocation\n     * @param {HexString} [additionalData] - any additional data to include\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.\n     */\n    public registerRevocationKeys(\n        sender: AccountAddress.Type | ContractAddress.Type,\n        keys: HexString | HexString[],\n        additionalData: HexString = '',\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult> {\n        const ks = Array.isArray(keys) ? keys : [keys];\n        return this.invokeMethod(\n            EntrypointName.fromStringUnchecked('registerRevocationKeys'),\n            sender,\n            serializeCIS4UpdateRevocationKeysParam,\n            { additionalData, keys: ks },\n            blockHash\n        );\n    }\n\n    /**\n     * Performs a dry-run invocation of \"CIS4.removeRevocationKeys\"\n     *\n     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.\n     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be removed\n     * @param {HexString} [additionalData] - any additional data to include\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.\n     */\n    public removeRevocationKeys(\n        sender: AccountAddress.Type | ContractAddress.Type,\n        keys: HexString | HexString[],\n        additionalData: HexString = '',\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult> {\n        const ks = Array.isArray(keys) ? keys : [keys];\n        return this.invokeMethod(\n            EntrypointName.fromStringUnchecked('removeRevocationKeys'),\n            sender,\n            serializeCIS4UpdateRevocationKeysParam,\n            { additionalData, keys: ks },\n            blockHash\n        );\n    }\n}\n\n/**\n * Defines methods for interacting with CIS4 contracts.\n */\nexport class CIS4Contract extends CISContract<Updates, Views, CIS4DryRun> {\n    /**\n     * Parameter schemas for each CIS4 update entrypoint.\n     * These are returned individually when creating update transactions to be used for serializing\n     * a corresponding JSON representation of the parameter.\n     */\n    public schema: Record<Updates, string> = {\n        /** Parameter schema for `registerCredential` entrypoint */\n        registerCredential:\n            'FAACAAAADwAAAGNyZWRlbnRpYWxfaW5mbxQABQAAAAkAAABob2xkZXJfaWQeIAAAABAAAABob2xkZXJfcmV2b2NhYmxlAQoAAAB2YWxpZF9mcm9tDQsAAAB2YWxpZF91bnRpbBUCAAAABAAAAE5vbmUCBAAAAFNvbWUBAQAAAA0MAAAAbWV0YWRhdGFfdXJsFAACAAAAAwAAAHVybBYBBAAAAGhhc2gVAgAAAAQAAABOb25lAgQAAABTb21lAQEAAAAeIAAAAA4AAABhdXhpbGlhcnlfZGF0YRABAg',\n        /** Parameter schema for `revokeCredentialHolder` entrypoint */\n        revokeCredentialHolder:\n            'FAACAAAACQAAAHNpZ25hdHVyZR5AAAAABAAAAGRhdGEUAAMAAAANAAAAY3JlZGVudGlhbF9pZB4gAAAADAAAAHNpZ25pbmdfZGF0YRQABAAAABAAAABjb250cmFjdF9hZGRyZXNzDAsAAABlbnRyeV9wb2ludBYBBQAAAG5vbmNlBQkAAAB0aW1lc3RhbXANBgAAAHJlYXNvbhUCAAAABAAAAE5vbmUCBAAAAFNvbWUBAQAAABQAAQAAAAYAAAByZWFzb24WAA',\n        /** Parameter schema for `revokeCredentialIssuer` entrypoint */\n        revokeCredentialIssuer:\n            'FAADAAAADQAAAGNyZWRlbnRpYWxfaWQeIAAAAAYAAAByZWFzb24VAgAAAAQAAABOb25lAgQAAABTb21lAQEAAAAUAAEAAAAGAAAAcmVhc29uFgAOAAAAYXV4aWxpYXJ5X2RhdGEQAQI',\n        /** Parameter schema for `revokeCredentialOther` entrypoint */\n        revokeCredentialOther:\n            'FAACAAAACQAAAHNpZ25hdHVyZR5AAAAABAAAAGRhdGEUAAQAAAANAAAAY3JlZGVudGlhbF9pZB4gAAAADAAAAHNpZ25pbmdfZGF0YRQABAAAABAAAABjb250cmFjdF9hZGRyZXNzDAsAAABlbnRyeV9wb2ludBYBBQAAAG5vbmNlBQkAAAB0aW1lc3RhbXANDgAAAHJldm9jYXRpb25fa2V5HiAAAAAGAAAAcmVhc29uFQIAAAAEAAAATm9uZQIEAAAAU29tZQEBAAAAFAABAAAABgAAAHJlYXNvbhYA',\n        /** Parameter schema for `registerRevocationKeys` entrypoint */\n        registerRevocationKeys: 'FAACAAAABAAAAGtleXMQAR4gAAAADgAAAGF1eGlsaWFyeV9kYXRhEAEC',\n        /** Parameter schema for `removeRevocationKeys` entrypoint */\n        removeRevocationKeys: 'FAACAAAABAAAAGtleXMQAR4gAAAADgAAAGF1eGlsaWFyeV9kYXRhEAEC',\n    };\n\n    /**\n     * Creates a new `CIS4Contract` instance by querying the node for the necessary information through the supplied `grpcClient`.\n     *\n     * @param {ConcordiumGRPCClient} grpcClient - The client used for contract invocations and updates.\n     * @param {ContractAddress} contractAddress - Address of the contract instance.\n     *\n     * @throws If `InstanceInfo` could not be received for the contract,\n     * or if the contract name could not be parsed from the information received from the node.\n     */\n    public static async create(\n        grpcClient: ConcordiumGRPCClient,\n        contractAddress: ContractAddress.Type\n    ): Promise<CIS4Contract> {\n        const contractName = await super.getContractName(grpcClient, contractAddress);\n        return new CIS4Contract(grpcClient, contractAddress, contractName);\n    }\n\n    protected makeDryRunInstance(\n        grpcClient: ConcordiumGRPCClient,\n        contractAddress: ContractAddress.Type,\n        contractName: ContractName.Type\n    ): CIS4DryRun {\n        return new CIS4DryRun(grpcClient, contractAddress, contractName);\n    }\n\n    /**\n     * Look up an entry in the registry by the public key of its holder.\n     *\n     * @param {HexString} credHolderPubKey - public key identifying the credential holder\n     * @param {BlockHash.Type} [blockHash] - block to perform query at.\n     *\n     * @returns {CIS4.CredentialEntry} a corresponding credential entry.\n     */\n    public credentialEntry(credHolderPubKey: HexString, blockHash?: BlockHash.Type): Promise<CIS4.CredentialEntry> {\n        return this.invokeView(\n            EntrypointName.fromStringUnchecked('credentialEntry'),\n            (k) => Buffer.from(k, 'hex'),\n            deserializeCIS4CredentialEntry,\n            credHolderPubKey,\n            blockHash\n        );\n    }\n\n    /**\n     * Look up the status of a credential by the public key of its holder.\n     *\n     * @param {HexString} credHolderPubKey - public key identifying the credential holder\n     * @param {BlockHash.Type} [blockHash] - block to perform query at.\n     *\n     * @returns {CIS4.CredentialStatus} a corresponding credential status.\n     */\n    public credentialStatus(credHolderPubKey: HexString, blockHash?: BlockHash.Type): Promise<CIS4.CredentialStatus> {\n        return this.invokeView(\n            EntrypointName.fromStringUnchecked('credentialStatus'),\n            (k) => Buffer.from(k, 'hex'),\n            deserializeCIS4CredentialStatus,\n            credHolderPubKey,\n            blockHash\n        );\n    }\n\n    /**\n     * Get list of all revocation keys and their corresponding nonces.\n     *\n     * @param {BlockHash.Type} [blockHash] - block to perform query at.\n     *\n     * @returns {CIS4.RevocationKeyWithNonce[]} the revocation keys wityh corresponding nonces.\n     */\n    public revocationKeys(blockHash?: BlockHash.Type): Promise<CIS4.RevocationKeyWithNonce[]> {\n        return this.invokeView(\n            EntrypointName.fromStringUnchecked('revocationKeys'),\n            () => Buffer.alloc(0),\n            deserializeCIS4RevocationKeys,\n            undefined,\n            blockHash\n        );\n    }\n\n    /**\n     * Get the registry metadata.\n     *\n     * @param {BlockHash.Type} [blockHash] - block to perform query at.\n     *\n     * @returns {CIS4.MetadataUrl} a metadata URL.\n     */\n    public registryMetadata(blockHash?: BlockHash.Type): Promise<CIS4.MetadataResponse> {\n        return this.invokeView(\n            EntrypointName.fromStringUnchecked('registryMetadata'),\n            () => Buffer.alloc(0),\n            deserializeCIS4MetadataResponse,\n            undefined,\n            blockHash\n        );\n    }\n\n    /**\n     * Get the {@link AccountAddress} public key of the issuer.\n     *\n     * @param {BlockHash.Type} [blockHash] - block to perform query at.\n     *\n     * @returns {HexString} a hex encoded public key.\n     */\n    public issuer(blockHash?: BlockHash.Type): Promise<HexString> {\n        return this.invokeView(\n            EntrypointName.fromStringUnchecked('issuer'),\n            () => Buffer.alloc(0),\n            (value) => value,\n            undefined,\n            blockHash\n        );\n    }\n\n    /**\n     * Create the details necessary to submit a CIS4.registerCredential update transaction.\n     *\n     * @param {CreateContractTransactionMetadata} metadata - transaction metadata\n     * @param {CIS4.CredentialInfo} credInfo - the credential info to register\n     * @param {HexString} [additionalData] - any additional data to include\n     *\n     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.registerCredential update.\n     */\n    public createRegisterCredential(\n        metadata: CreateContractTransactionMetadata,\n        credInfo: CIS4.CredentialInfo,\n        additionalData: HexString = ''\n    ): ContractUpdateTransactionWithSchema {\n        return this.createUpdateTransaction(\n            EntrypointName.fromStringUnchecked('registerCredential'),\n            serializeCIS4RegisterCredentialParam,\n            metadata,\n            { credInfo, additionalData },\n            formatCIS4RegisterCredential\n        );\n    }\n\n    /**\n     * Submit CIS4.registerCredential update transaction.\n     *\n     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.\n     * @param {ContractTransactionMetadata} metadata - transaction metadata\n     * @param {CIS4.CredentialInfo} credInfo - the credential info to register\n     * @param {HexString} [additionalData] - any additional data to include\n     *\n     * @returns {TransactionHash.Type} The hash of the submitted transaction\n     */\n    public registerCredential(\n        signer: AccountSigner,\n        metadata: ContractTransactionMetadata,\n        credInfo: CIS4.CredentialInfo,\n        additionalData: HexString = ''\n    ): Promise<TransactionHash.Type> {\n        const transaction = this.createRegisterCredential(metadata, credInfo, additionalData);\n        return this.sendUpdateTransaction(transaction, metadata, signer);\n    }\n\n    /**\n     * Create the details necessary to submit a CIS4.revokeCredentialIssuer update transaction.\n     *\n     * @param {CreateContractTransactionMetadata} metadata - transaction metadata\n     * @param {HexString} credHolderPubKey - the public key of the credential holder (hex encoded)\n     * @param {string} [reason] - the reason for the revocation\n     * @param {HexString} [additionalData] - any additional data to include\n     *\n     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.revokeCredentialIssuer update.\n     */\n    public createRevokeCredentialAsIssuer(\n        metadata: CreateContractTransactionMetadata,\n        credHolderPubKey: HexString,\n        reason?: string,\n        additionalData: HexString = ''\n    ): ContractUpdateTransactionWithSchema {\n        return this.createUpdateTransaction(\n            EntrypointName.fromStringUnchecked('revokeCredentialIssuer'),\n            serializeCIS4RevokeCredentialIssuerParam,\n            metadata,\n            { credHolderPubKey, reason, additionalData },\n            formatCIS4RevokeCredentialIssuer\n        );\n    }\n\n    /**\n     * Submit CIS4.revokeCredentialIssuer update transaction.\n     *\n     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.\n     * @param {ContractTransactionMetadata} metadata - transaction metadata\n     * @param {HexString} credHolderPubKey - the public key of the credential holder (hex encoded)\n     * @param {string} [reason] - the reason for the revocation\n     * @param {HexString} [additionalData] - any additional data to include\n     *\n     * @returns {TransactionHash.Type} The hash of the submitted transaction\n     */\n    public revokeCredentialAsIssuer(\n        signer: AccountSigner,\n        metadata: ContractTransactionMetadata,\n        credHolderPubKey: HexString,\n        reason?: string,\n        additionalData: HexString = ''\n    ): Promise<TransactionHash.Type> {\n        const transaction = this.createRevokeCredentialAsIssuer(metadata, credHolderPubKey, reason, additionalData);\n        return this.sendUpdateTransaction(transaction, metadata, signer);\n    }\n\n    /**\n     * Create the details necessary to submit a CIS4.revokeCredentialHolder update transaction.\n     *\n     * @param {CreateContractTransactionMetadata} metadata - transaction metadata\n     * @param {Web3IdSigner} credHolderSigner - A signer structure for the credential holder\n     * @param {bigint} nonce - the nonce of the owner inside the contract\n     * @param {Date} expiry - Expiry time of the revocation message\n     * @param {string} [reason] - the reason for the revocation\n     *\n     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.revokeCredentialHolder update.\n     */\n    public async createRevokeCredentialAsHolder(\n        metadata: CreateContractTransactionMetadata,\n        credHolderSigner: Web3IdSigner,\n        nonce: bigint,\n        expiry: Date,\n        reason?: string\n    ): Promise<ContractUpdateTransactionWithSchema> {\n        const credentialPubKey = credHolderSigner.pubKey;\n        const entrypoint = EntrypointName.fromStringUnchecked('revokeCredentialHolder');\n        const signingData: CIS4.SigningData = {\n            contractAddress: this.contractAddress,\n            entrypoint,\n            nonce,\n            timestamp: Timestamp.fromDate(expiry),\n        };\n        const serializedData = serializeCIS4RevocationDataHolder({\n            credentialPubKey,\n            signingData,\n            reason,\n        });\n        const digest = Buffer.concat([REVOKE_DOMAIN, serializedData]);\n        const signature = await credHolderSigner.sign(digest);\n\n        return this.createUpdateTransaction<CIS4.RevokeCredentialHolderParam, CIS4.RevokeCredentialHolderParamJson>(\n            entrypoint,\n            () => Buffer.concat([signature, serializedData]), // Reuse existing serialization\n            metadata,\n            {\n                signature: signature.toString('hex'),\n                data: { credentialPubKey, signingData, reason },\n            },\n            formatCIS4RevokeCredentialHolder\n        );\n    }\n\n    /**\n     * Submit CIS4.revokeCredentialHolder update transaction.\n     * The revocation message is set to expire at the same time as the transaction (from `metadata.expiry`)\n     *\n     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.\n     * @param {ContractTransactionMetadata} metadata - transaction metadata\n     * @param {Web3IdSigner} credHolderSigner - A signer structure for the credential holder\n     * @param {bigint} nonce - the nonce of the owner inside the contract\n     * @param {string} [reason] - the reason for the revocation\n     *\n     * @returns {TransactionHash.Type} The hash of the submitted transaction\n     */\n    public async revokeCredentialAsHolder(\n        signer: AccountSigner,\n        metadata: ContractTransactionMetadata,\n        credHolderSigner: Web3IdSigner,\n        nonce: bigint,\n        reason?: string\n    ): Promise<TransactionHash.Type> {\n        const transaction = await this.createRevokeCredentialAsHolder(\n            metadata,\n            credHolderSigner,\n            nonce,\n            TransactionExpiry.toDate(metadata.expiry ?? getContractUpdateDefaultExpiryDate()),\n            reason\n        );\n        return this.sendUpdateTransaction(transaction, metadata, signer);\n    }\n\n    /**\n     * Create the details necessary to submit a CIS4.revokeCredentialOther update transaction.\n     *\n     * @param {CreateContractTransactionMetadata} metadata - transaction metadata\n     * @param {Web3IdSigner} revokerSigner - A signer structure for the revoker\n     * @param {HexString} credentialPubKey - the public key (hex encoded) for the credential to revoke\n     * @param {bigint} nonce - the nonce of the owner inside the contract\n     * @param {Date} expiry - Expiry time of the revocation message\n     * @param {string} [reason] - the reason for the revocation\n     *\n     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.revokeCredentialOther update.\n     */\n    public async createRevokeCredentialAsOther(\n        metadata: CreateContractTransactionMetadata,\n        revokerSigner: Web3IdSigner,\n        credentialPubKey: HexString,\n        nonce: bigint,\n        expiry: Date,\n        reason?: string\n    ): Promise<ContractUpdateTransactionWithSchema> {\n        const revocationPubKey = revokerSigner.pubKey;\n        const entrypoint = EntrypointName.fromStringUnchecked('revokeCredentialOther');\n        const signingData: CIS4.SigningData = {\n            contractAddress: this.contractAddress,\n            entrypoint,\n            nonce,\n            timestamp: Timestamp.fromDate(expiry),\n        };\n        const serializedData = serializeCIS4RevocationDataOther({\n            credentialPubKey,\n            revocationPubKey,\n            signingData,\n            reason,\n        });\n        const digest = Buffer.concat([REVOKE_DOMAIN, serializedData]);\n        const signature = await revokerSigner.sign(digest);\n\n        return this.createUpdateTransaction<CIS4.RevokeCredentialOtherParam, CIS4.RevokeCredentialOtherParamJson>(\n            entrypoint,\n            () => Buffer.concat([signature, serializedData]), // Reuse existing serialization\n            metadata,\n            {\n                signature: signature.toString('hex'),\n                data: {\n                    credentialPubKey,\n                    signingData,\n                    revocationPubKey,\n                    reason,\n                },\n            },\n            formatCIS4RevokeCredentialOther\n        );\n    }\n\n    /**\n     * Submit CIS4.revokeCredentialOther update transaction.\n     * The revocation message is set to expire at the same time as the transaction (from `metadata.expiry`)\n     *\n     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.\n     * @param {ContractTransactionMetadata} metadata - transaction metadata\n     * @param {Web3IdSigner} revokerSigner - A signer structure for the credential holder\n     * @param {HexString} credentialPubKey - the public key (hex encoded) for the credential to revoke\n     * @param {bigint} nonce - the nonce of the owner inside the contract\n     * @param {string} [reason] - the reason for the revocation\n     *\n     * @returns {TransactionHash.Type} The hash of the submitted transaction\n     */\n    public async revokeCredentialAsOther(\n        signer: AccountSigner,\n        metadata: ContractTransactionMetadata,\n        revokerSigner: Web3IdSigner,\n        credentialPubKey: HexString,\n        nonce: bigint,\n        reason?: string\n    ): Promise<TransactionHash.Type> {\n        const transaction = await this.createRevokeCredentialAsOther(\n            metadata,\n            revokerSigner,\n            credentialPubKey,\n            nonce,\n            TransactionExpiry.toDate(metadata.expiry ?? getContractUpdateDefaultExpiryDate()),\n            reason\n        );\n        return this.sendUpdateTransaction(transaction, metadata, signer);\n    }\n\n    /**\n     * Create the details necessary to submit a CIS4.registerRevicationKeys update transaction.\n     *\n     * @param {CreateContractTransactionMetadata} metadata - transaction metadata\n     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be used for revocation\n     * @param {HexString} [additionalData] - any additional data to include\n     *\n     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.registerRevicationKeys update.\n     */\n    public createRegisterRevocationKeys(\n        metadata: CreateContractTransactionMetadata,\n        keys: HexString | HexString[],\n        additionalData: HexString = ''\n    ): ContractUpdateTransactionWithSchema {\n        const ks = Array.isArray(keys) ? keys : [keys];\n        return this.createUpdateTransaction(\n            EntrypointName.fromStringUnchecked('registerRevocationKeys'),\n            serializeCIS4UpdateRevocationKeysParam,\n            metadata,\n            { additionalData, keys: ks },\n            formatCIS4UpdateRevocationKeys\n        );\n    }\n\n    /**\n     * Submit CIS4.registerRevocationKeys update transaction.\n     *\n     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.\n     * @param {ContractTransactionMetadata} metadata - transaction metadata\n     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be used for revocation\n     * @param {HexString} [additionalData] - any additional data to include\n     *\n     * @returns {TransactionHash.Type} The hash of the submitted transaction\n     */\n    public registerRevocationKeys(\n        signer: AccountSigner,\n        metadata: ContractTransactionMetadata,\n        keys: HexString | HexString[],\n        additionalData: HexString = ''\n    ): Promise<TransactionHash.Type> {\n        const transaction = this.createRegisterRevocationKeys(metadata, keys, additionalData);\n        return this.sendUpdateTransaction(transaction, metadata, signer);\n    }\n\n    /**\n     * Create the details necessary to submit a CIS4.removeRevicationKeys update transaction.\n     *\n     * @param {CreateContractTransactionMetadata} metadata - transaction metadata\n     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be removed\n     * @param {HexString} [additionalData] - any additional data to include\n     *\n     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.removeRevicationKeys update.\n     */\n    public createRemoveRevocationKeys(\n        metadata: CreateContractTransactionMetadata,\n        keys: HexString | HexString[],\n        additionalData: HexString = ''\n    ): ContractUpdateTransactionWithSchema {\n        const ks = Array.isArray(keys) ? keys : [keys];\n        return this.createUpdateTransaction(\n            EntrypointName.fromStringUnchecked('removeRevocationKeys'),\n            serializeCIS4UpdateRevocationKeysParam,\n            metadata,\n            { additionalData, keys: ks },\n            formatCIS4UpdateRevocationKeys\n        );\n    }\n\n    /**\n     * Submit CIS4.removeRevocationKeys update transaction.\n     *\n     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.\n     * @param {ContractTransactionMetadata} metadata - transaction metadata\n     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be removed\n     * @param {HexString} [additionalData] - any additional data to include\n     *\n     * @returns {TransactionHash.Type} The hash of the submitted transaction\n     */\n    public removeRevocationKeys(\n        signer: AccountSigner,\n        metadata: ContractTransactionMetadata,\n        keys: HexString | HexString[],\n        additionalData: HexString = ''\n    ): Promise<TransactionHash.Type> {\n        const transaction = this.createRemoveRevocationKeys(metadata, keys, additionalData);\n        return this.sendUpdateTransaction(transaction, metadata, signer);\n    }\n}\n","// Functionality for working with the CIS2 standard\nexport * from '../cis2/index.js';\n","var o=(e=>(e[e.NEVER=-1]=\"NEVER\",e[e.PREFERRED=0]=\"PREFERRED\",e[e.ALWAYS=1]=\"ALWAYS\",e))(o||{});export{o as DiagnosticSizes};\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","import { stringify } from 'json-bigint';\n\nimport { CISContract, ContractDryRun } from '../GenericContract.js';\nimport { CIS0, cis0Supports } from '../cis0.js';\nimport { ensureMatchesInput } from '../deserializationHelpers.js';\nimport { ConcordiumGRPCClient } from '../grpc/GRPCClient.js';\nimport { AccountSigner } from '../signHelpers.js';\nimport type { HexString, InvokeContractResult } from '../types.js';\nimport * as BlockHash from '../types/BlockHash.js';\nimport * as ContractAddress from '../types/ContractAddress.js';\nimport * as ContractName from '../types/ContractName.js';\nimport * as EntrypointName from '../types/EntrypointName.js';\nimport * as TransactionHash from '../types/TransactionHash.js';\nimport { makeDynamicFunction } from '../util.js';\nimport {\n    CIS2,\n    deserializeCIS2BalanceOfResponse,\n    deserializeCIS2OperatorOfResponse,\n    deserializeCIS2TokenMetadataResponse,\n    formatCIS2Transfer,\n    formatCIS2UpdateOperator,\n    serializeCIS2BalanceOfQueries,\n    serializeCIS2OperatorOfQueries,\n    serializeCIS2TokenIds,\n    serializeCIS2Transfers,\n    serializeCIS2UpdateOperators,\n} from './util.js';\n\ntype Views = 'balanceOf' | 'operatorOf' | 'tokenMetadata';\ntype Updates = 'transfer' | 'updateOperator';\n\n/**\n * Contains methods for performing dry-run invocations of update instructions on CIS-2 smart contracts.\n */\nclass CIS2DryRun extends ContractDryRun<Updates> {\n    /**\n     * Performs a dry-run invocation of \"transfer\" on a corresponding {@link CIS2Contract} instance\n     *\n     * @param {CIS2.Address} sender - Address of the sender of the transfer.\n     * @param {CIS2.Transfer | CIS2.Transfer[]} transfer(s) - The transfer object(s).\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.\n     */\n    public transfer(\n        sender: CIS2.Address,\n        transfer: CIS2.Transfer,\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult>;\n    public transfer(\n        sender: CIS2.Address,\n        transfers: CIS2.Transfer[],\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult>;\n    public transfer(\n        sender: CIS2.Address,\n        transfers: CIS2.Transfer | CIS2.Transfer[],\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult> {\n        const serialize = makeDynamicFunction(serializeCIS2Transfers);\n        return this.invokeMethod(\n            EntrypointName.fromStringUnchecked('transfer'),\n            sender,\n            serialize,\n            transfers,\n            blockHash\n        );\n    }\n\n    /**\n     * Performs a dry-run invocation of \"updateOperator\" on a corresponding {@link CIS2Contract} instance\n     *\n     * @param {CIS2.Address} owner - Address of the owner of the address to perform the update on.\n     * @param {CIS2.UpdateOperator | CIS2.UpdateOperator[]} update(s) - The update object(s).\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.\n     *\n     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.\n     */\n    public updateOperator(\n        owner: CIS2.Address,\n        update: CIS2.UpdateOperator,\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult>;\n    public updateOperator(\n        owner: CIS2.Address,\n        updates: CIS2.UpdateOperator[],\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult>;\n    public updateOperator(\n        owner: CIS2.Address,\n        updates: CIS2.UpdateOperator | CIS2.UpdateOperator[],\n        blockHash?: BlockHash.Type\n    ): Promise<InvokeContractResult> {\n        const serialize = makeDynamicFunction(serializeCIS2UpdateOperators);\n        return this.invokeMethod(\n            EntrypointName.fromStringUnchecked('updateOperator'),\n            owner,\n            serialize,\n            updates,\n            blockHash\n        );\n    }\n}\n\n/**\n * Contains methods for performing operations on CIS-2 smart contracts.\n */\nexport class CIS2Contract extends CISContract<Updates, Views, CIS2DryRun> {\n    public schema: Record<'transfer' | 'updateOperator', string> = {\n        /** Base64 encoded schema for CIS-2.transfer parameter */\n        transfer:\n            'EAEUAAUAAAAIAAAAdG9rZW5faWQdAAYAAABhbW91bnQbJQAAAAQAAABmcm9tFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAIAAAB0bxUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAgAAAAwWAQQAAABkYXRhHQE',\n        /** Base64 encoded schema for CIS-2.updateOperator parameter */\n        updateOperator:\n            'EAEUAAIAAAAGAAAAdXBkYXRlFQIAAAAGAAAAUmVtb3ZlAgMAAABBZGQCCAAAAG9wZXJhdG9yFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA',\n    };\n    protected makeDryRunInstance(\n        grpcClient: ConcordiumGRPCClient,\n        contractAddress: ContractAddress.Type,\n        contractName: ContractName.Type\n    ): CIS2DryRun {\n        return new CIS2DryRun(grpcClient, contractAddress, contractName);\n    }\n\n    /**\n     * Creates a new `CIS2Contract` instance by querying the node for the necessary information through the supplied `grpcClient`.\n     *\n     * @param {ConcordiumGRPCClient} grpcClient - The client used for contract invocations and updates.\n     * @param {ContractAddress.Type} contractAddress - Address of the contract instance.\n     *\n     * @throws If `InstanceInfo` could not be received for the contract, if the contract does not support the CIS-2 standard,\n     * or if the contract name could not be parsed from the information received from the node.\n     */\n    public static async create(\n        grpcClient: ConcordiumGRPCClient,\n        contractAddress: ContractAddress.Type\n    ): Promise<CIS2Contract> {\n        const contractName = await super.getContractName(grpcClient, contractAddress);\n\n        const result = await cis0Supports(grpcClient, contractAddress, 'CIS-2');\n        if (result?.type !== CIS0.SupportType.Support) {\n            throw new Error(\n                `The CIS-2 standard is not supported by the contract at address ${stringify(contractAddress)}`\n            );\n        }\n\n        return new CIS2Contract(grpcClient, contractAddress, contractName);\n    }\n\n    /**\n     * Creates a CIS-2 \"transfer\" update transaction containing a single transfer.\n     * This is particularly useful if you need the parts required for a wallet to submit the transaction.\n     *\n     * @param {CIS2.CreateTransactionMetadata} metadata - Metadata needed for the transaction creation.\n     * @param {CIS2.Transfer} transfer - The transfer object specifying the details of the transfer.\n     *\n     * @throws If the transaction could not be created successfully.\n     *\n     * @returns {CIS2.UpdateTransaction} An object containing the parts of the transaction needed for submission.\n     */\n    public createTransfer(\n        metadata: CIS2.CreateTransactionMetadata,\n        transfer: CIS2.Transfer\n    ): CIS2.UpdateTransaction<CIS2.TransferParamJson[]>;\n    /**\n     * Creates a CIS-2 \"transfer\" update transaction containing a list transfers.\n     * This is particularly useful if you need the parts required for a wallet to submit the transaction.\n     *\n     * @param {CIS2.CreateTransactionMetadata} metadata - Metadata needed for the transaction creation.\n     * @param {CIS2.Transfer[]} transfers - A list of transfer objects, each specifying the details of a transfer.\n     *\n     * @throws If the transaction could not be created successfully.\n     *\n     * @returns {CIS2.UpdateTransaction} An object containing the parts of the transaction needed for submission.\n     */\n    public createTransfer(\n        metadata: CIS2.CreateTransactionMetadata,\n        transfers: CIS2.Transfer[]\n    ): CIS2.UpdateTransaction<CIS2.TransferParamJson[]>;\n    public createTransfer(\n        metadata: CIS2.CreateTransactionMetadata,\n        transfers: CIS2.Transfer | CIS2.Transfer[]\n    ): CIS2.UpdateTransaction<CIS2.TransferParamJson[]>;\n    public createTransfer(\n        metadata: CIS2.CreateTransactionMetadata,\n        transfers: CIS2.Transfer | CIS2.Transfer[]\n    ): CIS2.UpdateTransaction<CIS2.TransferParamJson[]> {\n        const serialize = makeDynamicFunction(serializeCIS2Transfers);\n        const format = makeDynamicFunction((us: CIS2.Transfer[]) => us.map(formatCIS2Transfer));\n\n        return this.createUpdateTransaction(\n            EntrypointName.fromStringUnchecked('transfer'),\n            serialize,\n            metadata,\n            transfers,\n            format\n        ) as CIS2.UpdateTransaction<CIS2.TransferParamJson[]>;\n    }\n    /**\n     * Sends a CIS-2 \"transfer\" update transaction containing a single transfer.\n     *\n     * @param {CIS2.TransactionMetadata} metadata - Metadata needed for the transaction.\n     * @param {CIS2.Transfer} transfer - The transfer object specifying the details of the transfer.\n     * @param {AccountSigner} signer - To be used for signing the transaction sent to the node.\n     *\n     * @throws If the update could not be invoked successfully.\n     *\n     * @returns {Promise<TransactionHash.Type>} The transaction hash of the update transaction\n     */\n    public transfer(\n        metadata: CIS2.TransactionMetadata,\n        transfer: CIS2.Transfer,\n        signer: AccountSigner\n    ): Promise<TransactionHash.Type>;\n    /**\n     * Sends a CIS-2 \"transfer\" update transaction containing a list transfers.\n     *\n     * @param {CIS2.TransactionMetadata} metadata - Metadata needed for the transaction.\n     * @param {CIS2.Transfer[]} transfers - A list of transfer objects, each specifying the details of a transfer.\n     * @param {AccountSigner} signer - To be used for signing the transaction sent to the node.\n     *\n     * @throws If the update could not be invoked successfully.\n     *\n     * @returns {Promise<TransactionHash.Type>} The transaction hash of the update transaction\n     */\n    public transfer(\n        metadata: CIS2.TransactionMetadata,\n        transfers: CIS2.Transfer[],\n        signer: AccountSigner\n    ): Promise<TransactionHash.Type>;\n    public transfer(\n        metadata: CIS2.TransactionMetadata,\n        transfers: CIS2.Transfer | CIS2.Transfer[],\n        signer: AccountSigner\n    ): Promise<TransactionHash.Type> {\n        const transaction = this.createTransfer(metadata, transfers);\n        return this.sendUpdateTransaction(transaction, metadata, signer);\n    }\n\n    /**\n     * Creates a CIS-2 \"operatorOf\" update transaction containing a single operator update instruction.\n     * This is particularly useful if you need the parts required for a wallet to submit the transaction.\n     *\n     * @param {CIS2.CreateTransactionMetadata} metadata - Metadata needed for the transaction creation.\n     * @param {CIS2.UpdateOperator} update - The update instruction object specifying the details of the update.\n     *\n     * @throws If the transaction could not be created successfully.\n     *\n     * @returns {CIS2.UpdateTransaction} An object containing the parts of the transaction needed for submission.\n     */\n    public createUpdateOperator(\n        metadata: CIS2.CreateTransactionMetadata,\n        update: CIS2.UpdateOperator\n    ): CIS2.UpdateTransaction<CIS2.UpdateOperatorParamJson[]>;\n    /**\n     * Creates a CIS-2 \"operatorOf\" update transaction containing a list of operator update instructions.\n     * This is particularly useful if you need the parts required for a wallet to submit the transaction.\n     *\n     * @param {CIS2.CreateTransactionMetadata} metadata - Metadata needed for the transaction creation.\n     * @param {CIS2.UpdateOperator[]} updates - A list of update instruction objects, each specifying the details of an update.\n     *\n     * @throws If the transaction could not be created successfully.\n     *\n     * @returns {CIS2.UpdateTransaction} An object containing the parts of the transaction needed for submission.\n     */\n    public createUpdateOperator(\n        metadata: CIS2.CreateTransactionMetadata,\n        updates: CIS2.UpdateOperator[]\n    ): CIS2.UpdateTransaction<CIS2.UpdateOperatorParamJson[]>;\n    public createUpdateOperator(\n        metadata: CIS2.CreateTransactionMetadata,\n        updates: CIS2.UpdateOperator | CIS2.UpdateOperator[]\n    ): CIS2.UpdateTransaction<CIS2.UpdateOperatorParamJson[]>;\n    public createUpdateOperator(\n        metadata: CIS2.CreateTransactionMetadata,\n        updates: CIS2.UpdateOperator | CIS2.UpdateOperator[]\n    ): CIS2.UpdateTransaction<CIS2.UpdateOperatorParamJson[]> {\n        const serialize = makeDynamicFunction(serializeCIS2UpdateOperators);\n        const format = makeDynamicFunction((us: CIS2.UpdateOperator[]) => us.map(formatCIS2UpdateOperator));\n\n        return this.createUpdateTransaction(\n            EntrypointName.fromStringUnchecked('updateOperator'),\n            serialize,\n            metadata,\n            updates,\n            format\n        ) as CIS2.UpdateTransaction<CIS2.UpdateOperatorParamJson[]>;\n    }\n\n    /**\n     * Sends a CIS-2 \"operatorOf\" update transaction containing a single operator update instruction.\n     *\n     * @param {CIS2.TransactionMetadata} metadata - Metadata needed for the transaction.\n     * @param {CIS2.UpdateOperator} update - The update instruction object specifying the details of the update.\n     * @param {AccountSigner} signer - To be used for signing the transaction sent to the node.\n     *\n     * @throws If the update could not be invoked successfully.\n     *\n     * @returns {Promise<TransactionHash.Type>} The transaction hash of the update transaction\n     */\n    public updateOperator(\n        metadata: CIS2.TransactionMetadata,\n        update: CIS2.UpdateOperator,\n        signer: AccountSigner\n    ): Promise<TransactionHash.Type>;\n    /**\n     * Sends a CIS-2 \"operatorOf\" update transaction containing a list of operator update instructions.\n     *\n     * @param {CIS2.TransactionMetadata} metadata - Metadata needed for the transaction.\n     * @param {CIS2.UpdateOperator[]} updates - A list of update instruction objects, each specifying the details of an update.\n     * @param {AccountSigner} signer - To be used for signing the transaction sent to the node.\n     *\n     * @throws If the update could not be invoked successfully.\n     *\n     * @returns {Promise<TransactionHash.Type>} The transaction hash of the update transaction\n     */\n    public updateOperator(\n        metadata: CIS2.TransactionMetadata,\n        updates: CIS2.UpdateOperator[],\n        signer: AccountSigner\n    ): Promise<TransactionHash.Type>;\n    public updateOperator(\n        metadata: CIS2.TransactionMetadata,\n        updates: CIS2.UpdateOperator | CIS2.UpdateOperator[],\n        signer: AccountSigner\n    ): Promise<TransactionHash.Type> {\n        const transaction = this.createUpdateOperator(metadata, updates);\n        return this.sendUpdateTransaction(transaction, metadata, signer);\n    }\n\n    /**\n     * Invokes CIS-2 \"balanceOf\" with a single query.\n     *\n     * @param {CIS2.BalanceOfQuery} query - The query object specifying the details of the query.\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the query at. Defaults to the latest finalized block.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {bigint} The balance corresponding to the query.\n     */\n    public balanceOf(query: CIS2.BalanceOfQuery, blockHash?: BlockHash.Type): Promise<bigint>;\n    /**\n     * Invokes CIS-2 \"balanceOf\" with a list of queries.\n     *\n     * @param {CIS2.BalanceOfQuery[]} queries - A list of query objects, each specifying the details of a query.\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the query at. Defaults to the latest finalized block.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {bigint[]} A list of balances corresponding to and ordered by the list of queries.\n     */\n    public balanceOf(queries: CIS2.BalanceOfQuery[], blockHash?: BlockHash.Type): Promise<bigint[]>;\n    public async balanceOf(\n        queries: CIS2.BalanceOfQuery | CIS2.BalanceOfQuery[],\n        blockHash?: BlockHash.Type\n    ): Promise<bigint | bigint[]> {\n        const serialize = makeDynamicFunction(serializeCIS2BalanceOfQueries);\n        const deserialize = ensureMatchesInput(queries, deserializeCIS2BalanceOfResponse);\n        return this.invokeView(\n            EntrypointName.fromStringUnchecked('balanceOf'),\n            serialize,\n            deserialize,\n            queries,\n            blockHash\n        );\n    }\n\n    /**\n     * Invokes CIS-2 \"operatorOf\" with a single query.\n     *\n     * @param {CIS2.OperatorOfQuery} query - The query object specifying the details of the query.\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the query at. Defaults to the latest finalized block.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {boolean} Whether the specified address is an operator of the specified owner.\n     */\n    public operatorOf(query: CIS2.OperatorOfQuery, blockHash?: BlockHash.Type): Promise<boolean>;\n    /**\n     * Invokes CIS-2 \"operatorOf\" with a list of queries.\n     *\n     * @param {CIS2.OperatorOfQuery[]} queries - A list of query objects, each specifying the details of a query.\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the query at. Defaults to the latest finalized block.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {boolean[]} As list of boolean results, each detailing whether the specified address is an operator of the specified owner for the corresponding query.\n     * The list is ordered by the corresponding query.\n     */\n    public operatorOf(queries: CIS2.OperatorOfQuery[], blockHash?: BlockHash.Type): Promise<boolean[]>;\n    public operatorOf(\n        queries: CIS2.OperatorOfQuery | CIS2.OperatorOfQuery[],\n        blockHash?: BlockHash.Type\n    ): Promise<boolean | boolean[]> {\n        const serialize = makeDynamicFunction(serializeCIS2OperatorOfQueries);\n        const deserialize = ensureMatchesInput(queries, deserializeCIS2OperatorOfResponse);\n        return this.invokeView(\n            EntrypointName.fromStringUnchecked('operatorOf'),\n            serialize,\n            deserialize,\n            queries,\n            blockHash\n        );\n    }\n\n    /**\n     * Invokes CIS-2 \"tokenMetadata\" with a single token ID.\n     *\n     * @param {HexString} tokenId - The ID of the token to get the metadata URL for.\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the query at. Defaults to the latest finalized block.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {CIS2.MetadataUrl} An object containing the URL of the token metadata.\n     */\n    public tokenMetadata(tokenId: HexString, blockHash?: BlockHash.Type): Promise<CIS2.MetadataUrl>;\n    /**\n     * Invokes CIS-2 \"tokenMetadata\" with a list of token ID's.\n     *\n     * @param {HexString[]} tokenIds - A list of ID's of the tokens to get metadata URL's for.\n     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the query at. Defaults to the latest finalized block.\n     *\n     * @throws If the query could not be invoked successfully.\n     *\n     * @returns {CIS2.MetadataUrl[]} A list of objects containing URL's for token metadata for the corresponding token.\n     * The list is ordered by the token ID's given by `tokenIds` input parameter.\n     */\n    public tokenMetadata(tokenIds: HexString[], blockHash?: BlockHash.Type): Promise<CIS2.MetadataUrl[]>;\n    public tokenMetadata(\n        tokenIds: HexString | HexString[],\n        blockHash?: BlockHash.Type\n    ): Promise<CIS2.MetadataUrl | CIS2.MetadataUrl[]> {\n        const serialize = makeDynamicFunction(serializeCIS2TokenIds);\n        const deserialize = ensureMatchesInput(tokenIds, deserializeCIS2TokenMetadataResponse);\n        return this.invokeView(\n            EntrypointName.fromStringUnchecked('tokenMetadata'),\n            serialize,\n            deserialize,\n            tokenIds,\n            blockHash\n        );\n    }\n}\n","export {\n    Type,\n    JSON,\n    Err,\n    ErrorType,\n    toCBOR,\n    fromCBOR,\n    registerCBOREncoder,\n    registerCBORDecoder,\n    zero,\n    create,\n    equals,\n    toDecimal,\n    fromDecimal,\n    instanceOf,\n    fromJSON,\n} from '../../plt/TokenAmount.js';\n","import { getAccountTransactionHandler } from './accountTransactions.js';\nimport { Cursor } from './deserializationHelpers.js';\nimport {\n    AccountTransaction,\n    AccountTransactionHeader,\n    AccountTransactionSignature,\n    isAccountTransactionType,\n} from './types.js';\nimport * as AccountAddress from './types/AccountAddress.js';\nimport * as AccountSequenceNumber from './types/SequenceNumber.js';\nimport * as TransactionExpiry from './types/TransactionExpiry.js';\n\n/**\n * Reads an unsigned 8-bit integer from the given {@link Cursor}.\n *\n * @param source input stream\n * @returns number from 0 to 255\n */\nexport function deserializeUint8(source: Cursor): number {\n    return source.read(1).readUInt8(0);\n}\n\nfunction deserializeMap<K extends string | number | symbol, T>(\n    serialized: Cursor,\n    decodeSize: (size: Cursor) => number,\n    decodeKey: (k: Cursor) => K,\n    decodeValue: (t: Cursor) => T\n): Record<K, T> {\n    const size = decodeSize(serialized);\n    const result = {} as Record<K, T>;\n    for (let i = 0; i < size; i += 1) {\n        const key = decodeKey(serialized);\n        const value = decodeValue(serialized);\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction deserializeAccountTransactionSignature(signatures: Cursor): AccountTransactionSignature {\n    const decodeSignature = (serialized: Cursor) => {\n        const length = serialized.read(2).readUInt16BE(0);\n        return serialized.read(length).toString('hex');\n    };\n    const decodeCredentialSignatures = (serialized: Cursor) =>\n        deserializeMap(serialized, deserializeUint8, deserializeUint8, decodeSignature);\n    return deserializeMap(signatures, deserializeUint8, deserializeUint8, decodeCredentialSignatures);\n}\n\nfunction deserializeTransactionHeader(serializedHeader: Cursor): AccountTransactionHeader {\n    const sender = AccountAddress.fromBuffer(serializedHeader.read(32));\n    const nonce = AccountSequenceNumber.create(serializedHeader.read(8).readBigUInt64BE(0));\n    // TODO: extract payloadSize and energyAmount?\n    // energyAmount\n    serializedHeader.read(8).readBigUInt64BE(0);\n    // payloadSize\n    serializedHeader.read(4).readUInt32BE(0);\n    const expiry = TransactionExpiry.fromEpochSeconds(serializedHeader.read(8).readBigUInt64BE(0));\n    return {\n        sender,\n        nonce,\n        expiry,\n    };\n}\n\nexport function deserializeAccountTransaction(serializedTransaction: Cursor): {\n    accountTransaction: AccountTransaction;\n    signatures: AccountTransactionSignature;\n} {\n    const signatures = deserializeAccountTransactionSignature(serializedTransaction);\n\n    const header = deserializeTransactionHeader(serializedTransaction);\n\n    const transactionType = deserializeUint8(serializedTransaction);\n    if (!isAccountTransactionType(transactionType)) {\n        throw new Error('TransactionType is not a valid value: ' + transactionType);\n    }\n    const accountTransactionHandler = getAccountTransactionHandler(transactionType);\n    const payload = accountTransactionHandler.deserialize(serializedTransaction);\n\n    return {\n        accountTransaction: {\n            type: transactionType,\n            payload,\n            header,\n        },\n        signatures,\n    };\n}\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size\n// @generated from protobuf file \"v2/concordium/service.proto\" (package \"concordium.v2\", syntax proto3)\n// tslint:disable\nimport type { RpcTransport } from \"@protobuf-ts/runtime-rpc\";\nimport type { ServiceInfo } from \"@protobuf-ts/runtime-rpc\";\nimport { Queries } from \"./service.js\";\nimport type { DryRunResponse } from \"./types.js\";\nimport type { DryRunRequest } from \"./types.js\";\nimport type { DuplexStreamingCall } from \"@protobuf-ts/runtime-rpc\";\nimport type { ConsensusDetailedStatus } from \"./types.js\";\nimport type { ConsensusDetailedStatusQuery } from \"./types.js\";\nimport type { WinningBaker } from \"./types.js\";\nimport type { EpochRequest } from \"./types.js\";\nimport type { BlockCertificates } from \"./types.js\";\nimport type { BakerRewardPeriodInfo } from \"./types.js\";\nimport type { BlockItem } from \"./types.js\";\nimport type { BlockFinalizationSummary } from \"./types.js\";\nimport type { ChainParameters } from \"./types.js\";\nimport type { AccountTransactionSignHash } from \"./types.js\";\nimport type { PreAccountTransaction } from \"./types.js\";\nimport type { SendBlockItemRequest } from \"./types.js\";\nimport type { NodeInfo } from \"./types.js\";\nimport type { PeersInfo } from \"./types.js\";\nimport type { DumpRequest } from \"./types.js\";\nimport type { BannedPeer } from \"./types.js\";\nimport type { PeerToBan } from \"./types.js\";\nimport type { BannedPeers } from \"./types.js\";\nimport type { IpSocketAddress } from \"./types.js\";\nimport type { Timestamp } from \"./types.js\";\nimport type { AccountIndex } from \"./types.js\";\nimport type { AccountPending } from \"./types.js\";\nimport type { NextUpdateSequenceNumbers } from \"./types.js\";\nimport type { PendingUpdate } from \"./types.js\";\nimport type { BlockSpecialEvent } from \"./types.js\";\nimport type { BlockItemSummary } from \"./types.js\";\nimport type { ArInfo } from \"./types.js\";\nimport type { IpInfo } from \"./types.js\";\nimport type { ElectionInfo } from \"./types.js\";\nimport type { Branch } from \"./types.js\";\nimport type { DelegatorRewardPeriodInfo } from \"./types.js\";\nimport type { DelegatorInfo } from \"./types.js\";\nimport type { GetPoolDelegatorsRequest } from \"./types.js\";\nimport type { InvokeInstanceResponse } from \"./types.js\";\nimport type { InvokeInstanceRequest } from \"./types.js\";\nimport type { TokenomicsInfo } from \"./types.js\";\nimport type { BlocksAtHeightResponse } from \"./types.js\";\nimport type { BlocksAtHeightRequest } from \"./types.js\";\nimport type { PassiveDelegationInfo } from \"./types.js\";\nimport type { PoolInfoResponse } from \"./types.js\";\nimport type { PoolInfoRequest } from \"./types.js\";\nimport type { BakerId } from \"./types.js\";\nimport type { BlockInfo } from \"./types.js\";\nimport type { CryptographicParameters } from \"./types.js\";\nimport type { BlockItemStatus } from \"./types.js\";\nimport type { TransactionHash } from \"./types.js\";\nimport type { ConsensusInfo } from \"./types.js\";\nimport type { NextAccountSequenceNumber } from \"./types.js\";\nimport type { InstanceStateValueAtKey } from \"./types.js\";\nimport type { InstanceStateLookupRequest } from \"./types.js\";\nimport type { InstanceStateKVPair } from \"./types.js\";\nimport type { InstanceInfo } from \"./types.js\";\nimport type { InstanceInfoRequest } from \"./types.js\";\nimport type { ContractAddress } from \"./types.js\";\nimport type { VersionedModuleSource } from \"./types.js\";\nimport type { ModuleSourceRequest } from \"./types.js\";\nimport type { BlockHash } from \"./types.js\";\nimport type { AncestorsRequest } from \"./types.js\";\nimport type { ModuleRef } from \"./types.js\";\nimport type { TokenId } from \"./protocol-level-tokens.js\";\nimport type { AccountAddress } from \"./kernel.js\";\nimport type { BlockHashInput } from \"./types.js\";\nimport type { TokenInfo } from \"./types.js\";\nimport type { TokenInfoRequest } from \"./types.js\";\nimport type { AccountInfo } from \"./types.js\";\nimport type { AccountInfoRequest } from \"./types.js\";\nimport type { UnaryCall } from \"@protobuf-ts/runtime-rpc\";\nimport type { FinalizedBlockInfo } from \"./types.js\";\nimport { stackIntercept } from \"@protobuf-ts/runtime-rpc\";\nimport type { ArrivedBlockInfo } from \"./types.js\";\nimport type { Empty } from \"./types.js\";\nimport type { ServerStreamingCall } from \"@protobuf-ts/runtime-rpc\";\nimport type { RpcOptions } from \"@protobuf-ts/runtime-rpc\";\n/**\n * @generated from protobuf service concordium.v2.Queries\n */\nexport interface IQueriesClient {\n    /**\n     * Return a stream of blocks that arrive from the time the query is made onward.\n     * This can be used to listen for incoming blocks.\n     *\n     * @generated from protobuf rpc: GetBlocks(concordium.v2.Empty) returns (stream concordium.v2.ArrivedBlockInfo);\n     */\n    getBlocks(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, ArrivedBlockInfo>;\n    /**\n     * Return a stream of blocks that are finalized from the time the query is\n     * made onward. This can be used to listen for newly finalized blocks. Note\n     * that there is no guarantee that blocks will not be skipped if the client is\n     * too slow in processing the stream, however blocks will always be sent by\n     * increasing block height.\n     *\n     * @generated from protobuf rpc: GetFinalizedBlocks(concordium.v2.Empty) returns (stream concordium.v2.FinalizedBlockInfo);\n     */\n    getFinalizedBlocks(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, FinalizedBlockInfo>;\n    /**\n     * Retrieve the information about the given account in the given block.\n     *\n     * @generated from protobuf rpc: GetAccountInfo(concordium.v2.AccountInfoRequest) returns (concordium.v2.AccountInfo);\n     */\n    getAccountInfo(input: AccountInfoRequest, options?: RpcOptions): UnaryCall<AccountInfoRequest, AccountInfo>;\n    /**\n     * Retrieve the information about the given token in the given block.\n     *\n     * @generated from protobuf rpc: GetTokenInfo(concordium.v2.TokenInfoRequest) returns (concordium.v2.TokenInfo);\n     */\n    getTokenInfo(input: TokenInfoRequest, options?: RpcOptions): UnaryCall<TokenInfoRequest, TokenInfo>;\n    /**\n     * Retrieve the list of accounts that exist at the end of the given block.\n     *\n     * @generated from protobuf rpc: GetAccountList(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountAddress);\n     */\n    getAccountList(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, AccountAddress>;\n    /**\n     * Retrieve the list of protocol level tokens that exist at the end of the\n     * given block.\n     *\n     * @generated from protobuf rpc: GetTokenList(concordium.v2.BlockHashInput) returns (stream concordium.v2.plt.TokenId);\n     */\n    getTokenList(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, TokenId>;\n    /**\n     * Get a list of all smart contract modules. The stream will end\n     * when all modules that exist in the state at the end of the given\n     * block have been returned.\n     *\n     * @generated from protobuf rpc: GetModuleList(concordium.v2.BlockHashInput) returns (stream concordium.v2.ModuleRef);\n     */\n    getModuleList(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, ModuleRef>;\n    /**\n     * Get a stream of ancestors for the provided block.\n     * Starting with the provided block itself, moving backwards until no more\n     * ancestors or the requested number of ancestors has been returned.\n     *\n     * @generated from protobuf rpc: GetAncestors(concordium.v2.AncestorsRequest) returns (stream concordium.v2.BlockHash);\n     */\n    getAncestors(input: AncestorsRequest, options?: RpcOptions): ServerStreamingCall<AncestorsRequest, BlockHash>;\n    /**\n     * Get the source of a smart contract module.\n     *\n     * @generated from protobuf rpc: GetModuleSource(concordium.v2.ModuleSourceRequest) returns (concordium.v2.VersionedModuleSource);\n     */\n    getModuleSource(input: ModuleSourceRequest, options?: RpcOptions): UnaryCall<ModuleSourceRequest, VersionedModuleSource>;\n    /**\n     * Get a list of addresses for all smart contract instances. The stream\n     * will end when all instances that exist in the state at the end of the\n     * given block has been returned.\n     *\n     * @generated from protobuf rpc: GetInstanceList(concordium.v2.BlockHashInput) returns (stream concordium.v2.ContractAddress);\n     */\n    getInstanceList(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, ContractAddress>;\n    /**\n     * Get info about a smart contract instance as it appears at the end of the\n     * given block.\n     *\n     * @generated from protobuf rpc: GetInstanceInfo(concordium.v2.InstanceInfoRequest) returns (concordium.v2.InstanceInfo);\n     */\n    getInstanceInfo(input: InstanceInfoRequest, options?: RpcOptions): UnaryCall<InstanceInfoRequest, InstanceInfo>;\n    /**\n     * Get the exact state of a specific contract instance, streamed as a list of\n     * key-value pairs. The list is streamed in lexicographic order of keys.\n     *\n     * @generated from protobuf rpc: GetInstanceState(concordium.v2.InstanceInfoRequest) returns (stream concordium.v2.InstanceStateKVPair);\n     */\n    getInstanceState(input: InstanceInfoRequest, options?: RpcOptions): ServerStreamingCall<InstanceInfoRequest, InstanceStateKVPair>;\n    /**\n     * Get the value at a specific key of a contract state. In contrast to\n     * `GetInstanceState` this is more efficient, but requires the user to know\n     * the specific key to look for.\n     *\n     * @generated from protobuf rpc: InstanceStateLookup(concordium.v2.InstanceStateLookupRequest) returns (concordium.v2.InstanceStateValueAtKey);\n     */\n    instanceStateLookup(input: InstanceStateLookupRequest, options?: RpcOptions): UnaryCall<InstanceStateLookupRequest, InstanceStateValueAtKey>;\n    /**\n     * Get the best guess as to what the next account sequence number should be.\n     * If all account transactions are finalized then this information is reliable.\n     * Otherwise this is the best guess, assuming all other transactions will be\n     * committed to blocks and eventually finalized.\n     *\n     * @generated from protobuf rpc: GetNextAccountSequenceNumber(concordium.v2.AccountAddress) returns (concordium.v2.NextAccountSequenceNumber);\n     */\n    getNextAccountSequenceNumber(input: AccountAddress, options?: RpcOptions): UnaryCall<AccountAddress, NextAccountSequenceNumber>;\n    /**\n     * Get information about the current state of consensus.\n     *\n     * @generated from protobuf rpc: GetConsensusInfo(concordium.v2.Empty) returns (concordium.v2.ConsensusInfo);\n     */\n    getConsensusInfo(input: Empty, options?: RpcOptions): UnaryCall<Empty, ConsensusInfo>;\n    /**\n     * Get the status of and information about a specific block item (transaction).\n     *\n     * @generated from protobuf rpc: GetBlockItemStatus(concordium.v2.TransactionHash) returns (concordium.v2.BlockItemStatus);\n     */\n    getBlockItemStatus(input: TransactionHash, options?: RpcOptions): UnaryCall<TransactionHash, BlockItemStatus>;\n    /**\n     * Get the cryptographic parameters in a given block.\n     *\n     * @generated from protobuf rpc: GetCryptographicParameters(concordium.v2.BlockHashInput) returns (concordium.v2.CryptographicParameters);\n     */\n    getCryptographicParameters(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, CryptographicParameters>;\n    /**\n     * Get information, such as height, timings, and transaction counts for the given block.\n     *\n     * @generated from protobuf rpc: GetBlockInfo(concordium.v2.BlockHashInput) returns (concordium.v2.BlockInfo);\n     */\n    getBlockInfo(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, BlockInfo>;\n    /**\n     * Get all the bakers at the end of the given block.\n     *\n     * @generated from protobuf rpc: GetBakerList(concordium.v2.BlockHashInput) returns (stream concordium.v2.BakerId);\n     */\n    getBakerList(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, BakerId>;\n    /**\n     * Get information about a given pool at the end of a given block.\n     *\n     * @generated from protobuf rpc: GetPoolInfo(concordium.v2.PoolInfoRequest) returns (concordium.v2.PoolInfoResponse);\n     */\n    getPoolInfo(input: PoolInfoRequest, options?: RpcOptions): UnaryCall<PoolInfoRequest, PoolInfoResponse>;\n    /**\n     * Get information about the passive delegators at the end of a given block.\n     *\n     * @generated from protobuf rpc: GetPassiveDelegationInfo(concordium.v2.BlockHashInput) returns (concordium.v2.PassiveDelegationInfo);\n     */\n    getPassiveDelegationInfo(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, PassiveDelegationInfo>;\n    /**\n     * Get a list of live blocks at a given height.\n     *\n     * @generated from protobuf rpc: GetBlocksAtHeight(concordium.v2.BlocksAtHeightRequest) returns (concordium.v2.BlocksAtHeightResponse);\n     */\n    getBlocksAtHeight(input: BlocksAtHeightRequest, options?: RpcOptions): UnaryCall<BlocksAtHeightRequest, BlocksAtHeightResponse>;\n    /**\n     * Get information about tokenomics at the end of a given block.\n     *\n     * @generated from protobuf rpc: GetTokenomicsInfo(concordium.v2.BlockHashInput) returns (concordium.v2.TokenomicsInfo);\n     */\n    getTokenomicsInfo(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, TokenomicsInfo>;\n    /**\n     * Run the smart contract entrypoint in a given context and in the state at\n     * the end of the given block.\n     *\n     * @generated from protobuf rpc: InvokeInstance(concordium.v2.InvokeInstanceRequest) returns (concordium.v2.InvokeInstanceResponse);\n     */\n    invokeInstance(input: InvokeInstanceRequest, options?: RpcOptions): UnaryCall<InvokeInstanceRequest, InvokeInstanceResponse>;\n    /**\n     * Get the registered delegators of a given pool at the end of a given block.\n     * In contrast to the `GetPoolDelegatorsRewardPeriod` which returns delegators\n     * that are fixed for the reward period of the block, this endpoint returns the\n     * list of delegators that are registered in the block. Any changes to delegators\n     * are immediately visible in this list.\n     * The stream will end when all the delegators has been returned.\n     *\n     * @generated from protobuf rpc: GetPoolDelegators(concordium.v2.GetPoolDelegatorsRequest) returns (stream concordium.v2.DelegatorInfo);\n     */\n    getPoolDelegators(input: GetPoolDelegatorsRequest, options?: RpcOptions): ServerStreamingCall<GetPoolDelegatorsRequest, DelegatorInfo>;\n    /**\n     * Get the fixed delegators of a given pool for the reward period of the given block.\n     * In contracts to the `GetPoolDelegators` which returns delegators registered\n     * for the given block, this endpoint returns the fixed delegators contributing\n     * stake in the reward period containing the given block.\n     * The stream will end when all the delegators has been returned.\n     *\n     * @generated from protobuf rpc: GetPoolDelegatorsRewardPeriod(concordium.v2.GetPoolDelegatorsRequest) returns (stream concordium.v2.DelegatorRewardPeriodInfo);\n     */\n    getPoolDelegatorsRewardPeriod(input: GetPoolDelegatorsRequest, options?: RpcOptions): ServerStreamingCall<GetPoolDelegatorsRequest, DelegatorRewardPeriodInfo>;\n    /**\n     * Get the registered passive delegators at the end of a given block.\n     * In contrast to the `GetPassiveDelegatorsRewardPeriod` which returns delegators\n     * that are fixed for the reward period of the block, this endpoint returns the\n     * list of delegators that are registered in the block. Any changes to delegators\n     * are immediately visible in this list.\n     * The stream will end when all the delegators has been returned.\n     *\n     * @generated from protobuf rpc: GetPassiveDelegators(concordium.v2.BlockHashInput) returns (stream concordium.v2.DelegatorInfo);\n     */\n    getPassiveDelegators(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, DelegatorInfo>;\n    /**\n     * Get the fixed passive delegators for the reward period of the given block.\n     * In contracts to the `GetPassiveDelegators` which returns delegators registered\n     * for the given block, this endpoint returns the fixed delegators contributing\n     * stake in the reward period containing the given block.\n     * The stream will end when all the delegators has been returned.\n     *\n     * @generated from protobuf rpc: GetPassiveDelegatorsRewardPeriod(concordium.v2.BlockHashInput) returns (stream concordium.v2.DelegatorRewardPeriodInfo);\n     */\n    getPassiveDelegatorsRewardPeriod(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, DelegatorRewardPeriodInfo>;\n    /**\n     * Get the current branches of blocks starting from and including the last finalized block.\n     *\n     * @generated from protobuf rpc: GetBranches(concordium.v2.Empty) returns (concordium.v2.Branch);\n     */\n    getBranches(input: Empty, options?: RpcOptions): UnaryCall<Empty, Branch>;\n    /**\n     * Get information related to the baker election for a particular block.\n     *\n     * @generated from protobuf rpc: GetElectionInfo(concordium.v2.BlockHashInput) returns (concordium.v2.ElectionInfo);\n     */\n    getElectionInfo(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, ElectionInfo>;\n    /**\n     * Get the identity providers registered as of the end of a given block.\n     * The stream will end when all the identity providers have been returned.\n     *\n     * @generated from protobuf rpc: GetIdentityProviders(concordium.v2.BlockHashInput) returns (stream concordium.v2.IpInfo);\n     */\n    getIdentityProviders(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, IpInfo>;\n    /**\n     * Get the anonymity revokers registered as of the end of a given block.\n     * The stream will end when all the anonymity revokers have been returned.\n     *\n     * @generated from protobuf rpc: GetAnonymityRevokers(concordium.v2.BlockHashInput) returns (stream concordium.v2.ArInfo);\n     */\n    getAnonymityRevokers(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, ArInfo>;\n    /**\n     * Get a list of non-finalized transaction hashes for a given account. This\n     * endpoint is not expected to return a large amount of data in most cases,\n     * but in bad network condtions it might. The stream will end when all the\n     * non-finalized transaction hashes have been returned.\n     *\n     * @generated from protobuf rpc: GetAccountNonFinalizedTransactions(concordium.v2.AccountAddress) returns (stream concordium.v2.TransactionHash);\n     */\n    getAccountNonFinalizedTransactions(input: AccountAddress, options?: RpcOptions): ServerStreamingCall<AccountAddress, TransactionHash>;\n    /**\n     * Get a list of transaction events in a given block.\n     * The stream will end when all the transaction events for a given block have been returned.\n     *\n     * @generated from protobuf rpc: GetBlockTransactionEvents(concordium.v2.BlockHashInput) returns (stream concordium.v2.BlockItemSummary);\n     */\n    getBlockTransactionEvents(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, BlockItemSummary>;\n    /**\n     * Get a list of special events in a given block. These are events generated\n     * by the protocol, such as minting and reward payouts. They are not directly\n     * generated by any transaction. The stream will end when all the special\n     * events for a given block have been returned.\n     *\n     * @generated from protobuf rpc: GetBlockSpecialEvents(concordium.v2.BlockHashInput) returns (stream concordium.v2.BlockSpecialEvent);\n     */\n    getBlockSpecialEvents(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, BlockSpecialEvent>;\n    /**\n     * Get the pending updates to chain parameters at the end of a given block.\n     * The stream will end when all the pending updates for a given block have been returned.\n     *\n     * @generated from protobuf rpc: GetBlockPendingUpdates(concordium.v2.BlockHashInput) returns (stream concordium.v2.PendingUpdate);\n     */\n    getBlockPendingUpdates(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, PendingUpdate>;\n    /**\n     * Get next available sequence numbers for updating chain parameters after a given block.\n     *\n     * @generated from protobuf rpc: GetNextUpdateSequenceNumbers(concordium.v2.BlockHashInput) returns (concordium.v2.NextUpdateSequenceNumbers);\n     */\n    getNextUpdateSequenceNumbers(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, NextUpdateSequenceNumbers>;\n    /**\n     * Get all accounts that have scheduled releases, with the timestamp of the first pending\n     * scheduled release for that account. (Note, this only identifies accounts by index, and\n     * only indicates the first pending release for each account.)\n     *\n     * @generated from protobuf rpc: GetScheduledReleaseAccounts(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountPending);\n     */\n    getScheduledReleaseAccounts(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, AccountPending>;\n    /**\n     * Get all accounts that have stake in cooldown, with the timestamp of the first pending\n     * cooldown expiry for each account. (Note, this only identifies accounts by index,\n     * and only indicates the first pending cooldown for each account.)\n     * Prior to protocol version 7, the resulting stream will always be empty.\n     *\n     * @generated from protobuf rpc: GetCooldownAccounts(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountPending);\n     */\n    getCooldownAccounts(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, AccountPending>;\n    /**\n     * Get all accounts that have stake in pre-cooldown.\n     * (This only identifies accounts by index.)\n     * Prior to protocol version 7, the resulting stream will always be empty.\n     *\n     * @generated from protobuf rpc: GetPreCooldownAccounts(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountIndex);\n     */\n    getPreCooldownAccounts(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, AccountIndex>;\n    /**\n     * Get all accounts that have stake in pre-pre-cooldown.\n     * (This only identifies accounts by index.)\n     * Prior to protocol version 7, the resulting stream will always be empty.\n     *\n     * @generated from protobuf rpc: GetPrePreCooldownAccounts(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountIndex);\n     */\n    getPrePreCooldownAccounts(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, AccountIndex>;\n    /**\n     * Get the projected earliest time at which a particular baker will be required to bake a block.\n     * If the current consensus version is 0, this returns the status 'Unavailable', as the endpoint\n     * is only supported by consensus version 1.\n     *\n     * If the baker is not a baker for the current reward period, this returns a timestamp at the\n     * start of the next reward period. If the baker is a baker for the current reward period, the\n     * earliest win time is projected from the current round forward, assuming that each round after\n     * the last finalized round will take the minimum block time. (If blocks take longer, or timeouts\n     * occur, the actual time may be later, and the reported time in subsequent queries may reflect\n     * this.) At the end of an epoch (or if the baker is not projected to bake before the end of the\n     * epoch) the earliest win time for a (current) baker will be projected as the start of the next\n     * epoch. This is because the seed for the leader election is updated at the epoch boundary, and\n     * so the winners cannot be predicted beyond that. Note that in some circumstances the returned\n     * timestamp can be in the past, especially at the end of an epoch.\n     *\n     * @generated from protobuf rpc: GetBakerEarliestWinTime(concordium.v2.BakerId) returns (concordium.v2.Timestamp);\n     */\n    getBakerEarliestWinTime(input: BakerId, options?: RpcOptions): UnaryCall<BakerId, Timestamp>;\n    /**\n     * Shut down the node.\n     * Return a GRPC error if the shutdown failed.\n     *\n     * @generated from protobuf rpc: Shutdown(concordium.v2.Empty) returns (concordium.v2.Empty);\n     */\n    shutdown(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;\n    /**\n     * Suggest to a peer to connect to the submitted peer details.\n     * This, if successful, adds the peer to the list of given addresses.\n     * Otherwise return a GRPC error.\n     * Note. The peer might not be connected to instantly, in that case\n     * the node will try to establish the connection in near future. This\n     * function returns a GRPC status 'Ok' in this case.\n     *\n     * @generated from protobuf rpc: PeerConnect(concordium.v2.IpSocketAddress) returns (concordium.v2.Empty);\n     */\n    peerConnect(input: IpSocketAddress, options?: RpcOptions): UnaryCall<IpSocketAddress, Empty>;\n    /**\n     * Disconnect from the peer and remove them from the given addresses list\n     * if they are on it. Return if the request was processed successfully.\n     * Otherwise return a GRPC error.\n     *\n     * @generated from protobuf rpc: PeerDisconnect(concordium.v2.IpSocketAddress) returns (concordium.v2.Empty);\n     */\n    peerDisconnect(input: IpSocketAddress, options?: RpcOptions): UnaryCall<IpSocketAddress, Empty>;\n    /**\n     * Get a list of banned peers.\n     *\n     * @generated from protobuf rpc: GetBannedPeers(concordium.v2.Empty) returns (concordium.v2.BannedPeers);\n     */\n    getBannedPeers(input: Empty, options?: RpcOptions): UnaryCall<Empty, BannedPeers>;\n    /**\n     * Ban the given peer.\n     * Returns a GRPC error if the action failed.\n     *\n     * @generated from protobuf rpc: BanPeer(concordium.v2.PeerToBan) returns (concordium.v2.Empty);\n     */\n    banPeer(input: PeerToBan, options?: RpcOptions): UnaryCall<PeerToBan, Empty>;\n    /**\n     * Unban the banned peer.\n     * Returns a GRPC error if the action failed.\n     *\n     * @generated from protobuf rpc: UnbanPeer(concordium.v2.BannedPeer) returns (concordium.v2.Empty);\n     */\n    unbanPeer(input: BannedPeer, options?: RpcOptions): UnaryCall<BannedPeer, Empty>;\n    /**\n     * Start dumping packages into the specified file.\n     * Only enabled if the node was built with the `network_dump` feature.\n     * Returns a GRPC error if the network dump failed to start.\n     *\n     * @generated from protobuf rpc: DumpStart(concordium.v2.DumpRequest) returns (concordium.v2.Empty);\n     */\n    dumpStart(input: DumpRequest, options?: RpcOptions): UnaryCall<DumpRequest, Empty>;\n    /**\n     * Stop dumping packages.\n     * Only enabled if the node was built with the `network_dump` feature.\n     * Returns a GRPC error if the network dump failed to be stopped.\n     *\n     * @generated from protobuf rpc: DumpStop(concordium.v2.Empty) returns (concordium.v2.Empty);\n     */\n    dumpStop(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;\n    /**\n     * Get a list of the peers that the node is connected to\n     * and assoicated network related information for each peer.\n     *\n     * @generated from protobuf rpc: GetPeersInfo(concordium.v2.Empty) returns (concordium.v2.PeersInfo);\n     */\n    getPeersInfo(input: Empty, options?: RpcOptions): UnaryCall<Empty, PeersInfo>;\n    /**\n     * Get information about the node.\n     * The `NodeInfo` includes information of\n     * * Meta information such as the, version of the node, type of the node, uptime and the local time of the node.\n     * * NetworkInfo which yields data such as the node id, packets sent/received,\n     *   average bytes per second sent/received.\n     * * ConsensusInfo. The `ConsensusInfo` returned depends on if the node supports\n     *   the protocol on chain and whether the node is configured as a baker or not.\n     *\n     * @generated from protobuf rpc: GetNodeInfo(concordium.v2.Empty) returns (concordium.v2.NodeInfo);\n     */\n    getNodeInfo(input: Empty, options?: RpcOptions): UnaryCall<Empty, NodeInfo>;\n    /**\n     * Send a block item. A block item is either an `AccountTransaction`, which is\n     * a transaction signed and paid for by an account, a `CredentialDeployment`,\n     * which creates a new account, or `UpdateInstruction`, which is an\n     * instruction to change some parameters of the chain. Update instructions can\n     * only be sent by the governance committee.\n     *\n     * Returns a hash of the block item, which can be used with\n     * `GetBlockItemStatus`.\n     *\n     * @generated from protobuf rpc: SendBlockItem(concordium.v2.SendBlockItemRequest) returns (concordium.v2.TransactionHash);\n     */\n    sendBlockItem(input: SendBlockItemRequest, options?: RpcOptions): UnaryCall<SendBlockItemRequest, TransactionHash>;\n    /**\n     * Get the hash to be signed for an account transaction. The hash returned\n     * should be signed and the signatures included as an\n     * AccountTransactionSignature when calling `SendBlockItem`. This is provided as\n     * a convenience to support cases where the right SDK is not available for\n     * interacting with the node. If an SDK is available then it is strongly\n     * recommended to compute this hash off-line using it. That reduces the trust\n     * in the node, removes networking failure modes, and will perform better.\n     *\n     * @generated from protobuf rpc: GetAccountTransactionSignHash(concordium.v2.PreAccountTransaction) returns (concordium.v2.AccountTransactionSignHash);\n     */\n    getAccountTransactionSignHash(input: PreAccountTransaction, options?: RpcOptions): UnaryCall<PreAccountTransaction, AccountTransactionSignHash>;\n    /**\n     * Get the values of chain parameters in effect in the given block.\n     *\n     * @generated from protobuf rpc: GetBlockChainParameters(concordium.v2.BlockHashInput) returns (concordium.v2.ChainParameters);\n     */\n    getBlockChainParameters(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, ChainParameters>;\n    /**\n     * Get the summary of the finalization data in a given block.\n     *\n     * @generated from protobuf rpc: GetBlockFinalizationSummary(concordium.v2.BlockHashInput) returns (concordium.v2.BlockFinalizationSummary);\n     */\n    getBlockFinalizationSummary(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, BlockFinalizationSummary>;\n    /**\n     * Get the items of a block.\n     *\n     * @generated from protobuf rpc: GetBlockItems(concordium.v2.BlockHashInput) returns (stream concordium.v2.BlockItem);\n     */\n    getBlockItems(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, BlockItem>;\n    /**\n     * Get all bakers in the reward period of a block.\n     * This endpoint is only supported for protocol version 6 and onwards.\n     * If the protocol does not support the endpoint then an  'IllegalArgument' error is returned.\n     *\n     * @generated from protobuf rpc: GetBakersRewardPeriod(concordium.v2.BlockHashInput) returns (stream concordium.v2.BakerRewardPeriodInfo);\n     */\n    getBakersRewardPeriod(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, BakerRewardPeriodInfo>;\n    /**\n     * For a non-genesis block, this returns the quorum certificate, a timeout\n     * certificate (if present) and epoch finalization entry (if present).\n     * Note that, if the block being pointed to is not a product of ConcordiumBFT,\n     * then the response will be a grpc error (invalid argument).\n     * If the endpoint is not enabled by the node, then an 'unimplemented' error\n     * will be returned.\n     *\n     * @generated from protobuf rpc: GetBlockCertificates(concordium.v2.BlockHashInput) returns (concordium.v2.BlockCertificates);\n     */\n    getBlockCertificates(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, BlockCertificates>;\n    /**\n     * Get the list of bakers that won the lottery in a particular historical epoch (i.e. the\n     * last finalized block is in a later epoch). This lists the winners for each round in the\n     * epoch, starting from the round after the last block in the previous epoch, running to\n     * the round before the first block in the next epoch. It also indicates if a block in each\n     * round was included in the finalized chain.\n     *\n     * The following error cases are possible:\n     *  * `NOT_FOUND` if the query specifies an unknown block.\n     *  * `UNAVAILABLE` if the query is for an epoch that is not finalized in the current genesis\n     *     index, or is for a future genesis index.\n     *  * `INVALID_ARGUMENT` if the query is for an epoch that is not finalized for a past genesis\n     *    index.\n     *  * `INVALID_ARGUMENT` if the query is for a genesis index at consensus version 0.\n     *  * `INVALID_ARGUMENT` if the input `EpochRequest` is malformed.\n     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.\n     *\n     * @generated from protobuf rpc: GetWinningBakersEpoch(concordium.v2.EpochRequest) returns (stream concordium.v2.WinningBaker);\n     */\n    getWinningBakersEpoch(input: EpochRequest, options?: RpcOptions): ServerStreamingCall<EpochRequest, WinningBaker>;\n    /**\n     * Get the block hash of the first finalized block in a specified epoch.\n     *\n     * The following error cases are possible:\n     *  * `NOT_FOUND` if the query specifies an unknown block.\n     *  * `UNAVAILABLE` if the query is for an epoch that is not finalized in the current genesis\n     *    index, or is for a future genesis index.\n     *  * `INVALID_ARGUMENT` if the query is for an epoch with no finalized blocks for a past genesis\n     *    index.\n     *  * `INVALID_ARGUMENT` if the input `EpochRequest` is malformed.\n     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.\n     *\n     * @generated from protobuf rpc: GetFirstBlockEpoch(concordium.v2.EpochRequest) returns (concordium.v2.BlockHash);\n     */\n    getFirstBlockEpoch(input: EpochRequest, options?: RpcOptions): UnaryCall<EpochRequest, BlockHash>;\n    /**\n     * Get the detailed status of the consensus. This is only available for consensus version 1.\n     *\n     * The following error cases are possible:\n     *  * `NOT_FOUND` if the query specifies an unknown genesis index.\n     *  * `INVALID_ARGUMENT` if the query specifies a genesis index at consensus version 0.\n     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.\n     *\n     * @generated from protobuf rpc: GetConsensusDetailedStatus(concordium.v2.ConsensusDetailedStatusQuery) returns (concordium.v2.ConsensusDetailedStatus);\n     */\n    getConsensusDetailedStatus(input: ConsensusDetailedStatusQuery, options?: RpcOptions): UnaryCall<ConsensusDetailedStatusQuery, ConsensusDetailedStatus>;\n    /**\n     * Dry run a series of transactions and operations on a state derived from a specified block.\n     * The server should send a single `DryRunResponse` for each `DryRunRequest` received, unless\n     * the call fails with an error status code. If a request produces a `DryRunErrorResponse`, then\n     * the server will still process subsequent requests, just as if the request causing the error\n     * did not happen.\n     *\n     * The first request should be `load_block_at_state` to determine the block state that will be\n     * used for the dry run.\n     *\n     * The server associates each request with an energy cost, and limits the total energy that may\n     * be expended in a single invocation of `DryRun`. This limit is reported as `quota` in the\n     * initial metadata returned by the server. If executing an operation exceeds the limit,\n     * the server terminates the session with `RESOURCE_EXHAUSTED`.\n     *\n     * The server also imposes a timeout for a dry-run session to complete. The server reports\n     * the timeout duration in milliseconds in the initial metadata field `timeout`. If the session\n     * is not completed before the timeout elapses, the server terminates the session with\n     * `DEADLINE_EXCEEDED`.\n     *\n     * The following error cases are possible:\n     *  * `INVALID_ARGUMENT` if any `DryRunRequest` is malformed.\n     *  * `RESOURCE_EXHAUSTED` if the energy quota is exceeded.\n     *  * `DEADLINE_EXCEEDED` if the session does not complete before the server-imposed timeout.\n     *  * `RESOURCE_EXHAUSTED` if the server is not currently accepting new `DryRun` sessions.\n     *    (The server may impose a limit on the number of concurrent sessions.)\n     *  * `INTERNAL` if an interal server error occurs. This should not happen, and likely indicates\n     *    a bug.\n     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.\n     *\n     * @generated from protobuf rpc: DryRun(stream concordium.v2.DryRunRequest) returns (stream concordium.v2.DryRunResponse);\n     */\n    dryRun(options?: RpcOptions): DuplexStreamingCall<DryRunRequest, DryRunResponse>;\n}\n/**\n * @generated from protobuf service concordium.v2.Queries\n */\nexport class QueriesClient implements IQueriesClient, ServiceInfo {\n    typeName = Queries.typeName;\n    methods = Queries.methods;\n    options = Queries.options;\n    constructor(private readonly _transport: RpcTransport) {\n    }\n    /**\n     * Return a stream of blocks that arrive from the time the query is made onward.\n     * This can be used to listen for incoming blocks.\n     *\n     * @generated from protobuf rpc: GetBlocks(concordium.v2.Empty) returns (stream concordium.v2.ArrivedBlockInfo);\n     */\n    getBlocks(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, ArrivedBlockInfo> {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return stackIntercept<Empty, ArrivedBlockInfo>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Return a stream of blocks that are finalized from the time the query is\n     * made onward. This can be used to listen for newly finalized blocks. Note\n     * that there is no guarantee that blocks will not be skipped if the client is\n     * too slow in processing the stream, however blocks will always be sent by\n     * increasing block height.\n     *\n     * @generated from protobuf rpc: GetFinalizedBlocks(concordium.v2.Empty) returns (stream concordium.v2.FinalizedBlockInfo);\n     */\n    getFinalizedBlocks(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, FinalizedBlockInfo> {\n        const method = this.methods[1], opt = this._transport.mergeOptions(options);\n        return stackIntercept<Empty, FinalizedBlockInfo>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve the information about the given account in the given block.\n     *\n     * @generated from protobuf rpc: GetAccountInfo(concordium.v2.AccountInfoRequest) returns (concordium.v2.AccountInfo);\n     */\n    getAccountInfo(input: AccountInfoRequest, options?: RpcOptions): UnaryCall<AccountInfoRequest, AccountInfo> {\n        const method = this.methods[2], opt = this._transport.mergeOptions(options);\n        return stackIntercept<AccountInfoRequest, AccountInfo>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve the information about the given token in the given block.\n     *\n     * @generated from protobuf rpc: GetTokenInfo(concordium.v2.TokenInfoRequest) returns (concordium.v2.TokenInfo);\n     */\n    getTokenInfo(input: TokenInfoRequest, options?: RpcOptions): UnaryCall<TokenInfoRequest, TokenInfo> {\n        const method = this.methods[3], opt = this._transport.mergeOptions(options);\n        return stackIntercept<TokenInfoRequest, TokenInfo>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve the list of accounts that exist at the end of the given block.\n     *\n     * @generated from protobuf rpc: GetAccountList(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountAddress);\n     */\n    getAccountList(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, AccountAddress> {\n        const method = this.methods[4], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, AccountAddress>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Retrieve the list of protocol level tokens that exist at the end of the\n     * given block.\n     *\n     * @generated from protobuf rpc: GetTokenList(concordium.v2.BlockHashInput) returns (stream concordium.v2.plt.TokenId);\n     */\n    getTokenList(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, TokenId> {\n        const method = this.methods[5], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, TokenId>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get a list of all smart contract modules. The stream will end\n     * when all modules that exist in the state at the end of the given\n     * block have been returned.\n     *\n     * @generated from protobuf rpc: GetModuleList(concordium.v2.BlockHashInput) returns (stream concordium.v2.ModuleRef);\n     */\n    getModuleList(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, ModuleRef> {\n        const method = this.methods[6], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, ModuleRef>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get a stream of ancestors for the provided block.\n     * Starting with the provided block itself, moving backwards until no more\n     * ancestors or the requested number of ancestors has been returned.\n     *\n     * @generated from protobuf rpc: GetAncestors(concordium.v2.AncestorsRequest) returns (stream concordium.v2.BlockHash);\n     */\n    getAncestors(input: AncestorsRequest, options?: RpcOptions): ServerStreamingCall<AncestorsRequest, BlockHash> {\n        const method = this.methods[7], opt = this._transport.mergeOptions(options);\n        return stackIntercept<AncestorsRequest, BlockHash>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the source of a smart contract module.\n     *\n     * @generated from protobuf rpc: GetModuleSource(concordium.v2.ModuleSourceRequest) returns (concordium.v2.VersionedModuleSource);\n     */\n    getModuleSource(input: ModuleSourceRequest, options?: RpcOptions): UnaryCall<ModuleSourceRequest, VersionedModuleSource> {\n        const method = this.methods[8], opt = this._transport.mergeOptions(options);\n        return stackIntercept<ModuleSourceRequest, VersionedModuleSource>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get a list of addresses for all smart contract instances. The stream\n     * will end when all instances that exist in the state at the end of the\n     * given block has been returned.\n     *\n     * @generated from protobuf rpc: GetInstanceList(concordium.v2.BlockHashInput) returns (stream concordium.v2.ContractAddress);\n     */\n    getInstanceList(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, ContractAddress> {\n        const method = this.methods[9], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, ContractAddress>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get info about a smart contract instance as it appears at the end of the\n     * given block.\n     *\n     * @generated from protobuf rpc: GetInstanceInfo(concordium.v2.InstanceInfoRequest) returns (concordium.v2.InstanceInfo);\n     */\n    getInstanceInfo(input: InstanceInfoRequest, options?: RpcOptions): UnaryCall<InstanceInfoRequest, InstanceInfo> {\n        const method = this.methods[10], opt = this._transport.mergeOptions(options);\n        return stackIntercept<InstanceInfoRequest, InstanceInfo>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the exact state of a specific contract instance, streamed as a list of\n     * key-value pairs. The list is streamed in lexicographic order of keys.\n     *\n     * @generated from protobuf rpc: GetInstanceState(concordium.v2.InstanceInfoRequest) returns (stream concordium.v2.InstanceStateKVPair);\n     */\n    getInstanceState(input: InstanceInfoRequest, options?: RpcOptions): ServerStreamingCall<InstanceInfoRequest, InstanceStateKVPair> {\n        const method = this.methods[11], opt = this._transport.mergeOptions(options);\n        return stackIntercept<InstanceInfoRequest, InstanceStateKVPair>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the value at a specific key of a contract state. In contrast to\n     * `GetInstanceState` this is more efficient, but requires the user to know\n     * the specific key to look for.\n     *\n     * @generated from protobuf rpc: InstanceStateLookup(concordium.v2.InstanceStateLookupRequest) returns (concordium.v2.InstanceStateValueAtKey);\n     */\n    instanceStateLookup(input: InstanceStateLookupRequest, options?: RpcOptions): UnaryCall<InstanceStateLookupRequest, InstanceStateValueAtKey> {\n        const method = this.methods[12], opt = this._transport.mergeOptions(options);\n        return stackIntercept<InstanceStateLookupRequest, InstanceStateValueAtKey>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the best guess as to what the next account sequence number should be.\n     * If all account transactions are finalized then this information is reliable.\n     * Otherwise this is the best guess, assuming all other transactions will be\n     * committed to blocks and eventually finalized.\n     *\n     * @generated from protobuf rpc: GetNextAccountSequenceNumber(concordium.v2.AccountAddress) returns (concordium.v2.NextAccountSequenceNumber);\n     */\n    getNextAccountSequenceNumber(input: AccountAddress, options?: RpcOptions): UnaryCall<AccountAddress, NextAccountSequenceNumber> {\n        const method = this.methods[13], opt = this._transport.mergeOptions(options);\n        return stackIntercept<AccountAddress, NextAccountSequenceNumber>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get information about the current state of consensus.\n     *\n     * @generated from protobuf rpc: GetConsensusInfo(concordium.v2.Empty) returns (concordium.v2.ConsensusInfo);\n     */\n    getConsensusInfo(input: Empty, options?: RpcOptions): UnaryCall<Empty, ConsensusInfo> {\n        const method = this.methods[14], opt = this._transport.mergeOptions(options);\n        return stackIntercept<Empty, ConsensusInfo>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the status of and information about a specific block item (transaction).\n     *\n     * @generated from protobuf rpc: GetBlockItemStatus(concordium.v2.TransactionHash) returns (concordium.v2.BlockItemStatus);\n     */\n    getBlockItemStatus(input: TransactionHash, options?: RpcOptions): UnaryCall<TransactionHash, BlockItemStatus> {\n        const method = this.methods[15], opt = this._transport.mergeOptions(options);\n        return stackIntercept<TransactionHash, BlockItemStatus>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the cryptographic parameters in a given block.\n     *\n     * @generated from protobuf rpc: GetCryptographicParameters(concordium.v2.BlockHashInput) returns (concordium.v2.CryptographicParameters);\n     */\n    getCryptographicParameters(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, CryptographicParameters> {\n        const method = this.methods[16], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, CryptographicParameters>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get information, such as height, timings, and transaction counts for the given block.\n     *\n     * @generated from protobuf rpc: GetBlockInfo(concordium.v2.BlockHashInput) returns (concordium.v2.BlockInfo);\n     */\n    getBlockInfo(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, BlockInfo> {\n        const method = this.methods[17], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, BlockInfo>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get all the bakers at the end of the given block.\n     *\n     * @generated from protobuf rpc: GetBakerList(concordium.v2.BlockHashInput) returns (stream concordium.v2.BakerId);\n     */\n    getBakerList(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, BakerId> {\n        const method = this.methods[18], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, BakerId>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get information about a given pool at the end of a given block.\n     *\n     * @generated from protobuf rpc: GetPoolInfo(concordium.v2.PoolInfoRequest) returns (concordium.v2.PoolInfoResponse);\n     */\n    getPoolInfo(input: PoolInfoRequest, options?: RpcOptions): UnaryCall<PoolInfoRequest, PoolInfoResponse> {\n        const method = this.methods[19], opt = this._transport.mergeOptions(options);\n        return stackIntercept<PoolInfoRequest, PoolInfoResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get information about the passive delegators at the end of a given block.\n     *\n     * @generated from protobuf rpc: GetPassiveDelegationInfo(concordium.v2.BlockHashInput) returns (concordium.v2.PassiveDelegationInfo);\n     */\n    getPassiveDelegationInfo(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, PassiveDelegationInfo> {\n        const method = this.methods[20], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, PassiveDelegationInfo>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get a list of live blocks at a given height.\n     *\n     * @generated from protobuf rpc: GetBlocksAtHeight(concordium.v2.BlocksAtHeightRequest) returns (concordium.v2.BlocksAtHeightResponse);\n     */\n    getBlocksAtHeight(input: BlocksAtHeightRequest, options?: RpcOptions): UnaryCall<BlocksAtHeightRequest, BlocksAtHeightResponse> {\n        const method = this.methods[21], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlocksAtHeightRequest, BlocksAtHeightResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get information about tokenomics at the end of a given block.\n     *\n     * @generated from protobuf rpc: GetTokenomicsInfo(concordium.v2.BlockHashInput) returns (concordium.v2.TokenomicsInfo);\n     */\n    getTokenomicsInfo(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, TokenomicsInfo> {\n        const method = this.methods[22], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, TokenomicsInfo>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Run the smart contract entrypoint in a given context and in the state at\n     * the end of the given block.\n     *\n     * @generated from protobuf rpc: InvokeInstance(concordium.v2.InvokeInstanceRequest) returns (concordium.v2.InvokeInstanceResponse);\n     */\n    invokeInstance(input: InvokeInstanceRequest, options?: RpcOptions): UnaryCall<InvokeInstanceRequest, InvokeInstanceResponse> {\n        const method = this.methods[23], opt = this._transport.mergeOptions(options);\n        return stackIntercept<InvokeInstanceRequest, InvokeInstanceResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the registered delegators of a given pool at the end of a given block.\n     * In contrast to the `GetPoolDelegatorsRewardPeriod` which returns delegators\n     * that are fixed for the reward period of the block, this endpoint returns the\n     * list of delegators that are registered in the block. Any changes to delegators\n     * are immediately visible in this list.\n     * The stream will end when all the delegators has been returned.\n     *\n     * @generated from protobuf rpc: GetPoolDelegators(concordium.v2.GetPoolDelegatorsRequest) returns (stream concordium.v2.DelegatorInfo);\n     */\n    getPoolDelegators(input: GetPoolDelegatorsRequest, options?: RpcOptions): ServerStreamingCall<GetPoolDelegatorsRequest, DelegatorInfo> {\n        const method = this.methods[24], opt = this._transport.mergeOptions(options);\n        return stackIntercept<GetPoolDelegatorsRequest, DelegatorInfo>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the fixed delegators of a given pool for the reward period of the given block.\n     * In contracts to the `GetPoolDelegators` which returns delegators registered\n     * for the given block, this endpoint returns the fixed delegators contributing\n     * stake in the reward period containing the given block.\n     * The stream will end when all the delegators has been returned.\n     *\n     * @generated from protobuf rpc: GetPoolDelegatorsRewardPeriod(concordium.v2.GetPoolDelegatorsRequest) returns (stream concordium.v2.DelegatorRewardPeriodInfo);\n     */\n    getPoolDelegatorsRewardPeriod(input: GetPoolDelegatorsRequest, options?: RpcOptions): ServerStreamingCall<GetPoolDelegatorsRequest, DelegatorRewardPeriodInfo> {\n        const method = this.methods[25], opt = this._transport.mergeOptions(options);\n        return stackIntercept<GetPoolDelegatorsRequest, DelegatorRewardPeriodInfo>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the registered passive delegators at the end of a given block.\n     * In contrast to the `GetPassiveDelegatorsRewardPeriod` which returns delegators\n     * that are fixed for the reward period of the block, this endpoint returns the\n     * list of delegators that are registered in the block. Any changes to delegators\n     * are immediately visible in this list.\n     * The stream will end when all the delegators has been returned.\n     *\n     * @generated from protobuf rpc: GetPassiveDelegators(concordium.v2.BlockHashInput) returns (stream concordium.v2.DelegatorInfo);\n     */\n    getPassiveDelegators(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, DelegatorInfo> {\n        const method = this.methods[26], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, DelegatorInfo>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the fixed passive delegators for the reward period of the given block.\n     * In contracts to the `GetPassiveDelegators` which returns delegators registered\n     * for the given block, this endpoint returns the fixed delegators contributing\n     * stake in the reward period containing the given block.\n     * The stream will end when all the delegators has been returned.\n     *\n     * @generated from protobuf rpc: GetPassiveDelegatorsRewardPeriod(concordium.v2.BlockHashInput) returns (stream concordium.v2.DelegatorRewardPeriodInfo);\n     */\n    getPassiveDelegatorsRewardPeriod(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, DelegatorRewardPeriodInfo> {\n        const method = this.methods[27], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, DelegatorRewardPeriodInfo>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the current branches of blocks starting from and including the last finalized block.\n     *\n     * @generated from protobuf rpc: GetBranches(concordium.v2.Empty) returns (concordium.v2.Branch);\n     */\n    getBranches(input: Empty, options?: RpcOptions): UnaryCall<Empty, Branch> {\n        const method = this.methods[28], opt = this._transport.mergeOptions(options);\n        return stackIntercept<Empty, Branch>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get information related to the baker election for a particular block.\n     *\n     * @generated from protobuf rpc: GetElectionInfo(concordium.v2.BlockHashInput) returns (concordium.v2.ElectionInfo);\n     */\n    getElectionInfo(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, ElectionInfo> {\n        const method = this.methods[29], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, ElectionInfo>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the identity providers registered as of the end of a given block.\n     * The stream will end when all the identity providers have been returned.\n     *\n     * @generated from protobuf rpc: GetIdentityProviders(concordium.v2.BlockHashInput) returns (stream concordium.v2.IpInfo);\n     */\n    getIdentityProviders(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, IpInfo> {\n        const method = this.methods[30], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, IpInfo>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the anonymity revokers registered as of the end of a given block.\n     * The stream will end when all the anonymity revokers have been returned.\n     *\n     * @generated from protobuf rpc: GetAnonymityRevokers(concordium.v2.BlockHashInput) returns (stream concordium.v2.ArInfo);\n     */\n    getAnonymityRevokers(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, ArInfo> {\n        const method = this.methods[31], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, ArInfo>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get a list of non-finalized transaction hashes for a given account. This\n     * endpoint is not expected to return a large amount of data in most cases,\n     * but in bad network condtions it might. The stream will end when all the\n     * non-finalized transaction hashes have been returned.\n     *\n     * @generated from protobuf rpc: GetAccountNonFinalizedTransactions(concordium.v2.AccountAddress) returns (stream concordium.v2.TransactionHash);\n     */\n    getAccountNonFinalizedTransactions(input: AccountAddress, options?: RpcOptions): ServerStreamingCall<AccountAddress, TransactionHash> {\n        const method = this.methods[32], opt = this._transport.mergeOptions(options);\n        return stackIntercept<AccountAddress, TransactionHash>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get a list of transaction events in a given block.\n     * The stream will end when all the transaction events for a given block have been returned.\n     *\n     * @generated from protobuf rpc: GetBlockTransactionEvents(concordium.v2.BlockHashInput) returns (stream concordium.v2.BlockItemSummary);\n     */\n    getBlockTransactionEvents(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, BlockItemSummary> {\n        const method = this.methods[33], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, BlockItemSummary>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get a list of special events in a given block. These are events generated\n     * by the protocol, such as minting and reward payouts. They are not directly\n     * generated by any transaction. The stream will end when all the special\n     * events for a given block have been returned.\n     *\n     * @generated from protobuf rpc: GetBlockSpecialEvents(concordium.v2.BlockHashInput) returns (stream concordium.v2.BlockSpecialEvent);\n     */\n    getBlockSpecialEvents(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, BlockSpecialEvent> {\n        const method = this.methods[34], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, BlockSpecialEvent>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the pending updates to chain parameters at the end of a given block.\n     * The stream will end when all the pending updates for a given block have been returned.\n     *\n     * @generated from protobuf rpc: GetBlockPendingUpdates(concordium.v2.BlockHashInput) returns (stream concordium.v2.PendingUpdate);\n     */\n    getBlockPendingUpdates(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, PendingUpdate> {\n        const method = this.methods[35], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, PendingUpdate>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get next available sequence numbers for updating chain parameters after a given block.\n     *\n     * @generated from protobuf rpc: GetNextUpdateSequenceNumbers(concordium.v2.BlockHashInput) returns (concordium.v2.NextUpdateSequenceNumbers);\n     */\n    getNextUpdateSequenceNumbers(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, NextUpdateSequenceNumbers> {\n        const method = this.methods[36], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, NextUpdateSequenceNumbers>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get all accounts that have scheduled releases, with the timestamp of the first pending\n     * scheduled release for that account. (Note, this only identifies accounts by index, and\n     * only indicates the first pending release for each account.)\n     *\n     * @generated from protobuf rpc: GetScheduledReleaseAccounts(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountPending);\n     */\n    getScheduledReleaseAccounts(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, AccountPending> {\n        const method = this.methods[37], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, AccountPending>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get all accounts that have stake in cooldown, with the timestamp of the first pending\n     * cooldown expiry for each account. (Note, this only identifies accounts by index,\n     * and only indicates the first pending cooldown for each account.)\n     * Prior to protocol version 7, the resulting stream will always be empty.\n     *\n     * @generated from protobuf rpc: GetCooldownAccounts(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountPending);\n     */\n    getCooldownAccounts(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, AccountPending> {\n        const method = this.methods[38], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, AccountPending>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get all accounts that have stake in pre-cooldown.\n     * (This only identifies accounts by index.)\n     * Prior to protocol version 7, the resulting stream will always be empty.\n     *\n     * @generated from protobuf rpc: GetPreCooldownAccounts(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountIndex);\n     */\n    getPreCooldownAccounts(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, AccountIndex> {\n        const method = this.methods[39], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, AccountIndex>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get all accounts that have stake in pre-pre-cooldown.\n     * (This only identifies accounts by index.)\n     * Prior to protocol version 7, the resulting stream will always be empty.\n     *\n     * @generated from protobuf rpc: GetPrePreCooldownAccounts(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountIndex);\n     */\n    getPrePreCooldownAccounts(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, AccountIndex> {\n        const method = this.methods[40], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, AccountIndex>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the projected earliest time at which a particular baker will be required to bake a block.\n     * If the current consensus version is 0, this returns the status 'Unavailable', as the endpoint\n     * is only supported by consensus version 1.\n     *\n     * If the baker is not a baker for the current reward period, this returns a timestamp at the\n     * start of the next reward period. If the baker is a baker for the current reward period, the\n     * earliest win time is projected from the current round forward, assuming that each round after\n     * the last finalized round will take the minimum block time. (If blocks take longer, or timeouts\n     * occur, the actual time may be later, and the reported time in subsequent queries may reflect\n     * this.) At the end of an epoch (or if the baker is not projected to bake before the end of the\n     * epoch) the earliest win time for a (current) baker will be projected as the start of the next\n     * epoch. This is because the seed for the leader election is updated at the epoch boundary, and\n     * so the winners cannot be predicted beyond that. Note that in some circumstances the returned\n     * timestamp can be in the past, especially at the end of an epoch.\n     *\n     * @generated from protobuf rpc: GetBakerEarliestWinTime(concordium.v2.BakerId) returns (concordium.v2.Timestamp);\n     */\n    getBakerEarliestWinTime(input: BakerId, options?: RpcOptions): UnaryCall<BakerId, Timestamp> {\n        const method = this.methods[41], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BakerId, Timestamp>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Shut down the node.\n     * Return a GRPC error if the shutdown failed.\n     *\n     * @generated from protobuf rpc: Shutdown(concordium.v2.Empty) returns (concordium.v2.Empty);\n     */\n    shutdown(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {\n        const method = this.methods[42], opt = this._transport.mergeOptions(options);\n        return stackIntercept<Empty, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Suggest to a peer to connect to the submitted peer details.\n     * This, if successful, adds the peer to the list of given addresses.\n     * Otherwise return a GRPC error.\n     * Note. The peer might not be connected to instantly, in that case\n     * the node will try to establish the connection in near future. This\n     * function returns a GRPC status 'Ok' in this case.\n     *\n     * @generated from protobuf rpc: PeerConnect(concordium.v2.IpSocketAddress) returns (concordium.v2.Empty);\n     */\n    peerConnect(input: IpSocketAddress, options?: RpcOptions): UnaryCall<IpSocketAddress, Empty> {\n        const method = this.methods[43], opt = this._transport.mergeOptions(options);\n        return stackIntercept<IpSocketAddress, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Disconnect from the peer and remove them from the given addresses list\n     * if they are on it. Return if the request was processed successfully.\n     * Otherwise return a GRPC error.\n     *\n     * @generated from protobuf rpc: PeerDisconnect(concordium.v2.IpSocketAddress) returns (concordium.v2.Empty);\n     */\n    peerDisconnect(input: IpSocketAddress, options?: RpcOptions): UnaryCall<IpSocketAddress, Empty> {\n        const method = this.methods[44], opt = this._transport.mergeOptions(options);\n        return stackIntercept<IpSocketAddress, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get a list of banned peers.\n     *\n     * @generated from protobuf rpc: GetBannedPeers(concordium.v2.Empty) returns (concordium.v2.BannedPeers);\n     */\n    getBannedPeers(input: Empty, options?: RpcOptions): UnaryCall<Empty, BannedPeers> {\n        const method = this.methods[45], opt = this._transport.mergeOptions(options);\n        return stackIntercept<Empty, BannedPeers>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Ban the given peer.\n     * Returns a GRPC error if the action failed.\n     *\n     * @generated from protobuf rpc: BanPeer(concordium.v2.PeerToBan) returns (concordium.v2.Empty);\n     */\n    banPeer(input: PeerToBan, options?: RpcOptions): UnaryCall<PeerToBan, Empty> {\n        const method = this.methods[46], opt = this._transport.mergeOptions(options);\n        return stackIntercept<PeerToBan, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Unban the banned peer.\n     * Returns a GRPC error if the action failed.\n     *\n     * @generated from protobuf rpc: UnbanPeer(concordium.v2.BannedPeer) returns (concordium.v2.Empty);\n     */\n    unbanPeer(input: BannedPeer, options?: RpcOptions): UnaryCall<BannedPeer, Empty> {\n        const method = this.methods[47], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BannedPeer, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Start dumping packages into the specified file.\n     * Only enabled if the node was built with the `network_dump` feature.\n     * Returns a GRPC error if the network dump failed to start.\n     *\n     * @generated from protobuf rpc: DumpStart(concordium.v2.DumpRequest) returns (concordium.v2.Empty);\n     */\n    dumpStart(input: DumpRequest, options?: RpcOptions): UnaryCall<DumpRequest, Empty> {\n        const method = this.methods[48], opt = this._transport.mergeOptions(options);\n        return stackIntercept<DumpRequest, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Stop dumping packages.\n     * Only enabled if the node was built with the `network_dump` feature.\n     * Returns a GRPC error if the network dump failed to be stopped.\n     *\n     * @generated from protobuf rpc: DumpStop(concordium.v2.Empty) returns (concordium.v2.Empty);\n     */\n    dumpStop(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {\n        const method = this.methods[49], opt = this._transport.mergeOptions(options);\n        return stackIntercept<Empty, Empty>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get a list of the peers that the node is connected to\n     * and assoicated network related information for each peer.\n     *\n     * @generated from protobuf rpc: GetPeersInfo(concordium.v2.Empty) returns (concordium.v2.PeersInfo);\n     */\n    getPeersInfo(input: Empty, options?: RpcOptions): UnaryCall<Empty, PeersInfo> {\n        const method = this.methods[50], opt = this._transport.mergeOptions(options);\n        return stackIntercept<Empty, PeersInfo>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get information about the node.\n     * The `NodeInfo` includes information of\n     * * Meta information such as the, version of the node, type of the node, uptime and the local time of the node.\n     * * NetworkInfo which yields data such as the node id, packets sent/received,\n     *   average bytes per second sent/received.\n     * * ConsensusInfo. The `ConsensusInfo` returned depends on if the node supports\n     *   the protocol on chain and whether the node is configured as a baker or not.\n     *\n     * @generated from protobuf rpc: GetNodeInfo(concordium.v2.Empty) returns (concordium.v2.NodeInfo);\n     */\n    getNodeInfo(input: Empty, options?: RpcOptions): UnaryCall<Empty, NodeInfo> {\n        const method = this.methods[51], opt = this._transport.mergeOptions(options);\n        return stackIntercept<Empty, NodeInfo>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Send a block item. A block item is either an `AccountTransaction`, which is\n     * a transaction signed and paid for by an account, a `CredentialDeployment`,\n     * which creates a new account, or `UpdateInstruction`, which is an\n     * instruction to change some parameters of the chain. Update instructions can\n     * only be sent by the governance committee.\n     *\n     * Returns a hash of the block item, which can be used with\n     * `GetBlockItemStatus`.\n     *\n     * @generated from protobuf rpc: SendBlockItem(concordium.v2.SendBlockItemRequest) returns (concordium.v2.TransactionHash);\n     */\n    sendBlockItem(input: SendBlockItemRequest, options?: RpcOptions): UnaryCall<SendBlockItemRequest, TransactionHash> {\n        const method = this.methods[52], opt = this._transport.mergeOptions(options);\n        return stackIntercept<SendBlockItemRequest, TransactionHash>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the hash to be signed for an account transaction. The hash returned\n     * should be signed and the signatures included as an\n     * AccountTransactionSignature when calling `SendBlockItem`. This is provided as\n     * a convenience to support cases where the right SDK is not available for\n     * interacting with the node. If an SDK is available then it is strongly\n     * recommended to compute this hash off-line using it. That reduces the trust\n     * in the node, removes networking failure modes, and will perform better.\n     *\n     * @generated from protobuf rpc: GetAccountTransactionSignHash(concordium.v2.PreAccountTransaction) returns (concordium.v2.AccountTransactionSignHash);\n     */\n    getAccountTransactionSignHash(input: PreAccountTransaction, options?: RpcOptions): UnaryCall<PreAccountTransaction, AccountTransactionSignHash> {\n        const method = this.methods[53], opt = this._transport.mergeOptions(options);\n        return stackIntercept<PreAccountTransaction, AccountTransactionSignHash>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the values of chain parameters in effect in the given block.\n     *\n     * @generated from protobuf rpc: GetBlockChainParameters(concordium.v2.BlockHashInput) returns (concordium.v2.ChainParameters);\n     */\n    getBlockChainParameters(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, ChainParameters> {\n        const method = this.methods[54], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, ChainParameters>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the summary of the finalization data in a given block.\n     *\n     * @generated from protobuf rpc: GetBlockFinalizationSummary(concordium.v2.BlockHashInput) returns (concordium.v2.BlockFinalizationSummary);\n     */\n    getBlockFinalizationSummary(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, BlockFinalizationSummary> {\n        const method = this.methods[55], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, BlockFinalizationSummary>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the items of a block.\n     *\n     * @generated from protobuf rpc: GetBlockItems(concordium.v2.BlockHashInput) returns (stream concordium.v2.BlockItem);\n     */\n    getBlockItems(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, BlockItem> {\n        const method = this.methods[56], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, BlockItem>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get all bakers in the reward period of a block.\n     * This endpoint is only supported for protocol version 6 and onwards.\n     * If the protocol does not support the endpoint then an  'IllegalArgument' error is returned.\n     *\n     * @generated from protobuf rpc: GetBakersRewardPeriod(concordium.v2.BlockHashInput) returns (stream concordium.v2.BakerRewardPeriodInfo);\n     */\n    getBakersRewardPeriod(input: BlockHashInput, options?: RpcOptions): ServerStreamingCall<BlockHashInput, BakerRewardPeriodInfo> {\n        const method = this.methods[57], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, BakerRewardPeriodInfo>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * For a non-genesis block, this returns the quorum certificate, a timeout\n     * certificate (if present) and epoch finalization entry (if present).\n     * Note that, if the block being pointed to is not a product of ConcordiumBFT,\n     * then the response will be a grpc error (invalid argument).\n     * If the endpoint is not enabled by the node, then an 'unimplemented' error\n     * will be returned.\n     *\n     * @generated from protobuf rpc: GetBlockCertificates(concordium.v2.BlockHashInput) returns (concordium.v2.BlockCertificates);\n     */\n    getBlockCertificates(input: BlockHashInput, options?: RpcOptions): UnaryCall<BlockHashInput, BlockCertificates> {\n        const method = this.methods[58], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BlockHashInput, BlockCertificates>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the list of bakers that won the lottery in a particular historical epoch (i.e. the\n     * last finalized block is in a later epoch). This lists the winners for each round in the\n     * epoch, starting from the round after the last block in the previous epoch, running to\n     * the round before the first block in the next epoch. It also indicates if a block in each\n     * round was included in the finalized chain.\n     *\n     * The following error cases are possible:\n     *  * `NOT_FOUND` if the query specifies an unknown block.\n     *  * `UNAVAILABLE` if the query is for an epoch that is not finalized in the current genesis\n     *     index, or is for a future genesis index.\n     *  * `INVALID_ARGUMENT` if the query is for an epoch that is not finalized for a past genesis\n     *    index.\n     *  * `INVALID_ARGUMENT` if the query is for a genesis index at consensus version 0.\n     *  * `INVALID_ARGUMENT` if the input `EpochRequest` is malformed.\n     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.\n     *\n     * @generated from protobuf rpc: GetWinningBakersEpoch(concordium.v2.EpochRequest) returns (stream concordium.v2.WinningBaker);\n     */\n    getWinningBakersEpoch(input: EpochRequest, options?: RpcOptions): ServerStreamingCall<EpochRequest, WinningBaker> {\n        const method = this.methods[59], opt = this._transport.mergeOptions(options);\n        return stackIntercept<EpochRequest, WinningBaker>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the block hash of the first finalized block in a specified epoch.\n     *\n     * The following error cases are possible:\n     *  * `NOT_FOUND` if the query specifies an unknown block.\n     *  * `UNAVAILABLE` if the query is for an epoch that is not finalized in the current genesis\n     *    index, or is for a future genesis index.\n     *  * `INVALID_ARGUMENT` if the query is for an epoch with no finalized blocks for a past genesis\n     *    index.\n     *  * `INVALID_ARGUMENT` if the input `EpochRequest` is malformed.\n     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.\n     *\n     * @generated from protobuf rpc: GetFirstBlockEpoch(concordium.v2.EpochRequest) returns (concordium.v2.BlockHash);\n     */\n    getFirstBlockEpoch(input: EpochRequest, options?: RpcOptions): UnaryCall<EpochRequest, BlockHash> {\n        const method = this.methods[60], opt = this._transport.mergeOptions(options);\n        return stackIntercept<EpochRequest, BlockHash>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Get the detailed status of the consensus. This is only available for consensus version 1.\n     *\n     * The following error cases are possible:\n     *  * `NOT_FOUND` if the query specifies an unknown genesis index.\n     *  * `INVALID_ARGUMENT` if the query specifies a genesis index at consensus version 0.\n     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.\n     *\n     * @generated from protobuf rpc: GetConsensusDetailedStatus(concordium.v2.ConsensusDetailedStatusQuery) returns (concordium.v2.ConsensusDetailedStatus);\n     */\n    getConsensusDetailedStatus(input: ConsensusDetailedStatusQuery, options?: RpcOptions): UnaryCall<ConsensusDetailedStatusQuery, ConsensusDetailedStatus> {\n        const method = this.methods[61], opt = this._transport.mergeOptions(options);\n        return stackIntercept<ConsensusDetailedStatusQuery, ConsensusDetailedStatus>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * Dry run a series of transactions and operations on a state derived from a specified block.\n     * The server should send a single `DryRunResponse` for each `DryRunRequest` received, unless\n     * the call fails with an error status code. If a request produces a `DryRunErrorResponse`, then\n     * the server will still process subsequent requests, just as if the request causing the error\n     * did not happen.\n     *\n     * The first request should be `load_block_at_state` to determine the block state that will be\n     * used for the dry run.\n     *\n     * The server associates each request with an energy cost, and limits the total energy that may\n     * be expended in a single invocation of `DryRun`. This limit is reported as `quota` in the\n     * initial metadata returned by the server. If executing an operation exceeds the limit,\n     * the server terminates the session with `RESOURCE_EXHAUSTED`.\n     *\n     * The server also imposes a timeout for a dry-run session to complete. The server reports\n     * the timeout duration in milliseconds in the initial metadata field `timeout`. If the session\n     * is not completed before the timeout elapses, the server terminates the session with\n     * `DEADLINE_EXCEEDED`.\n     *\n     * The following error cases are possible:\n     *  * `INVALID_ARGUMENT` if any `DryRunRequest` is malformed.\n     *  * `RESOURCE_EXHAUSTED` if the energy quota is exceeded.\n     *  * `DEADLINE_EXCEEDED` if the session does not complete before the server-imposed timeout.\n     *  * `RESOURCE_EXHAUSTED` if the server is not currently accepting new `DryRun` sessions.\n     *    (The server may impose a limit on the number of concurrent sessions.)\n     *  * `INTERNAL` if an interal server error occurs. This should not happen, and likely indicates\n     *    a bug.\n     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.\n     *\n     * @generated from protobuf rpc: DryRun(stream concordium.v2.DryRunRequest) returns (stream concordium.v2.DryRunResponse);\n     */\n    dryRun(options?: RpcOptions): DuplexStreamingCall<DryRunRequest, DryRunResponse> {\n        const method = this.methods[62], opt = this._transport.mergeOptions(options);\n        return stackIntercept<DryRunRequest, DryRunResponse>(\"duplex\", this._transport, method, opt);\n    }\n}\n","export {\n    Type,\n    fromJSON,\n    instanceOf,\n    fromHexString,\n    fromBuffer,\n    toHexString,\n    toBuffer,\n    equals,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n} from '../../types/TransactionHash.js';\n","import { Buffer } from 'buffer/index.js';\n\nimport type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport { packBufferWithWord32Length } from '../serializationHelpers.js';\nimport type { HexString } from '../types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The number of bytes used to represent a block hash.\n */\nconst MODULE_REF_BYTE_LENGTH = 32;\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.ModuleReference;\n/**\n * @deprecated\n */\nexport type Serializable = HexString;\n\n/**\n * Reference to a smart contract module.\n */\nclass ModuleReference {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** Internal field, the module reference represented as a hex string. */\n        public readonly moduleRef: HexString,\n        /** Internal field, buffer containing the 32 bytes for the module reference. */\n        public readonly decodedModuleRef: Uint8Array\n    ) {}\n\n    /**\n     * Get a string representation of the module reference.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.moduleRef;\n    }\n\n    /**\n     * Get a JSON-serializable representation of the module reference.\n     * @returns {HexString} The JSON-serializable representation.\n     */\n    public toJSON(): HexString {\n        return packBufferWithWord32Length(this.decodedModuleRef).toString('hex');\n    }\n}\n\n/**\n * Converts a {@linkcode HexString} to a module reference.\n * @param {HexString} json The JSON representation of the module reference.\n * @returns {ModuleReference} The module reference.\n */\nexport function fromJSON(json: HexString): ModuleReference {\n    // The first 4 bytes are the length of the buffer, so we skip them.\n    return fromHexString(json.slice(8));\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode ModuleReference.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON(value: Type): Serializable {\n    return value.toJSON();\n}\n\n/**\n * Reference to a smart contract module.\n */\nexport type Type = ModuleReference;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is ModuleReference {\n    return value instanceof ModuleReference;\n}\n\n/**\n * Create a ModuleReference from a buffer of 32 bytes.\n * @param {ArrayBuffer} buffer Buffer containing 32 bytes for the hash.\n * @throws If the provided buffer does not contain exactly 32 bytes.\n * @returns {ModuleReference} A module reference.\n */\nexport function fromBuffer(buffer: ArrayBuffer): ModuleReference {\n    const hex = Buffer.from(buffer).toString('hex');\n    if (buffer.byteLength !== MODULE_REF_BYTE_LENGTH) {\n        throw new Error(\n            'The provided moduleRef ' + hex + ' is invalid as module reference as it does not contain 32 bytes'\n        );\n    }\n    return new ModuleReference(hex, new Uint8Array(buffer));\n}\n\n/**\n * Create a ModuleReference from a hex string.\n * @param {HexString} moduleRef Hex encoding of the module reference.\n * @throws If the provided hex encoding does not correspond to a buffer of exactly 32 bytes.\n * @returns {ModuleReference} A module reference.\n */\nexport function fromHexString(moduleRef: HexString): ModuleReference {\n    if (moduleRef.length !== MODULE_REF_BYTE_LENGTH * 2) {\n        throw new Error('The provided moduleRef ' + moduleRef + ' is invalid as its length was not 64');\n    }\n    return new ModuleReference(moduleRef, new Uint8Array(Buffer.from(moduleRef, 'hex')));\n}\n\n/**\n * Get the module reference bytes encoded as hex.\n * @param {ModuleReference} moduleReference The module reference.\n * @returns {HexString} String with hex encoding.\n */\nexport function toHexString(moduleReference: ModuleReference): HexString {\n    return moduleReference.moduleRef;\n}\n\n/**\n * Convert module reference from its protobuf encoding.\n * @param {Proto.ModuleRef} moduleReference The module reference in protobuf.\n * @returns {ModuleReference} The module reference.\n */\nexport function fromProto(moduleReference: Proto.ModuleRef): ModuleReference {\n    return fromBuffer(moduleReference.value);\n}\n\n/**\n * Convert module reference into its protobuf encoding.\n * @param {ModuleReference} moduleReference The module reference.\n * @returns {Proto.ModuleRef} The protobuf encoding.\n */\nexport function toProto(moduleReference: ModuleReference): Proto.ModuleRef {\n    return {\n        value: moduleReference.decodedModuleRef,\n    };\n}\n\n/**\n * Check if two module references are the same.\n * @param {ModuleReference} left\n * @param {ModuleReference} right\n * @returns {boolean} True if they are equal.\n */\nexport function equals(left: ModuleReference, right: ModuleReference): boolean {\n    return left.moduleRef === right.moduleRef;\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode ModuleReference.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: ModuleReference): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toHexString(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromHexString);\n","export {\n    Type,\n    Err,\n    ErrorType,\n    JSON,\n    fromJSON,\n    toCBOR,\n    fromCBOR,\n    toContractAddress,\n    fromContractAddress,\n    create,\n    instanceOf,\n    registerCBOREncoder,\n    registerCBORDecoder,\n} from '../../plt/CborContractAddress.js';\n","export {\n    Type,\n    JSON,\n    toCBOR,\n    fromCBOR,\n    registerCBOREncoder,\n    registerCBORDecoder,\n    fromAccountAddress,\n    instanceOf,\n    fromJSON,\n    fromBase58,\n    toBase58,\n} from '../../plt/CborAccountAddress.js';\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * A server streaming RPC call. The client provides exactly one input message\n * but the server may respond with 0, 1, or more messages.\n */\nexport class ServerStreamingCall {\n    constructor(method, requestHeaders, request, headers, response, status, trailers) {\n        this.method = method;\n        this.requestHeaders = requestHeaders;\n        this.request = request;\n        this.headers = headers;\n        this.responses = response;\n        this.status = status;\n        this.trailers = trailers;\n    }\n    /**\n     * Instead of awaiting the response status and trailers, you can\n     * just as well await this call itself to receive the server outcome.\n     * You should first setup some listeners to the `request` to\n     * see the actual messages the server replied with.\n     */\n    then(onfulfilled, onrejected) {\n        return this.promiseFinished().then(value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));\n    }\n    promiseFinished() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let [headers, status, trailers] = yield Promise.all([this.headers, this.status, this.trailers]);\n            return {\n                method: this.method,\n                requestHeaders: this.requestHeaders,\n                request: this.request,\n                headers,\n                status,\n                trailers,\n            };\n        });\n    }\n}\n","import type * as ContractAddress from './types/ContractAddress.js';\n\nconst CONTRACT_PARAM_MAX_LENGTH = 65535;\n\n/**\n * Checks if a buffer is larger than what is accepted for smart contract parameters\n *\n * @param {Buffer} buffer - The buffer to check\n *\n * @returns {void} nothing.\n *\n * @throws If buffer exceeds max length allowed for smart contract parameters\n */\nexport const checkParameterLength = (buffer: ArrayBuffer): void => {\n    if (buffer.byteLength > CONTRACT_PARAM_MAX_LENGTH) {\n        throw new Error(\n            `Serialized parameter exceeds max length of smart contract parameter (${CONTRACT_PARAM_MAX_LENGTH} bytes)`\n        );\n    }\n};\n\n/**\n * Whether two {@link ContractAddress} contract addresses are equal.\n */\nexport const isEqualContractAddress =\n    (a: ContractAddress.Type) =>\n    (b: ContractAddress.Type): boolean =>\n        a.index === b.index && a.subindex === b.subindex;\n\n/** The name of a smart contract. Note: This does _not_ including the 'init_' prefix. */\nexport type ContractName = string;\n/** The name of an entrypoint exposed by a smart contract. Note: This does _not_ include the '<contractName>.' prefix. */\nexport type EntrypointName = string;\n\n/** Check that every character is an Ascii alpha, numeric or punctuation. */\nexport function isAsciiAlphaNumericPunctuation(string: string): boolean {\n    for (let i = 0; i < string.length; i++) {\n        const charCode = string.charCodeAt(i);\n        if (\n            (32 <= charCode && charCode <= 47) || // Punctuation ! to /\n            (48 <= charCode && charCode <= 57) || // Numeric\n            (58 <= charCode && charCode <= 64) || // Punctuation : to @\n            (65 <= charCode && charCode <= 90) || // Uppercase alpha\n            (91 <= charCode && charCode <= 96) || // Punctuation [ to `\n            (97 <= charCode && charCode <= 122) || // Lowercase alpha\n            (123 <= charCode && charCode <= 126) // Punctuation { to ~\n        ) {\n            continue;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** Check if a string is a valid smart contract init name. */\nexport function isInitName(string: string): boolean {\n    return (\n        string.length <= 100 &&\n        string.startsWith('init_') &&\n        !string.includes('.') &&\n        isAsciiAlphaNumericPunctuation(string)\n    );\n}\n\n/** Get the contract name from a string. Assumes the string is a valid init name. */\nexport function getContractNameFromInit(initName: string): ContractName {\n    return initName.substring(5);\n}\n\n/** Check if a string is a valid smart contract receive name. */\nexport function isReceiveName(string: string): boolean {\n    return string.length <= 100 && string.includes('.') && isAsciiAlphaNumericPunctuation(string);\n}\n\n/** Get the contract name and entrypoint name from a string. Assumes the string is a valid receive name. */\nexport function getNamesFromReceive(receiveName: string): {\n    contractName: ContractName;\n    entrypointName: EntrypointName;\n} {\n    const splitPoint = receiveName.indexOf('.');\n    if (splitPoint === -1) {\n        throw new Error('Invalid receive name');\n    }\n    return {\n        contractName: receiveName.substring(0, splitPoint),\n        entrypointName: receiveName.substring(splitPoint + 1),\n    };\n}\n\n/**\n * Get contract update payload size by adding reserved offsets to parameter size and receive name size\n * Amount (8 bytes), Contract address (16 bytes), Receive name size (2 bytes), Parameter size (2 bytes)\n */\nexport function getUpdatePayloadSize(parameterSize: number, receiveNameLength: number): bigint {\n    return 8n + 16n + 2n + BigInt(parameterSize) + 2n + BigInt(receiveNameLength);\n}\n","import { Buffer } from 'buffer/index.js';\n\nimport type * as Proto from '../grpc-api/v2/concordium/protocol-level-tokens.js';\nimport type { HexString } from '../types.js';\n\n/**\n * The number of bytes used to represent a token module reference.\n */\nconst MODULE_REF_BYTE_LENGTH = 32;\nexport type JSON = HexString;\n\n/**\n * Enum representing the types of errors that can occur with token module references.\n */\nexport enum ErrorType {\n    /** Error type indicating the length of module reference is incorrect. */\n    INCORRECT_LENGTH = 'INCORRECT_LENGTH',\n}\n\n/**\n * Custom error to represent issues with token module references.\n */\nexport class Err extends Error {\n    private constructor(\n        /** The {@linkcode ErrorType} of the error. Can be used as to distinguish different types of errors. */\n        public readonly type: ErrorType,\n        message: string\n    ) {\n        super(message);\n        this.name = `TokenModuleReference.Err.${type}`;\n    }\n\n    /**\n     * Creates a TokenModuleReference.Err indicating the length of module reference is incorrect.\n     */\n    public static incorrectLength(bytes: Uint8Array): Err {\n        const hex = Buffer.from(bytes).toString('hex');\n        return new Err(\n            ErrorType.INCORRECT_LENGTH,\n            `Token module reference ${hex} is invalid, as it must contain ${MODULE_REF_BYTE_LENGTH} bytes`\n        );\n    }\n}\n\n/**\n * Reference to a protocol level token (PLT) module.\n */\nclass ModuleReference {\n    #nominal = true;\n\n    /**\n     * Constructs a new ModuleReference instance.\n     * Validates that the value is exactly the accepted byte length.\n     *\n     * @throws {Err} If the value is not exactly 32 bytes.\n     */\n    constructor(\n        /** Internal field, buffer containing the 32 bytes for the module reference. */\n        public readonly bytes: Uint8Array\n    ) {\n        if (bytes.byteLength !== MODULE_REF_BYTE_LENGTH) {\n            throw Err.incorrectLength(bytes);\n        }\n    }\n\n    /**\n     * Get a string representation of the module reference.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return Buffer.from(this.bytes).toString('hex');\n    }\n\n    /**\n     * Get a JSON-serializable representation of the module reference. This is called implicitly when serialized with JSON.stringify.\n     * @returns {HexString} The JSON representation.\n     */\n    public toJSON(): JSON {\n        return this.toString();\n    }\n}\n\n/**\n * Reference to a smart contract module.\n */\nexport type Type = ModuleReference;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is ModuleReference {\n    return value instanceof ModuleReference;\n}\n\n/**\n * Create a ModuleReference from a buffer of 32 bytes.\n * @param {ArrayBuffer} buffer Buffer containing 32 bytes for the hash.\n * @throws If the provided buffer does not contain exactly 32 bytes.\n * @returns {ModuleReference} A module reference.\n * @throws {Err} If the value is not exactly 32 bytes.\n */\nexport function fromBuffer(buffer: ArrayBuffer): ModuleReference {\n    return new ModuleReference(new Uint8Array(buffer));\n}\n\n/**\n * Create a ModuleReference from a hex string.\n * @param {HexString} moduleRef Hex encoding of the module reference.\n * @throws If the provided hex encoding does not correspond to a buffer of exactly 32 bytes.\n * @returns {ModuleReference} A module reference.\n * @throws {Err} If the value is not exactly 32 bytes.\n */\nexport function fromHexString(moduleRef: HexString): ModuleReference {\n    return fromBuffer(Buffer.from(moduleRef, 'hex'));\n}\n\n/**\n * Get the module reference bytes encoded as hex.\n * @param {ModuleReference} moduleReference The module reference.\n * @returns {HexString} String with hex encoding.\n */\nexport function toHexString(moduleReference: ModuleReference): HexString {\n    return moduleReference.toString();\n}\n\n/**\n * Converts a {@linkcode HexString} to a module reference.\n * @param {HexString} json The JSON representation of the module reference.\n * @returns {ModuleReference} The module reference.\n * @throws {Err} If the value is not exactly 32 bytes.\n */\nexport function fromJSON(json: JSON): ModuleReference {\n    return fromHexString(json);\n}\n\n/**\n * Convert module reference from its protobuf encoding.\n * @param {Proto.TokenModuleRef} moduleReference The module reference in protobuf.\n * @returns {ModuleReference} The module reference.\n * @throws {Err} If the value is not exactly 32 bytes.\n */\nexport function fromProto(moduleReference: Proto.TokenModuleRef): ModuleReference {\n    return fromBuffer(moduleReference.value);\n}\n\n/**\n * Convert module reference into its protobuf encoding.\n * @param {ModuleReference} moduleReference The module reference.\n * @returns {Proto.TokenModuleRef} The protobuf encoding.\n */\nexport function toProto(moduleReference: ModuleReference): Proto.TokenModuleRef {\n    return {\n        value: moduleReference.bytes,\n    };\n}\n\n/**\n * Check if two module references are the same.\n * @param {ModuleReference} left\n * @param {ModuleReference} right\n * @returns {boolean} True if they are equal.\n */\nexport function equals(left: ModuleReference, right: ModuleReference): boolean {\n    return left.bytes.every((byte, i) => right.bytes[i] === byte);\n}\n","import type * as Proto from '../grpc-api/v2/concordium/protocol-level-tokens.js';\n\n/**\n * Protocol level token (PLT) ID JSON representation.\n */\nexport type JSON = string;\n\nconst MIN_LENGTH = 1;\nconst MAX_LENGTH = 128;\nconst ALLOWED_CHARS_REGEX = /^[a-zA-Z0-9\\-\\.%]+$/;\n\n/**\n * Enum representing the types of errors that can occur with token IDs.\n */\nexport enum ErrorType {\n    /** Error type indicating the length exceeds the max allowed. */\n    EXCEEDS_MAX_LENGTH = 'EXCEEDS_MAX_LENGTH',\n    /** Error type indicating the length is below the min allowed. */\n    BELOW_MIN_LENGTH = 'BELOW_MIN_LENGTH',\n    /** Error type indicating the token ID contains invalid characters. */\n    INVALID_CHARACTERS = 'INVALID_CHARACTERS',\n}\n\n/**\n * Custom error to represent issues with token IDs.\n */\nexport class Err extends Error {\n    private constructor(\n        /** The {@linkcode ErrorType} of the error. Can be used as to distinguish different types of errors. */\n        public readonly type: ErrorType,\n        message: string\n    ) {\n        super(message);\n        this.name = `TokenId.Err.${type}`;\n    }\n\n    /**\n     * Creates a TokenId.Err indicating the length exceeds the max allowed.\n     */\n    public static exceedsMaxLength(): Err {\n        return new Err(ErrorType.EXCEEDS_MAX_LENGTH, `Token ID cannot be longer than ${MAX_LENGTH} characters`);\n    }\n\n    /**\n     * Creates a TokenId.Err indicating the length is below the min allowed.\n     */\n    public static belowMinLength(): Err {\n        return new Err(ErrorType.BELOW_MIN_LENGTH, `Token ID must be at least ${MIN_LENGTH} character`);\n    }\n\n    /**\n     * Creates a TokenId.Err indicating the token ID contains invalid characters.\n     */\n    public static invalidCharacters(): Err {\n        return new Err(ErrorType.INVALID_CHARACTERS, 'Token ID can only contain characters: a-z, A-Z, 0-9, -, ., %');\n    }\n}\n\n/**\n * Protocol level token (PLT) ID.\n */\nclass TokenId {\n    #nominal = true;\n\n    /**\n     * Constructs a new TokenId instance.\n     * Validates that the value matches the allowed constraints.\n     *\n     * @throws {Err} If the value is not valid according to the constraints.\n     */\n    constructor(\n        /** The inner value, as provided */\n        public readonly value: string\n    ) {\n        if (value.length < MIN_LENGTH) {\n            throw Err.belowMinLength();\n        }\n        if (value.length > MAX_LENGTH) {\n            throw Err.exceedsMaxLength();\n        }\n        if (!ALLOWED_CHARS_REGEX.test(value)) {\n            throw Err.invalidCharacters();\n        }\n    }\n\n    /**\n     * Get a string representation of the token ID.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.value;\n    }\n\n    /**\n     * Get a JSON-serializable representation of the token ID. This is called implicitly when serialized with JSON.stringify.\n     * @returns {HexString} The JSON representation.\n     */\n    public toJSON(): JSON {\n        return this.value;\n    }\n}\n\n/**\n * Protocol level token (PLT) ID.\n */\nexport type Type = TokenId;\n\n/**\n * Create a protocol level token ID from a string value.\n *\n * @param {string} value - The string to create the token ID from.\n * @returns {TokenId} A new token ID instance.\n * @throws {Err} If the value is longer than 255 utf-8 encoded bytes or contains invalid UTF-8.\n */\nexport function fromString(value: string): TokenId {\n    return new TokenId(value);\n}\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is TokenId {\n    return value instanceof TokenId;\n}\n\n/**\n * Converts {@linkcode JSON} to a token amount.\n *\n * @param {string} json The JSON representation of the token ID.\n * @returns {TokenId} The token ID.\n * @throws {Err} If the value is longer than 255 utf-8 encoded bytes or contains invalid UTF-8.\n */\nexport function fromJSON(json: JSON): TokenId {\n    return fromString(json);\n}\n\n/**\n * Convert token ID from its protobuf encoding.\n * @param {Proto.TokenId} tokenId the token ID\n * @returns {TokenId} The token ID.\n * @throws {Err} If the value is longer than 255 utf-8 encoded bytes or contains invalid UTF-8.\n */\nexport function fromProto(tokenId: Proto.TokenId): TokenId {\n    return fromString(tokenId.value);\n}\n\n/**\n * Convert token ID into its protobuf encoding.\n * @param {TokenId} tokenId The token ID.\n * @returns {Proto.TokenId} The protobuf encoding.\n */\nexport function toProto(tokenId: Type): Proto.TokenId {\n    return {\n        value: tokenId.value,\n    };\n}\n\n/**\n * Encode a TokenId to UTF-8 bytes. This is the serialization format used for token IDs in transactions.\n *\n * @param {TokenId} tokenId - The TokenId to encode.\n * @returns {Uint8Array} The UTF-8 byte representation of the TokenId.\n */\nexport function toBytes(tokenId: TokenId): Uint8Array {\n    return new TextEncoder().encode(tokenId.value);\n}\n\n/**\n * Decode UTF-8 bytes to a TokenId. This can be used to deserialize token IDs in transactions.\n *\n * @param {Uint8Array} bytes - The UTF-8 byte array to decode.\n * @returns {TokenId} The decoded TokenId.\n * @throws {Err} If the decoded string is longer than 255 utf-8 encoded bytes or contains invalid UTF-8.\n */\nexport function fromBytes(bytes: ArrayBuffer): TokenId {\n    try {\n        // This will catch any surrogate pairs that cannot be properly encoded to UTF-8\n        let value = new TextDecoder('utf-8', { fatal: true }).decode(bytes);\n        return new TokenId(value);\n    } catch (error) {\n        throw Err.invalidCharacters();\n    }\n}\n\n/**\n * Check if two token IDs are the same.\n * @param {TokenId} left\n * @param {TokenId} right\n * @returns {boolean} True if they are equal.\n */\nexport function equals(left: TokenId, right: TokenId): boolean {\n    // Case-insensitive: compare lowercased values\n    return left.value.toLowerCase() === right.value.toLowerCase();\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\n// The file will throw on node.js 14 and earlier.\n// @ts-ignore\nconst nc = require(\"node:crypto\");\nexports.crypto = nc && typeof nc === 'object' && 'webcrypto' in nc ? nc.webcrypto : undefined;\n//# sourceMappingURL=cryptoNode.js.map","import type { Upward } from '../grpc/upward.js';\nimport type { HexString, IpAddressString } from '../types.js';\n\nexport interface PeerInfo {\n    peerId: HexString;\n    ip: IpAddressString;\n    port: number;\n    networkStats?: PeerNetworkStats;\n    consensusInfo: PeerConsensusInfo;\n}\n\nexport interface PeerNetworkStats {\n    packetsSent: bigint;\n    packetsReceived: bigint;\n    latency: bigint;\n}\n\nexport type PeerConsensusInfo = PeerConsensusInfoBootstrapper | PeerConsensusInfoCatchupStatus;\n\nexport interface PeerConsensusInfoBootstrapper {\n    tag: 'bootstrapper';\n}\n\nexport interface PeerConsensusInfoCatchupStatus {\n    tag: 'nodeCatchupStatus';\n    catchupStatus: Upward<NodeCatchupStatus>;\n}\n\nexport enum NodeCatchupStatus {\n    UpToDate = 0,\n    Pending = 1,\n    CatchingUp = 2,\n}\n","export { CIS4, Web3IdSigner } from './util.js';\nexport * from './CIS4Contract.js';\n","import { Big, BigSource } from 'big.js';\n\nimport type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\nconst MICRO_CCD_PER_CCD = 1_000_000;\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.CcdAmount;\n/**\n * @deprecated\n */\nexport type Serializable = string;\n\n/**\n * Representation of a CCD amount.\n * The base unit of CCD is micro CCD, which is the representation\n * used on chain.\n */\nclass CcdAmount {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** Internal representation of Ccd amount in micro Ccd. */\n        public readonly microCcdAmount: bigint\n    ) {}\n\n    /**\n     * Get a string representation of the CCD amount.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        const microCcdString = this.microCcdAmount.toString();\n        const padded = microCcdString.padStart(7, '0');\n        return `${padded.slice(0, -6)}.${padded.slice(-6)}`;\n    }\n\n    /**\n     * Get a JSON-serializable representation of the CCD amount in micro CCD.\n     * @returns {string} The JSON-serializable representation.\n     */\n    public toJSON(): string {\n        return this.microCcdAmount.toString();\n    }\n}\n\n/**\n * Converts a `bigint` to a CCD amount in micro CCD.\n * @param {string} json The JSON representation of the CCD amount.\n * @returns {CcdAmount} The CCD amount.\n */\nexport function fromJSON(json: string): CcdAmount {\n    return fromMicroCcd(json);\n}\n\n/**\n * Representation of a CCD amount.\n * The base unit of CCD is micro CCD, which is the representation\n * used on chain.\n */\nexport type Type = CcdAmount;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is CcdAmount {\n    return value instanceof CcdAmount;\n}\n\n/**\n * Constructs a CcdAmount and checks that it is valid. It accepts a number, string, big, or bigint as parameter.\n *\n * @param microCcdAmount The amount of micro CCD as a number, string, big, or bigint.\n * @throws If an invalid micro CCD amount is passed, i.e. any value which is not an unsigned 64-bit integer\n */\nexport function fromMicroCcd(microCcdAmount: BigSource | bigint): CcdAmount {\n    // If the input is a \"BigSource\" assert that the number is whole\n    if (typeof microCcdAmount !== 'bigint') {\n        microCcdAmount = Big(microCcdAmount);\n\n        if (!microCcdAmount.mod(Big(1)).eq(Big(0))) {\n            throw Error('Can not create CcdAmount from a non-whole number!');\n        }\n\n        microCcdAmount = BigInt(microCcdAmount.toFixed());\n    }\n\n    if (microCcdAmount < 0n) {\n        throw new Error('A micro CCD amount must be a non-negative integer but was: ' + microCcdAmount);\n    } else if (microCcdAmount > 18446744073709551615n) {\n        throw new Error(\n            'A micro CCD amount must be representable as an unsigned 64 bit integer but was: ' + microCcdAmount\n        );\n    }\n\n    return new CcdAmount(microCcdAmount);\n}\n\n/**\n * Create a value representing zero CCD.\n * @returns {CcdAmount} A zero amount of CCD\n */\nexport function zero(): CcdAmount {\n    return new CcdAmount(0n);\n}\n\n/**\n * Creates a CcdAmount from a number, string, big, or bigint.\n *\n * @param ccd The amount of CCD as a number, string, big or bigint.\n * @returns The CcdAmount object derived from the ccd input parameter\n * @throws If a number is passed with several decimal seperators\n * @throws If a negative amount of micro CCD is passed\n * @throws If the micro CCD passed is greater than what can be contained in a 64-bit integer\n */\nexport function fromCcd(ccd: BigSource | bigint): CcdAmount {\n    if (typeof ccd === 'bigint') {\n        ccd = ccd.toString();\n    }\n\n    const microCcd = Big(ccd).mul(Big(MICRO_CCD_PER_CCD));\n    return fromMicroCcd(microCcd);\n}\n\n/**\n * Returns the amount of micro CCD as a Big.\n * @param {CcdAmount} amount The CCD amount.\n * @returns {Big} The amount in micro CCD.\n */\nexport function toMicroCcd(amount: CcdAmount): Big {\n    return Big(amount.microCcdAmount.toString());\n}\n\n/**\n * Returns the amount of CCD as a Big.\n * @param {CcdAmount} amount The CCD amount.\n * @returns The amount of CCD as a Big\n */\nexport function toCcd(amount: CcdAmount): Big {\n    return Big(amount.microCcdAmount.toString()).div(Big(MICRO_CCD_PER_CCD));\n}\n\n/**\n * Converts an amount of CCD to micro CCD and asserts that the amount is a valid amount of CCD.\n *\n * @param ccd The amount of CCD as a number, string, big or bigint.\n * @returns The amount of micro CCD as a Big\n * @throws If a number is passed with several decimal seperators\n * @throws If a negative amount of micro CCD is passed\n * @throws If the micro CCD passed is greater than what can be contained in a 64-bit integer\n */\nexport function ccdToMicroCcd(ccd: BigSource | bigint): Big {\n    return toMicroCcd(fromCcd(ccd));\n}\n\n/**\n * Converts an amount of micro CCD to CCD and asserts that the amount is a valid amount of CCD.\n *\n * @param microCcd The amount of micro CCD as a number, string, big or bigint.\n * @returns The amount of CCD as a Big\n * @throws If a number is passed with several decimal seperators\n * @throws If a negative amount of micro CCD is passed\n * @throws If the micro CCD passed is greater than what can be contained in a 64-bit integer\n */\nexport function microCcdToCcd(microCcd: BigSource | bigint): Big {\n    return toCcd(fromMicroCcd(microCcd));\n}\n\n/**\n * Type used when encoding a CCD amount in the JSON format used when serializing using a smart contract schema type.\n * String representation of the amount of micro CCD.\n */\nexport type SchemaValue = string;\n\n/**\n * Get CCD amount in the JSON format used when serializing using a smart contract schema type.\n * @param {CcdAmount} amount The amount.\n * @returns {SchemaValue} The schema value representation.\n */\nexport function toSchemaValue(amount: CcdAmount): SchemaValue {\n    return amount.microCcdAmount.toString();\n}\n\n/**\n * Convert to CCD amount from JSON format used when serializing using a smart contract schema type.\n * @param {SchemaValue} microCcdString The amount in schema format.\n * @returns {CcdAmount} The amount.\n */\nexport function fromSchemaValue(microCcdString: SchemaValue): CcdAmount {\n    return new CcdAmount(BigInt(microCcdString));\n}\n\n/**\n * Convert an amount of CCD from its protobuf encoding.\n * @param {Proto.Amount} amount The energy in protobuf.\n * @returns {CcdAmount} The energy.\n */\nexport function fromProto(amount: Proto.Amount): CcdAmount {\n    return new CcdAmount(amount.value);\n}\n\n/**\n * Convert an amount of CCD into its protobuf encoding.\n * @param {CcdAmount} amount The CCD amount.\n * @returns {Proto.Amount} The protobuf encoding.\n */\nexport function toProto(amount: CcdAmount): Proto.Amount {\n    return {\n        value: amount.microCcdAmount,\n    };\n}\n\n/**\n * Constructs a {@linkcode Type} from {@linkcode Serializable}.\n * @deprecated Use  the{@linkcode fromJSON} function instead.\n * @param {Serializable} value\n * @returns {Type} The duration.\n */\nexport function fromSerializable(value: Serializable): Type {\n    return fromMicroCcd(value);\n}\n\n/**\n * Converts {@linkcode Type} into {@linkcode Serializable}\n * @deprecated Use {@linkcode CcdAmount.toJSON} method instead.\n * @param {Type} value\n * @returns {Serializable} The serializable value\n */\nexport function toSerializable(value: Type): Serializable {\n    return value.microCcdAmount.toString();\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode CcdAmount.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: CcdAmount): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toSerializable(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromSerializable);\n","import { cborDecode } from '../types/cbor.js';\nimport {\n    Cbor,\n    CborAccountAddress,\n    TokenAmount,\n    TokenInitializationParameters,\n    TokenMetadataUrl,\n    TokenModuleAccountState,\n    TokenModuleState,\n    TokenOperation,\n    UnknownTokenOperation,\n    decodeTokenOperations,\n} from './index.js';\n\nfunction decodeTokenModuleState(value: Cbor.Type): TokenModuleState {\n    const decoded = cborDecode(value.bytes);\n    if (typeof decoded !== 'object' || decoded === null) throw new Error('Invalid CBOR data for TokenModuleState');\n\n    // Validate optional fields\n    if ('governanceAccount' in decoded && !CborAccountAddress.instanceOf(decoded.governanceAccount))\n        throw new Error('Invalid TokenModuleState: missing or invalid governanceAccount');\n\n    let metadata: TokenMetadataUrl.Type | undefined;\n    try {\n        if ('metadata' in decoded) metadata = TokenMetadataUrl.fromCBORValue(decoded.metadata);\n    } catch {\n        throw new Error('Invalid TokenModuleState: invalid metadata');\n    }\n\n    if ('name' in decoded && typeof decoded.name !== 'string')\n        throw new Error('Invalid TokenModuleState: invalid name');\n    if ('allowList' in decoded && typeof decoded.allowList !== 'boolean')\n        throw new Error('Invalid TokenModuleState: allowList must be a boolean');\n    if ('denyList' in decoded && typeof decoded.denyList !== 'boolean')\n        throw Error('Invalid TokenModuleState: denyList must be a boolean');\n    if ('mintable' in decoded && typeof decoded.mintable !== 'boolean')\n        throw new Error('Invalid TokenModuleState: mintable must be a boolean');\n    if ('burnable' in decoded && typeof decoded.burnable !== 'boolean')\n        throw new Error('Invalid TokenModuleState: burnable must be a boolean');\n    if ('paused' in decoded && typeof decoded.paused !== 'boolean')\n        throw new Error('Invalid TokenModuleState: paused must be a boolean');\n\n    return { ...decoded, metadata } as TokenModuleState;\n}\n\nfunction decodeTokenModuleAccountState(value: Cbor.Type): TokenModuleAccountState {\n    const decoded = cborDecode(value.bytes);\n    if (typeof decoded !== 'object' || decoded === null) {\n        throw new Error('Invalid CBOR data for TokenModuleAccountState');\n    }\n\n    // Validate optional fields\n    if ('allowList' in decoded && typeof decoded.allowList !== 'boolean') {\n        throw new Error('Invalid TokenModuleState: allowList must be a boolean');\n    }\n    if ('denyList' in decoded && typeof decoded.denyList !== 'boolean') {\n        throw Error('Invalid TokenModuleState: denyList must be a boolean');\n    }\n\n    return decoded as TokenModuleAccountState;\n}\n\nfunction decodeTokenInitializationParameters(value: Cbor.Type): TokenInitializationParameters {\n    const decoded = cborDecode(value.bytes);\n    if (typeof decoded !== 'object' || decoded === null) {\n        throw new Error('Invalid CBOR data for TokenInitializationParameters');\n    }\n\n    // Validate optional fields\n    if ('governanceAccount' in decoded && !CborAccountAddress.instanceOf(decoded.governanceAccount))\n        throw new Error('Invalid TokenModuleState: invalid governanceAccount');\n\n    let metadata: TokenMetadataUrl.Type | undefined;\n    try {\n        if ('metadata' in decoded) metadata = TokenMetadataUrl.fromCBORValue(decoded.metadata);\n    } catch {\n        throw new Error('Invalid TokenModuleState: invalid metadata');\n    }\n\n    if ('allowList' in decoded && typeof decoded.allowList !== 'boolean')\n        throw new Error('Invalid TokenInitializationParameters: allowList must be a boolean');\n    if ('denyList' in decoded && typeof decoded.denyList !== 'boolean')\n        throw Error('Invalid TokenInitializationParameters: denyList must be a boolean');\n    if ('mintable' in decoded && typeof decoded.mintable !== 'boolean')\n        throw new Error('Invalid TokenInitializationParameters: mintable must be a boolean');\n    if ('burnable' in decoded && typeof decoded.burnable !== 'boolean')\n        throw new Error('Invalid TokenInitializationParameters: burnable must be a boolean');\n    if ('paused' in decoded && typeof decoded.paused !== 'boolean')\n        throw new Error('Invalid TokenInitializationParameters: paused must be a boolean');\n\n    // Optional initial supply\n    if ('initialSupply' in decoded && !TokenAmount.instanceOf(decoded.initialSupply))\n        throw new Error(`Invalid TokenInitializationParameters: Expected 'initialSupply' to be of type 'TokenAmount'`);\n\n    return { ...decoded, metadata } as TokenInitializationParameters;\n}\n\ntype DecodeTypeMap = {\n    TokenModuleState: TokenModuleState;\n    TokenModuleAccountState: TokenModuleAccountState;\n    TokenInitializationParameters: TokenInitializationParameters;\n    'TokenOperation[]': (TokenOperation | UnknownTokenOperation)[];\n};\n\n/**\n * Decode CBOR encoded data into its original representation.\n * @param {Cbor.Type} cbor - The CBOR encoded data.\n * @param {string} type - type hint for decoding.\n * @returns {unknown} The decoded data.\n */\nexport function decode<T extends keyof DecodeTypeMap>(cbor: Cbor.Type, type: T): DecodeTypeMap[T];\n/**\n * Decode CBOR encoded data into its original representation.\n * @param {Cbor.Type} cbor - The CBOR encoded data.\n * @returns {unknown} The decoded data.\n */\nexport function decode(cbor: Cbor.Type, type?: undefined): unknown;\n\n/**\n * Decode CBOR encoded data into its original representation.\n * @param {Cbor.Type} cbor - The CBOR encoded data.\n * @param {string | undefined} type - Optional type hint for decoding.\n * @returns {unknown} The decoded data.\n */\nexport function decode<T extends keyof DecodeTypeMap | undefined>(cbor: Cbor.Type, type: T): unknown {\n    switch (type) {\n        case 'TokenModuleState':\n            return decodeTokenModuleState(cbor);\n        case 'TokenModuleAccountState':\n            return decodeTokenModuleAccountState(cbor);\n        case 'TokenInitializationParameters':\n            return decodeTokenInitializationParameters(cbor);\n        case 'TokenOperation[]':\n            return decodeTokenOperations(cbor);\n        default:\n            return cborDecode(cbor.bytes);\n    }\n}\n","import{SYMS as i}from\"./constants.js\";import{Tag as o}from\"./tag.js\";function f(n){if(n!=null&&typeof n==\"object\")return n[i.ENCODED]}function s(n){if(n!=null&&typeof n==\"object\")return n[i.LENGTH]}function u(n,e){Object.defineProperty(n,i.ENCODED,{configurable:!0,enumerable:!1,value:e})}function l(n,e){Object.defineProperty(n,i.LENGTH,{configurable:!0,enumerable:!1,value:e})}function d(n,e){const r=Object(n);return u(r,e),r}function t(n){if(!n||typeof n!=\"object\")return n;switch(n.constructor){case BigInt:case Boolean:case Number:case String:case Symbol:return n.valueOf();case Array:return n.map(e=>t(e));case Map:{const e=t([...n.entries()]);return e.every(([r])=>typeof r==\"string\")?Object.fromEntries(e):new Map(e)}case o:return new o(t(n.tag),t(n.contents));case Object:{const e={};for(const[r,a]of Object.entries(n))e[r]=t(a);return e}}return n}export{d as box,f as getEncoded,s as getEncodedLength,u as saveEncoded,l as saveEncodedLength,t as unbox};\n","import type { Upward } from '../grpc/upward.js';\nimport type { BakerId, HexString } from '../types.js';\nimport type * as Duration from '../types/Duration.js';\nimport type * as Timestamp from '../types/Timestamp.js';\n\nexport interface NodeInfo {\n    peerVersion: string;\n    localTime: Timestamp.Type;\n    peerUptime: Duration.Type;\n    networkInfo: NodeNetworkInfo;\n    details: NodeInfoDetails;\n}\n\nexport interface NodeNetworkInfo {\n    nodeId: HexString;\n    peerTotalSent: bigint;\n    peerTotalReceived: bigint;\n    avgBpsIn: bigint;\n    avgBpsOut: bigint;\n}\n\nexport type NodeInfoDetails = NodeInfoDetails_Bootstrapper | NodeInfoDetails_Node;\n\nexport interface NodeInfoDetails_Bootstrapper {\n    tag: 'bootstrapper';\n}\n\nexport interface NodeInfoDetails_Node {\n    tag: 'node';\n    consensusStatus: NodeInfoConsensusStatus;\n}\n\nexport type NodeInfoConsensusStatus = NodeInfoConsensusStatusGeneric | NodeInfoConsensusStatusActive;\n\nexport interface NodeInfoConsensusStatusGeneric {\n    tag: 'notRunning' | 'passive';\n}\n\nexport interface NodeInfoConsensusStatusActive {\n    tag: 'active';\n    bakerId: BakerId;\n    status: BakerConsensusInfoStatus;\n}\n\nexport type BakerConsensusInfoStatus = BakerConsensusInfoStatusGeneric | BakerConsensusInfoStatusPassiveCommitteeInfo;\n\nexport interface BakerConsensusInfoStatusGeneric {\n    tag: 'activeBakerCommitteeInfo' | 'activeFinalizerCommitteeInfo';\n}\n\nexport interface BakerConsensusInfoStatusPassiveCommitteeInfo {\n    tag: 'passiveCommitteeInfo';\n    passiveCommitteeInfo: Upward<PassiveCommitteeInfo>;\n}\n\nexport enum PassiveCommitteeInfo {\n    NotInCommittee = 0,\n    AddedButNotActiveInCommittee = 1,\n    AddedButWrongKeys = 2,\n}\n","export {\n    Type,\n    fromJSON,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    instanceOf,\n    create,\n    toSerializable,\n    fromSerializable,\n} from '../../types/SequenceNumber.js';\n","// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size\n// @generated from protobuf file \"v2/concordium/kernel.proto\" (package \"concordium.v2\", syntax proto3)\n// tslint:disable\n//\n// This file currently exists to prevent circular dependencies when extracting\n// PLT functionality into its own package. The file name `kernel` is choosen\n// in anticipation of more core definitions operating at the module/core\n// intersection to follow.\n//\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * An address of an account. Always 32 bytes.\n *\n * @generated from protobuf message concordium.v2.AccountAddress\n */\nexport interface AccountAddress {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n/**\n * A memo which can be included as part of a transfer. Max size is 256 bytes.\n *\n * @generated from protobuf message concordium.v2.Memo\n */\nexport interface Memo {\n    /**\n     * @generated from protobuf field: bytes value = 1;\n     */\n    value: Uint8Array;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass AccountAddress$Type extends MessageType<AccountAddress> {\n    constructor() {\n        super(\"concordium.v2.AccountAddress\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.AccountAddress\n */\nexport const AccountAddress = new AccountAddress$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Memo$Type extends MessageType<Memo> {\n    constructor() {\n        super(\"concordium.v2.Memo\", [\n            { no: 1, name: \"value\", kind: \"scalar\", T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.v2.Memo\n */\nexport const Memo = new Memo$Type();\n","/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,            // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n    /*\r\n     * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n     * primitive number without a loss of precision.\r\n     */\r\n    STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        if (typeof n !== 'string') {\r\n          if (Big.strict === true && typeof n !== 'bigint') {\r\n            throw TypeError(INVALID + 'value');\r\n          }\r\n\r\n          // Minus zero?\r\n          n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n        }\r\n\r\n        parse(x, n);\r\n      }\r\n\r\n      // Retain a reference to this Big constructor.\r\n      // Shadow Big.prototype.constructor which points to Object.\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.strict = STRICT;\r\n    Big.roundDown = 0;\r\n    Big.roundHalfUp = 1;\r\n    Big.roundHalfEven = 2;\r\n    Big.roundUp = 3;\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    if (!NUMERIC.test(n)) {\r\n      throw Error(INVALID + 'number');\r\n    }\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, sd, rm, more) {\r\n    var xc = x.c;\r\n\r\n    if (rm === UNDEFINED) rm = x.constructor.RM;\r\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (sd < 1) {\r\n      more =\r\n        rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n        rm === 1 && xc[0] >= 5 ||\r\n        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n      );\r\n\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = x.e - sd + 1;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else if (sd < xc.length) {\r\n\r\n      // xc[sd] is the digit after the digit that may be rounded up.\r\n      more =\r\n        rm === 1 && xc[sd] >= 5 ||\r\n        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n        rm === 3 && (more || !!xc[0]);\r\n\r\n      // Remove any digits after the required precision.\r\n      xc.length = sd;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[--sd] > 9;) {\r\n          xc[sd] = 0;\r\n          if (sd === 0) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (sd = xc.length; !xc[--sd];) xc.pop();\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   */\r\n  function stringify(x, doExponential, isNonzero) {\r\n    var e = x.e,\r\n      s = x.c.join(''),\r\n      n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (doExponential) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) {\r\n        for (e -= n; e--;) s += '0';\r\n      } else if (e < n) {\r\n        s = s.slice(0, e) + '.' + s.slice(e);\r\n      }\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && isNonzero ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n   */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) {\r\n      y.s = k;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n    q.s = k;\r\n    k = p < 0 ? 0 : p;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n      p--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (yc[0]) {\r\n        y.s = -b;\r\n      } else if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = 1;\r\n      }\r\n      return y;\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n  \r\n  \r\n  /*\r\n   * Return a new Big whose value is the value of this Big negated.\r\n   */\r\n  P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var e, k, t,\r\n      x = this,\r\n      Big = x.constructor;\r\n\r\n    y = new Big(y);\r\n\r\n    // Signs differ?\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (!yc[0]) {\r\n        if (xc[0]) {\r\n          y = new Big(x);\r\n        } else {\r\n          y.s = x.s;\r\n        }\r\n      }\r\n      return y;\r\n    }\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (e = xe - ye) {\r\n      if (e > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        e = -e;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; e--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    e = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (k) {\r\n      xc.unshift(k);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor('1'),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n      throw Error(INVALID + 'exponent');\r\n    }\r\n\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.prec = function (sd, rm) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    return round(new this.constructor(this), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n   * using rounding mode rm, or Big.RM if rm is not specified.\r\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.round = function (dp, rm) {\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    return round(new this.constructor(this), dp + this.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big('0.5');\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) {\r\n      throw Error(NAME + 'No square root');\r\n    }\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s + '');\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) {\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = b;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), ++dp, rm);\r\n      for (; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, true, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n      // x.e may have changed if the value is rounded up.\r\n      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, false, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toJSON = P.toString = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Big as a primitve number.\r\n   */\r\n  P.toNumber = function () {\r\n    var n = Number(stringify(this, true, true));\r\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n      throw Error(NAME + 'Imprecise conversion');\r\n    }\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * rounding mode rm, or Big.RM if rm is not specified.\r\n   * Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      n = x.c[0];\r\n\r\n    if (sd !== UNDEFINED) {\r\n      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n        throw Error(INVALID + 'precision');\r\n      }\r\n      x = round(new Big(x), sd, rm);\r\n      for (; x.c.length < sd;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    if (Big.strict === true) {\r\n      throw Error(NAME + 'valueOf disallowed');\r\n    }\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n","\"use strict\";\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexports.utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = exports.base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nconst base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.base58);\nexports.base58check = base58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8: exports.utf8, hex: exports.hex, base16: exports.base16, base32: exports.base32, base64: exports.base64, base64url: exports.base64url, base58: exports.base58, base58xmr: exports.base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nconst bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString;\nconst stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;\n","import type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.Duration;\nexport type Serializable = string;\n\n/**\n * Type representing a duration of time down to milliseconds.\n * Can not be negative.\n */\nclass Duration {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** The internal value for representing a duration in milliseconds. */\n        public readonly value: bigint\n    ) {}\n\n    /**\n     * Get a string representation of the duration in milliseconds.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.value.toString();\n    }\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode bigint} value\n */\nexport function toUnwrappedJSON(value: Type): bigint {\n    return value.value;\n}\n\n/**\n * Type representing a duration of time down to milliseconds.\n * Can not be negative.\n */\nexport type Type = Duration;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is Duration {\n    return value instanceof Duration;\n}\n\n/**\n * Construct a Duration from a given number of milliseconds.\n * @param {number} value Number of milliseconds\n * @throws If a negative value is provided.\n * @returns {Duration} Duration corresponding to the provided value.\n */\nexport function fromMillis(value: number | bigint): Duration {\n    if (value < 0) {\n        throw new Error('Invalid duration: The value cannot be a negative number.');\n    }\n    return new Duration(BigInt(value));\n}\n\n/**\n * Regular expression to match a single measure in the duration string format.\n * Matches the digits and the unit in separate groups.\n */\nconst stringMeasureRegexp = /^(\\d+)(ms|s|m|h|d)$/;\n\n/**\n * Parse a string containing a list of duration measures separated by whitespaces.\n *\n * A measure is a number followed by the unit (no whitespace\n * between is allowed). Every measure is accumulated into a duration. The\n * string is allowed to contain any number of measures with the same unit in no\n * particular order.\n *\n * The supported units are:\n * - `ms` for milliseconds\n * - `s` for seconds\n * - `m` for minutes\n * - `h` for hours\n * - `d` for days\n *\n * # Example\n * The duration of 10 days, 1 hour, 2 minutes and 7 seconds is:\n * ```text\n * \"10d 1h 2m 7s\"\n * ```\n * @param {string} durationString string representing a duration.\n * @throws The format of the string is not matching the format.\n * @returns {Duration}\n */\nexport function fromString(durationString: string): Duration {\n    let durationInMillis = 0;\n    for (const measure of durationString.split(' ')) {\n        const result = measure.match(stringMeasureRegexp);\n        if (result === null) {\n            throw new Error('Invalid duration format');\n        }\n        const [, valueString, unit] = result;\n        const value = parseInt(valueString, 10);\n        switch (unit) {\n            case 'ms':\n                durationInMillis += value;\n                break;\n            case 's':\n                durationInMillis += value * 1000;\n                break;\n            case 'm':\n                durationInMillis += value * 1000 * 60;\n                break;\n            case 'h':\n                durationInMillis += value * 1000 * 60 * 60;\n                break;\n            case 'd':\n                durationInMillis += value * 1000 * 60 * 60 * 24;\n                break;\n            default:\n                throw new Error(`Invalid duration format: Unknown unit '${unit}'.`);\n        }\n    }\n    return fromMillis(durationInMillis);\n}\n\n/**\n * Get the duration in milliseconds.\n * @param {Duration} duration The duration.\n * @returns {bigint} The duration represented in milliseconds.\n */\nexport function toMillis(duration: Duration): bigint {\n    return duration.value;\n}\n\n/** Type used when encoding a duration in the JSON format used when serializing using a smart contract schema type. */\nexport type SchemaValue = string;\n\n/**\n * Get duration in the JSON format used when serializing using a smart contract schema type.\n * @param {Duration} duration The duration.\n * @returns {SchemaValue} The schema JSON representation.\n */\nexport function toSchemaValue(duration: Duration): SchemaValue {\n    return `${duration.value} ms`;\n}\n\n/**\n * Convert to duration from JSON format used when serializing using a smart contract schema type.\n * @param {SchemaValue} duration The duration in schema JSON format.\n * @returns {Duration} The duration.\n */\nexport function fromSchemaValue(duration: SchemaValue): Duration {\n    return fromString(duration);\n}\n\n/**\n * Convert a duration from its protobuf encoding.\n * @param {Proto.Duration} duration The duration in protobuf.\n * @returns {Duration} The duration.\n */\nexport function fromProto(duration: Proto.Duration): Duration {\n    return fromMillis(duration.value);\n}\n\n/**\n * Convert a duration into its protobuf encoding.\n * @param {Duration} duration The duration.\n * @returns {Proto.Duration} The protobuf encoding.\n */\nexport function toProto(duration: Duration): Proto.Duration {\n    return {\n        value: duration.value,\n    };\n}\n\n/**\n * Constructs a {@linkcode Duration} from {@linkcode Serializable}.\n * @param {Serializable} value\n * @returns {Duration} The duration.\n */\nexport function fromSerializable(value: Serializable): Duration {\n    return fromMillis(BigInt(value));\n}\n\n/**\n * Converts {@linkcode Duration} into {@linkcode Serializable}\n * @param {Duration} duration\n * @returns {Serializable} The serializable value\n */\nexport function toSerializable(duration: Duration): Serializable {\n    return duration.value.toString();\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode toSerializable} function instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: Duration): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toSerializable(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromSerializable} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromSerializable);\n","import { Tag, decode } from 'cbor2';\nimport { encode, registerEncoder } from 'cbor2/encoder';\n\nimport { Base58String } from '../index.js';\nimport { AccountAddress } from '../types/index.js';\nimport { bail } from '../util.js';\n\nconst CCD_NETWORK_ID = 919; // Concordium network identifier - Did you know 919 is a palindromic prime and a centred hexagonal number?\n\n/** JSON representation of a {@link Type}. */\nexport type JSON = {\n    /** The address of the account holding the token. */\n    address: Base58String;\n    /** Optional coininfo describing the network for the account. */\n    coinInfo?: typeof CCD_NETWORK_ID;\n};\n\nclass CborAccountAddress {\n    #nominal = true;\n\n    constructor(\n        /** The address of the account holding the token. */\n        public readonly address: AccountAddress.Type,\n        /**\n         * Optional coin info describing the network for the account. If this is `undefined`\n         * it is interpreted as a Concordium account.\n         */\n        public readonly coinInfo: typeof CCD_NETWORK_ID | undefined\n    ) {}\n\n    public toString(): string {\n        return this.address.toString();\n    }\n\n    /**\n     * Get a JSON-serializable representation of the account address. This is called implicitly when serialized with JSON.stringify.\n     * @returns {JSON} The JSON representation.\n     */\n    public toJSON(): JSON {\n        return {\n            address: this.address.toJSON(),\n            coinInfo: this.coinInfo,\n        };\n    }\n}\n\n/**\n * Public type alias for the CBOR aware AccountAddress wrapper.\n * Instances are created via the helper factory functions rather than the class constructor.\n */\nexport type Type = CborAccountAddress;\n\n/**\n * Construct a {@link Type} from an existing {@link AccountAddress.Type}.\n * Coin information will default to the Concordium network id (919).\n */\nexport function fromAccountAddress(address: AccountAddress.Type): CborAccountAddress {\n    return new CborAccountAddress(address, CCD_NETWORK_ID);\n}\n\n/**\n * Recreate a {@link Type} from its JSON form.\n * @throws {Error} If the supplied coinInfo is present and not the Concordium network id.\n */\nexport function fromJSON(json: JSON): Type {\n    if (json.coinInfo !== undefined && json.coinInfo !== CCD_NETWORK_ID) {\n        throw new Error(`Unsupported coin info for account address: ${json.coinInfo}. Expected ${CCD_NETWORK_ID}.`);\n    }\n    return new CborAccountAddress(AccountAddress.fromJSON(json.address), json.coinInfo);\n}\n\n/**\n * Construct a CborAccountAddress from a base58check string.\n *\n * @param {string} address String of base58check encoded account address, must use a byte version of 1.\n * @returns {CborAccountAddress} The CborAccountAddress.\n * @throws If the provided string is not: exactly 50 characters, a valid base58check encoding using version byte 1.\n */\nexport function fromBase58(address: string): CborAccountAddress {\n    return fromAccountAddress(AccountAddress.fromBase58(address));\n}\n\n/**\n * Get a base58check string of the account address.\n * @param {CborAccountAddress} accountAddress The account address.\n */\nexport function toBase58(accountAddress: CborAccountAddress): string {\n    return accountAddress.address.address;\n}\n\n/**\n * Type predicate which checks if a value is an instance of {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is Type {\n    return value instanceof CborAccountAddress;\n}\n\n// CBOR\nconst TAGGED_ADDRESS = 40307;\nconst TAGGED_COININFO = 40305;\n\n/**\n * Converts an {@linkcode Account} to a CBOR tagged value.\n * This encodes the account address as a CBOR tagged value with tag 40307, containing both\n * the coin information (tagged as 40305) and the account's decoded address.\n */\nfunction toCBORValue(value: Type): Tag {\n    let mapContents: [number, any][];\n    if (value.coinInfo === undefined) {\n        mapContents = [[3, value.address.decodedAddress]];\n    } else {\n        const taggedCoinInfo = new Tag(TAGGED_COININFO, new Map([[1, CCD_NETWORK_ID]]));\n        mapContents = [\n            [1, taggedCoinInfo],\n            [3, value.address.decodedAddress],\n        ];\n    }\n\n    const map = new Map<number, any>(mapContents);\n    return new Tag(TAGGED_ADDRESS, map);\n}\n\n/**\n * Converts an CborAccountAddress to its CBOR (Concise Binary Object Representation) encoding.\n * This encodes the account address as a CBOR tagged value with tag 40307, containing both\n * the coin information (tagged as 40305) and the account's decoded address.\n *\n * This corresponds to a concordium-specific subtype of the `tagged-address` type from\n * [BCR-2020-009]{@link https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-009-address.md},\n * identified by `tagged-coininfo` corresponding to the Concordium network from\n * [BCR-2020-007]{@link https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-007-hdkey.md}\n *\n * Example of CBOR diagnostic notation for an encoded account address:\n * ```\n * 40307({\n *   1: 40305({1: 919}),\n *   3: h'abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789'\n * })\n * ```\n * Where 919 is the Concordium network identifier and the hex string is the raw account address.\n *\n * @param {Type} value - The token holder to convert to CBOR format.\n * @throws {Error} - If an unsupported CBOR encoding is specified.\n * @returns {Uint8Array} The CBOR encoded representation of the token holder.\n */\nexport function toCBOR(value: Type): Uint8Array {\n    return new Uint8Array(encode(toCBORValue(value)));\n}\n\n/**\n * Registers a CBOR encoder for the CborAccountAddress type with the `cbor2` library.\n * This allows CborAccountAddress instances to be automatically encoded when used with\n * the `cbor2` library's encode function.\n *\n * @returns {void}\n * @example\n * // Register the encoder\n * registerCBOREncoder();\n * // Now CborAccountAddress instances can be encoded directly\n * const encoded = encode(myCborAccountAddress);\n */\nexport function registerCBOREncoder(): void {\n    registerEncoder(CborAccountAddress, (value) => [TAGGED_ADDRESS, toCBORValue(value).contents]);\n}\n\n/**\n * Decodes a CBOR-encoded token holder account into an {@linkcode Account} instance.\n * @param {unknown} decoded - The CBOR decoded value, expected to be a tagged value with tag 40307.\n * @throws {Error} - If the decoded value is not a valid CBOR encoded token holder account.\n * @returns {Account} The decoded account address as a CborAccountAddress instance.\n */\nfunction fromCBORValueAccount(decoded: unknown): CborAccountAddress {\n    // Verify we have a tagged value with tag 40307 (tagged-address)\n    if (!(decoded instanceof Tag) || decoded.tag !== TAGGED_ADDRESS) {\n        throw new Error(`Invalid CBOR encoded token holder account: expected tag ${TAGGED_ADDRESS}`);\n    }\n\n    const value = decoded.contents;\n\n    if (!(value instanceof Map)) {\n        throw new Error('Invalid CBOR encoded token holder account: expected a map');\n    }\n\n    // Verify the map corresponds to the BCR-2020-009 `address` format\n    const validKeys = [1, 2, 3]; // we allow 2 here, as it is in the spec for BCR-2020-009 `address`, but we don't use it\n    for (const key of value.keys()) {\n        validKeys.includes(key) || bail(`Invalid CBOR encoded token holder account: unexpected key ${key}`);\n    }\n\n    // Extract the token holder account bytes (key 3)\n    const addressBytes = value.get(3);\n    if (\n        !addressBytes ||\n        !(addressBytes instanceof Uint8Array) ||\n        addressBytes.byteLength !== AccountAddress.BYTES_LENGTH\n    ) {\n        throw new Error('Invalid CBOR encoded token holder account: missing or invalid address bytes');\n    }\n\n    // Optional validation for coin information if present (key 1)\n    const coinInfo = value.get(1);\n    let coinInfoValue = undefined;\n    if (coinInfo !== undefined) {\n        // Verify coin info has the correct tag if present\n        if (!(coinInfo instanceof Tag) || coinInfo.tag !== TAGGED_COININFO) {\n            throw new Error(\n                `Invalid CBOR encoded token holder account: coin info has incorrect tag (expected ${TAGGED_COININFO})`\n            );\n        }\n\n        // Verify coin info contains Concordium network identifier if present\n        const coinInfoMap = coinInfo.contents;\n        if (!(coinInfoMap instanceof Map) || coinInfoMap.get(1) !== CCD_NETWORK_ID) {\n            throw new Error(\n                `Invalid CBOR token holder account: coin info does not contain Concordium network identifier ${CCD_NETWORK_ID}`\n            );\n        }\n        coinInfoValue = coinInfoMap.get(1);\n\n        // Verify the map corresponds to the BCR-2020-007 `coininfo` format\n        const validKeys = [1, 2]; // we allow 2 here, as it is in the spec for BCR-2020-007 `coininfo`, but we don't use it\n        for (const key of coinInfoMap.keys()) {\n            validKeys.includes(key) || bail(`Invalid CBOR encoded coininfo: unexpected key ${key}`);\n        }\n    }\n\n    // Create the AccountAddress from the extracted bytes\n    return new CborAccountAddress(AccountAddress.fromBuffer(addressBytes), coinInfoValue);\n}\n\n/**\n * Decodes a CBOR value into a CborAccountAddress instance.\n * This function checks if the value is a tagged address (40307) and decodes it accordingly.\n *\n * @param {unknown} value - The CBOR decoded value, expected to be a tagged address.\n * @throws {Error} - If the value is not a valid CBOR encoded token holder account.\n * @returns {Type} The decoded CborAccountAddress instance.\n */\nexport function fromCBORValue(value: unknown): Type {\n    if (value instanceof Tag && value.tag === TAGGED_ADDRESS) {\n        return fromCBORValueAccount(value);\n    }\n\n    throw new Error(`Failed to decode 'CborAccountAddress.Type' from CBOR value: ${value}`);\n}\n\n/**\n * Decodes a CBOR-encoded account address into an CborAccountAddress instance.\n * This function can handle both the full tagged format (with coin information)\n * and a simplified format with just the address bytes.\n *\n * 1. With `tagged-coininfo` (40305):\n * ```\n * 40307({\n *   1: 40305({1: 919}),  // Optional coin information\n *   3: h'abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789'\n * })\n * ```\n *\n * 2. Without `tagged-coininfo`:\n * ```\n * 40307({\n *   3: h'abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789'\n * }) // The address is assumed to be a Concordium address\n * ```\n *\n * @param {Uint8Array} bytes - The CBOR encoded representation of an account address.\n * @throws {Error} - If the input is not a valid CBOR encoding of an account address.\n * @returns {Type} The decoded CborAccountAddress instance.\n */\nexport function fromCBOR(bytes: Uint8Array): Type {\n    return fromCBORValue(decode(bytes));\n}\n\n/**\n * Registers a CBOR decoder for the tagged-address (40307) format with the `cbor2` library.\n * This enables automatic decoding of CBOR data containing Concordium account addresses\n * when using the `cbor2` library's decode function.\n *\n * @returns {() => void} A cleanup function that, when called, will restore the previous\n * decoder (if any) that was registered for the tagged-address format. This is useful\n * when used in an existing `cbor2` use-case.\n *\n * @example\n * // Register the decoder\n * const cleanup = registerCBORDecoder();\n * // Use the decoder\n * const tokenHolder = decode(cborBytes); // Returns CborAccountAddress if format matches\n * // Later, unregister the decoder\n * cleanup();\n */\nexport function registerCBORDecoder(): () => void {\n    const old = [Tag.registerDecoder(TAGGED_ADDRESS, fromCBORValue)];\n\n    // return cleanup function to restore the old decoder\n    return () => {\n        for (const decoder of old) {\n            if (decoder) {\n                Tag.registerDecoder(TAGGED_ADDRESS, decoder);\n            } else {\n                Tag.clearDecoder(TAGGED_ADDRESS);\n            }\n        }\n    };\n}\n","import { getAccountTransactionHandler } from './accountTransactions.js';\nimport { getUpdatePayloadSize } from './contractHelpers.js';\nimport { ConcordiumGRPCClient } from './grpc/GRPCClient.js';\nimport { AccountAddress, ContractAddress, Parameter, ReceiveName } from './pub/types.js';\nimport { collapseRatio, multiplyRatio } from './ratioHelpers.js';\nimport { serializeAccountTransactionPayload } from './serialization.js';\nimport { AccountTransactionPayload, AccountTransactionType, ChainParameters, Ratio } from './types.js';\nimport * as BlockHash from './types/BlockHash.js';\nimport * as CcdAmount from './types/CcdAmount.js';\nimport * as Energy from './types/Energy.js';\n\n/**\n * These constants must be consistent with constA and constB in:\n * https://github.com/Concordium/concordium-base/blob/main/haskell-src/Concordium/Cost.hs\n */\nexport const constantA = 100n;\nexport const constantB = 1n;\n\n// Account address (32 bytes), nonce (8 bytes), energy (8 bytes), payload size (4 bytes), expiry (8 bytes);\nconst ACCOUNT_TRANSACTION_HEADER_SIZE = BigInt(32 + 8 + 8 + 4 + 8);\n\n/**\n * The energy cost is assigned according to the formula:\n * A * signatureCount + B * size + C_t, where C_t is a transaction specific cost.\n *\n * The transaction specific cost can be found at https://github.com/Concordium/concordium-base/blob/main/haskell-src/Concordium/Cost.hs.\n * @param signatureCount number of signatures for the transaction\n * @param payloadSize size of the payload in bytes\n * @param transactionSpecificCost a transaction specific cost\n * @returns the energy cost for the transaction, to be set in the transaction header\n */\nexport function calculateEnergyCost(\n    signatureCount: bigint,\n    payloadSize: bigint,\n    transactionSpecificCost: bigint\n): Energy.Type {\n    return Energy.create(\n        constantA * signatureCount +\n            constantB * (ACCOUNT_TRANSACTION_HEADER_SIZE + payloadSize) +\n            transactionSpecificCost\n    );\n}\n\n/**\n * Given a transaction type and the payload of that transaction type, return the corresponding energy cost.\n * Note that the given type and the payload type should match, otherwise the behaviour is undefined (could throw or give incorrect result).\n * @param signatureCount the number of signatures that will be used for the transaction, defaults to 1.\n */\nexport function getEnergyCost(\n    transactionType: AccountTransactionType,\n    payload: AccountTransactionPayload,\n    signatureCount = 1n\n): Energy.Type {\n    const size = serializeAccountTransactionPayload({ payload, type: transactionType }).length;\n    const handler = getAccountTransactionHandler(transactionType);\n    return calculateEnergyCost(signatureCount, BigInt(size), handler.getBaseEnergyCost(payload));\n}\n\n/**\n * Get contract update energy cost\n * Estimated by calculateEnergyCost, where transactionSpecificCost received from invokeContract used energy\n * @param {ConcordiumGRPCClient} grpcClient - The client to be used for the query\n * @param {ContractAddress.Type} contractAddress - The address of the contract to query\n * @param {AccountAddress.Type} invoker - Representation of an account address\n * @param {Parameter.Type} parameter - Input for contract function\n * @param {ReceiveName.Type} method - Represents a receive-function in a smart contract module\n * @param {bigint} signatureCount - Number of expected signatures\n * @param {BlockHash.Type} [blockHash] - Optional block hash allowing for dry-running the contract update at the end of a specific block.\n *\n * @throws {Error} 'no response' if either the block does not exist, or then node fails to parse any of the inputs\n * If the response tag is `failure`, then error contains a response message\n *\n * @returns {Energy} estimated amount of energy for the last finalized block according to the node,\n * this means that the actual energy cost might be different depending on the implementation of the smart contract\n * and the interaction with the instance, since this was estimated\n */\nexport async function getContractUpdateEnergyCost(\n    grpcClient: ConcordiumGRPCClient,\n    contractAddress: ContractAddress.Type,\n    invoker: AccountAddress.Type,\n    parameter: Parameter.Type,\n    method: ReceiveName.Type,\n    signatureCount: bigint,\n    blockHash?: BlockHash.Type\n): Promise<Energy.Type> {\n    const res = await grpcClient.invokeContract(\n        {\n            contract: contractAddress,\n            invoker,\n            parameter,\n            method,\n        },\n        blockHash\n    );\n\n    if (!res || res.tag === 'failure') {\n        throw new Error(res?.reason?.tag || 'no response');\n    }\n\n    return calculateEnergyCost(\n        signatureCount,\n        getUpdatePayloadSize(parameter.buffer.length, method.toString().length),\n        res.usedEnergy.value\n    );\n}\n\n/**\n * Given the current blockchain parameters, return the microCCD per NRG exchange rate of the chain.\n * @returns the microCCD per NRG exchange rate as a ratio.\n */\nexport function getExchangeRate({ euroPerEnergy, microGTUPerEuro }: ChainParameters): Ratio {\n    const denominator = BigInt(euroPerEnergy.denominator * microGTUPerEuro.denominator);\n    const numerator = BigInt(euroPerEnergy.numerator * microGTUPerEuro.numerator);\n    return { numerator, denominator };\n}\n\n/**\n * Given an NRG amount and the current blockchain parameters, this returns the corresponding amount in microCcd.\n */\nexport function convertEnergyToMicroCcd(cost: Energy.Type, chainParameters: ChainParameters): CcdAmount.Type {\n    const rate = getExchangeRate(chainParameters);\n    return CcdAmount.fromMicroCcd(collapseRatio(multiplyRatio(rate, cost.value)));\n}\n","export {\n    Type,\n    instanceOf,\n    create,\n    toString,\n    equals,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    toSchemaValue,\n    fromSchemaValue,\n    fromSerializable,\n    toSerializable,\n    SchemaValue,\n} from '../../types/ContractAddress.js';\n","import { CryptographicParameters } from '../types.js';\nimport type * as ContractAddress from '../types/ContractAddress.js';\nimport { bail } from '../util.js';\nimport { AttributeType, StatementAttributeType, TimestampAttribute } from './types.js';\n\nexport type VerifyWeb3IdCredentialSignatureInput = {\n    globalContext: CryptographicParameters;\n    signature: string;\n    values: Record<string, AttributeType>;\n    randomness: Record<string, string>;\n    holder: string;\n    issuerPublicKey: string;\n    issuerContract: ContractAddress.Type;\n};\n\n/**\n * Compares a and b as field elements.\n * if a < b then compareStringAttributes(a,b) = -1;\n * if a == b then compareStringAttributes(a,b) = 0;\n * if a > b then compareStringAttributes(a,b) = 1;\n */\nexport function compareStringAttributes(a: string, b: string): number {\n    const encoder = new TextEncoder();\n    const aBytes = encoder.encode(a);\n    const bBytes = encoder.encode(b);\n\n    if (aBytes.length < bBytes.length) return -1;\n    if (aBytes.length > bBytes.length) return 1;\n\n    for (const [i, aByte] of aBytes.entries()) {\n        const bByte = bBytes[i];\n\n        if (aByte === bBytes[i]) continue;\n        return aByte < bByte ? -1 : 1;\n    }\n\n    return 0;\n}\n\n/**\n * Given a string attribute value and a range [lower, upper[, return whether value is in the range, when converted into field elements.\n */\nexport function isStringAttributeInRange(value: string, lower: string, upper: string): boolean {\n    const lowCmp = compareStringAttributes(value, lower);\n    if (lowCmp < 0) {\n        return false;\n    }\n    const upCmp = compareStringAttributes(value, upper);\n    return upCmp < 0;\n}\n\n/**\n * Converts a timestamp attribute to a Date.\n * @param attribute the timestamp attribute\n * @returns a Date representing the timestamp\n */\nexport function timestampToDate(attribute: TimestampAttribute): Date {\n    return new Date(Date.parse(attribute.timestamp));\n}\n\n/**\n * Converts a Date to a timestamp attribute.\n * @param value the date to convert to an attribute\n * @returns the timestamp attribute for the provided date\n */\nexport function dateToTimestampAttribute(value: Date): TimestampAttribute {\n    return {\n        type: 'date-time',\n        timestamp: value.toISOString(),\n    };\n}\n\n/**\n * Converts a statement attribute to an attribute. Statement attributes allow\n * for Date which are mapped into timestamp attributes. All other attribute\n * types are mapped one-to-one.\n * @param statementAttribute the statement attribute to map\n * @returns the mapped attribute type\n */\nexport function statementAttributeTypeToAttributeType(statementAttribute: StatementAttributeType): AttributeType {\n    if (statementAttribute instanceof Date) {\n        return dateToTimestampAttribute(statementAttribute);\n    }\n    return statementAttribute;\n}\n\n/**\n * Parses a {@linkcode Date} from a string containing a year and month in the form \"YYYYMM\".\n *\n * @param yearMonth - The string to parse\n * @returns the parsed {@linkcode Date}\n * @throws if the date cannot be parsed\n */\nexport function parseYearMonth(yearMonth: string): Date {\n    const b = () => bail('Failed to parse date from year-month string');\n\n    const [, y, m] = yearMonth.match(/^(\\d{4})(\\d{2})$/) ?? b();\n\n    const year = Number(y);\n    const month = Number(m) - 1; // `Date` month starts from 0, we expect january to be defined as '01'\n    if (Number.isNaN(year) || Number.isNaN(month) || month > 11) b();\n\n    return new Date(year, month);\n}\n","// The GRPC client.\nexport * from '../grpc/index.js';\n","/**\n * Discriminator for {@linkcode TypedJson}. The member used to identify each type is\n * exported from each type module and can be accessed through named export `JSON_DISCRIMINATOR`.\n */\nexport enum TypedJsonDiscriminator {\n    AccountAddress = 'ccd_account_address',\n    BlockHash = 'ccd_block_hash',\n    CcdAmount = 'ccd_ccd_amount',\n    ContractAddress = 'ccd_contract_address',\n    ContractName = 'ccd_contract_name',\n    CredentialRegistrationId = 'ccd_cred_reg_id',\n    DataBlob = 'ccd_data_blob',\n    Duration = 'ccd_duration',\n    Energy = 'ccd_energy',\n    EntrypointName = 'ccd_entrypoint_name',\n    InitName = 'ccd_init_name',\n    ModuleReference = 'ccd_module_reference',\n    Parameter = 'ccd_parameter',\n    ReceiveName = 'ccd_receive_name',\n    ReturnValue = 'ccd_return_value',\n    SequenceNumber = 'ccd_sequence_number',\n    Timestamp = 'ccd_timestamp',\n    TransactionExpiry = 'ccd_transaction_expiry',\n    TransactionHash = 'ccd_transaction_hash',\n}\n\n/**\n * Type describing the JSON representation of strong types used in the SDK.\n *\n * @template V - The serializable JSON value\n */\nexport type TypedJson<V> = {\n    /** The type discriminator */\n    ['@type']: TypedJsonDiscriminator;\n    /** The serializable type value */\n    value: V;\n};\n\n/**\n * Type predeicate for {@linkcode TypedJson}.\n *\n * @param value value to test\n * @returns boolean indicating whether `value` is {@linkcode TypedJson}\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isTypedJsonCandidate(value: unknown): value is TypedJson<any> {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n\n    return ['@type', 'value'].every((name) => Object.getOwnPropertyNames(value).includes(name));\n}\n\n/**\n * Describes the type of the JsonParseError.\n */\nexport enum TypedJsonParseErrorCode {\n    /** Malformed JSON passed to parser function */\n    MALFORMED = 'MALFORMED',\n    /** JSON passed to parser function had unexpected {@linkcode TypedJsonDiscriminator} type discriminator */\n    WRONG_TYPE = 'WRONG_TYPE',\n    /** Value could not be parsed successfully */\n    INVALID_VALUE = 'INVALID_VALUE',\n}\n\n/**\n * Error thrown from trying to parse objects of type {@linkcode TypedJson}\n */\nexport abstract class TypedJsonParseError extends Error {\n    public abstract readonly code: TypedJsonParseErrorCode;\n    private _name: string = 'TypedJsonParseError';\n\n    /**\n     * @param {string} message - The error message.\n     */\n    constructor(message: string) {\n        super(message);\n    }\n\n    public override get name() {\n        return `${this._name}.${this.code}`;\n    }\n}\n\nexport class TypedJsonMalformedError extends TypedJsonParseError {\n    public code = TypedJsonParseErrorCode.MALFORMED;\n}\n\nexport class TypedJsonWrongTypeError extends TypedJsonParseError {\n    public code = TypedJsonParseErrorCode.WRONG_TYPE;\n\n    /**\n     * @param {TypedJsonDiscriminator} expected - The discriminator expected by the typed JSON parser.\n     * @param {TypedJsonDiscriminator} actual - The discriminator received by the typed JSON parser.\n     */\n    constructor(\n        public readonly expected: TypedJsonDiscriminator,\n        public readonly actual: TypedJsonDiscriminator\n    ) {\n        super(`Wrong type discriminator found in JSON. Expected \"${expected}\", found \"${actual}\"`);\n    }\n}\n\nexport class TypedJsonInvalidValueError extends TypedJsonParseError {\n    public code = TypedJsonParseErrorCode.INVALID_VALUE;\n\n    /**\n     * @param {string} inner - The original cause of the error.\n     */\n    constructor(public readonly inner: unknown) {\n        super(`Unable to parse value (${(inner as Error)?.message ?? inner})`);\n\n        if (inner instanceof Error) {\n            this.stack = inner.stack ?? this.stack;\n        }\n    }\n}\n\n/**\n * Creates a function to convert {@linkcode TypedJson} to their corresponding type instance.\n *\n * @template V - The JSON value\n * @template T - The type returned\n *\n * @param {TypedJsonDiscriminator} expectedTypeDiscriminator - The discriminator expected in the JSON string parsed\n * @param {Function} toType - A function converting values of type `V` to instances of type `T`\n *\n * @throws {TypedJsonParseError} {@linkcode TypedJsonParseError} if the returned function fails to parse the passed value.\n *\n * @returns The JSON parser function\n */\nexport function makeFromTypedJson<V, T>(expectedTypeDiscriminator: TypedJsonDiscriminator, toType: (value: V) => T) {\n    return ({ ['@type']: type, value }: TypedJson<V>): T | V => {\n        if (type === undefined || value === undefined) {\n            throw new TypedJsonMalformedError('Expected both \"@type\" and \"value\" properties to be available in JSON');\n        }\n\n        if (expectedTypeDiscriminator !== type) {\n            throw new TypedJsonWrongTypeError(expectedTypeDiscriminator, type);\n        }\n\n        try {\n            return toType(value);\n        } catch (e) {\n            // Value cannot be successfully parsed\n            throw new TypedJsonInvalidValueError(value);\n        }\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2Async = exports.pbkdf2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    (0, _assert_js_1.hash)(hash);\n    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    (0, _assert_js_1.number)(c);\n    (0, _assert_js_1.number)(dkLen);\n    (0, _assert_js_1.number)(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = (0, utils_js_1.toBytes)(_password);\n    const salt = (0, utils_js_1.toBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac_js_1.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nfunction pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2 = pbkdf2;\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2Async = pbkdf2Async;\n//# sourceMappingURL=pbkdf2.js.map","import { RpcError } from '@protobuf-ts/runtime-rpc';\n\nexport { RpcError };\n\nexport function isRpcError(error: unknown): error is RpcError {\n    return error instanceof RpcError;\n}\n","import bs58check from 'bs58check';\nimport { Buffer } from 'buffer/index.js';\n\nimport * as GRPC_Kernel from '../grpc-api/v2/concordium/kernel.js';\nimport * as GRPC_PLT from '../grpc-api/v2/concordium/protocol-level-tokens.js';\nimport * as GRPC from '../grpc-api/v2/concordium/types.js';\nimport * as PLT from '../plt/index.js';\nimport * as SDK from '../types.js';\nimport { TokenEvent, TokenTransferEvent, TransactionEventTag } from '../types.js';\nimport * as AccountAddress from '../types/AccountAddress.js';\nimport * as BlockHash from '../types/BlockHash.js';\nimport * as CcdAmount from '../types/CcdAmount.js';\nimport * as ContractAddress from '../types/ContractAddress.js';\nimport * as ContractEvent from '../types/ContractEvent.js';\nimport * as Duration from '../types/Duration.js';\nimport * as Energy from '../types/Energy.js';\nimport * as InitName from '../types/InitName.js';\nimport * as ModuleReference from '../types/ModuleReference.js';\nimport * as Parameter from '../types/Parameter.js';\nimport * as ReceiveName from '../types/ReceiveName.js';\nimport * as ReturnValue from '../types/ReturnValue.js';\nimport * as SequenceNumber from '../types/SequenceNumber.js';\nimport * as Timestamp from '../types/Timestamp.js';\nimport * as TransactionHash from '../types/TransactionHash.js';\nimport { mapRecord, unwrap } from '../util.js';\nimport type { Upward } from './upward.js';\n\nfunction unwrapToHex(bytes: Uint8Array | undefined): SDK.HexString {\n    return Buffer.from(unwrap(bytes)).toString('hex');\n}\n\nexport function unwrapValToHex(x: { value: Uint8Array } | undefined): string {\n    return unwrapToHex(unwrap(x).value);\n}\n\nexport function unwrapToBase58(address: GRPC_Kernel.AccountAddress | undefined): SDK.Base58String {\n    return bs58check.encode(Buffer.concat([Buffer.of(1), unwrap(address?.value)]));\n}\n\nfunction trRelease(release: GRPC.Release): SDK.ReleaseScheduleWithTransactions {\n    return {\n        timestamp: trTimestamp(release.timestamp),\n        amount: CcdAmount.fromProto(unwrap(release.amount)),\n        transactions: release.transactions.map(unwrapValToHex),\n    };\n}\n\nfunction trNewRelease(release: GRPC.NewRelease): SDK.ReleaseSchedule {\n    return {\n        timestamp: trTimestamp(release.timestamp),\n        amount: CcdAmount.fromProto(unwrap(release.amount)),\n    };\n}\n\nfunction trDate(ym: GRPC.YearMonth): string {\n    return String(ym.year) + String(ym.month).padStart(2, '0');\n}\n\nfunction trAttKey(attributeKey: number): SDK.AttributeKey {\n    return SDK.AttributesKeys[attributeKey] as SDK.AttributeKey;\n}\n\nfunction trCommits(cmm: GRPC.CredentialCommitments): SDK.CredentialDeploymentCommitments {\n    return {\n        cmmPrf: unwrapValToHex(cmm.prf),\n        cmmCredCounter: unwrapValToHex(cmm.credCounter),\n        cmmIdCredSecSharingCoeff: cmm.idCredSecSharingCoeff.map(unwrapValToHex),\n        cmmAttributes: mapRecord(cmm.attributes, unwrapValToHex, trAttKey),\n        cmmMaxAccounts: unwrapValToHex(cmm.maxAccounts),\n    };\n}\n\nfunction trVerifyKey(verifyKey: GRPC.AccountVerifyKey): Upward<SDK.VerifyKey> {\n    switch (verifyKey.key.oneofKind) {\n        case 'ed25519Key':\n            return {\n                schemeId: 'Ed25519',\n                verifyKey: unwrapToHex(verifyKey.key.ed25519Key),\n            };\n        case undefined:\n            return null;\n    }\n}\n\nfunction trCredKeys(credKeys: GRPC.CredentialPublicKeys): SDK.CredentialPublicKeys {\n    return {\n        threshold: unwrap(credKeys.threshold?.value),\n        keys: mapRecord(credKeys.keys, trVerifyKey),\n    };\n}\n\nfunction trChainArData(chainArData: GRPC.ChainArData): SDK.ChainArData {\n    return {\n        encIdCredPubShare: unwrapToHex(chainArData.encIdCredPubShare),\n    };\n}\n\nfunction trCommissionRates(rates: GRPC.CommissionRates | undefined): SDK.CommissionRates {\n    return {\n        transactionCommission: trAmountFraction(rates?.transaction),\n        bakingCommission: trAmountFraction(rates?.baking),\n        finalizationCommission: trAmountFraction(rates?.finalization),\n    };\n}\n\nfunction trCred(cred: GRPC.AccountCredential): SDK.AccountCredential {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const crd = cred.credentialValues as any;\n    if (crd === undefined) {\n        throw Error('CredentialValues were undefined.');\n    }\n    const isNormal = crd.oneofKind === 'normal';\n    const credVals = isNormal ? crd.normal : crd.initial;\n\n    const policy: SDK.Policy = {\n        validTo: trDate(unwrap(credVals.policy?.validTo)),\n        createdAt: trDate(unwrap(credVals.policy?.createdAt)),\n        revealedAttributes: mapRecord(credVals.policy?.attributes, unwrapToHex, trAttKey),\n    };\n    const commonValues = {\n        ipIdentity: unwrap(credVals.ipId?.value),\n        credentialPublicKeys: trCredKeys(unwrap(credVals.keys)),\n        policy: policy,\n    };\n\n    let value: SDK.InitialAccountCredential | SDK.NormalAccountCredential;\n    if (isNormal) {\n        const deploymentValues = {\n            ...commonValues,\n            credId: unwrapValToHex(credVals.credId),\n            revocationThreshold: unwrap(credVals.arThreshold?.value),\n            arData: mapRecord(credVals.arData, trChainArData, String),\n            commitments: trCommits(unwrap(credVals.commitments)),\n        };\n        value = {\n            type: 'normal',\n            contents: deploymentValues,\n        };\n    } else {\n        const deploymentValues = {\n            ...commonValues,\n            regId: unwrapValToHex(credVals.credId),\n        };\n        value = {\n            type: 'initial',\n            contents: deploymentValues,\n        };\n    }\n\n    return {\n        v: 0,\n        value,\n    };\n}\n\nfunction trDelegatorTarget(target: GRPC.DelegationTarget): SDK.DelegationTarget {\n    if (target.target.oneofKind === 'passive') {\n        return {\n            delegateType: SDK.DelegationTargetType.PassiveDelegation,\n        };\n    } else if (target.target.oneofKind === 'baker') {\n        return {\n            delegateType: SDK.DelegationTargetType.Baker,\n            bakerId: target.target.baker.value,\n        };\n    } else {\n        throw Error(\n            'DelegatorTarget expected to be of type \"passive\" or \"baker\", but found ' + target.target.oneofKind\n        );\n    }\n}\n\nfunction trTimestamp(timestamp: GRPC.Timestamp | undefined): Date {\n    return new Date(Number(unwrap(timestamp?.value)));\n}\n\nfunction trPendingChange(pendingChange: GRPC.StakePendingChange | undefined): SDK.StakePendingChange {\n    const change = unwrap(pendingChange?.change);\n    if (change.oneofKind === 'reduce') {\n        return {\n            newStake: unwrap(change.reduce.newStake?.value),\n            effectiveTime: trTimestamp(change.reduce.effectiveTime),\n            change: SDK.StakePendingChangeType.ReduceStake,\n        };\n    } else if (change.oneofKind === 'remove') {\n        return {\n            effectiveTime: trTimestamp(change.remove),\n            change: SDK.StakePendingChangeType.RemoveStake,\n        };\n    } else {\n        throw Error('PendingChange expected to be of type \"reduce\" or \"remove\", but found ' + change.oneofKind);\n    }\n}\n\nfunction trDelegator(deleg: GRPC.AccountStakingInfo_Delegator): SDK.AccountDelegationDetails {\n    return {\n        restakeEarnings: deleg.restakeEarnings,\n        stakedAmount: CcdAmount.fromProto(unwrap(deleg.stakedAmount)),\n        delegationTarget: trDelegatorTarget(unwrap(deleg.target)),\n        // Set the following value if deleg.pendingChange is set to true\n        ...(deleg.pendingChange && {\n            pendingChange: trPendingChange(deleg.pendingChange),\n        }),\n    };\n}\n\nfunction trAmountFraction(amount: GRPC.AmountFraction | undefined): number {\n    return unwrap(amount?.partsPerHundredThousand) / 100000;\n}\n\nfunction trOpenStatus(openStatus: GRPC.OpenStatus | undefined): Upward<SDK.OpenStatusText> {\n    switch (openStatus) {\n        case GRPC.OpenStatus.OPEN_FOR_ALL:\n            return SDK.OpenStatusText.OpenForAll;\n        case GRPC.OpenStatus.CLOSED_FOR_NEW:\n            return SDK.OpenStatusText.ClosedForNew;\n        case GRPC.OpenStatus.CLOSED_FOR_ALL:\n            return SDK.OpenStatusText.ClosedForAll;\n        case undefined:\n            return null;\n    }\n}\n\nfunction trBaker(baker: GRPC.AccountStakingInfo_Baker): SDK.AccountBakerDetails {\n    const bakerInfo = baker.bakerInfo;\n    const isSuspended = baker.isSuspended;\n\n    const v0: SDK.AccountBakerDetails = {\n        version: 0,\n        restakeEarnings: baker.restakeEarnings,\n        bakerId: unwrap(bakerInfo?.bakerId?.value),\n        bakerAggregationVerifyKey: unwrapValToHex(bakerInfo?.aggregationKey),\n        bakerElectionVerifyKey: unwrapValToHex(baker.bakerInfo?.electionKey),\n        bakerSignatureVerifyKey: unwrapValToHex(bakerInfo?.signatureKey),\n        stakedAmount: CcdAmount.fromProto(unwrap(baker.stakedAmount)),\n        // Set the following value if baker.pendingChange is set to true\n        ...(baker.pendingChange && {\n            pendingChange: trPendingChange(baker.pendingChange),\n        }),\n        isSuspended,\n    };\n\n    if (baker.poolInfo === undefined) {\n        return v0;\n    }\n\n    return {\n        ...v0,\n        version: 1,\n        bakerPoolInfo: transPoolInfo(baker.poolInfo),\n    };\n}\n\nfunction trHigherLevelKeysUpdate(update: GRPC.HigherLevelKeys): SDK.KeysWithThreshold {\n    return {\n        keys: update.keys.map(trUpdatePublicKey),\n        threshold: unwrap(update.threshold?.value),\n    };\n}\n\nfunction translateChainParametersCommon(\n    params: GRPC.ChainParametersV1 | GRPC.ChainParametersV0\n): SDK.ChainParametersCommon {\n    return {\n        euroPerEnergy: unwrap(params.euroPerEnergy?.value),\n        microGTUPerEuro: unwrap(params.microCcdPerEuro?.value),\n        accountCreationLimit: unwrap(params.accountCreationLimit?.value),\n        foundationAccount: AccountAddress.fromProto(unwrap(params.foundationAccount)),\n        level1Keys: trHigherLevelKeysUpdate(unwrap(params.level1Keys)),\n        rootKeys: trHigherLevelKeysUpdate(unwrap(params.rootKeys)),\n    };\n}\n\nfunction translateCommissionRange(range: GRPC.InclusiveRangeAmountFraction | undefined): SDK.InclusiveRange<number> {\n    return {\n        min: trAmountFraction(range?.min),\n        max: trAmountFraction(range?.max),\n    };\n}\n\nfunction translateRewardParametersCommon(\n    params: GRPC.ChainParametersV1 | GRPC.ChainParametersV0\n): SDK.RewardParametersCommon {\n    const feeDistribution = params.transactionFeeDistribution;\n    return {\n        transactionFeeDistribution: {\n            baker: trAmountFraction(feeDistribution?.baker),\n            gasAccount: trAmountFraction(feeDistribution?.gasAccount),\n        },\n    };\n}\n\nfunction transPoolPendingChange(change: GRPC.PoolPendingChange | undefined): SDK.BakerPoolPendingChange {\n    switch (change?.change?.oneofKind) {\n        case 'reduce': {\n            return {\n                pendingChangeType: SDK.BakerPoolPendingChangeType.ReduceBakerCapital,\n                // TODO ensure units are aligned\n                effectiveTime: trTimestamp(change.change.reduce.effectiveTime),\n                bakerEquityCapital: CcdAmount.fromProto(unwrap(change.change.reduce.reducedEquityCapital)),\n            };\n        }\n        case 'remove': {\n            return {\n                pendingChangeType: SDK.BakerPoolPendingChangeType.RemovePool,\n                effectiveTime: trTimestamp(change.change.remove.effectiveTime),\n            };\n        }\n        default:\n            return {\n                pendingChangeType: SDK.BakerPoolPendingChangeType.NoChange,\n            };\n    }\n}\n\nfunction transPoolInfo(info: GRPC.BakerPoolInfo): SDK.BakerPoolInfo {\n    return {\n        openStatus: trOpenStatus(info.openStatus),\n        metadataUrl: info.url,\n        commissionRates: trCommissionRates(info.commissionRates),\n    };\n}\n\nfunction transPaydayStatus(status: GRPC.PoolCurrentPaydayInfo): SDK.CurrentPaydayBakerPoolStatus {\n    return {\n        blocksBaked: status.blocksBaked,\n        finalizationLive: status.finalizationLive,\n        transactionFeesEarned: CcdAmount.fromProto(unwrap(status.transactionFeesEarned)),\n        effectiveStake: CcdAmount.fromProto(unwrap(status.effectiveStake)),\n        lotteryPower: status.lotteryPower,\n        bakerEquityCapital: CcdAmount.fromProto(unwrap(status.bakerEquityCapital)),\n        delegatedCapital: CcdAmount.fromProto(unwrap(status.delegatedCapital)),\n        commissionRates: trCommissionRates(status.commissionRates),\n        isPrimedForSuspension: status.isPrimedForSuspension ?? false,\n        missedRounds: status.missedRounds ?? 0n,\n    };\n}\n\nfunction transCooldown(cooldown: GRPC.Cooldown): SDK.Cooldown {\n    return {\n        amount: CcdAmount.fromProto(unwrap(cooldown.amount)),\n        timestamp: Timestamp.fromProto(unwrap(cooldown.endTime)),\n        status: cooldown.status as number,\n    };\n}\n\nfunction trTokenAccountInfo(token: GRPC.AccountInfo_Token): PLT.TokenAccountInfo {\n    return {\n        id: PLT.TokenId.fromProto(unwrap(token.tokenId)),\n        state: {\n            balance: PLT.TokenAmount.fromProto(unwrap(token.tokenAccountState?.balance)),\n            moduleState: PLT.Cbor.fromProto(unwrap(token.tokenAccountState?.moduleState)),\n        },\n    };\n}\n\nexport function accountInfo(acc: GRPC.AccountInfo): SDK.AccountInfo {\n    const aggAmount = acc.encryptedBalance?.aggregatedAmount?.value;\n    const numAggregated = acc.encryptedBalance?.numAggregated;\n\n    const accountEncryptedAmount: SDK.AccountEncryptedAmount = {\n        selfAmount: unwrapValToHex(acc.encryptedBalance?.selfAmount),\n        startIndex: unwrap(acc.encryptedBalance?.startIndex),\n        incomingAmounts: unwrap(acc.encryptedBalance?.incomingAmounts).map(unwrapValToHex),\n        // Set the following values if they are not undefined\n        ...(numAggregated && { numAggregated: numAggregated }),\n        ...(aggAmount && { aggregatedAmount: unwrapToHex(aggAmount) }),\n    };\n    const accountReleaseSchedule = {\n        total: CcdAmount.fromProto(unwrap(acc.schedule?.total)),\n        schedule: unwrap(acc.schedule?.schedules).map(trRelease),\n    };\n    const accountCooldowns = acc.cooldowns.map(transCooldown);\n    const accountAmount = CcdAmount.fromProto(unwrap(acc.amount));\n\n    let accountAvailableBalance: CcdAmount.Type;\n\n    // This is undefined for node version <7, so we add this check to be backwards compatible.\n    if (acc.availableBalance !== undefined) {\n        accountAvailableBalance = CcdAmount.fromProto(unwrap(acc.availableBalance));\n    } else {\n        // NOTE: implementation borrowed from concordium-browser-wallet.\n        let staked = 0n;\n        switch (acc.stake?.stakingInfo.oneofKind) {\n            case 'baker': {\n                staked = unwrap(acc.stake.stakingInfo.baker.stakedAmount?.value);\n                break;\n            }\n            case 'delegator': {\n                staked = unwrap(acc.stake.stakingInfo.delegator.stakedAmount?.value);\n                break;\n            }\n        }\n\n        const scheduled = accountReleaseSchedule ? BigInt(accountReleaseSchedule.total.microCcdAmount) : 0n;\n\n        const max = (first: bigint, second: bigint) => {\n            return first > second ? first : second;\n        };\n\n        const atDisposal = accountAmount.microCcdAmount - max(scheduled, staked);\n        accountAvailableBalance = CcdAmount.fromMicroCcd(atDisposal);\n    }\n    const accInfoCommon: SDK.AccountInfoSimple = {\n        type: SDK.AccountInfoType.Simple,\n        accountAddress: AccountAddress.fromProto(unwrap(acc.address)),\n        accountNonce: SequenceNumber.fromProto(unwrap(acc.sequenceNumber)),\n        accountAmount,\n        accountIndex: unwrap(acc.index?.value),\n        accountThreshold: unwrap(acc.threshold?.value),\n        accountEncryptionKey: unwrapValToHex(acc.encryptionKey),\n        accountEncryptedAmount,\n        accountReleaseSchedule,\n        accountCredentials: mapRecord(acc.creds, trCred),\n        accountCooldowns,\n        accountAvailableBalance,\n        accountTokens: acc.tokens.map(trTokenAccountInfo),\n    };\n\n    if (acc.stake === undefined) {\n        return accInfoCommon;\n    }\n\n    switch (acc.stake.stakingInfo.oneofKind) {\n        case 'delegator':\n            return {\n                ...accInfoCommon,\n                type: SDK.AccountInfoType.Delegator,\n                accountDelegation: trDelegator(acc.stake.stakingInfo.delegator),\n            };\n        case 'baker':\n            return {\n                ...accInfoCommon,\n                type: SDK.AccountInfoType.Baker,\n                accountBaker: trBaker(acc.stake.stakingInfo.baker),\n            };\n        case undefined:\n            return { ...accInfoCommon, type: SDK.AccountInfoType.Unknown, accountBaker: null };\n    }\n}\n\nexport function nextAccountSequenceNumber(nasn: GRPC.NextAccountSequenceNumber): SDK.NextAccountNonce {\n    return {\n        nonce: SequenceNumber.fromProto(unwrap(nasn.sequenceNumber)),\n        allFinal: nasn.allFinal,\n    };\n}\n\nexport function cryptographicParameters(cp: GRPC.CryptographicParameters): SDK.CryptographicParameters {\n    return {\n        onChainCommitmentKey: unwrapToHex(cp.onChainCommitmentKey),\n        bulletproofGenerators: unwrapToHex(cp.bulletproofGenerators),\n        genesisString: cp.genesisString,\n    };\n}\n\nfunction trChainParametersV0(v0: GRPC.ChainParametersV0): SDK.ChainParametersV0 {\n    const common = translateChainParametersCommon(v0);\n    const commonRewardParameters = translateRewardParametersCommon(v0);\n    return {\n        ...common,\n        version: 0,\n        level2Keys: trAuthorizationsV0(unwrap(v0.level2Keys)),\n        electionDifficulty: trAmountFraction(v0.electionDifficulty?.value),\n        bakerCooldownEpochs: unwrap(v0.bakerCooldownEpochs?.value),\n        minimumThresholdForBaking: CcdAmount.fromProto(unwrap(v0.minimumThresholdForBaking)),\n        rewardParameters: {\n            version: 0,\n            ...commonRewardParameters,\n            gASRewards: {\n                version: 0,\n                baker: trAmountFraction(v0.gasRewards?.baker),\n                finalizationProof: trAmountFraction(v0.gasRewards?.finalizationProof),\n                accountCreation: trAmountFraction(v0.gasRewards?.accountCreation),\n                chainUpdate: trAmountFraction(v0.gasRewards?.chainUpdate),\n            },\n            mintDistribution: {\n                version: 0,\n                bakingReward: trAmountFraction(v0.mintDistribution?.bakingReward),\n                finalizationReward: trAmountFraction(v0.mintDistribution?.finalizationReward),\n                mintPerSlot: trMintRate(v0.mintDistribution?.mintPerSlot),\n            },\n        },\n    };\n}\n\nfunction trChainParametersV1(params: GRPC.ChainParametersV1): SDK.ChainParametersV1 {\n    const common = translateChainParametersCommon(params);\n    const commonRewardParameters = translateRewardParametersCommon(params);\n    return {\n        ...common,\n        version: 1,\n        level2Keys: trAuthorizationsV1(unwrap(params.level2Keys)),\n        electionDifficulty: trAmountFraction(params.electionDifficulty?.value),\n        rewardPeriodLength: unwrap(params.timeParameters?.rewardPeriodLength?.value?.value),\n        mintPerPayday: trMintRate(params.timeParameters?.mintPerPayday),\n        delegatorCooldown: unwrap(params.cooldownParameters?.delegatorCooldown?.value),\n        poolOwnerCooldown: unwrap(params.cooldownParameters?.poolOwnerCooldown?.value),\n        passiveFinalizationCommission: trAmountFraction(params.poolParameters?.passiveFinalizationCommission),\n        passiveBakingCommission: trAmountFraction(params.poolParameters?.passiveBakingCommission),\n        passiveTransactionCommission: trAmountFraction(params.poolParameters?.passiveTransactionCommission),\n        finalizationCommissionRange: translateCommissionRange(params.poolParameters?.commissionBounds?.finalization),\n        bakingCommissionRange: translateCommissionRange(params.poolParameters?.commissionBounds?.baking),\n        transactionCommissionRange: translateCommissionRange(params.poolParameters?.commissionBounds?.transaction),\n        minimumEquityCapital: CcdAmount.fromProto(unwrap(params.poolParameters?.minimumEquityCapital)),\n        capitalBound: trAmountFraction(params.poolParameters?.capitalBound?.value),\n        leverageBound: unwrap(params.poolParameters?.leverageBound?.value),\n        rewardParameters: {\n            ...commonRewardParameters,\n            version: 1,\n            gASRewards: {\n                version: 0,\n                baker: trAmountFraction(params.gasRewards?.baker),\n                finalizationProof: trAmountFraction(params.gasRewards?.finalizationProof),\n                accountCreation: trAmountFraction(params.gasRewards?.accountCreation),\n                chainUpdate: trAmountFraction(params.gasRewards?.chainUpdate),\n            },\n            mintDistribution: {\n                version: 1,\n                bakingReward: trAmountFraction(params.mintDistribution?.bakingReward),\n                finalizationReward: trAmountFraction(params.mintDistribution?.finalizationReward),\n            },\n        },\n    };\n}\n\nfunction trChainParametersV2(params: GRPC.ChainParametersV2 | GRPC.ChainParametersV3): SDK.ChainParametersV2 {\n    const common = translateChainParametersCommon(params);\n    const commonRewardParameters = translateRewardParametersCommon(params);\n\n    return {\n        ...common,\n        version: 2,\n        level2Keys: trAuthorizationsV1(unwrap(params.level2Keys)),\n        rewardPeriodLength: unwrap(params.timeParameters?.rewardPeriodLength?.value?.value),\n        mintPerPayday: trMintRate(params.timeParameters?.mintPerPayday),\n        delegatorCooldown: unwrap(params.cooldownParameters?.delegatorCooldown?.value),\n        poolOwnerCooldown: unwrap(params.cooldownParameters?.poolOwnerCooldown?.value),\n        passiveFinalizationCommission: trAmountFraction(params.poolParameters?.passiveFinalizationCommission),\n        passiveBakingCommission: trAmountFraction(params.poolParameters?.passiveBakingCommission),\n        passiveTransactionCommission: trAmountFraction(params.poolParameters?.passiveTransactionCommission),\n        finalizationCommissionRange: translateCommissionRange(params.poolParameters?.commissionBounds?.finalization),\n        bakingCommissionRange: translateCommissionRange(params.poolParameters?.commissionBounds?.baking),\n        transactionCommissionRange: translateCommissionRange(params.poolParameters?.commissionBounds?.transaction),\n        minimumEquityCapital: CcdAmount.fromProto(unwrap(params.poolParameters?.minimumEquityCapital)),\n        capitalBound: trAmountFraction(params.poolParameters?.capitalBound?.value),\n        leverageBound: unwrap(params.poolParameters?.leverageBound?.value),\n        rewardParameters: {\n            ...commonRewardParameters,\n            version: 2,\n            gASRewards: {\n                version: 1,\n                baker: trAmountFraction(params.gasRewards?.baker),\n                accountCreation: trAmountFraction(params.gasRewards?.accountCreation),\n                chainUpdate: trAmountFraction(params.gasRewards?.chainUpdate),\n            },\n            mintDistribution: {\n                version: 1,\n                bakingReward: trAmountFraction(params.mintDistribution?.bakingReward),\n                finalizationReward: trAmountFraction(params.mintDistribution?.finalizationReward),\n            },\n        },\n        timeoutBase: Duration.fromProto(unwrap(params.consensusParameters?.timeoutParameters?.timeoutBase)),\n        timeoutDecrease: unwrap(params.consensusParameters?.timeoutParameters?.timeoutDecrease),\n        timeoutIncrease: unwrap(params.consensusParameters?.timeoutParameters?.timeoutIncrease),\n        minBlockTime: Duration.fromProto(unwrap(params.consensusParameters?.minBlockTime)),\n        blockEnergyLimit: Energy.fromProto(unwrap(params.consensusParameters?.blockEnergyLimit)),\n        finalizerRelativeStakeThreshold: trAmountFraction(\n            params.finalizationCommitteeParameters?.finalizerRelativeStakeThreshold\n        ),\n        minimumFinalizers: unwrap(params.finalizationCommitteeParameters?.minimumFinalizers),\n        maximumFinalizers: unwrap(params.finalizationCommitteeParameters?.maximumFinalizers),\n    };\n}\n\nfunction trChainParametersV3(params: GRPC.ChainParametersV3): SDK.ChainParametersV3 {\n    const { version, ...common } = trChainParametersV2(params);\n    return {\n        ...common,\n        version: 3,\n        validatorScoreParameters: {\n            maxMissedRounds: unwrap(params.validatorScoreParameters?.maximumMissedRounds),\n        },\n    };\n}\n\nexport function blockChainParameters(params: GRPC.ChainParameters): SDK.ChainParameters {\n    switch (params.parameters.oneofKind) {\n        case 'v3': {\n            return trChainParametersV3(params.parameters.v3);\n        }\n        case 'v2': {\n            return trChainParametersV2(params.parameters.v2);\n        }\n        case 'v1': {\n            return trChainParametersV1(params.parameters.v1);\n        }\n        case 'v0': {\n            return trChainParametersV0(params.parameters.v0);\n        }\n        case undefined:\n            throw new Error('Missing chain parameters');\n    }\n}\n\nexport function bakerPoolInfo(info: GRPC.PoolInfoResponse): SDK.BakerPoolStatus {\n    return {\n        poolType: SDK.PoolStatusType.BakerPool,\n        bakerId: unwrap(info.baker?.value),\n        bakerAddress: AccountAddress.fromProto(unwrap(info.address)),\n        bakerEquityCapital: info.equityCapital !== undefined ? CcdAmount.fromProto(info.equityCapital) : undefined,\n        delegatedCapital: info.delegatedCapital !== undefined ? CcdAmount.fromProto(info.delegatedCapital) : undefined,\n        delegatedCapitalCap:\n            info.delegatedCapitalCap !== undefined ? CcdAmount.fromProto(info.delegatedCapitalCap) : undefined,\n        poolInfo: info.poolInfo !== undefined ? transPoolInfo(info.poolInfo) : undefined,\n        bakerStakePendingChange: transPoolPendingChange(info.equityPendingChange),\n        currentPaydayStatus:\n            info.currentPaydayInfo !== undefined ? transPaydayStatus(info.currentPaydayInfo) : undefined,\n        allPoolTotalCapital: CcdAmount.fromProto(unwrap(info.allPoolTotalCapital)),\n        isSuspended: info.isSuspended ?? false,\n    };\n}\n\nexport function passiveDelegationInfo(info: GRPC.PassiveDelegationInfo): SDK.PassiveDelegationStatus {\n    return {\n        poolType: SDK.PoolStatusType.PassiveDelegation,\n        delegatedCapital: CcdAmount.fromProto(unwrap(info.delegatedCapital)),\n        commissionRates: trCommissionRates(info.commissionRates),\n        currentPaydayTransactionFeesEarned: CcdAmount.fromProto(unwrap(info.currentPaydayTransactionFeesEarned)),\n        currentPaydayDelegatedCapital: CcdAmount.fromProto(unwrap(info.currentPaydayDelegatedCapital)),\n        allPoolTotalCapital: CcdAmount.fromProto(unwrap(info.allPoolTotalCapital)),\n    };\n}\n\nfunction translateProtocolVersion(pv: GRPC.ProtocolVersion): bigint {\n    return BigInt(pv + 1); // Protocol version enum indexes from 0, i.e. pv.PROTOCOL_VERSION_1 = 0.\n}\n\nexport function tokenomicsInfo(info: GRPC.TokenomicsInfo): Upward<SDK.RewardStatus> {\n    switch (info.tokenomics.oneofKind) {\n        case 'v0': {\n            const v0 = info.tokenomics.v0;\n            return {\n                version: 0,\n                protocolVersion: translateProtocolVersion(v0.protocolVersion),\n                totalAmount: CcdAmount.fromProto(unwrap(v0.totalAmount)),\n                totalEncryptedAmount: CcdAmount.fromProto(unwrap(v0.totalEncryptedAmount)),\n                bakingRewardAccount: CcdAmount.fromProto(unwrap(v0.bakingRewardAccount)),\n                finalizationRewardAccount: CcdAmount.fromProto(unwrap(v0.finalizationRewardAccount)),\n                gasAccount: CcdAmount.fromProto(unwrap(v0.gasAccount)),\n            };\n        }\n        case 'v1': {\n            const v1 = info.tokenomics.v1;\n            return {\n                version: 1,\n                protocolVersion: translateProtocolVersion(v1.protocolVersion),\n                totalAmount: CcdAmount.fromProto(unwrap(v1.totalAmount)),\n                totalEncryptedAmount: CcdAmount.fromProto(unwrap(v1.totalEncryptedAmount)),\n                bakingRewardAccount: CcdAmount.fromProto(unwrap(v1.bakingRewardAccount)),\n                finalizationRewardAccount: CcdAmount.fromProto(unwrap(v1.finalizationRewardAccount)),\n                gasAccount: CcdAmount.fromProto(unwrap(v1.gasAccount)),\n                foundationTransactionRewards: CcdAmount.fromProto(unwrap(v1.foundationTransactionRewards)),\n                nextPaydayTime: trTimestamp(v1.nextPaydayTime),\n                nextPaydayMintRate: unwrap(v1.nextPaydayMintRate),\n                totalStakedCapital: CcdAmount.fromProto(unwrap(v1.totalStakedCapital)),\n            };\n        }\n        case undefined:\n            return null;\n    }\n}\n\nexport function consensusInfo(ci: GRPC.ConsensusInfo): SDK.ConsensusStatus {\n    const common: SDK.ConsensusStatusCommon = {\n        bestBlock: BlockHash.fromProto(unwrap(ci.bestBlock)),\n        genesisBlock: BlockHash.fromProto(unwrap(ci.genesisBlock)),\n        currentEraGenesisBlock: BlockHash.fromProto(unwrap(ci.currentEraGenesisBlock)),\n        lastFinalizedBlock: BlockHash.fromProto(unwrap(ci.lastFinalizedBlock)),\n        epochDuration: Duration.fromProto(unwrap(ci.epochDuration)),\n        bestBlockHeight: unwrap(ci.bestBlockHeight?.value),\n        lastFinalizedBlockHeight: unwrap(ci.lastFinalizedBlockHeight?.value),\n        finalizationCount: BigInt(unwrap(ci.finalizationCount)),\n        blocksVerifiedCount: BigInt(unwrap(ci.blocksVerifiedCount)),\n        blocksReceivedCount: BigInt(unwrap(ci.blocksReceivedCount)),\n        blockArriveLatencyEMA: unwrap(ci.blockArriveLatencyEma),\n        blockArriveLatencyEMSD: unwrap(ci.blockArriveLatencyEmsd),\n        blockReceiveLatencyEMA: unwrap(ci.blockReceiveLatencyEma),\n        blockReceiveLatencyEMSD: unwrap(ci.blockReceiveLatencyEmsd),\n        transactionsPerBlockEMA: unwrap(ci.transactionsPerBlockEma),\n        transactionsPerBlockEMSD: unwrap(ci.transactionsPerBlockEmsd),\n        genesisTime: trTimestamp(ci.genesisTime),\n        currentEraGenesisTime: trTimestamp(ci.currentEraGenesisTime),\n        genesisIndex: unwrap(ci.genesisIndex?.value),\n        protocolVersion: translateProtocolVersion(unwrap(ci.protocolVersion)),\n        // Only include the following if they are not undefined\n        ...(ci.blockReceivePeriodEma && {\n            blockReceivePeriodEMA: ci.blockReceivePeriodEma,\n        }),\n        ...(ci.blockReceivePeriodEmsd && {\n            blockReceivePeriodEMSD: ci.blockReceivePeriodEmsd,\n        }),\n        ...(ci.blockArrivePeriodEma && {\n            blockArrivePeriodEMA: ci.blockArrivePeriodEma,\n        }),\n        ...(ci.blockArrivePeriodEmsd && {\n            blockArrivePeriodEMSD: ci.blockArrivePeriodEmsd,\n        }),\n        ...(ci.finalizationPeriodEma && {\n            blockArrivePeriodEMA: ci.blockArrivePeriodEma,\n        }),\n        ...(ci.finalizationPeriodEmsd && {\n            blockArrivePeriodEMSD: ci.blockArrivePeriodEmsd,\n        }),\n        ...(ci.blockLastReceivedTime && {\n            blockLastReceivedTime: trTimestamp(ci.blockLastReceivedTime),\n        }),\n        ...(ci.blockLastArrivedTime && {\n            blockLastArrivedTime: trTimestamp(ci.blockLastArrivedTime),\n        }),\n        ...(ci.lastFinalizedTime && {\n            lastFinalizedTime: trTimestamp(ci.lastFinalizedTime),\n        }),\n    };\n\n    if (ci.protocolVersion < GRPC.ProtocolVersion.PROTOCOL_VERSION_6) {\n        const ci0: SDK.ConsensusStatusV0 = {\n            ...common,\n            version: 0,\n            slotDuration: Duration.fromProto(unwrap(ci.slotDuration)),\n        };\n\n        return ci0;\n    }\n\n    const ci1: SDK.ConsensusStatusV1 = {\n        ...common,\n        version: 1,\n        concordiumBFTStatus: {\n            currentTimeoutDuration: Duration.fromProto(unwrap(ci.currentTimeoutDuration)),\n            currentRound: unwrap(ci.currentRound?.value),\n            currentEpoch: unwrap(ci.currentEpoch?.value),\n            triggerBlockTime: trTimestamp(ci.triggerBlockTime),\n        },\n    };\n\n    return ci1;\n}\n\nfunction trAddress(address: GRPC.Address): SDK.Address {\n    if (address.type.oneofKind === 'account') {\n        return {\n            type: 'AddressAccount',\n            address: AccountAddress.fromProto(unwrap(address.type.account)),\n        };\n    } else if (address.type.oneofKind === 'contract') {\n        return {\n            type: 'AddressContract',\n            address: ContractAddress.fromProto(address.type.contract),\n        };\n    } else {\n        throw Error('Invalid address encountered!');\n    }\n}\n\nfunction trContractTraceElement(contractTraceElement: GRPC.ContractTraceElement): Upward<SDK.ContractTraceEvent> {\n    const element = contractTraceElement.element;\n    switch (element.oneofKind) {\n        case 'updated':\n            return {\n                tag: SDK.TransactionEventTag.Updated,\n                contractVersion: element.updated.contractVersion,\n                address: ContractAddress.fromProto(unwrap(element.updated.address)),\n                instigator: trAddress(unwrap(element.updated.instigator)),\n                amount: CcdAmount.fromProto(unwrap(element.updated.amount)),\n                message: Parameter.fromProto(unwrap(element.updated.parameter)),\n                receiveName: ReceiveName.fromProto(unwrap(element.updated.receiveName)),\n                events: element.updated.events.map(ContractEvent.fromProto),\n            };\n        case 'transferred':\n            return {\n                tag: SDK.TransactionEventTag.Transferred,\n                from: ContractAddress.fromProto(unwrap(element.transferred.sender)),\n                amount: CcdAmount.fromProto(unwrap(element.transferred.amount)),\n                to: AccountAddress.fromProto(unwrap(element.transferred.receiver)),\n            };\n        case 'interrupted':\n            return {\n                tag: SDK.TransactionEventTag.Interrupted,\n                address: ContractAddress.fromProto(unwrap(element.interrupted.address)),\n                events: element.interrupted.events.map(ContractEvent.fromProto),\n            };\n        case 'resumed':\n            return {\n                tag: SDK.TransactionEventTag.Resumed,\n                address: ContractAddress.fromProto(unwrap(element.resumed.address)),\n                success: unwrap(element.resumed.success),\n            };\n        case 'upgraded':\n            return {\n                tag: SDK.TransactionEventTag.Upgraded,\n                address: ContractAddress.fromProto(unwrap(element.upgraded.address)),\n                from: unwrapValToHex(element.upgraded.from),\n                to: unwrapValToHex(element.upgraded.to),\n            };\n        case undefined:\n            return null;\n    }\n}\n\nfunction trBakerEvent(bakerEvent: GRPC.BakerEvent, account: AccountAddress.Type): Upward<SDK.BakerEvent> {\n    const event = bakerEvent.event;\n    switch (event.oneofKind) {\n        case 'bakerAdded': {\n            const keysEvent = event.bakerAdded.keysEvent;\n            return {\n                tag: SDK.TransactionEventTag.BakerAdded,\n                bakerId: unwrap(keysEvent?.bakerId?.value),\n                account: AccountAddress.fromProto(unwrap(keysEvent?.account)),\n                signKey: unwrapValToHex(keysEvent?.signKey),\n                electionKey: unwrapValToHex(keysEvent?.electionKey),\n                aggregationKey: unwrapValToHex(keysEvent?.aggregationKey),\n                stake: CcdAmount.fromProto(unwrap(event.bakerAdded.stake)),\n                restakeEarnings: unwrap(event.bakerAdded.restakeEarnings),\n            };\n        }\n        case 'bakerRemoved':\n            return {\n                tag: SDK.TransactionEventTag.BakerRemoved,\n                bakerId: unwrap(event.bakerRemoved.value),\n                account,\n            };\n        case 'bakerStakeIncreased':\n            return {\n                tag: SDK.TransactionEventTag.BakerStakeIncreased,\n                bakerId: unwrap(event.bakerStakeIncreased.bakerId?.value),\n                newStake: CcdAmount.fromProto(unwrap(event.bakerStakeIncreased.newStake)),\n                account,\n            };\n        case 'bakerStakeDecreased':\n            return {\n                tag: SDK.TransactionEventTag.BakerStakeDecreased,\n                bakerId: unwrap(event.bakerStakeDecreased.bakerId?.value),\n                newStake: CcdAmount.fromProto(unwrap(event.bakerStakeDecreased.newStake)),\n                account,\n            };\n        case 'bakerRestakeEarningsUpdated': {\n            const update = event.bakerRestakeEarningsUpdated;\n            return {\n                tag: SDK.TransactionEventTag.BakerSetRestakeEarnings,\n                bakerId: unwrap(update.bakerId?.value),\n                restakeEarnings: unwrap(update.restakeEarnings),\n                account,\n            };\n        }\n        case 'bakerKeysUpdated':\n            return {\n                tag: SDK.TransactionEventTag.BakerKeysUpdated,\n                bakerId: unwrap(event.bakerKeysUpdated.bakerId?.value),\n                account: AccountAddress.fromProto(unwrap(event.bakerKeysUpdated.account)),\n                signKey: unwrapValToHex(event.bakerKeysUpdated.signKey),\n                electionKey: unwrapValToHex(event.bakerKeysUpdated.electionKey),\n                aggregationKey: unwrapValToHex(event.bakerKeysUpdated.aggregationKey),\n            };\n        case 'bakerSetOpenStatus': {\n            const setOpenStatus = event.bakerSetOpenStatus;\n            return {\n                tag: SDK.TransactionEventTag.BakerSetOpenStatus,\n                bakerId: unwrap(setOpenStatus.bakerId?.value),\n                openStatus: trOpenStatus(setOpenStatus.openStatus),\n                account,\n            };\n        }\n        case 'bakerSetMetadataUrl': {\n            const setURL = event.bakerSetMetadataUrl;\n            return {\n                tag: SDK.TransactionEventTag.BakerSetMetadataURL,\n                bakerId: unwrap(setURL.bakerId?.value),\n                metadataURL: setURL.url,\n                account,\n            };\n        }\n        case 'bakerSetTransactionFeeCommission': {\n            const transferFeeComm = event.bakerSetTransactionFeeCommission;\n            const amount = transferFeeComm.transactionFeeCommission;\n            return {\n                tag: SDK.TransactionEventTag.BakerSetTransactionFeeCommission,\n                bakerId: unwrap(transferFeeComm.bakerId?.value),\n                transactionFeeCommission: trAmountFraction(amount),\n                account,\n            };\n        }\n        case 'bakerSetBakingRewardCommission': {\n            const rewardComm = event.bakerSetBakingRewardCommission;\n            const amount = rewardComm.bakingRewardCommission;\n            return {\n                tag: SDK.TransactionEventTag.BakerSetBakingRewardCommission,\n                bakerId: unwrap(rewardComm.bakerId?.value),\n                bakingRewardCommission: trAmountFraction(amount),\n                account,\n            };\n        }\n        case 'bakerSetFinalizationRewardCommission': {\n            const rewardComm = event.bakerSetFinalizationRewardCommission;\n            const amount = rewardComm.finalizationRewardCommission;\n            return {\n                tag: SDK.TransactionEventTag.BakerSetFinalizationRewardCommission,\n                bakerId: unwrap(rewardComm.bakerId?.value),\n                finalizationRewardCommission: trAmountFraction(amount),\n                account,\n            };\n        }\n        case 'delegationRemoved': {\n            return {\n                tag: SDK.TransactionEventTag.BakerDelegationRemoved,\n                delegatorId: unwrap(event.delegationRemoved.delegatorId?.id?.value),\n            };\n        }\n        case 'bakerSuspended': {\n            return {\n                tag: SDK.TransactionEventTag.BakerSuspended,\n                bakerId: unwrap(event.bakerSuspended.bakerId?.value),\n            };\n        }\n        case 'bakerResumed': {\n            return {\n                tag: SDK.TransactionEventTag.BakerResumed,\n                bakerId: unwrap(event.bakerResumed.bakerId?.value),\n            };\n        }\n        case undefined:\n            return null;\n    }\n}\n\nfunction trDelegTarget(delegationTarget: GRPC.DelegationTarget | undefined): SDK.EventDelegationTarget {\n    const target = delegationTarget?.target;\n    if (target?.oneofKind === 'baker') {\n        return {\n            delegateType: SDK.DelegationTargetType.Baker,\n            bakerId: Number(unwrap(target.baker.value)),\n        };\n    } else if (target?.oneofKind === 'passive') {\n        return {\n            delegateType: SDK.DelegationTargetType.PassiveDelegation,\n        };\n    } else {\n        throw Error('Failed translating DelegationTarget, encountered undefined');\n    }\n}\n\nfunction trDelegationEvent(\n    delegationEvent: GRPC.DelegationEvent,\n    account: AccountAddress.Type\n): Upward<SDK.DelegationEvent> {\n    const event = delegationEvent.event;\n    switch (event.oneofKind) {\n        case 'delegationStakeIncreased': {\n            const stakeIncr = event.delegationStakeIncreased;\n            return {\n                tag: SDK.TransactionEventTag.DelegationStakeIncreased,\n                delegatorId: unwrap(stakeIncr.delegatorId?.id?.value),\n                newStake: CcdAmount.fromProto(unwrap(stakeIncr.newStake)),\n                account,\n            };\n        }\n        case 'delegationStakeDecreased': {\n            const stakeDecr = event.delegationStakeDecreased;\n            return {\n                tag: SDK.TransactionEventTag.DelegationStakeDecreased,\n                delegatorId: unwrap(stakeDecr.delegatorId?.id?.value),\n                newStake: CcdAmount.fromProto(unwrap(stakeDecr.newStake)),\n                account,\n            };\n        }\n        case 'delegationSetRestakeEarnings': {\n            const restake = event.delegationSetRestakeEarnings;\n            return {\n                tag: SDK.TransactionEventTag.DelegationSetRestakeEarnings,\n                delegatorId: unwrap(restake.delegatorId?.id?.value),\n                restakeEarnings: unwrap(restake.restakeEarnings),\n                account,\n            };\n        }\n        case 'delegationSetDelegationTarget': {\n            const target = event.delegationSetDelegationTarget;\n            return {\n                tag: SDK.TransactionEventTag.DelegationSetDelegationTarget,\n                delegatorId: unwrap(target.delegatorId?.id?.value),\n                delegationTarget: trDelegTarget(target.delegationTarget),\n                account,\n            };\n        }\n        case 'delegationAdded':\n            return {\n                tag: SDK.TransactionEventTag.DelegationAdded,\n                delegatorId: unwrap(event.delegationAdded.id?.value),\n                account,\n            };\n        case 'delegationRemoved':\n            return {\n                tag: SDK.TransactionEventTag.DelegationRemoved,\n                delegatorId: unwrap(event.delegationRemoved.id?.value),\n                account,\n            };\n        case 'bakerRemoved':\n            return {\n                tag: SDK.TransactionEventTag.DelegationBakerRemoved,\n                bakerId: unwrap(event.bakerRemoved.bakerId?.value),\n            };\n        case undefined:\n            return null;\n    }\n}\n\nfunction trRejectReason(rejectReason: GRPC.RejectReason | undefined): Upward<SDK.RejectReason> {\n    function simpleReason(tag: SDK.SimpleRejectReasonTag): SDK.RejectReason {\n        return {\n            tag: SDK.RejectReasonTag[tag],\n        };\n    }\n\n    const reason = unwrap(rejectReason?.reason);\n    const Tag = SDK.RejectReasonTag;\n    switch (reason.oneofKind) {\n        case 'moduleNotWf':\n            return simpleReason(Tag.ModuleNotWF);\n        case 'runtimeFailure':\n            return simpleReason(Tag.RuntimeFailure);\n        case 'serializationFailure':\n            return simpleReason(Tag.SerializationFailure);\n        case 'outOfEnergy':\n            return simpleReason(Tag.OutOfEnergy);\n        case 'invalidProof':\n            return simpleReason(Tag.InvalidProof);\n        case 'insufficientBalanceForBakerStake':\n            return simpleReason(Tag.InsufficientBalanceForBakerStake);\n        case 'stakeUnderMinimumThresholdForBaking':\n            return simpleReason(Tag.StakeUnderMinimumThresholdForBaking);\n        case 'bakerInCooldown':\n            return simpleReason(Tag.BakerInCooldown);\n        case 'nonExistentCredentialId':\n            return simpleReason(Tag.NonExistentCredentialID);\n        case 'keyIndexAlreadyInUse':\n            return simpleReason(Tag.KeyIndexAlreadyInUse);\n        case 'invalidAccountThreshold':\n            return simpleReason(Tag.InvalidAccountThreshold);\n        case 'invalidCredentialKeySignThreshold':\n            return simpleReason(Tag.InvalidCredentialKeySignThreshold);\n        case 'invalidEncryptedAmountTransferProof':\n            return simpleReason(Tag.InvalidEncryptedAmountTransferProof);\n        case 'invalidTransferToPublicProof':\n            return simpleReason(Tag.InvalidTransferToPublicProof);\n        case 'invalidIndexOnEncryptedTransfer':\n            return simpleReason(Tag.InvalidIndexOnEncryptedTransfer);\n        case 'zeroScheduledAmount':\n            return simpleReason(Tag.ZeroScheduledAmount);\n        case 'nonIncreasingSchedule':\n            return simpleReason(Tag.NonIncreasingSchedule);\n        case 'firstScheduledReleaseExpired':\n            return simpleReason(Tag.FirstScheduledReleaseExpired);\n        case 'invalidCredentials':\n            return simpleReason(Tag.InvalidCredentials);\n        case 'removeFirstCredential':\n            return simpleReason(Tag.RemoveFirstCredential);\n        case 'credentialHolderDidNotSign':\n            return simpleReason(Tag.CredentialHolderDidNotSign);\n        case 'notAllowedMultipleCredentials':\n            return simpleReason(Tag.NotAllowedMultipleCredentials);\n        case 'notAllowedToReceiveEncrypted':\n            return simpleReason(Tag.NotAllowedToReceiveEncrypted);\n        case 'notAllowedToHandleEncrypted':\n            return simpleReason(Tag.NotAllowedToHandleEncrypted);\n        case 'missingBakerAddParameters':\n            return simpleReason(Tag.MissingBakerAddParameters);\n        case 'finalizationRewardCommissionNotInRange':\n            return simpleReason(Tag.FinalizationRewardCommissionNotInRange);\n        case 'bakingRewardCommissionNotInRange':\n            return simpleReason(Tag.BakingRewardCommissionNotInRange);\n        case 'transactionFeeCommissionNotInRange':\n            return simpleReason(Tag.TransactionFeeCommissionNotInRange);\n        case 'alreadyADelegator':\n            return simpleReason(Tag.AlreadyADelegator);\n        case 'insufficientBalanceForDelegationStake':\n            return simpleReason(Tag.InsufficientBalanceForDelegationStake);\n        case 'missingDelegationAddParameters':\n            return simpleReason(Tag.MissingDelegationAddParameters);\n        case 'insufficientDelegationStake':\n            return simpleReason(Tag.InsufficientDelegationStake);\n        case 'delegatorInCooldown':\n            return simpleReason(Tag.DelegatorInCooldown);\n        case 'stakeOverMaximumThresholdForPool':\n            return simpleReason(Tag.StakeOverMaximumThresholdForPool);\n        case 'poolWouldBecomeOverDelegated':\n            return simpleReason(Tag.PoolWouldBecomeOverDelegated);\n        case 'poolClosed':\n            return simpleReason(Tag.PoolClosed);\n        case 'moduleHashAlreadyExists':\n            return {\n                tag: Tag.ModuleHashAlreadyExists,\n                contents: unwrapValToHex(reason.moduleHashAlreadyExists),\n            };\n        case 'invalidAccountReference':\n            return {\n                tag: Tag.InvalidAccountReference,\n                contents: unwrapToBase58(reason.invalidAccountReference),\n            };\n        case 'invalidInitMethod':\n            return {\n                tag: Tag.InvalidInitMethod,\n                contents: {\n                    moduleRef: ModuleReference.fromProto(unwrap(reason.invalidInitMethod.moduleRef)),\n                    initName: InitName.fromProto(unwrap(reason.invalidInitMethod.initName)),\n                },\n            };\n        case 'invalidReceiveMethod':\n            return {\n                tag: Tag.InvalidReceiveMethod,\n                contents: {\n                    moduleRef: ModuleReference.fromProto(unwrap(reason.invalidReceiveMethod.moduleRef)),\n                    receiveName: ReceiveName.fromProto(unwrap(reason.invalidReceiveMethod.receiveName)),\n                },\n            };\n        case 'invalidModuleReference':\n            return {\n                tag: Tag.InvalidModuleReference,\n                contents: unwrapValToHex(reason.invalidModuleReference),\n            };\n        case 'invalidContractAddress':\n            return {\n                tag: Tag.InvalidContractAddress,\n                contents: ContractAddress.fromProto(reason.invalidContractAddress),\n            };\n        case 'amountTooLarge':\n            return {\n                tag: Tag.AmountTooLarge,\n                contents: {\n                    address: trAddress(unwrap(reason.amountTooLarge.address)),\n                    amount: CcdAmount.fromProto(unwrap(reason.amountTooLarge.amount)),\n                },\n            };\n        case 'rejectedInit':\n            return {\n                tag: Tag.RejectedInit,\n                rejectReason: reason.rejectedInit.rejectReason,\n            };\n        case 'rejectedReceive':\n            return {\n                tag: Tag.RejectedReceive,\n                contractAddress: ContractAddress.fromProto(unwrap(reason.rejectedReceive.contractAddress)),\n                receiveName: ReceiveName.fromProto(unwrap(reason.rejectedReceive.receiveName)),\n                rejectReason: unwrap(reason.rejectedReceive.rejectReason),\n                parameter: Parameter.fromProto(unwrap(reason.rejectedReceive.parameter)),\n            };\n        case 'alreadyABaker':\n            return {\n                tag: Tag.AlreadyABaker,\n                contents: unwrap(reason.alreadyABaker.value),\n            };\n        case 'notABaker':\n            return {\n                tag: Tag.NotABaker,\n                contents: unwrapToBase58(reason.notABaker),\n            };\n        case 'duplicateAggregationKey':\n            return {\n                tag: Tag.DuplicateAggregationKey,\n                contents: unwrapValToHex(reason.duplicateAggregationKey),\n            };\n        case 'encryptedAmountSelfTransfer':\n            return {\n                tag: Tag.EncryptedAmountSelfTransfer,\n                contents: unwrapToBase58(reason.encryptedAmountSelfTransfer),\n            };\n        case 'scheduledSelfTransfer':\n            return {\n                tag: Tag.ScheduledSelfTransfer,\n                contents: unwrapToBase58(reason.scheduledSelfTransfer),\n            };\n        case 'duplicateCredIds':\n            return {\n                tag: Tag.DuplicateCredIDs,\n                contents: reason.duplicateCredIds.ids.map(unwrapValToHex),\n            };\n        case 'nonExistentCredIds':\n            return {\n                tag: Tag.NonExistentCredIDs,\n                contents: reason.nonExistentCredIds.ids.map(unwrapValToHex),\n            };\n        case 'notADelegator':\n            return {\n                tag: Tag.NotADelegator,\n                contents: unwrapToBase58(reason.notADelegator),\n            };\n        case 'delegationTargetNotABaker':\n            return {\n                tag: Tag.DelegationTargetNotABaker,\n                contents: unwrap(reason.delegationTargetNotABaker.value),\n            };\n        case 'nonExistentTokenId':\n            return {\n                tag: Tag.NonExistentTokenId,\n                contents: PLT.TokenId.fromProto(reason.nonExistentTokenId),\n            };\n        case 'tokenUpdateTransactionFailed':\n            return {\n                tag: Tag.TokenUpdateTransactionFailed,\n                contents: {\n                    type: reason.tokenUpdateTransactionFailed.type,\n                    tokenId: PLT.TokenId.fromProto(unwrap(reason.tokenUpdateTransactionFailed.tokenId)),\n                    details: PLT.Cbor.fromProto(unwrap(reason.tokenUpdateTransactionFailed.details)),\n                },\n            };\n        case undefined:\n            return null;\n    }\n}\n\nfunction trMintRate(mintRate: GRPC.MintRate | undefined): number {\n    return unwrap(mintRate?.mantissa) * 10 ** (-1 * unwrap(mintRate?.exponent));\n}\n\nfunction trProtocolUpdate(update: GRPC.ProtocolUpdate): SDK.ProtocolUpdate {\n    return {\n        updateType: SDK.UpdateType.Protocol,\n        update: {\n            message: update.message,\n            specificationHash: unwrapValToHex(update.specificationHash),\n            specificationUrl: update.specificationUrl,\n            specificationAuxiliaryData: unwrapToHex(update.specificationAuxiliaryData),\n        },\n    };\n}\nfunction trElectionDifficultyUpdate(elecDiff: GRPC.ElectionDifficulty): SDK.ElectionDifficultyUpdate {\n    return {\n        updateType: SDK.UpdateType.ElectionDifficulty,\n        update: {\n            electionDifficulty: trAmountFraction(elecDiff.value),\n        },\n    };\n}\nfunction trEuroPerEnergyUpdate(exchangeRate: GRPC.ExchangeRate): SDK.EuroPerEnergyUpdate {\n    return {\n        updateType: SDK.UpdateType.EuroPerEnergy,\n        update: unwrap(exchangeRate.value),\n    };\n}\nfunction trMicroCcdPerEuroUpdate(exchangeRate: GRPC.ExchangeRate): SDK.MicroGtuPerEuroUpdate {\n    return {\n        updateType: SDK.UpdateType.MicroGtuPerEuro,\n        update: unwrap(exchangeRate.value),\n    };\n}\nfunction trFoundationAccountUpdate(account: GRPC_Kernel.AccountAddress): SDK.FoundationAccountUpdate {\n    return {\n        updateType: SDK.UpdateType.FoundationAccount,\n        update: {\n            address: unwrapToBase58(account),\n        },\n    };\n}\n\nfunction trTransactionFeeDistributionUpdate(\n    transFeeDist: GRPC.TransactionFeeDistribution\n): SDK.TransactionFeeDistributionUpdate {\n    return {\n        updateType: SDK.UpdateType.TransactionFeeDistribution,\n        update: {\n            baker: trAmountFraction(transFeeDist.baker),\n            gasAccount: trAmountFraction(transFeeDist.gasAccount),\n        },\n    };\n}\n\nfunction trGasRewardsUpdate(gasRewards: GRPC.GasRewards): SDK.GasRewardsV0Update {\n    return {\n        updateType: SDK.UpdateType.GasRewards,\n        update: {\n            version: 0,\n            baker: trAmountFraction(gasRewards.baker),\n            accountCreation: trAmountFraction(gasRewards.accountCreation),\n            chainUpdate: trAmountFraction(gasRewards.accountCreation),\n            finalizationProof: trAmountFraction(gasRewards.finalizationProof),\n        },\n    };\n}\n\nfunction trGasRewardsCpv2Update(gasRewards: GRPC.GasRewardsCpv2): SDK.GasRewardsV1Update {\n    return {\n        updateType: SDK.UpdateType.GasRewardsCpv2,\n        update: {\n            version: 1,\n            baker: trAmountFraction(gasRewards.baker),\n            accountCreation: trAmountFraction(gasRewards.accountCreation),\n            chainUpdate: trAmountFraction(gasRewards.accountCreation),\n        },\n    };\n}\n\nfunction trBakerStakeThresholdUpdate(bakerStakeThreshold: GRPC.BakerStakeThreshold): SDK.BakerStakeThresholdUpdate {\n    return {\n        updateType: SDK.UpdateType.BakerStakeThreshold,\n        update: {\n            threshold: unwrap(bakerStakeThreshold.bakerStakeThreshold?.value),\n        },\n    };\n}\n\nfunction trPoolParametersCpv1Update(poolParams: GRPC.PoolParametersCpv1): SDK.PoolParametersUpdate {\n    return {\n        updateType: SDK.UpdateType.PoolParameters,\n        update: {\n            passiveCommissions: {\n                transactionCommission: trAmountFraction(poolParams.passiveTransactionCommission),\n                bakingCommission: trAmountFraction(poolParams.passiveBakingCommission),\n                finalizationCommission: trAmountFraction(poolParams.passiveFinalizationCommission),\n            },\n            commissionBounds: {\n                transactionFeeCommission: trCommissionRange(poolParams.commissionBounds?.transaction),\n                bakingRewardCommission: trCommissionRange(poolParams.commissionBounds?.baking),\n                finalizationRewardCommission: trCommissionRange(poolParams.commissionBounds?.finalization),\n            },\n            minimumEquityCapital: CcdAmount.fromProto(unwrap(poolParams.minimumEquityCapital)),\n            capitalBound: trAmountFraction(poolParams.capitalBound?.value),\n            leverageBound: unwrap(poolParams.leverageBound?.value),\n        },\n    };\n}\n\nfunction trAddAnonymityRevokerUpdate(ar: GRPC.ArInfo): SDK.AddAnonymityRevokerUpdate {\n    return {\n        updateType: SDK.UpdateType.AddAnonymityRevoker,\n        update: arInfo(ar),\n    };\n}\nfunction trAddIdentityProviderUpdate(ip: GRPC.IpInfo): SDK.AddIdentityProviderUpdate {\n    return {\n        updateType: SDK.UpdateType.AddIdentityProvider,\n        update: ipInfo(ip),\n    };\n}\n\nfunction trCooldownParametersCpv1Update(cooldownParams: GRPC.CooldownParametersCpv1): SDK.CooldownParametersUpdate {\n    return {\n        updateType: SDK.UpdateType.CooldownParameters,\n        update: {\n            poolOwnerCooldown: unwrap(cooldownParams.poolOwnerCooldown?.value),\n            delegatorCooldown: unwrap(cooldownParams.delegatorCooldown?.value),\n        },\n    };\n}\n\nfunction trTimeParametersCpv1Update(timeParams: GRPC.TimeParametersCpv1): SDK.TimeParametersUpdate {\n    return {\n        updateType: SDK.UpdateType.TimeParameters,\n        update: {\n            rewardPeriodLength: unwrap(timeParams.rewardPeriodLength?.value?.value),\n            mintRatePerPayday: unwrap(timeParams.mintPerPayday),\n        },\n    };\n}\n\nfunction trTimeoutParameteresUpdate(timeout: GRPC.TimeoutParameters): SDK.TimeoutParametersUpdate {\n    return {\n        updateType: SDK.UpdateType.TimeoutParameters,\n        update: {\n            timeoutBase: Duration.fromProto(unwrap(timeout.timeoutBase)),\n            timeoutDecrease: unwrap(timeout.timeoutDecrease),\n            timeoutIncrease: unwrap(timeout.timeoutIncrease),\n        },\n    };\n}\n\nfunction trMinBlockTimeUpdate(duration: GRPC.Duration): SDK.MinBlockTimeUpdate {\n    return {\n        updateType: SDK.UpdateType.MinBlockTime,\n        update: Duration.fromProto(duration),\n    };\n}\n\nfunction trBlockEnergyLimitUpdate(energy: GRPC.Energy): SDK.BlockEnergyLimitUpdate {\n    return {\n        updateType: SDK.UpdateType.BlockEnergyLimit,\n        update: Energy.fromProto(energy),\n    };\n}\n\nfunction trFinalizationCommitteeParametersUpdate(\n    params: GRPC.FinalizationCommitteeParameters\n): SDK.FinalizationCommitteeParametersUpdate {\n    return {\n        updateType: SDK.UpdateType.FinalizationCommitteeParameters,\n        update: {\n            finalizerRelativeStakeThreshold: trAmountFraction(params.finalizerRelativeStakeThreshold),\n            minimumFinalizers: params.minimumFinalizers,\n            maximumFinalizers: params.maximumFinalizers,\n        },\n    };\n}\n\nfunction trMintDistributionCpv0Update(mintDist: GRPC.MintDistributionCpv0): SDK.MintDistributionUpdate {\n    return {\n        updateType: SDK.UpdateType.MintDistribution,\n        update: {\n            version: 0,\n            bakingReward: trAmountFraction(mintDist.bakingReward),\n            finalizationReward: trAmountFraction(mintDist.finalizationReward),\n            mintPerSlot: trMintRate(mintDist.mintPerSlot),\n        },\n    };\n}\n\nfunction trMintDistributionCpv1Update(mintDist: GRPC.MintDistributionCpv1): SDK.MintDistributionUpdate {\n    return {\n        updateType: SDK.UpdateType.MintDistribution,\n        update: {\n            version: 1,\n            bakingReward: trAmountFraction(mintDist.bakingReward),\n            finalizationReward: trAmountFraction(mintDist.finalizationReward),\n        },\n    };\n}\n\nexport function pendingUpdate(pendingUpdate: GRPC.PendingUpdate): SDK.PendingUpdate {\n    return {\n        effectiveTime: Timestamp.fromProto(unwrap(pendingUpdate.effectiveTime)),\n        effect: trPendingUpdateEffect(pendingUpdate),\n    };\n}\n\nexport function trPendingUpdateEffect(pendingUpdate: GRPC.PendingUpdate): Upward<SDK.PendingUpdateEffect> {\n    const effect = pendingUpdate.effect;\n    switch (effect.oneofKind) {\n        case 'protocol':\n            return trProtocolUpdate(effect.protocol);\n        case 'electionDifficulty':\n            return trElectionDifficultyUpdate(effect.electionDifficulty);\n        case 'euroPerEnergy':\n            return trEuroPerEnergyUpdate(effect.euroPerEnergy);\n        case 'microCcdPerEuro':\n            return trMicroCcdPerEuroUpdate(effect.microCcdPerEuro);\n        case 'foundationAccount':\n            return trFoundationAccountUpdate(effect.foundationAccount);\n        case 'transactionFeeDistribution':\n            return trTransactionFeeDistributionUpdate(effect.transactionFeeDistribution);\n        case 'gasRewards':\n            return trGasRewardsUpdate(effect.gasRewards);\n        case 'poolParametersCpv0':\n            return trBakerStakeThresholdUpdate(effect.poolParametersCpv0);\n        case 'poolParametersCpv1':\n            return trPoolParametersCpv1Update(effect.poolParametersCpv1);\n        case 'addAnonymityRevoker':\n            return trAddAnonymityRevokerUpdate(effect.addAnonymityRevoker);\n        case 'addIdentityProvider':\n            return trAddIdentityProviderUpdate(effect.addIdentityProvider);\n        case 'cooldownParameters':\n            return trCooldownParametersCpv1Update(effect.cooldownParameters);\n        case 'timeParameters':\n            return trTimeParametersCpv1Update(effect.timeParameters);\n        case 'mintDistributionCpv0':\n            return trMintDistributionCpv0Update(effect.mintDistributionCpv0);\n        case 'mintDistributionCpv1':\n            return trMintDistributionCpv1Update(effect.mintDistributionCpv1);\n        case 'gasRewardsCpv2':\n            return trGasRewardsCpv2Update(effect.gasRewardsCpv2);\n        case 'timeoutParameters':\n            return trTimeoutParameteresUpdate(effect.timeoutParameters);\n        case 'minBlockTime':\n            return trMinBlockTimeUpdate(effect.minBlockTime);\n        case 'blockEnergyLimit':\n            return trBlockEnergyLimitUpdate(effect.blockEnergyLimit);\n        case 'finalizationCommitteeParameters':\n            return trFinalizationCommitteeParametersUpdate(effect.finalizationCommitteeParameters);\n        case 'rootKeys':\n            return {\n                updateType: SDK.UpdateType.HigherLevelKeyUpdate,\n                update: {\n                    typeOfUpdate: SDK.HigherLevelKeyUpdateType.RootKeysUpdate,\n                    updateKeys: effect.rootKeys.keys.map(trUpdatePublicKey),\n                    threshold: unwrap(effect.rootKeys.threshold?.value),\n                },\n            };\n        case 'level1Keys':\n            return {\n                updateType: SDK.UpdateType.HigherLevelKeyUpdate,\n                update: {\n                    typeOfUpdate: SDK.HigherLevelKeyUpdateType.Level1KeysUpdate,\n                    updateKeys: effect.level1Keys.keys.map(trUpdatePublicKey),\n                    threshold: unwrap(effect.level1Keys.threshold?.value),\n                },\n            };\n        case 'level2KeysCpv0':\n            return {\n                updateType: SDK.UpdateType.AuthorizationKeysUpdate,\n                update: {\n                    typeOfUpdate: SDK.AuthorizationKeysUpdateType.Level2KeysUpdate,\n                    updatePayload: trAuthorizationsV0(effect.level2KeysCpv0),\n                },\n            };\n        case 'level2KeysCpv1':\n            return {\n                updateType: SDK.UpdateType.AuthorizationKeysUpdate,\n                update: {\n                    typeOfUpdate: SDK.AuthorizationKeysUpdateType.Level2KeysUpdateV1,\n                    updatePayload: trAuthorizationsV1(effect.level2KeysCpv1),\n                },\n            };\n        case 'validatorScoreParameters':\n            return {\n                updateType: SDK.UpdateType.ValidatorScoreParameters,\n                update: {\n                    maxMissedRounds: effect.validatorScoreParameters.maximumMissedRounds,\n                },\n            };\n        case undefined:\n            return null;\n    }\n}\n\nfunction trUpdatePayload(updatePayload: GRPC.UpdatePayload | undefined): Upward<SDK.UpdateInstructionPayload> {\n    if (updatePayload === undefined) {\n        throw new Error('Unexpected missing update payload');\n    }\n\n    const payload = updatePayload.payload;\n    switch (payload.oneofKind) {\n        case 'protocolUpdate':\n            return trProtocolUpdate(payload.protocolUpdate);\n        case 'electionDifficultyUpdate':\n            return trElectionDifficultyUpdate(payload.electionDifficultyUpdate);\n        case 'euroPerEnergyUpdate':\n            return trEuroPerEnergyUpdate(payload.euroPerEnergyUpdate);\n        case 'microCcdPerEuroUpdate':\n            return trMicroCcdPerEuroUpdate(payload.microCcdPerEuroUpdate);\n        case 'foundationAccountUpdate':\n            return trFoundationAccountUpdate(payload.foundationAccountUpdate);\n        case 'mintDistributionUpdate':\n            return trMintDistributionCpv1Update(payload.mintDistributionUpdate);\n        case 'transactionFeeDistributionUpdate':\n            return trTransactionFeeDistributionUpdate(payload.transactionFeeDistributionUpdate);\n        case 'gasRewardsUpdate':\n            return trGasRewardsUpdate(payload.gasRewardsUpdate);\n        case 'bakerStakeThresholdUpdate':\n            return trBakerStakeThresholdUpdate(payload.bakerStakeThresholdUpdate);\n        case 'addAnonymityRevokerUpdate':\n            return trAddAnonymityRevokerUpdate(payload.addAnonymityRevokerUpdate);\n        case 'addIdentityProviderUpdate':\n            return trAddIdentityProviderUpdate(payload.addIdentityProviderUpdate);\n        case 'cooldownParametersCpv1Update':\n            return trCooldownParametersCpv1Update(payload.cooldownParametersCpv1Update);\n        case 'poolParametersCpv1Update':\n            return trPoolParametersCpv1Update(payload.poolParametersCpv1Update);\n        case 'timeParametersCpv1Update':\n            return trTimeParametersCpv1Update(payload.timeParametersCpv1Update);\n        case 'mintDistributionCpv1Update':\n            return trMintDistributionCpv1Update(payload.mintDistributionCpv1Update);\n        case 'gasRewardsCpv2Update':\n            return trGasRewardsCpv2Update(payload.gasRewardsCpv2Update);\n        case 'timeoutParametersUpdate':\n            return trTimeoutParameteresUpdate(payload.timeoutParametersUpdate);\n        case 'minBlockTimeUpdate':\n            return trMinBlockTimeUpdate(payload.minBlockTimeUpdate);\n        case 'blockEnergyLimitUpdate':\n            return trBlockEnergyLimitUpdate(payload.blockEnergyLimitUpdate);\n        case 'finalizationCommitteeParametersUpdate':\n            return trFinalizationCommitteeParametersUpdate(payload.finalizationCommitteeParametersUpdate);\n        case 'rootUpdate': {\n            const rootUpdate = payload.rootUpdate;\n            const keyUpdate = trKeyUpdate(rootUpdate);\n            return {\n                updateType: SDK.UpdateType.Root,\n                update: keyUpdate,\n            };\n        }\n        case 'level1Update': {\n            const lvl1Update = payload.level1Update;\n            const keyUpdate = trKeyUpdate(lvl1Update);\n            return {\n                updateType: SDK.UpdateType.Level1,\n                update: keyUpdate,\n            };\n        }\n        case 'validatorScoreParametersUpdate': {\n            return {\n                updateType: SDK.UpdateType.ValidatorScoreParameters,\n                update: {\n                    maxMissedRounds: payload.validatorScoreParametersUpdate.maximumMissedRounds,\n                },\n            };\n        }\n        case 'createPltUpdate':\n            return {\n                updateType: SDK.UpdateType.CreatePLT,\n                update: {\n                    tokenId: PLT.TokenId.fromProto(unwrap(payload.createPltUpdate.tokenId)),\n                    moduleRef: PLT.TokenModuleReference.fromProto(unwrap(payload.createPltUpdate.tokenModule)),\n                    decimals: payload.createPltUpdate.decimals,\n                    initializationParameters: PLT.Cbor.fromProto(\n                        unwrap(payload.createPltUpdate.initializationParameters)\n                    ),\n                },\n            };\n        case undefined:\n            return null;\n    }\n}\n\nfunction trCommissionRange(range: GRPC.InclusiveRangeAmountFraction | undefined): SDK.InclusiveRange<number> {\n    return {\n        min: trAmountFraction(range?.min),\n        max: trAmountFraction(range?.max),\n    };\n}\nfunction trUpdatePublicKey(key: GRPC.UpdatePublicKey): SDK.UpdatePublicKey {\n    return {\n        verifyKey: unwrapValToHex(key),\n    };\n}\n\nfunction trAccessStructure(auths: GRPC.AccessStructure | undefined): SDK.Authorization {\n    return {\n        authorizedKeys: unwrap(auths).accessPublicKeys.map((key) => key.value),\n        threshold: unwrap(auths?.accessThreshold?.value),\n    };\n}\n\nfunction trOptionalAccessStructure(auths: GRPC.AccessStructure | undefined): SDK.Authorization | undefined {\n    if (auths === undefined) {\n        return undefined;\n    }\n\n    return {\n        authorizedKeys: auths.accessPublicKeys.map((key) => key.value),\n        threshold: unwrap(auths.accessThreshold?.value),\n    };\n}\n\nfunction trKeyUpdate(keyUpdate: GRPC.RootUpdate | GRPC.Level1Update): SDK.KeyUpdate {\n    switch (keyUpdate.updateType.oneofKind) {\n        case 'rootKeysUpdate': {\n            const update = keyUpdate.updateType.rootKeysUpdate;\n            return {\n                typeOfUpdate: SDK.HigherLevelKeyUpdateType.RootKeysUpdate,\n                updateKeys: update.keys.map(trUpdatePublicKey),\n                threshold: unwrap(update.threshold?.value),\n            };\n        }\n        case 'level1KeysUpdate': {\n            const update = keyUpdate.updateType.level1KeysUpdate;\n            return {\n                typeOfUpdate: SDK.HigherLevelKeyUpdateType.Level1KeysUpdate,\n                updateKeys: update.keys.map(trUpdatePublicKey),\n                threshold: unwrap(update.threshold?.value),\n            };\n        }\n        case 'level2KeysUpdateV0': {\n            const update = keyUpdate.updateType.level2KeysUpdateV0;\n            return {\n                typeOfUpdate: SDK.AuthorizationKeysUpdateType.Level2KeysUpdate,\n                updatePayload: trAuthorizationsV0(update),\n            };\n        }\n        case 'level2KeysUpdateV1': {\n            const update = keyUpdate.updateType.level2KeysUpdateV1;\n            const v0 = unwrap(update.v0);\n            return {\n                typeOfUpdate: SDK.AuthorizationKeysUpdateType.Level2KeysUpdateV1,\n                updatePayload: {\n                    ...trAuthorizationsV0(v0),\n                    version: 1,\n                    cooldownParameters: trAccessStructure(update.parameterCooldown),\n                    timeParameters: trAccessStructure(update.parameterTime),\n                },\n            };\n        }\n        case undefined:\n            throw new Error('Unexpected missing update type');\n    }\n}\n\nfunction trAuthorizationsV0(auths: GRPC.AuthorizationsV0): SDK.AuthorizationsV0 {\n    return {\n        version: 0,\n        keys: auths.keys.map(trUpdatePublicKey),\n        addIdentityProvider: trAccessStructure(auths.addIdentityProvider),\n        addAnonymityRevoker: trAccessStructure(auths.addAnonymityRevoker),\n        emergency: trAccessStructure(auths.emergency),\n        electionDifficulty: trAccessStructure(auths.parameterConsensus),\n        euroPerEnergy: trAccessStructure(auths.parameterEuroPerEnergy),\n        foundationAccount: trAccessStructure(auths.parameterFoundationAccount),\n        microGTUPerEuro: trAccessStructure(auths.parameterMicroCCDPerEuro),\n        paramGASRewards: trAccessStructure(auths.parameterGasRewards),\n        mintDistribution: trAccessStructure(auths.parameterMintDistribution),\n        transactionFeeDistribution: trAccessStructure(auths.parameterTransactionFeeDistribution),\n        poolParameters: trAccessStructure(auths.poolParameters),\n        protocol: trAccessStructure(auths.protocol),\n    };\n}\n\nfunction trAuthorizationsV1(auths: GRPC.AuthorizationsV1): SDK.AuthorizationsV1 {\n    return {\n        ...trAuthorizationsV0(unwrap(auths.v0)),\n        version: 1,\n        cooldownParameters: trAccessStructure(auths.parameterCooldown),\n        timeParameters: trAccessStructure(auths.parameterTime),\n        createPlt: trOptionalAccessStructure(auths.createPlt),\n    };\n}\n\nfunction trMemoEvent(memo: GRPC_Kernel.Memo): SDK.MemoEvent {\n    return {\n        tag: SDK.TransactionEventTag.TransferMemo,\n        memo: unwrapValToHex(memo),\n    };\n}\n\nfunction trTransactionType(type?: GRPC.TransactionType): SDK.TransactionKindString | undefined {\n    switch (type) {\n        case GRPC.TransactionType.DEPLOY_MODULE:\n            return SDK.TransactionKindString.DeployModule;\n        case GRPC.TransactionType.INIT_CONTRACT:\n            return SDK.TransactionKindString.InitContract;\n        case GRPC.TransactionType.UPDATE:\n            return SDK.TransactionKindString.Update;\n        case GRPC.TransactionType.TRANSFER:\n            return SDK.TransactionKindString.Transfer;\n        case GRPC.TransactionType.ADD_BAKER:\n            return SDK.TransactionKindString.AddBaker;\n        case GRPC.TransactionType.REMOVE_BAKER:\n            return SDK.TransactionKindString.RemoveBaker;\n        case GRPC.TransactionType.UPDATE_BAKER_STAKE:\n            return SDK.TransactionKindString.UpdateBakerStake;\n        case GRPC.TransactionType.UPDATE_BAKER_RESTAKE_EARNINGS:\n            return SDK.TransactionKindString.UpdateBakerRestakeEarnings;\n        case GRPC.TransactionType.UPDATE_BAKER_KEYS:\n            return SDK.TransactionKindString.UpdateBakerKeys;\n        case GRPC.TransactionType.UPDATE_CREDENTIAL_KEYS:\n            return SDK.TransactionKindString.UpdateCredentialKeys;\n        case GRPC.TransactionType.ENCRYPTED_AMOUNT_TRANSFER:\n            return SDK.TransactionKindString.EncryptedAmountTransfer;\n        case GRPC.TransactionType.TRANSFER_TO_ENCRYPTED:\n            return SDK.TransactionKindString.TransferToEncrypted;\n        case GRPC.TransactionType.TRANSFER_TO_PUBLIC:\n            return SDK.TransactionKindString.TransferToPublic;\n        case GRPC.TransactionType.TRANSFER_WITH_SCHEDULE:\n            return SDK.TransactionKindString.TransferWithSchedule;\n        case GRPC.TransactionType.UPDATE_CREDENTIALS:\n            return SDK.TransactionKindString.UpdateCredentials;\n        case GRPC.TransactionType.REGISTER_DATA:\n            return SDK.TransactionKindString.RegisterData;\n        case GRPC.TransactionType.TRANSFER_WITH_MEMO:\n            return SDK.TransactionKindString.TransferWithMemo;\n        case GRPC.TransactionType.ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO:\n            return SDK.TransactionKindString.EncryptedAmountTransferWithMemo;\n        case GRPC.TransactionType.TRANSFER_WITH_SCHEDULE_AND_MEMO:\n            return SDK.TransactionKindString.TransferWithScheduleAndMemo;\n        case GRPC.TransactionType.CONFIGURE_BAKER:\n            return SDK.TransactionKindString.ConfigureBaker;\n        case GRPC.TransactionType.CONFIGURE_DELEGATION:\n            return SDK.TransactionKindString.ConfigureDelegation;\n        case GRPC.TransactionType.TOKEN_UPDATE:\n            return SDK.TransactionKindString.TokenUpdate;\n        case undefined:\n            return undefined;\n    }\n}\n\nfunction trAccountTransactionSummary(\n    details: GRPC.AccountTransactionDetails,\n    baseBlockItemSummary: SDK.BaseBlockItemSummary\n): SDK.AccountTransactionSummary {\n    const base: SDK.BaseAccountTransactionSummary = {\n        ...baseBlockItemSummary,\n        type: SDK.TransactionSummaryType.AccountTransaction,\n        cost: unwrap(details.cost?.value),\n        sender: AccountAddress.fromProto(unwrap(details.sender)),\n    };\n\n    const effect = unwrap(details.effects?.effect);\n    switch (effect.oneofKind) {\n        case 'none':\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.Failed,\n                failedTransactionType: trTransactionType(effect.none.transactionType),\n                rejectReason: trRejectReason(effect.none.rejectReason),\n            };\n        case 'moduleDeployed': {\n            const event: SDK.ModuleDeployedEvent = {\n                tag: SDK.TransactionEventTag.ModuleDeployed,\n                contents: unwrapValToHex(effect.moduleDeployed),\n            };\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.DeployModule,\n                moduleDeployed: event,\n            };\n        }\n        case 'contractInitialized': {\n            const contractInit = effect.contractInitialized;\n            const event: SDK.ContractInitializedEvent = {\n                tag: SDK.TransactionEventTag.ContractInitialized,\n                address: ContractAddress.fromProto(unwrap(contractInit.address)),\n                amount: CcdAmount.fromProto(unwrap(contractInit.amount)),\n                initName: InitName.fromProto(unwrap(contractInit.initName)),\n                events: unwrap(contractInit.events.map(unwrapValToHex)),\n                contractVersion: unwrap(contractInit.contractVersion),\n                ref: unwrapValToHex(contractInit.originRef),\n            };\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.InitContract,\n                contractInitialized: event,\n            };\n        }\n        case 'contractUpdateIssued':\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.Update,\n                events: effect.contractUpdateIssued.effects.map(trContractTraceElement),\n            };\n        case 'accountTransfer': {\n            const transfer: SDK.AccountTransferredEvent = {\n                tag: SDK.TransactionEventTag.Transferred,\n                amount: CcdAmount.fromProto(unwrap(effect.accountTransfer.amount)),\n                to: AccountAddress.fromProto(unwrap(effect.accountTransfer.receiver)),\n            };\n            if (effect.accountTransfer.memo) {\n                return {\n                    ...base,\n                    transactionType: SDK.TransactionKindString.TransferWithMemo,\n                    transfer,\n                    memo: trMemoEvent(effect.accountTransfer.memo),\n                };\n            } else {\n                return {\n                    ...base,\n                    transactionType: SDK.TransactionKindString.Transfer,\n                    transfer,\n                };\n            }\n        }\n        case 'bakerAdded':\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.AddBaker,\n                bakerAdded: trBakerEvent(\n                    {\n                        event: effect,\n                    },\n                    base.sender\n                ) as SDK.BakerAddedEvent,\n            };\n        case 'bakerRemoved':\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.RemoveBaker,\n                bakerRemoved: trBakerEvent(\n                    {\n                        event: effect,\n                    },\n                    base.sender\n                ) as SDK.BakerRemovedEvent,\n            };\n        case 'bakerRestakeEarningsUpdated':\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.UpdateBakerRestakeEarnings,\n                bakerRestakeEarningsUpdated: trBakerEvent(\n                    {\n                        event: effect,\n                    },\n                    base.sender\n                ) as SDK.BakerSetRestakeEarningsEvent,\n            };\n        case 'bakerKeysUpdated':\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.UpdateBakerKeys,\n                bakerKeysUpdated: trBakerEvent(\n                    {\n                        event: effect,\n                    },\n                    base.sender\n                ) as SDK.BakerKeysUpdatedEvent,\n            };\n        case 'bakerStakeUpdated': {\n            const increased = effect.bakerStakeUpdated.update?.increased;\n            const update = effect.bakerStakeUpdated.update;\n            const event: SDK.BakerStakeChangedEvent = {\n                tag: increased\n                    ? SDK.TransactionEventTag.BakerStakeIncreased\n                    : SDK.TransactionEventTag.BakerStakeDecreased,\n                bakerId: unwrap(update?.bakerId?.value),\n                newStake: CcdAmount.fromProto(unwrap(update?.newStake)),\n                account: base.sender,\n            };\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.UpdateBakerStake,\n                bakerStakeChanged: event,\n            };\n        }\n        case 'encryptedAmountTransferred': {\n            const transfer = effect.encryptedAmountTransferred;\n            const removed: SDK.EncryptedAmountsRemovedEvent = {\n                tag: SDK.TransactionEventTag.EncryptedAmountsRemoved,\n                inputAmount: unwrapValToHex(transfer.removed?.inputAmount),\n                newAmount: unwrapValToHex(transfer.removed?.newAmount),\n                upToIndex: Number(unwrap(transfer.removed?.upToIndex)),\n                account: base.sender,\n            };\n            const added: SDK.NewEncryptedAmountEvent = {\n                tag: SDK.TransactionEventTag.NewEncryptedAmount,\n                account: AccountAddress.fromProto(unwrap(transfer.added?.receiver)),\n                newIndex: Number(unwrap(transfer.added?.newIndex)),\n                encryptedAmount: unwrapValToHex(transfer.added?.encryptedAmount),\n            };\n            if (transfer.memo) {\n                return {\n                    ...base,\n                    transactionType: SDK.TransactionKindString.EncryptedAmountTransferWithMemo,\n                    removed,\n                    added,\n                    memo: trMemoEvent(transfer.memo),\n                };\n            } else {\n                return {\n                    ...base,\n                    transactionType: SDK.TransactionKindString.EncryptedAmountTransfer,\n                    removed,\n                    added,\n                };\n            }\n        }\n        case 'transferredToEncrypted': {\n            const transfer = effect.transferredToEncrypted;\n            const added: SDK.EncryptedSelfAmountAddedEvent = {\n                tag: SDK.TransactionEventTag.EncryptedSelfAmountAdded,\n                account: AccountAddress.fromProto(unwrap(transfer.account)),\n                amount: CcdAmount.fromProto(unwrap(transfer.amount)),\n                newAmount: unwrapValToHex(transfer.newAmount),\n            };\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.TransferToEncrypted,\n                added,\n            };\n        }\n        case 'transferredToPublic': {\n            const transfer = effect.transferredToPublic;\n            const removed: SDK.EncryptedAmountsRemovedEvent = {\n                tag: SDK.TransactionEventTag.EncryptedAmountsRemoved,\n                account: base.sender,\n                inputAmount: unwrapValToHex(transfer.removed?.inputAmount),\n                newAmount: unwrapValToHex(transfer.removed?.newAmount),\n                upToIndex: Number(unwrap(transfer.removed?.upToIndex)),\n            };\n            const added: SDK.AmountAddedByDecryptionEvent = {\n                tag: SDK.TransactionEventTag.AmountAddedByDecryption,\n                account: base.sender,\n                amount: CcdAmount.fromProto(unwrap(transfer.amount)),\n            };\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.TransferToPublic,\n                removed,\n                added,\n            };\n        }\n        case 'transferredWithSchedule': {\n            const transfer = effect.transferredWithSchedule;\n            const event: SDK.TransferredWithScheduleEvent = {\n                tag: SDK.TransactionEventTag.TransferredWithSchedule,\n                to: AccountAddress.fromProto(unwrap(transfer.receiver)),\n                amount: transfer.amount.map(trNewRelease),\n            };\n            if (transfer.memo) {\n                return {\n                    ...base,\n                    transactionType: SDK.TransactionKindString.TransferWithScheduleAndMemo,\n                    transfer: event,\n                    memo: trMemoEvent(transfer.memo),\n                };\n            } else {\n                return {\n                    ...base,\n                    transactionType: SDK.TransactionKindString.TransferWithSchedule,\n                    event,\n                };\n            }\n        }\n        case 'credentialKeysUpdated': {\n            const event: SDK.CredentialKeysUpdatedEvent = {\n                tag: SDK.TransactionEventTag.CredentialKeysUpdated,\n                credId: unwrapValToHex(effect.credentialKeysUpdated),\n            };\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.UpdateCredentialKeys,\n                keysUpdated: event,\n            };\n        }\n        case 'credentialsUpdated': {\n            const update = effect.credentialsUpdated;\n            const event: SDK.CredentialsUpdatedEvent = {\n                tag: SDK.TransactionEventTag.CredentialsUpdated,\n                newCredIds: update.newCredIds.map(unwrapValToHex),\n                removedCredIds: update.removedCredIds.map(unwrapValToHex),\n                newThreshold: unwrap(update.newThreshold?.value),\n                account: base.sender,\n            };\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.UpdateCredentials,\n                credentialsUpdated: event,\n            };\n        }\n        case 'dataRegistered': {\n            const event: SDK.DataRegisteredEvent = {\n                tag: SDK.TransactionEventTag.DataRegistered,\n                data: unwrapValToHex(effect.dataRegistered),\n            };\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.RegisterData,\n                dataRegistered: event,\n            };\n        }\n        case 'bakerConfigured':\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.ConfigureBaker,\n                events: effect.bakerConfigured.events.map((event) => trBakerEvent(event, base.sender)),\n            };\n        case 'delegationConfigured':\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.ConfigureDelegation,\n                events: effect.delegationConfigured.events.map((x) => trDelegationEvent(x, base.sender)),\n            };\n        case 'tokenUpdateEffect':\n            return {\n                ...base,\n                transactionType: SDK.TransactionKindString.TokenUpdate,\n                events: effect.tokenUpdateEffect.events.map(tokenEvent),\n            };\n        case undefined:\n            throw Error('Failed translating AccountTransactionEffects, encountered undefined value');\n    }\n}\n\nfunction tokenEvent(event: GRPC_PLT.TokenEvent): Upward<TokenEvent> {\n    switch (event.event.oneofKind) {\n        case 'transferEvent':\n            const transferEvent: TokenTransferEvent = {\n                tag: TransactionEventTag.TokenTransfer,\n                tokenId: PLT.TokenId.fromProto(unwrap(event.tokenId)),\n                from: PLT.TokenHolder.fromProto(unwrap(event.event.transferEvent.from)),\n                to: PLT.TokenHolder.fromProto(unwrap(event.event.transferEvent.to)),\n                amount: PLT.TokenAmount.fromProto(unwrap(event.event.transferEvent.amount)),\n            };\n            if (event.event.transferEvent.memo) {\n                transferEvent.memo = PLT.CborMemo.fromProto(unwrap(event.event.transferEvent.memo));\n            }\n\n            return transferEvent;\n        case 'moduleEvent':\n            return {\n                tag: TransactionEventTag.TokenModuleEvent,\n                tokenId: PLT.TokenId.fromProto(unwrap(event.tokenId)),\n                type: event.event.moduleEvent.type,\n                details: PLT.Cbor.fromProto(unwrap(event.event.moduleEvent.details)),\n            };\n        case 'mintEvent':\n            return {\n                tag: TransactionEventTag.TokenMint,\n                tokenId: PLT.TokenId.fromProto(unwrap(event.tokenId)),\n                amount: PLT.TokenAmount.fromProto(unwrap(event.event.mintEvent.amount)),\n                target: PLT.TokenHolder.fromProto(unwrap(event.event.mintEvent.target)),\n            };\n        case 'burnEvent':\n            return {\n                tag: TransactionEventTag.TokenBurn,\n                tokenId: PLT.TokenId.fromProto(unwrap(event.tokenId)),\n                amount: PLT.TokenAmount.fromProto(unwrap(event.event.burnEvent.amount)),\n                target: PLT.TokenHolder.fromProto(unwrap(event.event.burnEvent.target)),\n            };\n        case undefined:\n            return null;\n    }\n}\n\nfunction trCreatePltPayload(payload: GRPC_PLT.CreatePLT): PLT.CreatePLTPayload {\n    return {\n        tokenId: PLT.TokenId.fromProto(unwrap(payload.tokenId)),\n        decimals: payload.decimals,\n        moduleRef: PLT.TokenModuleReference.fromProto(unwrap(payload.tokenModule)),\n        initializationParameters: PLT.Cbor.fromProto(unwrap(payload.initializationParameters)),\n    };\n}\n\nexport function blockItemSummary(summary: GRPC.BlockItemSummary): Upward<SDK.BlockItemSummary> {\n    const base = {\n        index: unwrap(summary.index?.value),\n        energyCost: Energy.fromProto(unwrap(summary.energyCost)),\n        hash: TransactionHash.fromProto(unwrap(summary.hash)),\n    };\n    switch (summary.details.oneofKind) {\n        case 'accountTransaction':\n            return trAccountTransactionSummary(summary.details.accountTransaction, base);\n        case 'accountCreation':\n            return {\n                type: SDK.TransactionSummaryType.AccountCreation,\n                ...base,\n                credentialType:\n                    summary.details.accountCreation.credentialType === GRPC.CredentialType.INITIAL\n                        ? 'initial'\n                        : 'normal',\n                address: AccountAddress.fromProto(unwrap(summary.details.accountCreation.address)),\n                regId: unwrapValToHex(summary.details.accountCreation.regId),\n            };\n        case 'update':\n            return {\n                type: SDK.TransactionSummaryType.UpdateTransaction,\n                ...base,\n                effectiveTime: unwrap(summary.details.update.effectiveTime?.value),\n                payload: trUpdatePayload(summary.details.update.payload),\n            };\n        case 'tokenCreation':\n            return {\n                type: SDK.TransactionSummaryType.TokenCreation,\n                ...base,\n                payload: trCreatePltPayload(unwrap(summary.details.tokenCreation.createPlt)),\n                events: summary.details.tokenCreation.events.map(tokenEvent),\n            };\n        case undefined:\n            return null;\n    }\n}\n\nfunction trBlockItemSummaryInBlock(summary: GRPC.BlockItemSummaryInBlock): SDK.BlockItemSummaryInBlock {\n    return {\n        blockHash: BlockHash.fromProto(unwrap(summary.blockHash)),\n        summary: blockItemSummary(unwrap(summary.outcome)),\n    };\n}\n\nexport function blockItemStatus(itemStatus: GRPC.BlockItemStatus): SDK.BlockItemStatus {\n    switch (itemStatus.status.oneofKind) {\n        case 'received':\n            return {\n                status: SDK.TransactionStatusEnum.Received,\n            };\n        case 'committed':\n            return {\n                status: SDK.TransactionStatusEnum.Committed,\n                outcomes: itemStatus.status.committed.outcomes.map(trBlockItemSummaryInBlock),\n            };\n        case 'finalized':\n            return {\n                status: SDK.TransactionStatusEnum.Finalized,\n                outcome: trBlockItemSummaryInBlock(unwrap(itemStatus.status.finalized.outcome)),\n            };\n        default:\n            throw Error('BlockItemStatus was undefined!');\n    }\n}\n\nexport function invokeInstanceResponse(invokeResponse: GRPC.InvokeInstanceResponse): SDK.InvokeContractResult {\n    switch (invokeResponse.result.oneofKind) {\n        case 'failure':\n            return {\n                tag: 'failure',\n                usedEnergy: Energy.fromProto(unwrap(invokeResponse.result.failure.usedEnergy)),\n                reason: trRejectReason(invokeResponse.result.failure.reason),\n                returnValue:\n                    invokeResponse.result.failure.returnValue === undefined\n                        ? undefined\n                        : ReturnValue.fromBuffer(invokeResponse.result.failure.returnValue),\n            };\n        case 'success': {\n            const result = invokeResponse.result.success;\n            return {\n                tag: 'success',\n                usedEnergy: Energy.fromProto(unwrap(result.usedEnergy)),\n                returnValue: result.returnValue === undefined ? undefined : ReturnValue.fromBuffer(result.returnValue),\n                events: result.effects.map(trContractTraceElement),\n            };\n        }\n        default:\n            throw Error('BlockItemStatus was undefined!');\n    }\n}\n\nfunction trInstanceInfoCommon(\n    info: GRPC.InstanceInfo_V0 | GRPC.InstanceInfo_V1\n): Omit<SDK.InstanceInfoCommon, 'version'> {\n    return {\n        amount: CcdAmount.fromProto(unwrap(info.amount)),\n        sourceModule: ModuleReference.fromProto(unwrap(info.sourceModule)),\n        owner: AccountAddress.fromBuffer(unwrap(info.owner?.value)),\n        methods: info.methods.map(ReceiveName.fromProto),\n        name: InitName.fromProto(unwrap(info.name)),\n    };\n}\n\nexport function instanceInfo(instanceInfo: GRPC.InstanceInfo): SDK.InstanceInfo {\n    switch (instanceInfo.version.oneofKind) {\n        case 'v0':\n            return {\n                ...trInstanceInfoCommon(instanceInfo.version.v0),\n                version: 0,\n                model: Buffer.from(unwrap(instanceInfo.version.v0.model?.value)),\n            };\n        case 'v1':\n            return {\n                ...trInstanceInfoCommon(instanceInfo.version.v1),\n                version: 1,\n            };\n\n        default:\n            throw Error('InstanceInfo was undefined');\n    }\n}\n\nexport function commonBlockInfo(blockInfo: GRPC.ArrivedBlockInfo | GRPC.FinalizedBlockInfo): SDK.CommonBlockInfo {\n    return {\n        hash: BlockHash.fromProto(unwrap(blockInfo.hash)),\n        height: unwrap(blockInfo.height?.value),\n    };\n}\n\nexport function instanceStateKVPair(state: GRPC.InstanceStateKVPair): SDK.InstanceStateKVPair {\n    return {\n        key: unwrapToHex(state.key),\n        value: unwrapToHex(state.value),\n    };\n}\n\nexport function ipInfo(ip: GRPC.IpInfo): SDK.IpInfo {\n    return {\n        ipIdentity: unwrap(ip.identity?.value),\n        ipDescription: unwrap(ip.description),\n        ipVerifyKey: unwrapValToHex(ip.verifyKey),\n        ipCdiVerifyKey: unwrapValToHex(ip.cdiVerifyKey),\n    };\n}\n\nexport function arInfo(ar: GRPC.ArInfo): SDK.ArInfo {\n    return {\n        arIdentity: unwrap(ar.identity?.value),\n        arDescription: unwrap(ar.description),\n        arPublicKey: unwrapValToHex(ar.publicKey),\n    };\n}\n\nexport function blocksAtHeightResponse(blocks: GRPC.BlocksAtHeightResponse): BlockHash.Type[] {\n    return blocks.blocks.map(BlockHash.fromProto);\n}\n\nexport function blockInfo(blockInfo: GRPC.BlockInfo): SDK.BlockInfo {\n    const common: SDK.BlockInfoCommon = {\n        blockParent: BlockHash.fromProto(unwrap(blockInfo.parentBlock)),\n        blockHash: BlockHash.fromProto(unwrap(blockInfo.hash)),\n        blockStateHash: unwrapValToHex(blockInfo.stateHash),\n        blockLastFinalized: BlockHash.fromProto(unwrap(blockInfo.lastFinalizedBlock)),\n        blockHeight: unwrap(blockInfo.height?.value),\n        blockBaker: blockInfo.baker?.value,\n        blockArriveTime: trTimestamp(blockInfo.arriveTime),\n        blockReceiveTime: trTimestamp(blockInfo.receiveTime),\n        blockSlotTime: trTimestamp(blockInfo.slotTime),\n        finalized: blockInfo.finalized,\n        transactionCount: BigInt(blockInfo.transactionCount),\n        transactionsSize: BigInt(blockInfo.transactionsSize),\n        transactionEnergyCost: Energy.fromProto(unwrap(blockInfo.transactionsEnergyCost)),\n        genesisIndex: unwrap(blockInfo.genesisIndex?.value),\n        eraBlockHeight: Number(unwrap(blockInfo.eraBlockHeight?.value)),\n        protocolVersion: translateProtocolVersion(blockInfo.protocolVersion),\n    };\n\n    if (blockInfo.protocolVersion < GRPC.ProtocolVersion.PROTOCOL_VERSION_6) {\n        const bi0: SDK.BlockInfoV0 = {\n            ...common,\n            version: 0,\n            blockSlot: unwrap(blockInfo.slotNumber?.value),\n        };\n\n        return bi0;\n    }\n\n    const bi1: SDK.BlockInfoV1 = {\n        ...common,\n        version: 1,\n        round: unwrap(blockInfo.round?.value),\n        epoch: unwrap(blockInfo.epoch?.value),\n    };\n\n    return bi1;\n}\n\nexport function delegatorInfo(delegatorInfo: GRPC.DelegatorInfo): SDK.DelegatorInfo {\n    return {\n        account: AccountAddress.fromProto(unwrap(delegatorInfo.account)),\n        stake: CcdAmount.fromProto(unwrap(delegatorInfo.stake)),\n        ...(delegatorInfo.pendingChange && {\n            pendingChange: trPendingChange(delegatorInfo.pendingChange),\n        }),\n    };\n}\n\nexport function branch(branchV2: GRPC.Branch): SDK.Branch {\n    return {\n        blockHash: BlockHash.fromProto(unwrap(branchV2.blockHash)),\n        children: branchV2.children.map(branch),\n    };\n}\n\nfunction trBakerElectionInfo(bakerElectionInfo: GRPC.ElectionInfo_Baker): SDK.BakerElectionInfo {\n    return {\n        baker: unwrap(bakerElectionInfo.baker?.value),\n        account: AccountAddress.fromProto(unwrap(bakerElectionInfo.account)),\n        lotteryPower: bakerElectionInfo.lotteryPower,\n    };\n}\n\nexport function electionInfo(electionInfo: GRPC.ElectionInfo): SDK.ElectionInfo {\n    const common: SDK.ElectionInfoCommon = {\n        electionNonce: unwrapValToHex(electionInfo.electionNonce),\n        bakerElectionInfo: electionInfo.bakerElectionInfo.map(trBakerElectionInfo),\n    };\n\n    if (electionInfo.electionDifficulty === undefined) {\n        // election difficulty removed in protocol version 6.\n        return {\n            ...common,\n            version: 1,\n        };\n    }\n\n    return {\n        ...common,\n        version: 0,\n        electionDifficulty: trAmountFraction(electionInfo.electionDifficulty?.value),\n    };\n}\n\nexport function nextUpdateSequenceNumbers(nextNums: GRPC.NextUpdateSequenceNumbers): SDK.NextUpdateSequenceNumbers {\n    return {\n        rootKeys: unwrap(nextNums.rootKeys?.value),\n        level1Keys: unwrap(nextNums.level1Keys?.value),\n        level2Keys: unwrap(nextNums.level2Keys?.value),\n        protocol: unwrap(nextNums.protocol?.value),\n        electionDifficulty: unwrap(nextNums.electionDifficulty?.value),\n        euroPerEnergy: unwrap(nextNums.euroPerEnergy?.value),\n        microCcdPerEuro: unwrap(nextNums.microCcdPerEuro?.value),\n        foundationAccount: unwrap(nextNums.foundationAccount?.value),\n        mintDistribution: unwrap(nextNums.mintDistribution?.value),\n        transactionFeeDistribution: unwrap(nextNums.transactionFeeDistribution?.value),\n        gasRewards: unwrap(nextNums.gasRewards?.value),\n        poolParameters: unwrap(nextNums.poolParameters?.value),\n        addAnonymityRevoker: unwrap(nextNums.addAnonymityRevoker?.value),\n        addIdentityProvider: unwrap(nextNums.addIdentityProvider?.value),\n        cooldownParameters: unwrap(nextNums.cooldownParameters?.value),\n        timeParameters: unwrap(nextNums.timeParameters?.value),\n        timeoutParameters: unwrap(nextNums.timeoutParameters?.value),\n        minBlockTime: unwrap(nextNums.minBlockTime?.value),\n        blockEnergyLimit: unwrap(nextNums.blockEnergyLimit?.value),\n        finalizationCommiteeParameters: unwrap(nextNums.finalizationCommitteeParameters?.value),\n        // We fall back to be backwards compatible.\n        validatorScoreParameters: nextNums.validatorScoreParameters?.value ?? 1n,\n        protocolLevelTokens: nextNums.protocolLevelTokens?.value ?? 1n,\n    };\n}\n\nfunction trPassiveCommitteeInfo(\n    passiveCommitteeInfo: GRPC.NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo\n): Upward<SDK.PassiveCommitteeInfo> {\n    const passiveCommitteeInfoV2 = GRPC.NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo;\n    switch (passiveCommitteeInfo) {\n        case passiveCommitteeInfoV2.NOT_IN_COMMITTEE:\n            return SDK.PassiveCommitteeInfo.NotInCommittee;\n        case passiveCommitteeInfoV2.ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE:\n            return SDK.PassiveCommitteeInfo.AddedButNotActiveInCommittee;\n        case passiveCommitteeInfoV2.ADDED_BUT_WRONG_KEYS:\n            return SDK.PassiveCommitteeInfo.AddedButWrongKeys;\n        case undefined:\n            return null;\n    }\n}\n\nfunction trBakerConsensusInfoStatus(consensusInfo: GRPC.NodeInfo_BakerConsensusInfo): SDK.BakerConsensusInfoStatus {\n    if (consensusInfo.status.oneofKind === 'passiveCommitteeInfo') {\n        return {\n            tag: 'passiveCommitteeInfo',\n            passiveCommitteeInfo: trPassiveCommitteeInfo(consensusInfo.status.passiveCommitteeInfo),\n        };\n    } else if (consensusInfo.status.oneofKind === 'activeBakerCommitteeInfo') {\n        return {\n            tag: 'activeBakerCommitteeInfo',\n        };\n    } else if (consensusInfo.status.oneofKind === 'activeFinalizerCommitteeInfo') {\n        return {\n            tag: 'activeFinalizerCommitteeInfo',\n        };\n    } else {\n        throw Error('Error translating NodeInfoConsensusStatus: unexpected undefined');\n    }\n}\n\nfunction trNetworkInfo(networkInfo: GRPC.NodeInfo_NetworkInfo | undefined): SDK.NodeNetworkInfo {\n    return {\n        nodeId: unwrap(networkInfo?.nodeId?.value),\n        peerTotalSent: unwrap(networkInfo?.peerTotalSent),\n        peerTotalReceived: unwrap(networkInfo?.peerTotalReceived),\n        avgBpsIn: unwrap(networkInfo?.avgBpsIn),\n        avgBpsOut: unwrap(networkInfo?.avgBpsOut),\n    };\n}\n\nexport function trNodeInfo_Node(node: GRPC.NodeInfo_Node): SDK.NodeInfoConsensusStatus {\n    const status = node.consensusStatus;\n    switch (status.oneofKind) {\n        case 'active':\n            return {\n                tag: 'active',\n                bakerId: unwrap(status.active.bakerId?.value),\n                status: trBakerConsensusInfoStatus(status.active),\n            };\n        case 'notRunning':\n            return {\n                tag: 'notRunning',\n            };\n        case 'passive':\n            return {\n                tag: 'passive',\n            };\n        case undefined:\n            throw Error('Error translating nodeinfo: unexpected undefined');\n    }\n}\n\nexport function nodeInfo(nodeInfo: GRPC.NodeInfo): SDK.NodeInfo {\n    let details: SDK.NodeInfoDetails;\n    if (nodeInfo.details.oneofKind === 'bootstrapper') {\n        details = {\n            tag: 'bootstrapper',\n        };\n    } else if (nodeInfo.details.oneofKind === 'node') {\n        details = {\n            tag: 'node',\n            consensusStatus: trNodeInfo_Node(nodeInfo.details.node),\n        };\n    } else {\n        throw Error('Invalid nodeinfo');\n    }\n\n    return {\n        peerVersion: nodeInfo.peerVersion,\n        localTime: Timestamp.fromProto(unwrap(nodeInfo.localTime)),\n        peerUptime: Duration.fromProto(unwrap(nodeInfo.peerUptime)),\n        networkInfo: trNetworkInfo(nodeInfo.networkInfo),\n        details,\n    };\n}\n\nfunction trCatchupStatus(catchupStatus: GRPC.PeersInfo_Peer_CatchupStatus): Upward<SDK.NodeCatchupStatus> {\n    const CatchupStatus = GRPC.PeersInfo_Peer_CatchupStatus;\n    switch (catchupStatus) {\n        case CatchupStatus.CATCHINGUP:\n            return SDK.NodeCatchupStatus.CatchingUp;\n        case CatchupStatus.PENDING:\n            return SDK.NodeCatchupStatus.Pending;\n        case CatchupStatus.UPTODATE:\n            return SDK.NodeCatchupStatus.UpToDate;\n        case undefined:\n            return null;\n    }\n}\n\nfunction trPeerNetworkStats(networkStats: GRPC.PeersInfo_Peer_NetworkStats | undefined): SDK.PeerNetworkStats {\n    return {\n        packetsSent: unwrap(networkStats?.packetsSent),\n        packetsReceived: unwrap(networkStats?.packetsReceived),\n        latency: unwrap(networkStats?.latency),\n    };\n}\n\nexport function peerInfo(peerInfo: GRPC.PeersInfo_Peer): SDK.PeerInfo {\n    let consensusInfo: SDK.PeerConsensusInfo;\n    if (peerInfo.consensusInfo.oneofKind === 'bootstrapper') {\n        consensusInfo = {\n            tag: 'bootstrapper',\n        };\n    } else if (peerInfo.consensusInfo.oneofKind === 'nodeCatchupStatus') {\n        consensusInfo = {\n            tag: 'nodeCatchupStatus',\n            catchupStatus: trCatchupStatus(peerInfo.consensusInfo.nodeCatchupStatus),\n        };\n    } else {\n        throw Error('Error translating peerInfo: unexpected undefined');\n    }\n    return {\n        peerId: unwrap(peerInfo.peerId?.value),\n        ip: unwrap(peerInfo.socketAddress?.ip?.value),\n        port: unwrap(peerInfo.socketAddress?.port?.value),\n        networkStats: trPeerNetworkStats(peerInfo.networkStats),\n        consensusInfo,\n    };\n}\n\nfunction trAccountAmount(\n    accountAmount: GRPC.BlockSpecialEvent_AccountAmounts_Entry\n): SDK.BlockSpecialEventAccountAmount {\n    return {\n        account: AccountAddress.fromProto(unwrap(accountAmount.account)),\n        amount: CcdAmount.fromProto(unwrap(accountAmount.amount)),\n    };\n}\n\nexport function blockSpecialEvent(specialEvent: GRPC.BlockSpecialEvent): Upward<SDK.BlockSpecialEvent> {\n    const event = specialEvent.event;\n    switch (event.oneofKind) {\n        case 'bakingRewards': {\n            return {\n                tag: 'bakingRewards',\n                bakingRewards: unwrap(event.bakingRewards.bakerRewards).entries.map(trAccountAmount),\n                remainder: CcdAmount.fromProto(unwrap(event.bakingRewards.remainder)),\n            };\n        }\n        case 'mint': {\n            return {\n                tag: 'mint',\n                mintBakingReward: CcdAmount.fromProto(unwrap(event.mint.mintBakingReward)),\n                mintFinalizationReward: CcdAmount.fromProto(unwrap(event.mint.mintFinalizationReward)),\n                mintPlatformDevelopmentCharge: CcdAmount.fromProto(unwrap(event.mint.mintPlatformDevelopmentCharge)),\n                foundationAccount: AccountAddress.fromProto(unwrap(event.mint.foundationAccount)),\n            };\n        }\n        case 'finalizationRewards': {\n            return {\n                tag: 'finalizationRewards',\n                finalizationRewards: event.finalizationRewards.finalizationRewards?.entries.map(trAccountAmount),\n                remainder: CcdAmount.fromProto(unwrap(event.finalizationRewards.remainder)),\n            };\n        }\n        case 'blockReward': {\n            return {\n                tag: 'blockReward',\n                transactionFees: CcdAmount.fromProto(unwrap(event.blockReward.transactionFees)),\n                oldGasAccount: CcdAmount.fromProto(unwrap(event.blockReward.oldGasAccount)),\n                newGasAccount: CcdAmount.fromProto(unwrap(event.blockReward.newGasAccount)),\n                bakerReward: CcdAmount.fromProto(unwrap(event.blockReward.bakerReward)),\n                foundationCharge: CcdAmount.fromProto(unwrap(event.blockReward.foundationCharge)),\n                baker: AccountAddress.fromProto(unwrap(event.blockReward.baker)),\n                foundationAccount: AccountAddress.fromProto(unwrap(event.blockReward.baker)),\n            };\n        }\n        case 'paydayFoundationReward': {\n            return {\n                tag: 'paydayFoundationReward',\n                foundationAccount: AccountAddress.fromProto(unwrap(event.paydayFoundationReward.foundationAccount)),\n                developmentCharge: CcdAmount.fromProto(unwrap(event.paydayFoundationReward.developmentCharge)),\n            };\n        }\n        case 'paydayAccountReward': {\n            return {\n                tag: 'paydayAccountReward',\n                account: AccountAddress.fromProto(unwrap(event.paydayAccountReward.account)),\n                transactionFees: CcdAmount.fromProto(unwrap(event.paydayAccountReward.transactionFees)),\n                bakerReward: CcdAmount.fromProto(unwrap(event.paydayAccountReward.bakerReward)),\n                finalizationReward: CcdAmount.fromProto(unwrap(event.paydayAccountReward.finalizationReward)),\n            };\n        }\n        case 'blockAccrueReward': {\n            return {\n                tag: 'blockAccrueReward',\n                transactionFees: CcdAmount.fromProto(unwrap(event.blockAccrueReward.transactionFees)),\n                oldGasAccount: CcdAmount.fromProto(unwrap(event.blockAccrueReward.oldGasAccount)),\n                newGasAccount: CcdAmount.fromProto(unwrap(event.blockAccrueReward.newGasAccount)),\n                bakerReward: CcdAmount.fromProto(unwrap(event.blockAccrueReward.bakerReward)),\n                passiveReward: CcdAmount.fromProto(unwrap(event.blockAccrueReward.passiveReward)),\n                foundationCharge: CcdAmount.fromProto(unwrap(event.blockAccrueReward.foundationCharge)),\n                baker: unwrap(event.blockAccrueReward.baker?.value),\n            };\n        }\n        case 'paydayPoolReward': {\n            const poolOwner = event.paydayPoolReward.poolOwner?.value;\n            return {\n                tag: 'paydayPoolReward',\n                transactionFees: CcdAmount.fromProto(unwrap(event.paydayPoolReward.transactionFees)),\n                bakerReward: CcdAmount.fromProto(unwrap(event.paydayPoolReward.bakerReward)),\n                finalizationReward: CcdAmount.fromProto(unwrap(event.paydayPoolReward.finalizationReward)),\n                ...(poolOwner !== undefined && { poolOwner }),\n            };\n        }\n        case 'validatorSuspended': {\n            return {\n                tag: 'validatorSuspended',\n                account: AccountAddress.fromProto(unwrap(event.validatorSuspended.account)),\n                bakerId: unwrap(event.validatorSuspended.bakerId?.value),\n            };\n        }\n        case 'validatorPrimedForSuspension': {\n            return {\n                tag: 'validatorPrimedForSuspension',\n                account: AccountAddress.fromProto(unwrap(event.validatorPrimedForSuspension.account)),\n                bakerId: unwrap(event.validatorPrimedForSuspension.bakerId?.value),\n            };\n        }\n        case undefined: {\n            return null;\n        }\n    }\n}\n\nfunction trFinalizationSummaryParty(party: GRPC.FinalizationSummaryParty): SDK.FinalizationSummaryParty {\n    return {\n        baker: unwrap(party.baker?.value),\n        weight: party.weight,\n        signed: party.signed,\n    };\n}\n\nfunction trFinalizationSummary(summary: GRPC.FinalizationSummary): SDK.FinalizationSummary {\n    return {\n        block: BlockHash.fromProto(unwrap(summary.block)),\n        index: unwrap(summary.index?.value),\n        delay: unwrap(summary.delay?.value),\n        finalizers: summary.finalizers.map(trFinalizationSummaryParty),\n    };\n}\n\nexport function blockFinalizationSummary(\n    finalizationSummary: GRPC.BlockFinalizationSummary\n): SDK.BlockFinalizationSummary {\n    const summary = finalizationSummary.summary;\n    if (summary.oneofKind === 'none') {\n        return {\n            tag: 'none',\n        };\n    } else if (summary.oneofKind === 'record') {\n        return {\n            tag: 'record',\n            record: trFinalizationSummary(summary.record),\n        };\n    } else {\n        throw Error('Error translating BlockFinalizationSummary: unexpected undefined');\n    }\n}\n\nexport function blockCertificates(certs: GRPC.BlockCertificates): SDK.BlockCertificates {\n    return {\n        ...(certs.quorumCertificate !== undefined && {\n            quorumCertificate: quorumCertificate(certs.quorumCertificate),\n        }),\n        ...(certs.timeoutCertificate !== undefined && {\n            timeoutCertificate: timeoutCertificate(certs.timeoutCertificate),\n        }),\n        ...(certs.epochFinalizationEntry !== undefined && {\n            epochFinalizationEntry: epochFinalizationEntry(certs.epochFinalizationEntry),\n        }),\n    };\n}\n\nexport function quorumCertificate(cert: GRPC.QuorumCertificate): SDK.QuorumCertificate {\n    return {\n        blockHash: unwrapValToHex(cert.blockHash),\n        round: unwrap(cert.round?.value),\n        epoch: unwrap(cert.epoch?.value),\n        aggregateSignature: unwrapValToHex(cert.aggregateSignature),\n        signatories: cert.signatories.map((x) => unwrap(x.value)),\n    };\n}\n\nexport function timeoutCertificate(cert: GRPC.TimeoutCertificate): SDK.TimeoutCertificate {\n    return {\n        round: unwrap(cert.round?.value),\n        minEpoch: unwrap(cert.minEpoch?.value),\n        qcRoundsFirstEpoch: cert.qcRoundsFirstEpoch.map(finalizerRound),\n        qcRoundsSecondEpoch: cert.qcRoundsSecondEpoch.map(finalizerRound),\n        aggregateSignature: unwrapValToHex(cert.aggregateSignature),\n    };\n}\n\nexport function epochFinalizationEntry(cert: GRPC.EpochFinalizationEntry): SDK.EpochFinalizationEntry {\n    return {\n        finalizedQc: quorumCertificate(unwrap(cert.finalizedQc)),\n        successorQc: quorumCertificate(unwrap(cert.successorQc)),\n        successorProof: unwrapValToHex(cert.successorProof),\n    };\n}\n\nexport function finalizerRound(round: GRPC.FinalizerRound): SDK.FinalizerRound {\n    return {\n        round: unwrap(round.round?.value),\n        finalizers: round.finalizers.map((x) => x.value),\n    };\n}\n\nexport function bakerRewardPeriodInfo(bakerRewardPeriod: GRPC.BakerRewardPeriodInfo): SDK.BakerRewardPeriodInfo {\n    return {\n        baker: bakerInfo(unwrap(bakerRewardPeriod.baker)),\n        effectiveStake: CcdAmount.fromMicroCcd(unwrap(bakerRewardPeriod.effectiveStake?.value)),\n        commissionRates: trCommissionRates(bakerRewardPeriod.commissionRates),\n        equityCapital: CcdAmount.fromMicroCcd(unwrap(bakerRewardPeriod.equityCapital?.value)),\n        delegatedCapital: CcdAmount.fromMicroCcd(unwrap(bakerRewardPeriod.delegatedCapital?.value)),\n        isFinalizer: bakerRewardPeriod.isFinalizer,\n    };\n}\n\nexport function bakerInfo(bakerInfo: GRPC.BakerInfo): SDK.BakerInfo {\n    return {\n        bakerId: unwrap(bakerInfo.bakerId?.value),\n        electionKey: unwrapValToHex(bakerInfo.electionKey),\n        signatureKey: unwrapValToHex(bakerInfo.signatureKey),\n        aggregationKey: unwrapValToHex(bakerInfo.aggregationKey),\n    };\n}\n\nexport function winningBaker(winningBaker: GRPC.WinningBaker): SDK.WinningBaker {\n    return {\n        round: unwrap(winningBaker.round?.value),\n        winner: unwrap(winningBaker.winner?.value),\n        present: winningBaker.present,\n    };\n}\n\nexport function trTokenInfo(tokenInfo: GRPC.TokenInfo): PLT.TokenInfo {\n    const state: PLT.TokenState = {\n        decimals: unwrap(tokenInfo.tokenState?.decimals),\n        moduleRef: PLT.TokenModuleReference.fromProto(unwrap(tokenInfo.tokenState?.tokenModuleRef)),\n        totalSupply: PLT.TokenAmount.fromProto(unwrap(tokenInfo.tokenState?.totalSupply)),\n        moduleState: PLT.Cbor.fromProto(unwrap(tokenInfo.tokenState?.moduleState)),\n    };\n    return {\n        id: PLT.TokenId.fromProto(unwrap(tokenInfo.tokenId)),\n        state,\n    };\n}\n\n// ---------------------------- //\n// --- V1 => V2 translation --- //\n// ---------------------------- //\n\nexport function accountTransactionSignatureToV2(\n    signature: SDK.AccountTransactionSignature\n): GRPC.AccountTransactionSignature {\n    function trSig(a: string): GRPC.Signature {\n        return { value: Buffer.from(a, 'hex') };\n    }\n    function trCredSig(a: SDK.CredentialSignature): GRPC.AccountSignatureMap {\n        return { signatures: mapRecord(a, trSig) };\n    }\n\n    return { signatures: mapRecord(signature, trCredSig) };\n}\n\nexport function BlocksAtHeightRequestToV2(request: SDK.BlocksAtHeightRequest): GRPC.BlocksAtHeightRequest {\n    if (typeof request === 'bigint') {\n        return {\n            blocksAtHeight: {\n                oneofKind: 'absolute',\n                absolute: { height: { value: request } },\n            },\n        };\n    } else {\n        return {\n            blocksAtHeight: {\n                oneofKind: 'relative',\n                relative: {\n                    genesisIndex: { value: request.genesisIndex },\n                    height: { value: request.height },\n                    restrict: request.restrict,\n                },\n            },\n        };\n    }\n}\n","/**\n * An error that occurred while calling a RPC method.\n */\nexport class RpcError extends Error {\n    constructor(message, code = 'UNKNOWN', meta) {\n        super(message);\n        this.name = 'RpcError';\n        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.code = code;\n        this.meta = meta !== null && meta !== void 0 ? meta : {};\n    }\n    toString() {\n        const l = [this.name + ': ' + this.message];\n        if (this.code) {\n            l.push('');\n            l.push('Code: ' + this.code);\n        }\n        if (this.serviceName && this.methodName) {\n            l.push('Method: ' + this.serviceName + '/' + this.methodName);\n        }\n        let m = Object.entries(this.meta);\n        if (m.length) {\n            l.push('');\n            l.push('Meta:');\n            for (let [k, v] of m) {\n                l.push(`  ${k}: ${v}`);\n            }\n        }\n        return l.join('\\n');\n    }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Find code of next character\n      var charCode = source.charCodeAt(psz)\n            // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n            // Decode character\n      var carry = BASE_MAP[charCode]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","import type { Upward } from '../grpc/index.js';\nimport type * as PLT from '../plt/index.js';\nimport type {\n    Address,\n    BakerId,\n    DelegatorId,\n    EventDelegationTarget,\n    HexString,\n    ModuleRef,\n    OpenStatusText,\n    ReleaseSchedule,\n} from '../types.js';\nimport type * as AccountAddress from './AccountAddress.js';\nimport type * as CcdAmount from './CcdAmount.js';\nimport type * as ContractAddress from './ContractAddress.js';\nimport type * as ContractEvent from './ContractEvent.js';\nimport type * as InitName from './InitName.js';\nimport type * as Parameter from './Parameter.js';\nimport type * as ReceiveName from './ReceiveName.js';\nimport type { UpdateInstructionPayload } from './chainUpdate.js';\n\nexport enum TransactionEventTag {\n    ModuleDeployed = 'ModuleDeployed',\n    ContractInitialized = 'ContractInitialized',\n    AccountCreated = 'AccountCreated',\n    CredentialDeployed = 'CredentialDeployed',\n    BakerAdded = 'BakerAdded',\n    BakerRemoved = 'BakerRemoved',\n    BakerStakeIncreased = 'BakerStakeIncreased',\n    BakerStakeDecreased = 'BakerStakeDecreased',\n    BakerSetRestakeEarnings = 'BakerSetRestakeEarnings',\n    BakerKeysUpdated = 'BakerKeysUpdated',\n    CredentialKeysUpdated = 'CredentialKeysUpdated',\n    NewEncryptedAmount = 'NewEncryptedAmount',\n    EncryptedAmountsRemoved = 'EncryptedAmountsRemoved',\n    AmountAddedByDecryption = 'AmountAddedByDecryption',\n    EncryptedSelfAmountAdded = 'EncryptedSelfAmountAdded',\n    UpdateEnqueued = 'UpdateEnqueued',\n    TransferredWithSchedule = 'TransferredWithSchedule',\n    CredentialsUpdated = 'CredentialsUpdated',\n    DataRegistered = 'DataRegistered',\n    BakerSetOpenStatus = 'BakerSetOpenStatus',\n    BakerSetMetadataURL = 'BakerSetMetadataURL',\n    BakerSetTransactionFeeCommission = 'BakerSetTransactionFeeCommission',\n    BakerSetBakingRewardCommission = 'BakerSetBakingRewardCommission',\n    BakerSetFinalizationRewardCommission = 'BakerSetFinalizationRewardCommission',\n    BakerDelegationRemoved = 'BakerDelegationRemoved',\n    BakerSuspended = 'BakerSuspended',\n    BakerResumed = 'BakerResumed',\n    DelegationStakeIncreased = 'DelegationStakeIncreased',\n    DelegationStakeDecreased = 'DelegationStakeDecreased',\n    DelegationSetRestakeEarnings = 'DelegationSetRestakeEarnings',\n    DelegationSetDelegationTarget = 'DelegationSetDelegationTarget',\n    DelegationAdded = 'DelegationAdded',\n    DelegationRemoved = 'DelegationRemoved',\n    DelegationBakerRemoved = 'DelegationBakerRemoved',\n    TransferMemo = 'TransferMemo',\n    Transferred = 'Transferred',\n    Interrupted = 'Interrupted',\n    Resumed = 'Resumed',\n    Updated = 'Updated',\n    Upgraded = 'Upgraded',\n    TokenModuleEvent = 'TokenModuleEvent',\n    TokenTransfer = 'TokenTransfer',\n    TokenMint = 'TokenMint',\n    TokenBurn = 'TokenBurn',\n}\n\nexport type TransactionEvent =\n    | AccountTransferredEvent\n    | MemoEvent\n    | TransferredWithScheduleEvent\n    | AccountCreatedEvent\n    | AmountAddedByDecryptionEvent\n    | EncryptedSelfAmountAddedEvent\n    | NewEncryptedAmountEvent\n    | EncryptedAmountsRemovedEvent\n    | DataRegisteredEvent\n    | ContractInitializedEvent\n    | ModuleDeployedEvent\n    | CredentialDeployedEvent\n    | CredentialKeysUpdatedEvent\n    | CredentialsUpdatedEvent\n    | UpdateEnqueuedEvent\n    | DelegationEvent\n    | BakerEvent\n    | TokenEvent;\n\n// Contract Events\n\nexport interface InterruptedEvent {\n    tag: TransactionEventTag.Interrupted;\n    address: ContractAddress.Type;\n    events: ContractEvent.Type[];\n}\n\nexport interface ResumedEvent {\n    tag: TransactionEventTag.Resumed;\n    address: ContractAddress.Type;\n    success: boolean;\n}\n\nexport interface UpdatedEvent {\n    tag: TransactionEventTag.Updated;\n    address: ContractAddress.Type;\n    instigator: Address;\n    amount: CcdAmount.Type;\n    contractVersion: number;\n    message: Parameter.Type;\n    receiveName: ReceiveName.Type;\n    events: ContractEvent.Type[];\n}\n\nexport interface TransferredEvent {\n    tag: TransactionEventTag.Transferred;\n    amount: CcdAmount.Type;\n    to: AccountAddress.Type;\n    from: ContractAddress.Type;\n}\n\nexport interface UpgradedEvent {\n    tag: TransactionEventTag.Upgraded;\n    address: ContractAddress.Type;\n    from: ModuleRef;\n    to: ModuleRef;\n}\n\n// Transaction Events\n\nexport interface DataRegisteredEvent {\n    tag: TransactionEventTag.DataRegistered;\n    data: HexString;\n}\n\nexport interface ContractInitializedEvent {\n    tag: TransactionEventTag.ContractInitialized;\n    address: ContractAddress.Type;\n    amount: CcdAmount.Type;\n    initName: InitName.Type;\n    events: HexString[];\n    contractVersion: number;\n    ref: ModuleRef;\n}\n\nexport interface ModuleDeployedEvent {\n    tag: TransactionEventTag.ModuleDeployed;\n    contents: ModuleRef;\n}\n\n// Account and transfer Events\n\nexport interface AccountTransferredEvent {\n    tag: TransactionEventTag.Transferred;\n    amount: CcdAmount.Type;\n    to: AccountAddress.Type;\n}\n\nexport interface TransferredWithScheduleEvent {\n    tag: TransactionEventTag.TransferredWithSchedule;\n    to: AccountAddress.Type;\n    amount: ReleaseSchedule[];\n}\n\nexport interface MemoEvent {\n    tag: TransactionEventTag.TransferMemo;\n    memo: HexString;\n}\n\nexport interface AccountCreatedEvent {\n    tag: TransactionEventTag.AccountCreated;\n    account: AccountAddress.Type;\n}\n\nexport interface AmountAddedByDecryptionEvent {\n    tag: TransactionEventTag.AmountAddedByDecryption;\n    account: AccountAddress.Type;\n    amount: CcdAmount.Type;\n}\n\nexport interface EncryptedSelfAmountAddedEvent {\n    tag: TransactionEventTag.EncryptedSelfAmountAdded;\n    account: AccountAddress.Type;\n    amount: CcdAmount.Type;\n    newAmount: string;\n}\n\nexport interface EncryptedAmountsRemovedEvent {\n    tag: TransactionEventTag.EncryptedAmountsRemoved;\n    account: AccountAddress.Type;\n    inputAmount: HexString;\n    newAmount: HexString;\n    upToIndex: number;\n}\n\nexport interface NewEncryptedAmountEvent {\n    tag: TransactionEventTag.NewEncryptedAmount;\n    account: AccountAddress.Type;\n    newIndex: number;\n    encryptedAmount: HexString;\n}\n\nexport interface CredentialDeployedEvent {\n    tag: TransactionEventTag.CredentialDeployed;\n    regid: HexString;\n    account: AccountAddress.Type;\n}\n\nexport interface CredentialKeysUpdatedEvent {\n    tag: TransactionEventTag.CredentialKeysUpdated;\n    credId: HexString;\n}\n\nexport interface CredentialsUpdatedEvent {\n    tag: TransactionEventTag.CredentialsUpdated;\n    account: AccountAddress.Type;\n    newCredIds: HexString[];\n    removedCredIds: HexString[];\n    newThreshold: number;\n}\n\n// Delegation Events\n\nexport interface DelegatorEvent {\n    tag: TransactionEventTag.DelegationAdded | TransactionEventTag.DelegationRemoved;\n    delegatorId: DelegatorId;\n    account: AccountAddress.Type;\n}\n\nexport interface DelegationSetDelegationTargetEvent {\n    tag: TransactionEventTag.DelegationSetDelegationTarget;\n    delegatorId: DelegatorId;\n    account: AccountAddress.Type;\n    delegationTarget: EventDelegationTarget;\n}\n\nexport interface DelegationSetRestakeEarningsEvent {\n    tag: TransactionEventTag.DelegationSetRestakeEarnings;\n    delegatorId: DelegatorId;\n    account: AccountAddress.Type;\n    restakeEarnings: boolean;\n}\n\nexport interface DelegationStakeChangedEvent {\n    tag: TransactionEventTag.DelegationStakeDecreased | TransactionEventTag.DelegationStakeIncreased;\n    delegatorId: DelegatorId;\n    account: AccountAddress.Type;\n    newStake: CcdAmount.Type;\n}\n\nexport interface DelegationBakerRemovedEvent {\n    tag: TransactionEventTag.DelegationBakerRemoved;\n    bakerId: BakerId;\n}\n\n// Baker Events\n\nexport interface BakerAddedEvent {\n    tag: TransactionEventTag.BakerAdded;\n    bakerId: BakerId;\n    account: AccountAddress.Type;\n    signKey: string;\n    electionKey: string;\n    aggregationKey: string;\n    stake: CcdAmount.Type;\n    restakeEarnings: boolean;\n}\n\nexport interface BakerRemovedEvent {\n    tag: TransactionEventTag.BakerRemoved;\n    bakerId: BakerId;\n    account: AccountAddress.Type;\n}\n\nexport interface BakerStakeChangedEvent {\n    tag: TransactionEventTag.BakerStakeIncreased | TransactionEventTag.BakerStakeDecreased;\n    bakerId: BakerId;\n    account: AccountAddress.Type;\n    newStake: CcdAmount.Type;\n}\n\nexport interface BakerSetRestakeEarningsEvent {\n    tag: TransactionEventTag.BakerSetRestakeEarnings;\n    bakerId: BakerId;\n    account: AccountAddress.Type;\n    restakeEarnings: boolean;\n}\n\nexport interface BakerKeysUpdatedEvent {\n    tag: TransactionEventTag.BakerKeysUpdated;\n    bakerId: BakerId;\n    account: AccountAddress.Type;\n    signKey: HexString;\n    electionKey: HexString;\n    aggregationKey: HexString;\n}\n\nexport interface BakerSetOpenStatusEvent {\n    tag: TransactionEventTag.BakerSetOpenStatus;\n    bakerId: BakerId;\n    account: AccountAddress.Type;\n    /**\n     * The status of validator pool\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    openStatus: Upward<OpenStatusText>;\n}\n\nexport interface BakerSetMetadataURLEvent {\n    tag: TransactionEventTag.BakerSetMetadataURL;\n    bakerId: BakerId;\n    account: AccountAddress.Type;\n    metadataURL: string;\n}\n\nexport interface BakerSetFinalizationRewardCommissionEvent {\n    tag: TransactionEventTag.BakerSetFinalizationRewardCommission;\n    bakerId: BakerId;\n    account: AccountAddress.Type;\n    finalizationRewardCommission: number;\n}\n\nexport interface BakerSetBakingRewardCommissionEvent {\n    tag: TransactionEventTag.BakerSetBakingRewardCommission;\n    bakerId: BakerId;\n    account: AccountAddress.Type;\n    bakingRewardCommission: number;\n}\n\nexport interface BakerSetTransactionFeeCommissionEvent {\n    tag: TransactionEventTag.BakerSetTransactionFeeCommission;\n    bakerId: BakerId;\n    account: AccountAddress.Type;\n    transactionFeeCommission: number;\n}\n\nexport interface BakerDelegationRemovedEvent {\n    tag: TransactionEventTag.BakerDelegationRemoved;\n    delegatorId: DelegatorId;\n}\n\nexport interface BakerSuspendedEvent {\n    tag: TransactionEventTag.BakerSuspended;\n    bakerId: BakerId;\n}\n\nexport interface BakerResumedEvent {\n    tag: TransactionEventTag.BakerResumed;\n    bakerId: BakerId;\n}\n\nexport interface UpdateEnqueuedEvent {\n    tag: TransactionEventTag.UpdateEnqueued;\n    effectiveTime: number;\n    /**\n     * The payload of the enqueued update.\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    payload: Upward<UpdateInstructionPayload>;\n}\n\n/**\n * Token (PLT) event with CBOR encoded details.\n */\nexport type EncodedTokenModuleEvent = {\n    /** The type of the event */\n    tag: TransactionEventTag.TokenModuleEvent;\n    /** The token ID of the token the event originates from */\n    tokenId: PLT.TokenId.Type;\n    /** The type of the event emitted by the token module. */\n    type: string;\n    /** Additional details about the event (CBOR encoded). */\n    details: PLT.Cbor.Type;\n};\n\n/**\n * Token (PLT) transfer event.\n */\nexport type TokenTransferEvent = {\n    /** The type of the event */\n    tag: TransactionEventTag.TokenTransfer;\n    /** The token ID of the token the event originates from */\n    tokenId: PLT.TokenId.Type;\n    /**\n     * The token holder sending the tokens.\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    from: Upward<PLT.TokenHolder.Type>;\n    /**\n     * The token holder receiving the tokens.\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    to: Upward<PLT.TokenHolder.Type>;\n    /** The amount of tokens transferred. */\n    amount: PLT.TokenAmount.Type;\n    /** An optional memo associated with the transfer. */\n    memo?: PLT.CborMemo.Type;\n};\n\n/**\n * Token (PLT) mint event.\n */\nexport type TokenMintEvent = {\n    /** The type of the event */\n    tag: TransactionEventTag.TokenMint;\n    /** The token ID of the token the event originates from */\n    tokenId: PLT.TokenId.Type;\n    /**\n     * The token holder whose supply is updated.\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    target: Upward<PLT.TokenHolder.Type>;\n    /** The amount by which the token supply is updated. */\n    amount: PLT.TokenAmount.Type;\n};\n\n/**\n * Token (PLT) burn event.\n */\nexport type TokenBurnEvent = {\n    /** The type of the event */\n    tag: TransactionEventTag.TokenBurn;\n    /** The token ID of the token the event originates from */\n    tokenId: PLT.TokenId.Type;\n    /**\n     * The token holder whose supply is updated.\n     *\n     * **Please note**, this can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    target: Upward<PLT.TokenHolder.Type>;\n    /** The amount by which the token supply is updated. */\n    amount: PLT.TokenAmount.Type;\n};\n\nexport type TokenEvent = EncodedTokenModuleEvent | TokenTransferEvent | TokenMintEvent | TokenBurnEvent;\nexport type ContractTraceEvent = ResumedEvent | InterruptedEvent | UpdatedEvent | UpgradedEvent | TransferredEvent;\nexport type BakerEvent =\n    | BakerSetTransactionFeeCommissionEvent\n    | BakerSetBakingRewardCommissionEvent\n    | BakerSetFinalizationRewardCommissionEvent\n    | BakerSetMetadataURLEvent\n    | BakerSetOpenStatusEvent\n    | BakerSetRestakeEarningsEvent\n    | BakerStakeChangedEvent\n    | BakerAddedEvent\n    | BakerRemovedEvent\n    | BakerKeysUpdatedEvent\n    | BakerDelegationRemovedEvent\n    | BakerSuspendedEvent\n    | BakerResumedEvent;\nexport type DelegationEvent =\n    | DelegatorEvent\n    | DelegationSetDelegationTargetEvent\n    | DelegationSetRestakeEarningsEvent\n    | DelegationStakeChangedEvent\n    | DelegationBakerRemovedEvent;\n","// Functionality revolving around identities.\nexport * from '../id/index.js';\n","import type { BakerId } from '../types.js';\nimport * as AccountAddress from './AccountAddress.js';\nimport * as CcdAmount from './CcdAmount.js';\n\n/**\n * A union of all the different \"special events\" that can be part of a block.\n */\nexport type BlockSpecialEvent =\n    | BlockSpecialEventBakingRewards\n    | BlockSpecialEventMint\n    | BlockSpecialEventFinalizationRewards\n    | BlockSpecialEventBlockReward\n    | BlockSpecialEventPaydayFoundationReward\n    | BlockSpecialEventPaydayAccountReward\n    | BlockSpecialEventBlockAccrueReward\n    | BlockSpecialEventPaydayPoolReward\n    | BlockSpecialEventValidatorSuspended\n    | BlockSpecialEventValidatorPrimedForSuspension;\n\nexport interface BlockSpecialEventBakingRewards {\n    tag: 'bakingRewards';\n    // The amount awarded to each baker.\n    bakingRewards: BlockSpecialEventAccountAmount[];\n    // The remaining balance of the baker reward account.\n    remainder: CcdAmount.Type;\n}\n\nexport interface BlockSpecialEventMint {\n    tag: 'mint';\n    // The amount allocated to the banking reward account.\n    mintBakingReward: CcdAmount.Type;\n    // The amount allocated to the finalization reward account.\n    mintFinalizationReward: CcdAmount.Type;\n    // The amount allocated as the platform development charge.\n    mintPlatformDevelopmentCharge: CcdAmount.Type;\n    // The account to which the platform development charge is paid.\n    foundationAccount: AccountAddress.Type;\n}\n\nexport interface BlockSpecialEventFinalizationRewards {\n    tag: 'finalizationRewards';\n    // The amount awarded to each finalizer.\n    finalizationRewards?: BlockSpecialEventAccountAmount[];\n    // The remaining balance of the finalization reward account.\n    remainder?: CcdAmount.Type;\n}\n\nexport interface BlockSpecialEventBlockReward {\n    tag: 'blockReward';\n    // The total fees paid for transactions in the block.\n    transactionFees: CcdAmount.Type;\n    // The old balance of the GAS account.\n    oldGasAccount: CcdAmount.Type;\n    // The new balance of the GAS account.\n    newGasAccount: CcdAmount.Type;\n    // The amount awarded to the baker.\n    bakerReward: CcdAmount.Type;\n    // The amount awarded to the foundation.\n    foundationCharge: CcdAmount.Type;\n    // The baker of the block, who receives the award.\n    baker: AccountAddress.Type;\n    // The foundation account.\n    foundationAccount: AccountAddress.Type;\n}\n\nexport interface BlockSpecialEventPaydayFoundationReward {\n    tag: 'paydayFoundationReward';\n    // The account that got rewarded.\n    foundationAccount: AccountAddress.Type;\n    // The transaction fee reward at payday to the account.\n    developmentCharge: CcdAmount.Type;\n}\n\nexport interface BlockSpecialEventPaydayAccountReward {\n    tag: 'paydayAccountReward';\n    // The account that got rewarded.\n    account: AccountAddress.Type;\n    // The transaction fee reward at payday to the account.\n    transactionFees: CcdAmount.Type;\n    // The baking reward at payday to the account.\n    bakerReward: CcdAmount.Type;\n    // The finalization reward at payday to the account.\n    finalizationReward: CcdAmount.Type;\n}\n\nexport interface BlockSpecialEventBlockAccrueReward {\n    tag: 'blockAccrueReward';\n    // The total fees paid for transactions in the block.\n    transactionFees: CcdAmount.Type;\n    // The old balance of the GAS account.\n    oldGasAccount: CcdAmount.Type;\n    // The new balance of the GAS account.\n    newGasAccount: CcdAmount.Type;\n    // The amount awarded to the baker.\n    bakerReward: CcdAmount.Type;\n    // The amount awarded to the passive delegators.\n    passiveReward: CcdAmount.Type;\n    // The amount awarded to the foundation.\n    foundationCharge: CcdAmount.Type;\n    // The baker of the block, who will receive the award.\n    baker: BakerId;\n}\n\nexport interface BlockSpecialEventPaydayPoolReward {\n    tag: 'paydayPoolReward';\n    // The pool owner (passive delegators when not present).\n    poolOwner?: BakerId;\n    // Accrued transaction fees for pool.\n    transactionFees: CcdAmount.Type;\n    // Accrued baking rewards for pool.\n    bakerReward: CcdAmount.Type;\n    // Accrued finalization rewards for pool.\n    finalizationReward: CcdAmount.Type;\n}\n\nexport interface BlockSpecialEventAccountAmount {\n    // The key type\n    account: AccountAddress.Type;\n    // The value type\n    amount: CcdAmount.Type;\n}\n\n/**\n * A validator was suspended due to too many missed rounds.\n */\nexport interface BlockSpecialEventValidatorSuspended {\n    tag: 'validatorSuspended';\n    /** The validator that was suspended. */\n    bakerId: BakerId;\n    /** The account address of the validator. */\n    account: AccountAddress.Type;\n}\n\n/**\n * A validator was primed to be suspended at the next snapshot epoch due to\n * too many missed rounds.\n */\nexport interface BlockSpecialEventValidatorPrimedForSuspension {\n    tag: 'validatorPrimedForSuspension';\n    /** The validator that was primed for suspension. */\n    bakerId: BakerId;\n    /** The account address of the validator. */\n    account: AccountAddress.Type;\n}\n\n/**\n * Gets a list of {@link AccountAddress.Type} account addresses affected the {@link BlockSpecialEvent}.\n *\n * @param {BlockSpecialEvent} event - The block special event to check.\n *\n * @returns {AccountAddress.Type[]} List of account addresses affected by the event.\n */\nexport function specialEventAffectedAccounts(\n    event: Exclude<BlockSpecialEvent, BlockSpecialEventBlockAccrueReward | BlockSpecialEventPaydayPoolReward>\n): AccountAddress.Type[];\nexport function specialEventAffectedAccounts(\n    event: BlockSpecialEventBlockAccrueReward | BlockSpecialEventPaydayPoolReward\n): never[];\nexport function specialEventAffectedAccounts(event: BlockSpecialEvent): AccountAddress.Type[];\nexport function specialEventAffectedAccounts(event: BlockSpecialEvent): AccountAddress.Type[] {\n    switch (event.tag) {\n        case 'bakingRewards':\n            return event.bakingRewards.map((br) => br.account);\n        case 'finalizationRewards':\n            return event.finalizationRewards?.map((fr) => fr.account) ?? [];\n        case 'mint':\n        case 'paydayFoundationReward':\n            return [event.foundationAccount];\n        case 'paydayAccountReward':\n            return [event.account];\n        case 'blockReward': {\n            if (AccountAddress.equals(event.baker, event.foundationAccount)) {\n                return [event.baker];\n            }\n            return [event.baker, event.foundationAccount];\n        }\n        case 'validatorSuspended':\n        case 'validatorPrimedForSuspension':\n            return [event.account];\n        default:\n            return [];\n    }\n}\n","module.exports = require(\"node:crypto\");","import { ContractTransactionMetadata } from '../GenericContract.js';\nimport { ConcordiumGRPCClient } from '../grpc/index.js';\nimport { AccountSigner, signTransaction } from '../signHelpers.js';\nimport { AccountTransactionType, InitContractPayload, VersionedModuleSource } from '../types.js';\nimport * as BlockHash from './BlockHash.js';\nimport * as CcdAmount from './CcdAmount.js';\nimport * as ContractName from './ContractName.js';\nimport * as ModuleReference from './ModuleReference.js';\nimport * as Parameter from './Parameter.js';\nimport * as TransactionExpiry from './TransactionExpiry.js';\nimport * as TransactionHash from './TransactionHash.js';\n\n/**\n * An update transaction without header.\n */\nexport type ContractInitTransaction = {\n    /** The type of the transaction, which will always be of type {@link AccountTransactionType.InitContract} */\n    type: AccountTransactionType.InitContract;\n    /** The payload of the transaction, which will always be of type {@link InitContractPayload} */\n    payload: InitContractPayload;\n};\n\n/**\n * Internal class representing a smart contract module deployed on chain.\n *\n * The public type for this {@link ModuleClient} is exported separately to ensure\n * the constructor is only available from within this module.\n */\nclass ModuleClient {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __nominal = true;\n    constructor(\n        /** The gRPC connection used by this object */\n        public readonly grpcClient: ConcordiumGRPCClient,\n        /** The reference for this module */\n        public readonly moduleReference: ModuleReference.Type\n    ) {}\n}\n\n/**\n * Type representing a smart contract module deployed on chain.\n */\nexport type Type = ModuleClient;\nexport function instanceOf(value: unknown): value is ModuleClient {\n    return value instanceof ModuleClient;\n}\n\n/**\n * Create a new `GenericModule` instance for interacting with a smart contract module on chain.\n * The caller must ensure that the smart contract module is already deployed on chain.\n *\n * @param {ConcordiumGRPCClient} grpcClient - The GRPC client for accessing a node.\n * @param {ModuleReference} moduleReference - The reference of the deployed smart contract module.\n *\n * @returns {ModuleClient}\n */\nexport function createUnchecked(grpcClient: ConcordiumGRPCClient, moduleReference: ModuleReference.Type): ModuleClient {\n    return new ModuleClient(grpcClient, moduleReference);\n}\n\n/**\n * Create a new `GenericModule` instance for interacting with a smart contract module on chain.\n * This function ensures the module is already deployed on chain otherwise produces an error.\n *\n * @param {ConcordiumGRPCClient} grpcClient - The GRPC client for accessing a node.\n * @param {ModuleReference} moduleReference - The reference of the deployed smart contract module.\n *\n * @throws If failing to communicate with the concordium node or module reference does not correspond to a module on chain.\n *\n * @returns {ModuleClient}\n */\nexport async function create(\n    grpcClient: ConcordiumGRPCClient,\n    moduleReference: ModuleReference.Type\n): Promise<ModuleClient> {\n    const mod = new ModuleClient(grpcClient, moduleReference);\n    await checkOnChain(mod);\n    return mod;\n}\n\n/**\n * Check if this module is deployed to the chain.\n *\n * @param {ModuleClient} moduleClient The client for a smart contract module on chain.\n * @param {BlockHash.Type} [blockHash] Hash of the block to check information at. When not provided the last finalized block is used.\n *\n * @throws {RpcError} If failing to communicate with the concordium node or module is not deployed on chain.\n * @returns {boolean} Indicating whether the module is deployed on chain.\n */\nexport async function checkOnChain(moduleClient: ModuleClient, blockHash?: BlockHash.Type): Promise<void> {\n    await getModuleSource(moduleClient, blockHash);\n}\n\n/**\n * Get the module source of the deployed smart contract module.\n *\n * @param {ModuleClient} moduleClient The client for a smart contract module on chain.\n * @param {BlockHash.Type} [blockHash] Hash of the block to check information at. When not provided the last finalized block is used.\n *\n * @throws {RpcError} If failing to communicate with the concordium node or module not found.\n * @returns {VersionedModuleSource} Module source of the deployed smart contract module.\n */\nexport function getModuleSource(\n    moduleClient: ModuleClient,\n    blockHash?: BlockHash.Type\n): Promise<VersionedModuleSource> {\n    return moduleClient.grpcClient.getModuleSource(moduleClient.moduleReference, blockHash);\n}\n\n/**\n * Creates and sends transaction for initializing a smart contract `contractName` with parameter `input`.\n *\n * @param {ModuleClient} moduleClient The client for a smart contract module on chain.\n * @param {ContractName.Type} contractName - The name of the smart contract to instantiate (this is without the `init_` prefix).\n * @param {ContractTransactionMetadata} metadata - Metadata to be used for the transaction (with defaults).\n * @param {Parameter.Type} parameter - Input for for contract function.\n * @param {AccountSigner} signer - An object to use for signing the transaction.\n *\n * @throws If the query could not be invoked successfully.\n *\n * @returns {TransactionHash.Type} The transaction hash of the update transaction.\n */\nexport async function createAndSendInitTransaction(\n    moduleClient: ModuleClient,\n    contractName: ContractName.Type,\n    metadata: ContractTransactionMetadata,\n    parameter: Parameter.Type,\n    signer: AccountSigner\n): Promise<TransactionHash.Type> {\n    const payload: InitContractPayload = {\n        moduleRef: moduleClient.moduleReference,\n        amount: metadata.amount ?? CcdAmount.zero(),\n        initName: contractName,\n        maxContractExecutionEnergy: metadata.energy,\n        param: parameter,\n    };\n    const { nonce } = await moduleClient.grpcClient.getNextAccountNonce(metadata.senderAddress);\n    const header = {\n        expiry: metadata.expiry ?? TransactionExpiry.futureMinutes(5),\n        nonce: nonce,\n        sender: metadata.senderAddress,\n    };\n    const transaction = {\n        type: AccountTransactionType.InitContract,\n        header,\n        payload,\n    };\n    const signature = await signTransaction(transaction, signer);\n    return moduleClient.grpcClient.sendAccountTransaction(transaction, signature);\n}\n","'use strict'\n\nvar base58 = require('bs58')\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var payloadU8 = Uint8Array.from(payload)\n    var checksum = checksumFn(payloadU8)\n    var length = payloadU8.length + 4\n    var both = new Uint8Array(length)\n    both.set(payloadU8, 0)\n    both.set(checksum.subarray(0, 4), payloadU8.length)\n    return base58.encode(both, length)\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size\n// @generated from protobuf file \"v2/concordium/health.proto\" (package \"concordium.health\", syntax proto3)\n// tslint:disable\nimport { ServiceType } from \"@protobuf-ts/runtime-rpc\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * Parameters to the node health query. The default message gives a good\n * default.\n *\n * @generated from protobuf message concordium.health.NodeHealthRequest\n */\nexport interface NodeHealthRequest {\n}\n/**\n * Response to the health check. A return code of \"OK\" is used for success, and\n * errors are handled via RPC status codes\n *\n * @generated from protobuf message concordium.health.NodeHealthResponse\n */\nexport interface NodeHealthResponse {\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass NodeHealthRequest$Type extends MessageType<NodeHealthRequest> {\n    constructor() {\n        super(\"concordium.health.NodeHealthRequest\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.health.NodeHealthRequest\n */\nexport const NodeHealthRequest = new NodeHealthRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass NodeHealthResponse$Type extends MessageType<NodeHealthResponse> {\n    constructor() {\n        super(\"concordium.health.NodeHealthResponse\", []);\n    }\n}\n/**\n * @generated MessageType for protobuf message concordium.health.NodeHealthResponse\n */\nexport const NodeHealthResponse = new NodeHealthResponse$Type();\n/**\n * @generated ServiceType for protobuf service concordium.health.Health\n */\nexport const Health = new ServiceType(\"concordium.health.Health\", [\n    { name: \"Check\", options: {}, I: NodeHealthRequest, O: NodeHealthResponse }\n]);\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","// Functionality for working with the CIS4 standard\nexport * from '../cis4/index.js';\n","import { EncodedTokenModuleRejectReason, TokenId } from '../plt/index.js';\nimport { Address, BakerId, Base58String, HexString } from '../types.js';\nimport type * as CcdAmount from './CcdAmount.js';\nimport type * as ContractAddress from './ContractAddress.js';\nimport type * as InitName from './InitName.js';\nimport type * as ModuleReference from './ModuleReference.js';\nimport type * as Parameter from './Parameter.js';\nimport type * as ReceiveName from './ReceiveName.js';\n\n/*\n * An enum containing all the possible reject reasons that can be\n * received from a node as a response to a transaction submission.\n *\n * This should be kept in sync with the list of reject reasons\n * found here: https://github.com/Concordium/concordium-base/blob/main/haskell-src/Concordium/Types/Execution.hs\n */\nexport enum RejectReasonTag {\n    // Module not \"well formed\", meaning it is not a valid smart contract\n    ModuleNotWF = 'ModuleNotWF',\n    ModuleHashAlreadyExists = 'ModuleHashAlreadyExists',\n    InvalidAccountReference = 'InvalidAccountReference',\n    InvalidInitMethod = 'InvalidInitMethod',\n    InvalidReceiveMethod = 'InvalidReceiveMethod',\n    InvalidModuleReference = 'InvalidModuleReference',\n    InvalidContractAddress = 'InvalidContractAddress',\n    RuntimeFailure = 'RuntimeFailure',\n    AmountTooLarge = 'AmountTooLarge',\n    SerializationFailure = 'SerializationFailure',\n    OutOfEnergy = 'OutOfEnergy',\n    RejectedInit = 'RejectedInit',\n    RejectedReceive = 'RejectedReceive',\n    NonExistentRewardAccount = 'NonExistentRewardAccount',\n    InvalidProof = 'InvalidProof',\n    AlreadyABaker = 'AlreadyABaker',\n    NotABaker = 'NotABaker',\n    InsufficientBalanceForBakerStake = 'InsufficientBalanceForBakerStake',\n    StakeUnderMinimumThresholdForBaking = 'StakeUnderMinimumThresholdForBaking',\n    BakerInCooldown = 'BakerInCooldown',\n    DuplicateAggregationKey = 'DuplicateAggregationKey',\n    NonExistentCredentialID = 'NonExistentCredentialID',\n    KeyIndexAlreadyInUse = 'KeyIndexAlreadyInUse',\n    InvalidAccountThreshold = 'InvalidAccountThreshold',\n    InvalidCredentialKeySignThreshold = 'InvalidCredentialKeySignThreshold',\n    InvalidEncryptedAmountTransferProof = 'InvalidEncryptedAmountTransferProof',\n    InvalidTransferToPublicProof = 'InvalidTransferToPublicProof',\n    EncryptedAmountSelfTransfer = 'EncryptedAmountSelfTransfer',\n    InvalidIndexOnEncryptedTransfer = 'InvalidIndexOnEncryptedTransfer',\n    ZeroScheduledAmount = 'ZeroScheduledAmount',\n    NonIncreasingSchedule = 'NonIncreasingSchedule',\n    FirstScheduledReleaseExpired = 'FirstScheduledReleaseExpired',\n    ScheduledSelfTransfer = 'ScheduledSelfTransfer',\n    InvalidCredentials = 'InvalidCredentials',\n    DuplicateCredIDs = 'DuplicateCredIDs',\n    NonExistentCredIDs = 'NonExistentCredIDs',\n    RemoveFirstCredential = 'RemoveFirstCredential',\n    CredentialHolderDidNotSign = 'CredentialHolderDidNotSign',\n    NotAllowedMultipleCredentials = 'NotAllowedMultipleCredentials',\n    NotAllowedToReceiveEncrypted = 'NotAllowedToReceiveEncrypted',\n    NotAllowedToHandleEncrypted = 'NotAllowedToHandleEncrypted',\n    MissingBakerAddParameters = 'MissingBakerAddParameters',\n    FinalizationRewardCommissionNotInRange = 'FinalizationRewardCommissionNotInRange',\n    BakingRewardCommissionNotInRange = 'BakingRewardCommissionNotInRange',\n    TransactionFeeCommissionNotInRange = 'TransactionFeeCommissionNotInRange',\n    AlreadyADelegator = 'AlreadyADelegator',\n    InsufficientBalanceForDelegationStake = 'InsufficientBalanceForDelegationStake',\n    MissingDelegationAddParameters = 'MissingDelegationAddParameters',\n    InsufficientDelegationStake = 'InsufficientDelegationStake',\n    DelegatorInCooldown = 'DelegatorInCooldown',\n    NotADelegator = 'NotADelegator',\n    DelegationTargetNotABaker = 'DelegationTargetNotABaker',\n    StakeOverMaximumThresholdForPool = 'StakeOverMaximumThresholdForPool',\n    PoolWouldBecomeOverDelegated = 'PoolWouldBecomeOverDelegated',\n    PoolClosed = 'PoolClosed',\n    NonExistentTokenId = 'NonExistentTokenId',\n    TokenUpdateTransactionFailed = 'TokenUpdateTransactionFailed',\n}\n\nexport interface RejectedReceive {\n    tag: RejectReasonTag.RejectedReceive;\n    contractAddress: ContractAddress.Type;\n    receiveName: ReceiveName.Type;\n    rejectReason: number;\n    parameter: Parameter.Type;\n}\n\nexport interface RejectedInit {\n    tag: RejectReasonTag.RejectedInit;\n    rejectReason: number;\n}\n\nexport type SimpleRejectReasonTag =\n    | RejectReasonTag.ModuleNotWF\n    | RejectReasonTag.RuntimeFailure\n    | RejectReasonTag.SerializationFailure\n    | RejectReasonTag.OutOfEnergy\n    | RejectReasonTag.InvalidProof\n    | RejectReasonTag.InsufficientBalanceForBakerStake\n    | RejectReasonTag.StakeUnderMinimumThresholdForBaking\n    | RejectReasonTag.BakerInCooldown\n    | RejectReasonTag.NonExistentCredentialID\n    | RejectReasonTag.KeyIndexAlreadyInUse\n    | RejectReasonTag.InvalidAccountThreshold\n    | RejectReasonTag.InvalidCredentialKeySignThreshold\n    | RejectReasonTag.InvalidEncryptedAmountTransferProof\n    | RejectReasonTag.InvalidTransferToPublicProof\n    | RejectReasonTag.InvalidIndexOnEncryptedTransfer\n    | RejectReasonTag.ZeroScheduledAmount\n    | RejectReasonTag.NonIncreasingSchedule\n    | RejectReasonTag.FirstScheduledReleaseExpired\n    | RejectReasonTag.InvalidCredentials\n    | RejectReasonTag.RemoveFirstCredential\n    | RejectReasonTag.CredentialHolderDidNotSign\n    | RejectReasonTag.NotAllowedMultipleCredentials\n    | RejectReasonTag.NotAllowedToReceiveEncrypted\n    | RejectReasonTag.NotAllowedToHandleEncrypted\n    | RejectReasonTag.MissingBakerAddParameters\n    | RejectReasonTag.FinalizationRewardCommissionNotInRange\n    | RejectReasonTag.BakingRewardCommissionNotInRange\n    | RejectReasonTag.TransactionFeeCommissionNotInRange\n    | RejectReasonTag.AlreadyADelegator\n    | RejectReasonTag.InsufficientBalanceForDelegationStake\n    | RejectReasonTag.MissingDelegationAddParameters\n    | RejectReasonTag.InsufficientDelegationStake\n    | RejectReasonTag.DelegatorInCooldown\n    | RejectReasonTag.StakeOverMaximumThresholdForPool\n    | RejectReasonTag.PoolWouldBecomeOverDelegated\n    | RejectReasonTag.PoolClosed;\n\nexport type ModuleRefRejectReasonTag = RejectReasonTag.ModuleHashAlreadyExists | RejectReasonTag.InvalidModuleReference;\n\nexport type AccountAddressRejectReasonTag =\n    | RejectReasonTag.InvalidAccountReference\n    | RejectReasonTag.NotADelegator\n    | RejectReasonTag.NonExistentRewardAccount\n    | RejectReasonTag.NotABaker\n    | RejectReasonTag.ScheduledSelfTransfer\n    | RejectReasonTag.EncryptedAmountSelfTransfer;\n\nexport type StringRejectReasonTag =\n    | ModuleRefRejectReasonTag\n    | AccountAddressRejectReasonTag\n    | RejectReasonTag.DuplicateAggregationKey;\n\nexport type TokenRejectReasonTag = RejectReasonTag.NonExistentTokenId | RejectReasonTag.TokenUpdateTransactionFailed;\n\nexport interface StringRejectReason {\n    tag: StringRejectReasonTag;\n    contents: HexString | Base58String;\n}\nexport type BakerIdRejectReasonTag = RejectReasonTag.AlreadyABaker | RejectReasonTag.DelegationTargetNotABaker;\n\nexport interface BakerIdRejectReason {\n    tag: BakerIdRejectReasonTag;\n    contents: BakerId;\n}\n\nexport interface SimpleRejectReason {\n    tag: SimpleRejectReasonTag;\n}\n\nexport interface InvalidReceiveMethod {\n    tag: RejectReasonTag.InvalidReceiveMethod;\n    contents: {\n        moduleRef: ModuleReference.Type;\n        receiveName: ReceiveName.Type;\n    };\n}\n\nexport interface InvalidInitMethod {\n    tag: RejectReasonTag.InvalidInitMethod;\n    contents: {\n        moduleRef: ModuleReference.Type;\n        initName: InitName.Type;\n    };\n}\n\nexport interface AmountTooLarge {\n    tag: RejectReasonTag.AmountTooLarge;\n    contents: {\n        address: Address;\n        amount: CcdAmount.Type;\n    };\n}\n\nexport interface InvalidContractAddress {\n    tag: RejectReasonTag.InvalidContractAddress;\n    contents: ContractAddress.Type;\n}\n\nexport type CredIdsRejectReasonTag = RejectReasonTag.DuplicateCredIDs | RejectReasonTag.NonExistentCredIDs;\n\nexport interface CredIdsRejectReason {\n    tag: CredIdsRejectReasonTag;\n    contents: string[];\n}\n\nexport type NonExistingTokenIdRejectReason = {\n    tag: RejectReasonTag.NonExistentTokenId;\n    /** The non-existent token ID that caused the rejection */\n    contents: TokenId.Type;\n};\n\nexport type TokenUpdateTransactionFailedRejectReason = {\n    tag: RejectReasonTag.TokenUpdateTransactionFailed;\n    /** The specific token module reject reason that caused the transaction to fail */\n    contents: EncodedTokenModuleRejectReason;\n};\n\nexport type TokenRejectReason = NonExistingTokenIdRejectReason | TokenUpdateTransactionFailedRejectReason;\n\ntype RejectReasonCommon =\n    | SimpleRejectReason\n    | StringRejectReason\n    | RejectedInit\n    | RejectedReceive\n    | InvalidContractAddress\n    | CredIdsRejectReason;\n\nexport type RejectReason =\n    | RejectReasonCommon\n    | BakerIdRejectReason\n    | InvalidReceiveMethod\n    | InvalidInitMethod\n    | AmountTooLarge\n    | TokenRejectReason;\n","export {\n    Type,\n    JSON,\n    fromJSON,\n    fromBytes,\n    fromString,\n    toBytes,\n    Err,\n    ErrorType,\n    instanceOf,\n    equals,\n} from '../../plt/TokenId.js';\n","import { Ratio } from './types.js';\n\n/**\n * Collapses the Fraction into a single number.\n * If the denominator does not divide the numerator, the function rounds up;\n */\nexport function collapseRatio({ numerator, denominator }: Ratio): bigint {\n    const quotient = numerator / denominator;\n    if (numerator % denominator === 0n) {\n        return quotient;\n    }\n    return 1n + quotient;\n}\n\n/**\n * Multiply a ratio with a bigint.\n * @param factor a number which should be multiplied with the ratio. If given a string, it will attempt to parse it to a bigint.\n * @returns the product as a ratio.\n */\nexport function multiplyRatio({ numerator, denominator }: Ratio, factor: bigint | string): Ratio {\n    return {\n        numerator: numerator * BigInt(factor),\n        denominator,\n    };\n}\n","import { Buffer } from 'buffer/index.js';\n\nimport { HexString } from '../types.js';\nimport { isHex } from '../util.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.CredentialRegistrationId;\n/**\n * @deprecated\n */\nexport type Serializable = string;\n\n/**\n * Representation of a credential registration id, which enforces that it:\n * - Is a valid Hex string\n * - Has length exactly 96, because a credId is 48 bytes.\n * - Checks the first bit is 1, which indicates that the value represents a compressed BLS12-381 curve point.\n */\nclass CredentialRegistrationId {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** Representation of a credential registration id */\n        public readonly credId: string\n    ) {}\n\n    /**\n     * Get a string representation of the credential registration id.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.credId;\n    }\n\n    /**\n     * Get a JSON-serializable representation of the credential registration id.\n     * @returns {string} The JSON-serializable representation.\n     */\n    public toJSON(): string {\n        return this.credId;\n    }\n}\n\n/**\n * Converts a `string` to a credential registration id.\n * @param {string} json The JSON representation of the credential registration id.\n * @throws If the provided input is: not a valid hex string, not of exactly 96 characters, the first bit is not 1.\n * @returns {CredentialRegistrationId} The credential registration id.\n */\nexport function fromJSON(json: string): CredentialRegistrationId {\n    return fromHexString(json);\n}\n\n/**\n * Representation of a credential registration id, which enforces that it:\n * - Is a valid Hex string\n * - Has length exactly 96, because a credId is 48 bytes.\n * - Checks the first bit is 1, which indicates that the value represents a compressed BLS12-381 curve point.\n */\nexport type Type = CredentialRegistrationId;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is CredentialRegistrationId {\n    return value instanceof CredentialRegistrationId;\n}\n\n/**\n * Construct a CredentialRegistrationId from a hex string.\n * @param {HexString} credId The hex encoding of the credential registration id.\n * @throws If the provided input is: not a valid hex string, not of exactly 96 characters, the first bit is not 1.\n * @returns {CredentialRegistrationId}\n */\nexport function fromHexString(credId: HexString): CredentialRegistrationId {\n    if (credId.length !== 96) {\n        throw new Error('The provided credId ' + credId + ' is invalid as its length was not 96');\n    }\n    if (!isHex(credId)) {\n        throw new Error('The provided credId ' + credId + ' does not represent a hexidecimal value');\n    }\n    // Check that the first bit is 1\n    if ((parseInt(credId.substring(0, 2), 16) & 0b10000000) === 0) {\n        throw new Error('The provided credId ' + credId + 'does not represent a compressed BLS12-381 point');\n    }\n    return new CredentialRegistrationId(credId);\n}\n\n/**\n * Get the hex string representation of the credential registatration ID.\n * @param {CredentialRegistrationId} cred The credential registration ID.\n * @returns {HexString} The hex encoding.\n */\nexport function toHexString(cred: CredentialRegistrationId): HexString {\n    return cred.credId;\n}\n\n/**\n * Get the byte representation of the credential registatration ID.\n * @param {CredentialRegistrationId} cred The credential registration ID.\n * @returns {Uint8Array} Buffer with byte representation.\n */\nexport function toBuffer(cred: CredentialRegistrationId): Uint8Array {\n    return Buffer.from(cred.credId, 'hex');\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode CredentialRegistrationId.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: CredentialRegistrationId): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toHexString(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromHexString);\n","export {\n    Type,\n    fromJSON,\n    instanceOf,\n    fromMicroCcd,\n    toMicroCcd,\n    toCcd,\n    zero,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    fromTypedJSON,\n    toSchemaValue,\n    fromSchemaValue,\n    SchemaValue,\n    fromCcd,\n    ccdToMicroCcd,\n    microCcdToCcd,\n    toSerializable,\n    fromSerializable,\n} from '../../types/CcdAmount.js';\n","// @generated by protobuf-ts 2.9.1 with parameter optimize_code_size\n// @generated from protobuf file \"v2/concordium/service.proto\" (package \"concordium.v2\", syntax proto3)\n// tslint:disable\nimport { DryRunResponse } from \"./types.js\";\nimport { DryRunRequest } from \"./types.js\";\nimport { ConsensusDetailedStatus } from \"./types.js\";\nimport { ConsensusDetailedStatusQuery } from \"./types.js\";\nimport { WinningBaker } from \"./types.js\";\nimport { EpochRequest } from \"./types.js\";\nimport { BlockCertificates } from \"./types.js\";\nimport { BakerRewardPeriodInfo } from \"./types.js\";\nimport { BlockItem } from \"./types.js\";\nimport { BlockFinalizationSummary } from \"./types.js\";\nimport { ChainParameters } from \"./types.js\";\nimport { AccountTransactionSignHash } from \"./types.js\";\nimport { PreAccountTransaction } from \"./types.js\";\nimport { SendBlockItemRequest } from \"./types.js\";\nimport { NodeInfo } from \"./types.js\";\nimport { PeersInfo } from \"./types.js\";\nimport { DumpRequest } from \"./types.js\";\nimport { BannedPeer } from \"./types.js\";\nimport { PeerToBan } from \"./types.js\";\nimport { BannedPeers } from \"./types.js\";\nimport { IpSocketAddress } from \"./types.js\";\nimport { Timestamp } from \"./types.js\";\nimport { AccountIndex } from \"./types.js\";\nimport { AccountPending } from \"./types.js\";\nimport { NextUpdateSequenceNumbers } from \"./types.js\";\nimport { PendingUpdate } from \"./types.js\";\nimport { BlockSpecialEvent } from \"./types.js\";\nimport { BlockItemSummary } from \"./types.js\";\nimport { ArInfo } from \"./types.js\";\nimport { IpInfo } from \"./types.js\";\nimport { ElectionInfo } from \"./types.js\";\nimport { Branch } from \"./types.js\";\nimport { DelegatorRewardPeriodInfo } from \"./types.js\";\nimport { DelegatorInfo } from \"./types.js\";\nimport { GetPoolDelegatorsRequest } from \"./types.js\";\nimport { InvokeInstanceResponse } from \"./types.js\";\nimport { InvokeInstanceRequest } from \"./types.js\";\nimport { TokenomicsInfo } from \"./types.js\";\nimport { BlocksAtHeightResponse } from \"./types.js\";\nimport { BlocksAtHeightRequest } from \"./types.js\";\nimport { PassiveDelegationInfo } from \"./types.js\";\nimport { PoolInfoResponse } from \"./types.js\";\nimport { PoolInfoRequest } from \"./types.js\";\nimport { BakerId } from \"./types.js\";\nimport { BlockInfo } from \"./types.js\";\nimport { CryptographicParameters } from \"./types.js\";\nimport { BlockItemStatus } from \"./types.js\";\nimport { TransactionHash } from \"./types.js\";\nimport { ConsensusInfo } from \"./types.js\";\nimport { NextAccountSequenceNumber } from \"./types.js\";\nimport { InstanceStateValueAtKey } from \"./types.js\";\nimport { InstanceStateLookupRequest } from \"./types.js\";\nimport { InstanceStateKVPair } from \"./types.js\";\nimport { InstanceInfo } from \"./types.js\";\nimport { InstanceInfoRequest } from \"./types.js\";\nimport { ContractAddress } from \"./types.js\";\nimport { VersionedModuleSource } from \"./types.js\";\nimport { ModuleSourceRequest } from \"./types.js\";\nimport { BlockHash } from \"./types.js\";\nimport { AncestorsRequest } from \"./types.js\";\nimport { ModuleRef } from \"./types.js\";\nimport { TokenId } from \"./protocol-level-tokens.js\";\nimport { AccountAddress } from \"./kernel.js\";\nimport { BlockHashInput } from \"./types.js\";\nimport { TokenInfo } from \"./types.js\";\nimport { TokenInfoRequest } from \"./types.js\";\nimport { AccountInfo } from \"./types.js\";\nimport { AccountInfoRequest } from \"./types.js\";\nimport { FinalizedBlockInfo } from \"./types.js\";\nimport { ArrivedBlockInfo } from \"./types.js\";\nimport { Empty } from \"./types.js\";\nimport { ServiceType } from \"@protobuf-ts/runtime-rpc\";\n/**\n * @generated ServiceType for protobuf service concordium.v2.Queries\n */\nexport const Queries = new ServiceType(\"concordium.v2.Queries\", [\n    { name: \"GetBlocks\", serverStreaming: true, options: {}, I: Empty, O: ArrivedBlockInfo },\n    { name: \"GetFinalizedBlocks\", serverStreaming: true, options: {}, I: Empty, O: FinalizedBlockInfo },\n    { name: \"GetAccountInfo\", options: {}, I: AccountInfoRequest, O: AccountInfo },\n    { name: \"GetTokenInfo\", options: {}, I: TokenInfoRequest, O: TokenInfo },\n    { name: \"GetAccountList\", serverStreaming: true, options: {}, I: BlockHashInput, O: AccountAddress },\n    { name: \"GetTokenList\", serverStreaming: true, options: {}, I: BlockHashInput, O: TokenId },\n    { name: \"GetModuleList\", serverStreaming: true, options: {}, I: BlockHashInput, O: ModuleRef },\n    { name: \"GetAncestors\", serverStreaming: true, options: {}, I: AncestorsRequest, O: BlockHash },\n    { name: \"GetModuleSource\", options: {}, I: ModuleSourceRequest, O: VersionedModuleSource },\n    { name: \"GetInstanceList\", serverStreaming: true, options: {}, I: BlockHashInput, O: ContractAddress },\n    { name: \"GetInstanceInfo\", options: {}, I: InstanceInfoRequest, O: InstanceInfo },\n    { name: \"GetInstanceState\", serverStreaming: true, options: {}, I: InstanceInfoRequest, O: InstanceStateKVPair },\n    { name: \"InstanceStateLookup\", options: {}, I: InstanceStateLookupRequest, O: InstanceStateValueAtKey },\n    { name: \"GetNextAccountSequenceNumber\", options: {}, I: AccountAddress, O: NextAccountSequenceNumber },\n    { name: \"GetConsensusInfo\", options: {}, I: Empty, O: ConsensusInfo },\n    { name: \"GetBlockItemStatus\", options: {}, I: TransactionHash, O: BlockItemStatus },\n    { name: \"GetCryptographicParameters\", options: {}, I: BlockHashInput, O: CryptographicParameters },\n    { name: \"GetBlockInfo\", options: {}, I: BlockHashInput, O: BlockInfo },\n    { name: \"GetBakerList\", serverStreaming: true, options: {}, I: BlockHashInput, O: BakerId },\n    { name: \"GetPoolInfo\", options: {}, I: PoolInfoRequest, O: PoolInfoResponse },\n    { name: \"GetPassiveDelegationInfo\", options: {}, I: BlockHashInput, O: PassiveDelegationInfo },\n    { name: \"GetBlocksAtHeight\", options: {}, I: BlocksAtHeightRequest, O: BlocksAtHeightResponse },\n    { name: \"GetTokenomicsInfo\", options: {}, I: BlockHashInput, O: TokenomicsInfo },\n    { name: \"InvokeInstance\", options: {}, I: InvokeInstanceRequest, O: InvokeInstanceResponse },\n    { name: \"GetPoolDelegators\", serverStreaming: true, options: {}, I: GetPoolDelegatorsRequest, O: DelegatorInfo },\n    { name: \"GetPoolDelegatorsRewardPeriod\", serverStreaming: true, options: {}, I: GetPoolDelegatorsRequest, O: DelegatorRewardPeriodInfo },\n    { name: \"GetPassiveDelegators\", serverStreaming: true, options: {}, I: BlockHashInput, O: DelegatorInfo },\n    { name: \"GetPassiveDelegatorsRewardPeriod\", serverStreaming: true, options: {}, I: BlockHashInput, O: DelegatorRewardPeriodInfo },\n    { name: \"GetBranches\", options: {}, I: Empty, O: Branch },\n    { name: \"GetElectionInfo\", options: {}, I: BlockHashInput, O: ElectionInfo },\n    { name: \"GetIdentityProviders\", serverStreaming: true, options: {}, I: BlockHashInput, O: IpInfo },\n    { name: \"GetAnonymityRevokers\", serverStreaming: true, options: {}, I: BlockHashInput, O: ArInfo },\n    { name: \"GetAccountNonFinalizedTransactions\", serverStreaming: true, options: {}, I: AccountAddress, O: TransactionHash },\n    { name: \"GetBlockTransactionEvents\", serverStreaming: true, options: {}, I: BlockHashInput, O: BlockItemSummary },\n    { name: \"GetBlockSpecialEvents\", serverStreaming: true, options: {}, I: BlockHashInput, O: BlockSpecialEvent },\n    { name: \"GetBlockPendingUpdates\", serverStreaming: true, options: {}, I: BlockHashInput, O: PendingUpdate },\n    { name: \"GetNextUpdateSequenceNumbers\", options: {}, I: BlockHashInput, O: NextUpdateSequenceNumbers },\n    { name: \"GetScheduledReleaseAccounts\", serverStreaming: true, options: {}, I: BlockHashInput, O: AccountPending },\n    { name: \"GetCooldownAccounts\", serverStreaming: true, options: {}, I: BlockHashInput, O: AccountPending },\n    { name: \"GetPreCooldownAccounts\", serverStreaming: true, options: {}, I: BlockHashInput, O: AccountIndex },\n    { name: \"GetPrePreCooldownAccounts\", serverStreaming: true, options: {}, I: BlockHashInput, O: AccountIndex },\n    { name: \"GetBakerEarliestWinTime\", options: {}, I: BakerId, O: Timestamp },\n    { name: \"Shutdown\", options: {}, I: Empty, O: Empty },\n    { name: \"PeerConnect\", options: {}, I: IpSocketAddress, O: Empty },\n    { name: \"PeerDisconnect\", options: {}, I: IpSocketAddress, O: Empty },\n    { name: \"GetBannedPeers\", options: {}, I: Empty, O: BannedPeers },\n    { name: \"BanPeer\", options: {}, I: PeerToBan, O: Empty },\n    { name: \"UnbanPeer\", options: {}, I: BannedPeer, O: Empty },\n    { name: \"DumpStart\", options: {}, I: DumpRequest, O: Empty },\n    { name: \"DumpStop\", options: {}, I: Empty, O: Empty },\n    { name: \"GetPeersInfo\", options: {}, I: Empty, O: PeersInfo },\n    { name: \"GetNodeInfo\", options: {}, I: Empty, O: NodeInfo },\n    { name: \"SendBlockItem\", options: {}, I: SendBlockItemRequest, O: TransactionHash },\n    { name: \"GetAccountTransactionSignHash\", options: {}, I: PreAccountTransaction, O: AccountTransactionSignHash },\n    { name: \"GetBlockChainParameters\", options: {}, I: BlockHashInput, O: ChainParameters },\n    { name: \"GetBlockFinalizationSummary\", options: {}, I: BlockHashInput, O: BlockFinalizationSummary },\n    { name: \"GetBlockItems\", serverStreaming: true, options: {}, I: BlockHashInput, O: BlockItem },\n    { name: \"GetBakersRewardPeriod\", serverStreaming: true, options: {}, I: BlockHashInput, O: BakerRewardPeriodInfo },\n    { name: \"GetBlockCertificates\", options: {}, I: BlockHashInput, O: BlockCertificates },\n    { name: \"GetWinningBakersEpoch\", serverStreaming: true, options: {}, I: EpochRequest, O: WinningBaker },\n    { name: \"GetFirstBlockEpoch\", options: {}, I: EpochRequest, O: BlockHash },\n    { name: \"GetConsensusDetailedStatus\", options: {}, I: ConsensusDetailedStatusQuery, O: ConsensusDetailedStatus },\n    { name: \"DryRun\", serverStreaming: true, clientStreaming: true, options: {}, I: DryRunRequest, O: DryRunResponse }\n]);\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","export {\n    Type,\n    instanceOf,\n    fromDate,\n    toDate,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    toSerializable,\n    fromSerializable,\n    SchemaValue,\n    toSchemaValue,\n    fromSchemaValue,\n    fromMillis,\n    futureMinutes,\n} from '../../types/Timestamp.js';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n//# sourceMappingURL=_u64.js.map","import { Buffer } from 'buffer/index.js';\nimport { registerEncoder } from 'cbor2/encoder';\n\nimport type { HexString } from '../types.js';\nimport { cborDecode, cborEncode } from '../types/cbor.js';\nimport { Cbor } from './index.js';\n\n/** The JSON representation of a {@linkcode Type} */\nexport type JSON = {\n    /** The inner url */\n    url: string;\n    /** The checksum SHA-256 of the URL */\n    checksumSha256?: HexString;\n    /** Any additional values. These are hex representations of CBOR encoded values. */\n    _additional?: Record<string, HexString>;\n};\n\n/** The intermediary CBOR representation of a {@linkcode Type} */\nexport type CBOR = {\n    /** The inner url */\n    url: string;\n    /** The checksum SHA-256 of the URL */\n    checksumSha256?: Uint8Array;\n    /**\n     * Any additional values. These are CBOR intermediary representations of values and might include custom tags if\n     * not handled by adding decoders for these.\n     */\n    [key: string]: unknown;\n};\n\n/**\n * Protocol level token (PLT) metadata URL.\n */\nclass TokenMetadataUrl {\n    #nominal = true;\n\n    /**\n     * Constructs a new TokenMetadataUrl instance.\n     */\n    constructor(\n        /** The inner url */\n        public readonly url: string,\n        /** The checksum SHA-256 of the URL */\n        public readonly checksumSha256?: Uint8Array,\n        /**\n         * Additional metadata url fields. Any keys in this object must not collide with the explicit fields for the\n         * type.\n         */\n        public readonly additional?: Record<string, unknown>\n    ) {}\n\n    /**\n     * Get a string representation of the token metadata URL.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.url;\n    }\n\n    /**\n     * Get a JSON-serializable representation of the token metadata URL. This is called implicitly when serialized with JSON.stringify.\n     * @returns {JSON} The JSON representation.\n     */\n    public toJSON(): JSON {\n        let url: JSON = { url: this.url };\n        if (this.checksumSha256 !== undefined) {\n            url.checksumSha256 = Buffer.from(this.checksumSha256).toString('hex');\n        }\n        if (this.additional !== undefined) {\n            const pairs = Object.entries(this.additional).map(([key, value]) => [key, Cbor.encode(value).toJSON()]);\n            url._additional = Object.fromEntries(pairs);\n        }\n        return url;\n    }\n}\n\n/**\n * Protocol level token (PLT) metadata URL.\n */\nexport type Type = TokenMetadataUrl;\n\n/**\n * Create a protocol level token metadata URL.\n *\n * @param {string} url - The URL of the token metadata.\n * @param {Uint8Array} [checksumSha256] - The SHA-256 checksum of the URL.\n * @param {Record<string, unknown>} [additional] - Additional metadata fields.\n * @returns {TokenMetadataUrl} A new token metadata URL instance.\n */\nexport function create(\n    url: string,\n    checksumSha256?: Uint8Array,\n    additional?: Record<string, unknown>\n): TokenMetadataUrl {\n    return new TokenMetadataUrl(url, checksumSha256, additional);\n}\n\n/**\n * Create a protocol level token metadata URL from a string value. If the url should be\n * accompanied by a checksum or any other additional values, use {@linkcode create} instead.\n *\n * @param {string} url - The string to create the token ID from.\n * @returns {TokenMetadataUrl} A new token metadata URL instance.\n */\nexport function fromString(url: string): TokenMetadataUrl {\n    return new TokenMetadataUrl(url);\n}\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is TokenMetadataUrl {\n    return value instanceof TokenMetadataUrl;\n}\n\n/**\n * Converts {@linkcode JSON} to a token amount.\n *\n * @param {string} json The JSON representation of token metadata URL.\n * @returns {TokenMetadataUrl} The token metadata URL.\n */\nexport function fromJSON({ url, checksumSha256, _additional }: JSON): TokenMetadataUrl {\n    let additional: Record<string, unknown> | undefined;\n    if (_additional !== undefined) {\n        const pairs = Object.entries(_additional).map(([key, value]) => [key, Cbor.decode(Cbor.fromJSON(value))]);\n        additional = Object.fromEntries(pairs);\n    }\n\n    const checksumSha256Parsed =\n        checksumSha256 !== undefined ? Uint8Array.from(Buffer.from(checksumSha256, 'hex')) : undefined;\n    return create(url, checksumSha256Parsed, additional);\n}\n\n/**\n * Converts a TokenMetadataUrl object to it's intermediary {@linkcode CBOR} representation.\n *\n * @param tokenMetadataUrl - The TokenMetadataUrl object to convert.\n * @returns A CBOR-compatible value representation of the TokenMetadataUrl.\n */\nexport function toCBORValue(tokenMetadataUrl: TokenMetadataUrl): CBOR {\n    let cbor: CBOR = { url: tokenMetadataUrl.url };\n    if (tokenMetadataUrl.checksumSha256 !== undefined) {\n        cbor.checksumSha256 = tokenMetadataUrl.checksumSha256;\n    }\n    if (tokenMetadataUrl.additional) {\n        cbor = { ...cbor, ...tokenMetadataUrl.additional };\n    }\n    return cbor;\n}\n\n/**\n * Encodes a TokenMetadataUrl object into a CBOR-formatted Uint8Array.\n *\n * @param tokenMetadataUrl - The TokenMetadataUrl object to encode.\n * @returns A Uint8Array containing the CBOR encoding of the TokenMetadataUrl.\n */\nexport function toCBOR(tokenMetadataUrl: TokenMetadataUrl): Uint8Array {\n    return cborEncode(toCBORValue(tokenMetadataUrl));\n}\n\n/**\n * Constructs a TokenMetadataUrl object from it's {@linkcode CBOR}.\n *\n * @param value - The CBOR-compatible value to decode. The expected format is {@linkcode CBOR}.\n * @returns The decoded TokenMetadataUrl object.\n * @throws Will throw an error if the value is not a valid CBOR representation of TokenMetadataUrl.\n */\nexport function fromCBORValue(value: unknown): TokenMetadataUrl {\n    if (typeof value !== 'object' || value === null) {\n        throw new Error('Invalid CBOR value for TokenMetadataUrl');\n    }\n    if (!('url' in value) || typeof value.url !== 'string') {\n        throw new Error('Missing or invalid \"url\" field in TokenMetadataUrl');\n    }\n    // check that checksumSha256 is either undefined or a Uint8Array of length 32\n    if (\n        'checksumSha256' in value &&\n        (!(value.checksumSha256 instanceof Uint8Array) || value.checksumSha256.length !== 32)\n    ) {\n        throw new Error('Invalid \"checksumSha256\" field in TokenMetadataUrl');\n    }\n\n    const { url, checksumSha256, ...other } = value as CBOR;\n    let additional: Record<string, unknown> | undefined;\n    if (Object.keys(other).some((key) => typeof key !== 'string')) {\n        throw new Error('Invalid additional fields in TokenMetadataUrl. Can only contain string keys.');\n    }\n    if (Object.keys(other).length > 0) {\n        additional = other;\n    }\n    return create(url, checksumSha256, additional);\n}\n\n/**\n * Decodes a CBOR-encoded Uint8Array into a TokenMetadataUrl object.\n *\n * @param cbor - The CBOR-encoded Uint8Array to decode.\n * @returns The decoded TokenMetadataUrl object.\n * @throws Will throw an error if the CBOR data is not a valid representation of TokenMetadataUrl.\n */\nexport function fromCBOR(cbor: Uint8Array): TokenMetadataUrl {\n    return fromCBORValue(cborDecode(cbor));\n}\n\n/**\n * Registers a CBOR encoder for the TokenMetadataUrl type with the `cbor2` library.\n * This allows TokenMetadataUrl instances to be automatically encoded when used with\n * the `cbor2` library's encode function.\n *\n * @returns {void}\n * @example\n * // Register the encoder\n * registerCBOREncoder();\n * // Now TokenMetadataUrl instances can be encoded directly\n * const encoded = encode(myTokenMetadataUrl);\n */\nexport function registerCBOREncoder(): void {\n    registerEncoder(TokenMetadataUrl, (value) => [NaN, toCBORValue(value)]);\n}\n","import{MT as s,NUMBYTES as l,SYMS as d}from\"./constants.js\";import{base64ToBytes as m,hexToU8 as b,subarrayRanges as u}from\"./utils.js\";import{Simple as E}from\"./simple.js\";import{parseHalf as g}from\"./float.js\";const p=new TextDecoder(\"utf8\",{fatal:!0,ignoreBOM:!0});class y{static defaultOptions={maxDepth:1024,encoding:\"hex\",requirePreferred:!1};#t;#r;#e=0;#i;constructor(t,r){if(this.#i={...y.defaultOptions,...r},typeof t==\"string\")switch(this.#i.encoding){case\"hex\":this.#t=b(t);break;case\"base64\":this.#t=m(t);break;default:throw new TypeError(`Encoding not implemented: \"${this.#i.encoding}\"`)}else this.#t=t;this.#r=new DataView(this.#t.buffer,this.#t.byteOffset,this.#t.byteLength)}toHere(t){return u(this.#t,t,this.#e)}*[Symbol.iterator](){if(yield*this.#n(0),this.#e!==this.#t.length)throw new Error(\"Extra data in input\")}*#n(t){if(t++>this.#i.maxDepth)throw new Error(`Maximum depth ${this.#i.maxDepth} exceeded`);const r=this.#e,c=this.#r.getUint8(this.#e++),i=c>>5,n=c&31;let e=n,f=!1,a=0;switch(n){case l.ONE:if(a=1,e=this.#r.getUint8(this.#e),i===s.SIMPLE_FLOAT){if(e<32)throw new Error(`Invalid simple encoding in extra byte: ${e}`);f=!0}else if(this.#i.requirePreferred&&e<24)throw new Error(`Unexpectedly long integer encoding (1) for ${e}`);break;case l.TWO:if(a=2,i===s.SIMPLE_FLOAT)e=g(this.#t,this.#e);else if(e=this.#r.getUint16(this.#e,!1),this.#i.requirePreferred&&e<=255)throw new Error(`Unexpectedly long integer encoding (2) for ${e}`);break;case l.FOUR:if(a=4,i===s.SIMPLE_FLOAT)e=this.#r.getFloat32(this.#e,!1);else if(e=this.#r.getUint32(this.#e,!1),this.#i.requirePreferred&&e<=65535)throw new Error(`Unexpectedly long integer encoding (4) for ${e}`);break;case l.EIGHT:{if(a=8,i===s.SIMPLE_FLOAT)e=this.#r.getFloat64(this.#e,!1);else if(e=this.#r.getBigUint64(this.#e,!1),e<=Number.MAX_SAFE_INTEGER&&(e=Number(e)),this.#i.requirePreferred&&e<=4294967295)throw new Error(`Unexpectedly long integer encoding (8) for ${e}`);break}case 28:case 29:case 30:throw new Error(`Additional info not implemented: ${n}`);case l.INDEFINITE:switch(i){case s.POS_INT:case s.NEG_INT:case s.TAG:throw new Error(`Invalid indefinite encoding for MT ${i}`);case s.SIMPLE_FLOAT:yield[i,n,d.BREAK,r,0];return}e=1/0;break;default:f=!0}switch(this.#e+=a,i){case s.POS_INT:yield[i,n,e,r,a];break;case s.NEG_INT:yield[i,n,typeof e==\"bigint\"?-1n-e:-1-Number(e),r,a];break;case s.BYTE_STRING:e===1/0?yield*this.#s(i,t,r):yield[i,n,this.#a(e),r,e];break;case s.UTF8_STRING:e===1/0?yield*this.#s(i,t,r):yield[i,n,p.decode(this.#a(e)),r,e];break;case s.ARRAY:if(e===1/0)yield*this.#s(i,t,r,!1);else{const o=Number(e);yield[i,n,o,r,a];for(let h=0;h<o;h++)yield*this.#n(t+1)}break;case s.MAP:if(e===1/0)yield*this.#s(i,t,r,!1);else{const o=Number(e);yield[i,n,o,r,a];for(let h=0;h<o;h++)yield*this.#n(t),yield*this.#n(t)}break;case s.TAG:yield[i,n,e,r,a],yield*this.#n(t);break;case s.SIMPLE_FLOAT:{const o=e;f&&(e=E.create(Number(e))),yield[i,n,e,r,o];break}}}#a(t){const r=u(this.#t,this.#e,this.#e+=t);if(r.length!==t)throw new Error(`Unexpected end of stream reading ${t} bytes, got ${r.length}`);return r}*#s(t,r,c,i=!0){for(yield[t,l.INDEFINITE,1/0,c,1/0];;){const n=this.#n(r),e=n.next(),[f,a,o]=e.value;if(o===d.BREAK){yield e.value,n.next();return}if(i){if(f!==t)throw new Error(`Unmatched major type.  Expected ${t}, got ${f}.`);if(a===l.INDEFINITE)throw new Error(\"New stream started in typed stream\")}yield e.value,yield*n}}}export{y as DecodeStream};\n","export {\n    Type,\n    instanceOf,\n    toString,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    fromJSON,\n    fromStringUnchecked,\n    fromString,\n    fromContractName,\n} from '../../types/InitName.js';\n","// lookup table from base64 character to byte\nlet encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\n/**\n * Decodes a base64 string to a byte array.\n *\n * - ignores white-space, including line breaks and tabs\n * - allows inner padding (can decode concatenated base64 strings)\n * - does not require padding\n * - understands base64url encoding:\n *   \"-\" instead of \"+\",\n *   \"_\" instead of \"/\",\n *   no padding\n */\nexport function base64decode(base64Str) {\n    // estimate byte size, not accounting for inner padding and whitespace\n    let es = base64Str.length * 3 / 4;\n    // if (es % 3 !== 0)\n    // throw new Error('invalid base64 string');\n    if (base64Str[base64Str.length - 2] == '=')\n        es -= 2;\n    else if (base64Str[base64Str.length - 1] == '=')\n        es -= 1;\n    let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n    groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0 // previous byte\n    ;\n    for (let i = 0; i < base64Str.length; i++) {\n        b = decTable[base64Str.charCodeAt(i)];\n        if (b === undefined) {\n            // noinspection FallThroughInSwitchStatementJS\n            switch (base64Str[i]) {\n                case '=':\n                    groupPos = 0; // reset state when padding found\n                case '\\n':\n                case '\\r':\n                case '\\t':\n                case ' ':\n                    continue; // skip white-space, and padding\n                default:\n                    throw Error(`invalid base64 string.`);\n            }\n        }\n        switch (groupPos) {\n            case 0:\n                p = b;\n                groupPos = 1;\n                break;\n            case 1:\n                bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n                p = b;\n                groupPos = 2;\n                break;\n            case 2:\n                bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n                p = b;\n                groupPos = 3;\n                break;\n            case 3:\n                bytes[bytePos++] = (p & 3) << 6 | b;\n                groupPos = 0;\n                break;\n        }\n    }\n    if (groupPos == 1)\n        throw Error(`invalid base64 string.`);\n    return bytes.subarray(0, bytePos);\n}\n/**\n * Encodes a byte array to a base64 string.\n * Adds padding at the end.\n * Does not insert newlines.\n */\nexport function base64encode(bytes) {\n    let base64 = '', groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0; // carry over from previous byte\n    for (let i = 0; i < bytes.length; i++) {\n        b = bytes[i];\n        switch (groupPos) {\n            case 0:\n                base64 += encTable[b >> 2];\n                p = (b & 3) << 4;\n                groupPos = 1;\n                break;\n            case 1:\n                base64 += encTable[p | b >> 4];\n                p = (b & 15) << 2;\n                groupPos = 2;\n                break;\n            case 2:\n                base64 += encTable[p | b >> 6];\n                base64 += encTable[b & 63];\n                groupPos = 0;\n                break;\n        }\n    }\n    // padding required?\n    if (groupPos) {\n        base64 += encTable[p];\n        base64 += '=';\n        if (groupPos == 1)\n            base64 += '=';\n    }\n    return base64;\n}\n","import { Buffer } from 'buffer/index.js';\n\nimport { deserializeTypeValue } from '../schema.js';\nimport { SchemaType, serializeSchemaType } from '../schemaTypes.js';\nimport type { Base64String, HexString, SmartContractTypeValues } from '../types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.ReturnValue;\n/**\n * @deprecated\n */\nexport type Serializable = HexString;\n\n/** Return value from invoking a smart contract entrypoint. */\nclass ReturnValue {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** Internal buffer of bytes representing the return type. */\n        public readonly buffer: Uint8Array\n    ) {}\n\n    /**\n     * Get a string representation of the return value.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return toHexString(this);\n    }\n\n    /**\n     * Get a JSON-serializable representation of the return value.\n     * @returns {HexString} The JSON-serializable representation.\n     */\n    public toJSON(): HexString {\n        return toHexString(this);\n    }\n}\n\n/**\n * Converts a {@linkcode HexString} to a return value.\n * @param {HexString} json The JSON representation of the return value.\n * @returns {ReturnValue} The return value.\n */\nexport function fromJSON(json: HexString): ReturnValue {\n    return fromHexString(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode ReturnValue.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON(value: Type): Serializable {\n    return toHexString(value);\n}\n\n/** Return value from invoking a smart contract entrypoint. */\nexport type Type = ReturnValue;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is ReturnValue {\n    return value instanceof ReturnValue;\n}\n\n/**\n * Create an empty return value.\n * @returns {ReturnValue} An empty return value.\n */\nexport function empty(): ReturnValue {\n    return fromBuffer(new ArrayBuffer(0));\n}\n\n/**\n * Create a return type from invoking a smart contract entrypoint.\n * @param {ArrayBuffer} buffer The buffer of bytes representing the return value.\n * @returns {ReturnValue}\n */\nexport function fromBuffer(buffer: ArrayBuffer): ReturnValue {\n    return new ReturnValue(new Uint8Array(buffer));\n}\n\n/**\n * Create a return type from invoking a smart contract entrypoint from a hex string.\n * @param {HexString} hex The hex string representing the return value.\n * @returns {ReturnValue}\n */\nexport function fromHexString(hex: HexString): ReturnValue {\n    return new ReturnValue(new Uint8Array(Buffer.from(hex, 'hex')));\n}\n\n/**\n * Convert a return value into a hex string.\n * @param {ReturnValue} returnValue The return value to encode in a hex string.\n * @returns {HexString} The return value encoded in hex.\n */\nexport function toHexString(returnValue: ReturnValue): HexString {\n    return Buffer.from(returnValue.buffer).toString('hex');\n}\n\n/**\n * Convert a return value into a buffer.\n * @param {ReturnValue} parameter The return value to get the buffer from.\n * @returns {Uint8Array}\n */\nexport function toBuffer(parameter: ReturnValue): Uint8Array {\n    return parameter.buffer;\n}\n\n/**\n * Convert a return value into a more structured representation using a schema type.\n * @param {ReturnValue} returnValue The return value.\n * @param {SchemaType} schemaType The schema type for the return value.\n * @returns {SmartContractTypeValues}\n */\nexport function parseWithSchemaType(returnValue: ReturnValue, schemaType: SchemaType): SmartContractTypeValues {\n    const schemaBytes = serializeSchemaType(schemaType);\n    return deserializeTypeValue(returnValue.buffer, schemaBytes);\n}\n\n/**\n * Convert a return value into a more structured representation using a schema type.\n * @param {ReturnValue} returnValue The return value.\n * @param {Base64String} schemaBase64 The schema type for the return value.\n * @returns {SmartContractTypeValues}\n */\nexport function parseWithSchemaTypeBase64(\n    returnValue: ReturnValue,\n    schemaBase64: Base64String\n): SmartContractTypeValues {\n    const schemaBytes = Buffer.from(schemaBase64, 'base64');\n    return deserializeTypeValue(returnValue.buffer, schemaBytes);\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode ReturnValue.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: ReturnValue): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toHexString(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromHexString);\n","export {\n    Type,\n    instanceOf,\n    toDate,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n    futureMinutes,\n    fromSerializable,\n    toSerializable,\n    fromDate,\n    fromEpochSeconds,\n} from '../../types/TransactionExpiry.js';\n","export * from './pub/types.js';\nexport * from './pub/util.js';\nexport * from './pub/wasm.js';\nexport * from './pub/id.js';\nexport * from './pub/grpc.js';\nexport * from './pub/cis0.js';\nexport * from './pub/cis2.js';\nexport * from './pub/cis3.js';\nexport * from './pub/cis4.js';\nexport * from './pub/schema.js';\nexport * from './pub/web3-id.js';\nexport * from './pub/plt.js';\n","export * from './idProofs.js';\nexport * from './idProofTypes.js';\n","import JSONBigInt from 'json-bigint';\n\nimport { AtomicProof, GenericAtomicStatement } from '../commonProofTypes.js';\nimport { HexString } from '../types.js';\nimport { AttributeType } from '../web3-id/types.js';\n\n/**\n * The \"Distributed Identifier\" string.\n */\ntype DIDString = string;\n\nexport type ConcordiumWeakLinkingProofV1 = {\n    /** When the statement was created, serialized as an ISO string */\n    created: string;\n    /** The proof value */\n    proofValue: string[];\n    /** The proof type */\n    type: 'ConcordiumWeakLinkingProofV1';\n};\n\nexport type AtomicProofV2 = AtomicProof<AttributeType>;\n\nexport type StatementProofAccount = {\n    /** When the statement was created, serialized as an ISO string */\n    created: string;\n    /** The proof value */\n    proofValue: AtomicProofV2[];\n    /** The proof type */\n    type: 'ConcordiumZKProofV3';\n};\n\n/** The signed commitments of a Web3 ID credential proof */\nexport type SignedCommitments = {\n    /** A signature of the commitments */\n    signature: HexString;\n    /** The commitments for each attribute included in the proof */\n    commitments: Record<string, HexString>;\n};\n\nexport type StatementProofWeb3Id = StatementProofAccount & {\n    /** The signed commitments of the proof needed to verify the proof */\n    commitments: SignedCommitments;\n};\n\nexport type CredentialSubjectProof<P extends StatementProofAccount> = {\n    /** The credential proof ID */\n    id: DIDString;\n    /** The credential proof data */\n    proof: P;\n    /** The statement used to request the proof */\n    statement: GenericAtomicStatement<string, AttributeType>[];\n};\n\n/**\n * Matches the serialization of `CredentialProof::Account` from concordium-base\n */\nexport type VerifiableCredentialProofAccount = {\n    /** The credential proof */\n    credentialSubject: CredentialSubjectProof<StatementProofAccount>;\n    /** The issuer DID */\n    issuer: DIDString;\n    /** The credential type */\n    type: ['VerifiableCredential', 'ConcordiumVerifiableCredential'];\n};\n\n/**\n * Matches the serialization of `CredentialProof::Web3Id` from concordium-base\n */\nexport type VerifiableCredentialProofWeb3Id = {\n    /** The credential proof */\n    credentialSubject: CredentialSubjectProof<StatementProofWeb3Id>;\n    /** The issuer DID */\n    issuer: DIDString;\n    /** The credential type */\n    type: ['VerifiableCredential', 'ConcordiumVerifiableCredential', ...string[]];\n};\n\n/**\n * Matches the serialization of `CredentialProof` enum from concordium-base.\n */\nexport type VerifiableCredentialProof = VerifiableCredentialProofAccount | VerifiableCredentialProofWeb3Id;\n\n/**\n * Type predicate to check if the proof is a {@linkcode VerifiableCredentialProofWeb3Id}, or consequently a {@linkcode VerifiableCredentialProofAccount}\n */\nexport function isWeb3IdProof(proof: VerifiableCredentialProof): proof is VerifiableCredentialProofWeb3Id {\n    return (proof as VerifiableCredentialProofWeb3Id).credentialSubject.proof.commitments !== undefined;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */\n\n/**\n * Replacer to ensure dates are stringified to the timestamp attribute format.\n */\nexport function replaceDateWithTimeStampAttribute(this: any, k: string, value: any): any {\n    const rawValue = this[k];\n    if (rawValue instanceof Date) {\n        return { type: 'date-time', timestamp: rawValue.toISOString() };\n    }\n    return value;\n}\n\n/**\n * Reviver to ensure dates are parsed from the timestamp attribute format.\n */\nexport function reviveDateFromTimeStampAttribute(this: any, _key: string, value: any) {\n    if (value.type === 'date-time' && typeof value.timestamp === 'string' && Object.keys(value).length === 2) {\n        return new Date(Date.parse(value.timestamp));\n    }\n    return value;\n}\n\nexport class VerifiablePresentation {\n    presentationContext: string;\n    proof: ConcordiumWeakLinkingProofV1;\n    type: string;\n    verifiableCredential: VerifiableCredentialProof[];\n\n    constructor(\n        presentationContext: string,\n        proof: ConcordiumWeakLinkingProofV1,\n        type: string,\n        verifiableCredential: VerifiableCredentialProof[]\n    ) {\n        this.presentationContext = presentationContext;\n        this.proof = proof;\n        this.type = type;\n        this.verifiableCredential = verifiableCredential;\n    }\n\n    toString(): string {\n        return JSONBigInt({\n            alwaysParseAsBig: true,\n            useNativeBigInt: true,\n        }).stringify(this);\n    }\n\n    static fromString(json: string): VerifiablePresentation {\n        // We allow all numbers to be parsed as bigints to avoid lossy conversion of attribute values. The structure does not contain any other numbers.\n        const parsed: VerifiablePresentation = JSONBigInt({\n            alwaysParseAsBig: true,\n            useNativeBigInt: true,\n        }).parse(json);\n        return new VerifiablePresentation(\n            parsed.presentationContext,\n            parsed.proof,\n            parsed.type,\n            parsed.verifiableCredential\n        );\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = { number, bool, bytes, hash, exists, output };\nexports.default = assert;\n//# sourceMappingURL=_assert.js.map","import { isAsciiAlphaNumericPunctuation } from '../contractHelpers.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.EntrypointName;\n/**\n * @deprecated\n */\nexport type Serializable = string;\n\n/**\n * Type representing an entrypoint of a smart contract.\n * @template S Use for using string literals for the type.\n */\nclass EntrypointName<S extends string = string> {\n    /**\n     * @deprecated Use the {@linkcode EntrypointName.toJSON} method instead.\n     */\n    protected get serializable(): Serializable {\n        return this.value;\n    }\n\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** The internal string value of the receive name. */\n        public readonly value: S\n    ) {}\n\n    /**\n     * Get a string representation of the entrypoint name.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.value;\n    }\n\n    /**\n     * Get a JSON-serializable representation of the entrypoint name.\n     * @returns {string} The JSON-serializable representation.\n     */\n    public toJSON(): string {\n        return this.value;\n    }\n}\n\n/**\n * Converts a `string` to an entrypoint name.\n * @param {string} json The JSON representation of the entrypoint name.\n * @throws If the string is not a valid entrypoint name.\n * @returns {EntrypointName<string>} The entrypoint name.\n */\nexport function fromJSON(json: string): EntrypointName<string> {\n    return fromString(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode EntrypointName.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON<S extends string>(value: Type<S>): S {\n    return toString(value);\n}\n\n/**\n * Type representing an entrypoint of a smart contract.\n */\nexport type Type<S extends string = string> = EntrypointName<S>;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is EntrypointName {\n    return value instanceof EntrypointName;\n}\n\n/**\n * Create a smart contract entrypoint name from a string, ensuring it follows the required format.\n * @param {string} value The string with the entrypoint name.\n * @throws If the provided value is not a valid entrypoint name.\n * @returns {EntrypointName}\n */\nexport function fromString<S extends string>(value: S): EntrypointName<S> {\n    if (value.length > 99) {\n        throw new Error('Invalid EntrypointName: Can be atmost 99 characters long.');\n    }\n    if (!isAsciiAlphaNumericPunctuation(value)) {\n        throw new Error('Invalid EntrypointName: Must only contain ASCII alpha, numeric and punctuation characters.');\n    }\n    return new EntrypointName(value);\n}\n\n/**\n * Create a smart contract entrypoint name from a string, but _without_ ensuring it follows the required format.\n * It is up to the caller to ensure the string is a valid entrypoint name.\n * @param {string} value The string with the entrypoint name.\n * @returns {EntrypointName}\n */\nexport function fromStringUnchecked<S extends string>(value: S): EntrypointName<S> {\n    return new EntrypointName(value);\n}\n\n/**\n * Convert a entrypoint name to a string\n * @deprecated Use the {@linkcode EntrypointName.toString} method instead.\n * @param {EntrypointName} entrypointName The entrypoint name to stringify.\n * @returns {string}\n */\nexport function toString<S extends string>(entrypointName: EntrypointName<S>): S {\n    return entrypointName.value;\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode EntrypointName.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: EntrypointName): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toString(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromString);\n","import { Buffer } from 'buffer/index.js';\n\nimport type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport type { HexString } from '../types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The number of bytes used to represent a block hash.\n */\nconst BLOCK_HASH_BYTE_LENGTH = 32;\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.BlockHash;\n/**\n * @deprecated\n */\nexport type Serializable = HexString;\n\n/**\n * Represents a hash of a block in the chain.\n */\nclass BlockHash {\n    private typedJsonType = JSON_DISCRIMINATOR;\n\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** The internal buffer of bytes representing the hash. */\n        public readonly buffer: Uint8Array\n    ) {}\n\n    /**\n     * Get a string representation of the block hash.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return toHexString(this);\n    }\n\n    /**\n     * Get a JSON-serializable representation of the block hash.\n     * @returns {HexString} The JSON-serializable representation.\n     */\n    public toJSON(): HexString {\n        return toHexString(this);\n    }\n}\n\n/**\n * Converts a {@linkcode HexString} to a block hash.\n * @param {HexString} json The JSON representation of the block hash.\n * @returns {BlockHash} The block hash.\n */\nexport function fromJSON(json: HexString): BlockHash {\n    return fromHexString(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode BlockHash.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON(value: Type): Serializable {\n    return toHexString(value);\n}\n\n/**\n * Represents a hash of a block in the chain.\n */\nexport type Type = BlockHash;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is BlockHash {\n    return value instanceof BlockHash;\n}\n\n/**\n * Create a BlockHash from a buffer of 32 bytes.\n * @param {ArrayBuffer} buffer Buffer containing 32 bytes for the hash.\n * @throws If the provided buffer does not contain exactly 32 bytes.\n * @returns {BlockHash}\n */\nexport function fromBuffer(buffer: ArrayBuffer): BlockHash {\n    if (buffer.byteLength !== BLOCK_HASH_BYTE_LENGTH) {\n        throw new Error(\n            `Invalid transaction hash provided: Expected a buffer containing 32 bytes, instead got '${Buffer.from(\n                buffer\n            ).toString('hex')}'.`\n        );\n    }\n    return new BlockHash(new Uint8Array(buffer));\n}\n\n/**\n * Create a BlockHash from a hex string.\n * @param {HexString} hex Hex encoding of block hash.\n * @throws If the provided hex encoding does not correspond to a buffer of exactly 32 bytes.\n * @returns {BlockHash}\n */\nexport function fromHexString(hex: HexString): BlockHash {\n    return fromBuffer(Buffer.from(hex, 'hex'));\n}\n\n/**\n * Hex encode a BlockHash.\n * @param {BlockHash} hash The block hash to encode.\n * @returns {HexString} String containing the hex encoding.\n */\nexport function toHexString(hash: BlockHash): HexString {\n    return Buffer.from(hash.buffer).toString('hex');\n}\n\n/**\n * Get byte representation of a BlockHash.\n * @param {BlockHash} hash The block hash.\n * @returns {ArrayBuffer} Hash represented as bytes.\n */\nexport function toBuffer(hash: BlockHash): Uint8Array {\n    return hash.buffer;\n}\n\n/**\n * Convert a block hash from its protobuf encoding.\n * @param {Proto.BlockHash} hash The protobuf encoding.\n * @returns {BlockHash}\n */\nexport function fromProto(hash: Proto.BlockHash): BlockHash {\n    return fromBuffer(hash.value);\n}\n\n/**\n * Convert a block hash into its protobuf encoding.\n * @param {BlockHash} hash The block hash.\n * @returns {Proto.BlockHash} The protobuf encoding.\n */\nexport function toProto(hash: BlockHash): Proto.BlockHash {\n    return {\n        value: hash.buffer,\n    };\n}\n\n/**\n * Construct a 'given' block hash input from a block hash.\n * @param {BlockHash} blockHash The given block hash.\n * @returns {Proto.BlockHashInput} The given block hash input.\n */\nexport function toBlockHashInput(blockHash: BlockHash): Proto.BlockHashInput {\n    return {\n        blockHashInput: { oneofKind: 'given', given: toProto(blockHash) },\n    };\n}\n\n/**\n * Check if two transaction hashes are the same.\n * @param {BlockHash} left\n * @param {BlockHash} right\n * @returns {boolean} True if they are equal.\n */\nexport function equals(left: BlockHash, right: BlockHash): boolean {\n    for (let i = 0; i < BLOCK_HASH_BYTE_LENGTH; i++) {\n        if (left.buffer.at(i) !== right.buffer.at(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode BlockHash.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: BlockHash): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toHexString(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromHexString);\n","import { Buffer } from 'buffer/index.js';\n\nimport type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport type { HexString } from '../types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.TransactionHash;\n/**\n * @deprecated\n */\nexport type Serializable = HexString;\n\n/**\n * The number of bytes used to represent a transaction hash.\n */\nconst TRANSACTION_HASH_BYTE_LENGTH = 32;\n\n/** Hash of a transaction. */\nclass TransactionHash {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** Internal buffer with the hash. */\n        public readonly buffer: Uint8Array\n    ) {}\n\n    /**\n     * Get a string representation of the transaction hash.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return toHexString(this);\n    }\n\n    /**\n     * Get a JSON-serializable representation of the transaction hash.\n     * @returns {HexString} The JSON-serializable representation.\n     */\n    public toJSON(): HexString {\n        return toHexString(this);\n    }\n}\n\n/**\n * Converts a {@linkcode HexString} to a transaction hash.\n * @param {HexString} json The JSON representation of the transaction hash.\n * @returns {TransactionHash} The transaction hash.\n */\nexport function fromJSON(json: HexString): TransactionHash {\n    return fromHexString(json);\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @deprecated Use the {@linkcode TransactionHash.toJSON} method instead.\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode Serializable} value\n */\nexport function toUnwrappedJSON(value: Type): Serializable {\n    return toHexString(value);\n}\n\n/** Hash of a transaction. */\nexport type Type = TransactionHash;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is TransactionHash {\n    return value instanceof TransactionHash;\n}\n\n/**\n * Create a TransactionHash from a buffer.\n * @param {ArrayBuffer} buffer Bytes for the transaction hash. Must be exactly 32 bytes.\n * @throws If the provided buffer does not contain 32 bytes.\n * @returns {TransactionHash}\n */\nexport function fromBuffer(buffer: ArrayBuffer): TransactionHash {\n    if (buffer.byteLength !== TRANSACTION_HASH_BYTE_LENGTH) {\n        throw new Error(\n            `Invalid transaction hash provided: Expected a buffer containing 32 bytes, instead got '${Buffer.from(\n                buffer\n            ).toString('hex')}'.`\n        );\n    }\n    return new TransactionHash(new Uint8Array(buffer));\n}\n\n/**\n * Create a TransactionHash from a hex string.\n * @param {HexString} hex String with hex encoding of the transaction hash.\n * @throws if the encoding does not correspond to exactly 32 bytes.\n * @returns {TransactionHash}\n */\nexport function fromHexString(hex: HexString): TransactionHash {\n    return fromBuffer(Buffer.from(hex, 'hex'));\n}\n\n/**\n * Convert a transaction hash into a hex encoded string.\n * @param {TransactionHash} hash TransactionHash to convert to hex.\n * @returns {HexString} String with hex encoding.\n */\nexport function toHexString(hash: TransactionHash): HexString {\n    return Buffer.from(hash.buffer).toString('hex');\n}\n\n/**\n * Get byte representation of a TransactionHash.\n * @param {TransactionHash} hash The transaction hash.\n * @returns {ArrayBuffer} Hash represented as bytes.\n */\nexport function toBuffer(hash: TransactionHash): Uint8Array {\n    return hash.buffer;\n}\n\n/**\n * Convert a transaction hash from its protobuf encoding.\n * @param {Proto.TransactionHash} transactionHash The transaction hash in protobuf.\n * @returns {TransactionHash} The transaction hash.\n */\nexport function fromProto(transactionHash: Proto.TransactionHash): TransactionHash {\n    return fromBuffer(transactionHash.value);\n}\n\n/**\n * Convert a transaction hash into its protobuf encoding.\n * @param {TransactionHash} transactionHash The transaction hash.\n * @returns {Proto.TransactionHash} The protobuf encoding.\n */\nexport function toProto(transactionHash: TransactionHash): Proto.TransactionHash {\n    return {\n        value: transactionHash.buffer,\n    };\n}\n\n/**\n * Check if two transaction hashes are the same.\n * @param {TransactionHash} left\n * @param {TransactionHash} right\n * @returns {boolean} True if they are equal.\n */\nexport function equals(left: TransactionHash, right: TransactionHash): boolean {\n    for (let i = 0; i < TRANSACTION_HASH_BYTE_LENGTH; i++) {\n        if (left.buffer.at(i) !== right.buffer.at(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode TransactionHash.toJSON} method instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: TransactionHash): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toHexString(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromJSON} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromHexString);\n","export {\n    Type,\n    fromJSON,\n    instanceOf,\n    fromHexString,\n    fromBuffer,\n    toHexString,\n    toBuffer,\n    equals,\n    JSON_DISCRIMINATOR,\n    Serializable,\n    toTypedJSON,\n    toUnwrappedJSON,\n    fromTypedJSON,\n} from '../../types/BlockHash.js';\n","import * as wasm from '@concordium/rust-bindings/wallet';\n\nimport { GenerateBakerKeysOutput } from '../types.js';\nimport * as AccountAddress from '../types/AccountAddress.js';\n\n/**\n * Generates random baker keys for the specified account, that can be used with the configureBaker transaction\n * @param account the address of the account that the keys should be added to.\n * @returns an object containing the public baker keys, their associated proofs and their associated private keys.\n */\nexport function generateBakerKeys(account: AccountAddress.Type): GenerateBakerKeysOutput {\n    const rawKeys = wasm.generateBakerKeys(AccountAddress.toBase58(account));\n    try {\n        return JSON.parse(rawKeys);\n    } catch (e) {\n        throw new Error(rawKeys);\n    }\n}\n","export {\n    getCredentialDeploymentTransactionHash,\n    serializeCredentialDeploymentTransactionForSubmission,\n    serializeCredentialDeploymentPayload,\n} from './serialization.js';\nexport { deserializeTransaction } from './deserialization.js';\nexport { generateBakerKeys } from './accountHelpers.js';\nexport * from './HdWallet.js';\nexport * from './identity.js';\nexport * from './credentialDeploymentTransactions.js';\nexport * from './web3Id.js';\n","import{CBORcontainer as o}from\"./container.js\";import{DecodeStream as d}from\"./decodeStream.js\";import{SYMS as f}from\"./constants.js\";function O(a,i={}){const n={...o.defaultDecodeOptions};if(i.dcbor?Object.assign(n,o.dcborDecodeOptions):i.cde&&Object.assign(n,o.cdeDecodeOptions),Object.assign(n,i),Object.hasOwn(n,\"rejectLongNumbers\"))throw new TypeError(\"rejectLongNumbers has changed to requirePreferred\");n.boxed&&(n.saveOriginal=!0);const t=new d(a,n);let e,r;for(const s of t){if(r=o.create(s,e,n,t),s[2]===f.BREAK)if(e?.isStreaming)e.left=0;else throw new Error(\"Unexpected BREAK\");else e&&e.push(r,t,s[3]);for(r instanceof o&&(e=r);e?.done;){r=e.convert(t);const c=e.parent;c?.replaceLast(r,e,t),e=c}}return r}export{O as decode};\n","function o(e,n=0,t=!1){const r=e[n]&128?-1:1,f=(e[n]&124)>>2,a=(e[n]&3)<<8|e[n+1];if(f===0){if(t&&a!==0)throw new Error(`Unwanted subnormal: ${r*5960464477539063e-23*a}`);return r*5960464477539063e-23*a}else if(f===31)return a?NaN:r*(1/0);return r*2**(f-25)*(1024+a)}function s(e){const n=new DataView(new ArrayBuffer(4));n.setFloat32(0,e,!1);const t=n.getUint32(0,!1);if((t&8191)!==0)return null;let r=t>>16&32768;const f=t>>23&255,a=t&8388607;if(!(f===0&&a===0))if(f>=113&&f<=142)r+=(f-112<<10)+(a>>13);else if(f>=103&&f<113){if(a&(1<<126-f)-1)return null;r+=a+8388608>>126-f}else if(f===255)r|=31744,r|=a>>13;else return null;return r}function i(e){if(e!==0){const n=new ArrayBuffer(8),t=new DataView(n);t.setFloat64(0,e,!1);const r=t.getBigUint64(0,!1);if((r&0x7ff0000000000000n)===0n)return r&0x8000000000000000n?-0:0}return e}function l(e){switch(e.length){case 2:o(e,0,!0);break;case 4:{const n=new DataView(e.buffer,e.byteOffset,e.byteLength),t=n.getUint32(0,!1);if((t&2139095040)===0&&t&8388607)throw new Error(`Unwanted subnormal: ${n.getFloat32(0,!1)}`);break}case 8:{const n=new DataView(e.buffer,e.byteOffset,e.byteLength),t=n.getBigUint64(0,!1);if((t&0x7ff0000000000000n)===0n&&t&0x000fffffffffffn)throw new Error(`Unwanted subnormal: ${n.getFloat64(0,!1)}`);break}default:throw new TypeError(`Bad input to isSubnormal: ${e}`)}}export{l as checkSubnormal,i as flushToZero,s as halfToUint,o as parseHalf};\n","\nlet imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextDecoder, TextEncoder } = require(`util`);\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @param {string} contract_name\n* @param {string} state_bytes\n* @param {string} schema\n* @param {boolean | undefined} [verbose_error_message]\n* @returns {string}\n*/\nmodule.exports.deserializeState = function(contract_name, state_bytes, schema, verbose_error_message) {\n    let deferred5_0;\n    let deferred5_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(contract_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(state_bytes, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.deserializeState(retptr, ptr0, len0, ptr1, len1, ptr2, len2, isLikeNone(verbose_error_message) ? 0xFFFFFF : verbose_error_message ? 1 : 0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr4 = r0;\n        var len4 = r1;\n        if (r3) {\n            ptr4 = 0; len4 = 0;\n            throw takeObject(r2);\n        }\n        deferred5_0 = ptr4;\n        deferred5_1 = len4;\n        return getStringFromWasm0(ptr4, len4);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n    }\n};\n\n/**\n* @param {string} return_value_bytes\n* @param {string} module_schema\n* @param {string} contract_name\n* @param {string} function_name\n* @param {number | undefined} [schema_version]\n* @param {boolean | undefined} [verbose_error_message]\n* @returns {string}\n*/\nmodule.exports.deserializeReceiveReturnValue = function(return_value_bytes, module_schema, contract_name, function_name, schema_version, verbose_error_message) {\n    let deferred6_0;\n    let deferred6_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(return_value_bytes, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(module_schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(contract_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        wasm.deserializeReceiveReturnValue(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, isLikeNone(schema_version) ? 0xFFFFFF : schema_version, isLikeNone(verbose_error_message) ? 0xFFFFFF : verbose_error_message ? 1 : 0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr5 = r0;\n        var len5 = r1;\n        if (r3) {\n            ptr5 = 0; len5 = 0;\n            throw takeObject(r2);\n        }\n        deferred6_0 = ptr5;\n        deferred6_1 = len5;\n        return getStringFromWasm0(ptr5, len5);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred6_0, deferred6_1, 1);\n    }\n};\n\n/**\n* @param {string} error_bytes\n* @param {string} schema\n* @param {string} contract_name\n* @param {string} function_name\n* @param {boolean | undefined} [verbose_error_message]\n* @returns {string}\n*/\nmodule.exports.deserializeReceiveError = function(error_bytes, schema, contract_name, function_name, verbose_error_message) {\n    let deferred6_0;\n    let deferred6_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(error_bytes, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(contract_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        wasm.deserializeReceiveError(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, isLikeNone(verbose_error_message) ? 0xFFFFFF : verbose_error_message ? 1 : 0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr5 = r0;\n        var len5 = r1;\n        if (r3) {\n            ptr5 = 0; len5 = 0;\n            throw takeObject(r2);\n        }\n        deferred6_0 = ptr5;\n        deferred6_1 = len5;\n        return getStringFromWasm0(ptr5, len5);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred6_0, deferred6_1, 1);\n    }\n};\n\n/**\n* @param {string} error_bytes\n* @param {string} schema\n* @param {string} contract_name\n* @param {boolean | undefined} [verbose_error_message]\n* @returns {string}\n*/\nmodule.exports.deserializeInitError = function(error_bytes, schema, contract_name, verbose_error_message) {\n    let deferred5_0;\n    let deferred5_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(error_bytes, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(contract_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.deserializeInitError(retptr, ptr0, len0, ptr1, len1, ptr2, len2, isLikeNone(verbose_error_message) ? 0xFFFFFF : verbose_error_message ? 1 : 0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr4 = r0;\n        var len4 = r1;\n        if (r3) {\n            ptr4 = 0; len4 = 0;\n            throw takeObject(r2);\n        }\n        deferred5_0 = ptr4;\n        deferred5_1 = len4;\n        return getStringFromWasm0(ptr4, len4);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n    }\n};\n\n/**\n* @param {string} parameters\n* @param {string} schema\n* @param {string} contract_name\n* @param {string} function_name\n* @param {number | undefined} [schema_version]\n* @param {boolean | undefined} [verbose_error_message]\n* @returns {string}\n*/\nmodule.exports.serializeReceiveContractParameters = function(parameters, schema, contract_name, function_name, schema_version, verbose_error_message) {\n    let deferred6_0;\n    let deferred6_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(parameters, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(contract_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        wasm.serializeReceiveContractParameters(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, isLikeNone(schema_version) ? 0xFFFFFF : schema_version, isLikeNone(verbose_error_message) ? 0xFFFFFF : verbose_error_message ? 1 : 0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr5 = r0;\n        var len5 = r1;\n        if (r3) {\n            ptr5 = 0; len5 = 0;\n            throw takeObject(r2);\n        }\n        deferred6_0 = ptr5;\n        deferred6_1 = len5;\n        return getStringFromWasm0(ptr5, len5);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred6_0, deferred6_1, 1);\n    }\n};\n\n/**\n* @param {string} parameters\n* @param {string} schema\n* @param {string} contract_name\n* @param {number | undefined} [schema_version]\n* @param {boolean | undefined} [verbose_error_message]\n* @returns {string}\n*/\nmodule.exports.serializeInitContractParameters = function(parameters, schema, contract_name, schema_version, verbose_error_message) {\n    let deferred5_0;\n    let deferred5_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(parameters, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(contract_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.serializeInitContractParameters(retptr, ptr0, len0, ptr1, len1, ptr2, len2, isLikeNone(schema_version) ? 0xFFFFFF : schema_version, isLikeNone(verbose_error_message) ? 0xFFFFFF : verbose_error_message ? 1 : 0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr4 = r0;\n        var len4 = r1;\n        if (r3) {\n            ptr4 = 0; len4 = 0;\n            throw takeObject(r2);\n        }\n        deferred5_0 = ptr4;\n        deferred5_1 = len4;\n        return getStringFromWasm0(ptr4, len4);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n    }\n};\n\n/**\n* @param {string} schema\n* @param {string} contract_name\n* @param {string} function_name\n* @param {number | undefined} [schema_version]\n* @returns {string}\n*/\nmodule.exports.getReceiveContractParameterSchema = function(schema, contract_name, function_name, schema_version) {\n    let deferred5_0;\n    let deferred5_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.getReceiveContractParameterSchema(retptr, ptr0, len0, ptr1, len1, ptr2, len2, isLikeNone(schema_version) ? 0xFFFFFF : schema_version);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr4 = r0;\n        var len4 = r1;\n        if (r3) {\n            ptr4 = 0; len4 = 0;\n            throw takeObject(r2);\n        }\n        deferred5_0 = ptr4;\n        deferred5_1 = len4;\n        return getStringFromWasm0(ptr4, len4);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n    }\n};\n\n/**\n* @param {string} schema\n* @param {string} contract_name\n* @param {number | undefined} [schema_version]\n* @returns {string}\n*/\nmodule.exports.getInitContractParameterSchema = function(schema, contract_name, schema_version) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.getInitContractParameterSchema(retptr, ptr0, len0, ptr1, len1, isLikeNone(schema_version) ? 0xFFFFFF : schema_version);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} value\n* @param {string} schema\n* @param {boolean | undefined} [verbose_error_message]\n* @returns {string}\n*/\nmodule.exports.serializeTypeValue = function(value, schema, verbose_error_message) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.serializeTypeValue(retptr, ptr0, len0, ptr1, len1, isLikeNone(verbose_error_message) ? 0xFFFFFF : verbose_error_message ? 1 : 0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} serialized_value\n* @param {string} schema\n* @param {boolean | undefined} [verbose_error_message]\n* @returns {string}\n*/\nmodule.exports.deserializeTypeValue = function(serialized_value, schema, verbose_error_message) {\n    let deferred4_0;\n    let deferred4_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(serialized_value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.deserializeTypeValue(retptr, ptr0, len0, ptr1, len1, isLikeNone(verbose_error_message) ? 0xFFFFFF : verbose_error_message ? 1 : 0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr3 = r0;\n        var len3 = r1;\n        if (r3) {\n            ptr3 = 0; len3 = 0;\n            throw takeObject(r2);\n        }\n        deferred4_0 = ptr3;\n        deferred4_1 = len3;\n        return getStringFromWasm0(ptr3, len3);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n    }\n};\n\n/**\n* @param {string} schema\n* @returns {string}\n*/\nmodule.exports.displayTypeSchemaTemplate = function(schema) {\n    let deferred3_0;\n    let deferred3_1;\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.displayTypeSchemaTemplate(retptr, ptr0, len0);\n        var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n        var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n        var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);\n        var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        deferred3_0 = ptr2;\n        deferred3_1 = len2;\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n    }\n};\n\nmodule.exports.__wbindgen_error_new = function(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nconst path = require('path').join(__dirname, 'index_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\n","/**\n * Get the type of a JSON value.\n * Distinguishes between array, null and object.\n */\nexport function typeofJsonValue(value) {\n    let t = typeof value;\n    if (t == \"object\") {\n        if (Array.isArray(value))\n            return \"array\";\n        if (value === null)\n            return \"null\";\n    }\n    return t;\n}\n/**\n * Is this a JSON object (instead of an array or null)?\n */\nexport function isJsonObject(value) {\n    return value !== null && typeof value == \"object\" && !Array.isArray(value);\n}\n","// Copyright (c) 2016, Daniel Wirtz  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n// * Neither the name of its author, nor the names of its contributors\n//   may be used to endorse or promote products derived from this software\n//   without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nconst fromCharCodes = (chunk) => String.fromCharCode.apply(String, chunk);\n/**\n * @deprecated This function will no longer be exported with the next major\n * release, since protobuf-ts has switch to TextDecoder API. If you need this\n * function, please migrate to @protobufjs/utf8. For context, see\n * https://github.com/timostamm/protobuf-ts/issues/184\n *\n * Reads UTF8 bytes as a string.\n *\n * See [protobufjs / utf8](https://github.com/protobufjs/protobuf.js/blob/9893e35b854621cce64af4bf6be2cff4fb892796/lib/utf8/index.js#L40)\n *\n * Copyright (c) 2016, Daniel Wirtz\n */\nexport function utf8read(bytes) {\n    if (bytes.length < 1)\n        return \"\";\n    let pos = 0, // position in bytes\n    parts = [], chunk = [], i = 0, // char offset\n    t; // temporary\n    let len = bytes.length;\n    while (pos < len) {\n        t = bytes[pos++];\n        if (t < 128)\n            chunk[i++] = t;\n        else if (t > 191 && t < 224)\n            chunk[i++] = (t & 31) << 6 | bytes[pos++] & 63;\n        else if (t > 239 && t < 365) {\n            t = ((t & 7) << 18 | (bytes[pos++] & 63) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63) - 0x10000;\n            chunk[i++] = 0xD800 + (t >> 10);\n            chunk[i++] = 0xDC00 + (t & 1023);\n        }\n        else\n            chunk[i++] = (t & 15) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63;\n        if (i > 8191) {\n            parts.push(fromCharCodes(chunk));\n            i = 0;\n        }\n    }\n    if (parts.length) {\n        if (i)\n            parts.push(fromCharCodes(chunk.slice(0, i)));\n        return parts.join(\"\");\n    }\n    return fromCharCodes(chunk.slice(0, i));\n}\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [0]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0F) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error('invalid varint');\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !((shift >>> 7) == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0F) | ((hi & 0x07) << 4);\n    const hasMoreBits = !((hi >> 3) == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xFF);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !((shift >>> 7) == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Returns tuple:\n * [0]: minus sign?\n * [1]: low bits\n * [2]: high bits\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64fromString(dec) {\n    // Check for minus sign.\n    let minus = dec[0] == '-';\n    if (minus)\n        dec = dec.slice(1);\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to highBits\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return [minus, lowBits, highBits];\n}\n/**\n * Format 64 bit integer value (as two JS numbers) to decimal string.\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64toString(bitsLow, bitsHigh) {\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    if ((bitsHigh >>> 0) <= 0x1FFFFF) {\n        return '' + (TWO_PWR_32_DBL * bitsHigh + (bitsLow >>> 0));\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    let low = bitsLow & 0xFFFFFF;\n    let mid = (((bitsLow >>> 24) | (bitsHigh << 8)) >>> 0) & 0xFFFFFF;\n    let high = (bitsHigh >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    let base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // Convert base-1e7 digits to base-10, with optional leading zeroes.\n    function decimalFrom1e7(digit1e7, needLeadingZeros) {\n        let partial = digit1e7 ? String(digit1e7) : '';\n        if (needLeadingZeros) {\n            return '0000000'.slice(partial.length) + partial;\n        }\n        return partial;\n    }\n    return decimalFrom1e7(digitC, /*needLeadingZeros=*/ 0) +\n        decimalFrom1e7(digitB, /*needLeadingZeros=*/ digitC) +\n        // If the final 1e7 digit didn't need leading zeros, we would have\n        // returned via the trivial code path at the top.\n        decimalFrom1e7(digitA, /*needLeadingZeros=*/ 1);\n}\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push(value & 127 | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7F;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0F) << 28;\n    for (let readBytes = 5; ((b & 0x80) !== 0) && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error('invalid varint');\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","import { int64fromString, int64toString } from \"./goog-varint\";\nlet BI;\nexport function detectBi() {\n    const dv = new DataView(new ArrayBuffer(8));\n    const ok = globalThis.BigInt !== undefined\n        && typeof dv.getBigInt64 === \"function\"\n        && typeof dv.getBigUint64 === \"function\"\n        && typeof dv.setBigInt64 === \"function\"\n        && typeof dv.setBigUint64 === \"function\";\n    BI = ok ? {\n        MIN: BigInt(\"-9223372036854775808\"),\n        MAX: BigInt(\"9223372036854775807\"),\n        UMIN: BigInt(\"0\"),\n        UMAX: BigInt(\"18446744073709551615\"),\n        C: BigInt,\n        V: dv,\n    } : undefined;\n}\ndetectBi();\nfunction assertBi(bi) {\n    if (!bi)\n        throw new Error(\"BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support\");\n}\n// used to validate from(string) input (when bigint is unavailable)\nconst RE_DECIMAL_STR = /^-?[0-9]+$/;\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\nconst HALF_2_PWR_32 = 0x080000000;\n// base class for PbLong and PbULong provides shared code\nclass SharedPbLong {\n    /**\n     * Create a new instance with the given bits.\n     */\n    constructor(lo, hi) {\n        this.lo = lo | 0;\n        this.hi = hi | 0;\n    }\n    /**\n     * Is this instance equal to 0?\n     */\n    isZero() {\n        return this.lo == 0 && this.hi == 0;\n    }\n    /**\n     * Convert to a native number.\n     */\n    toNumber() {\n        let result = this.hi * TWO_PWR_32_DBL + (this.lo >>> 0);\n        if (!Number.isSafeInteger(result))\n            throw new Error(\"cannot convert to safe number\");\n        return result;\n    }\n}\n/**\n * 64-bit unsigned integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbULong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.UMIN)\n                        throw new Error('signed value for ulong');\n                    if (value > BI.UMAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigUint64(0, value, true);\n                    return new PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(lo, hi);\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    if (value < 0)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(value, value / TWO_PWR_32_DBL);\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigUint64(0, true);\n    }\n}\n/**\n * ulong 0 singleton.\n */\nPbULong.ZERO = new PbULong(0, 0);\n/**\n * 64-bit signed integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbLong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.MIN)\n                        throw new Error('signed long too small');\n                    if (value > BI.MAX)\n                        throw new Error('signed long too large');\n                    BI.V.setBigInt64(0, value, true);\n                    return new PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus) {\n                        if (hi > HALF_2_PWR_32 || (hi == HALF_2_PWR_32 && lo != 0))\n                            throw new Error('signed long too small');\n                    }\n                    else if (hi >= HALF_2_PWR_32)\n                        throw new Error('signed long too large');\n                    let pbl = new PbLong(lo, hi);\n                    return minus ? pbl.negate() : pbl;\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    return value > 0\n                        ? new PbLong(value, value / TWO_PWR_32_DBL)\n                        : new PbLong(-value, -value / TWO_PWR_32_DBL).negate();\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Do we have a minus sign?\n     */\n    isNegative() {\n        return (this.hi & HALF_2_PWR_32) !== 0;\n    }\n    /**\n     * Negate two's complement.\n     * Invert all the bits and add one to the result.\n     */\n    negate() {\n        let hi = ~this.hi, lo = this.lo;\n        if (lo)\n            lo = ~lo + 1;\n        else\n            hi += 1;\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        if (BI)\n            return this.toBigInt().toString();\n        if (this.isNegative()) {\n            let n = this.negate();\n            return '-' + int64toString(n.lo, n.hi);\n        }\n        return int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigInt64(0, true);\n    }\n}\n/**\n * long 0 singleton.\n */\nPbLong.ZERO = new PbLong(0, 0);\n","import { WireType } from \"./binary-format-contract\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { varint32read, varint64read } from \"./goog-varint\";\nconst defaultsRead = {\n    readUnknownField: true,\n    readerFactory: bytes => new BinaryReader(bytes),\n};\n/**\n * Make options for reading binary data form partial options.\n */\nexport function binaryReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\nexport class BinaryReader {\n    constructor(buf, textDecoder) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder(\"utf-8\", {\n            fatal: true,\n            ignoreBOM: true,\n        });\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            case WireType.Bit64:\n                this.pos += 4;\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return new PbLong(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return new PbULong(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1 | (hi & 1) << 31) ^ s);\n        hi = (hi >>> 1 ^ s);\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return new PbULong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return new PbLong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32();\n        let start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n","import { PbLong, PbULong } from \"./pb-long\";\nimport { varint32write, varint64write } from \"./goog-varint\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nconst defaultsWrite = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\n/**\n * Make options for writing binary data form partial options.\n */\nexport function binaryWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error('invalid state, fork stack empty');\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32((fieldNo << 3 | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbLong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbULong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let long = PbLong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let long = PbLong.from(value), \n        // zigzag encode\n        sign = long.hi >> 31, lo = (long.lo << 1) ^ sign, hi = ((long.hi << 1) | (long.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let long = PbULong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n}\n","/**\n * The symbol used as a key on message objects to store the message type.\n *\n * Note that this is an experimental feature - it is here to stay, but\n * implementation details may change without notice.\n */\nexport const MESSAGE_TYPE = Symbol.for(\"protobuf-ts/message-type\");\n","import { lowerCamelCase } from \"./lower-camel-case\";\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of 64 bit integral types. Equivalent to the\n * field option \"jstype\".\n *\n * By default, protobuf-ts represents 64 bit types as `bigint`.\n *\n * You can change the default behaviour by enabling the plugin parameter\n * `long_type_string`, which will represent 64 bit types as `string`.\n *\n * Alternatively, you can change the behaviour for individual fields\n * with the field option \"jstype\":\n *\n * ```protobuf\n * uint64 my_field = 1 [jstype = JS_STRING];\n * uint64 other_field = 2 [jstype = JS_NUMBER];\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript `bigint`.\n     *\n     * Field option `[jstype = JS_NORMAL]`.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript `string`.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n    /**\n     * Use JavaScript `number`.\n     *\n     * Large values will loose precision.\n     *\n     * Field option `[jstype = JS_NUMBER]`.\n     */\n    LongType[LongType[\"NUMBER\"] = 2] = \"NUMBER\";\n})(LongType || (LongType = {}));\n/**\n * Protobuf 2.1.0 introduced packed repeated fields.\n * Setting the field option `[packed = true]` enables packing.\n *\n * In proto3, all repeated fields are packed by default.\n * Setting the field option `[packed = false]` disables packing.\n *\n * Packed repeated fields are encoded with a single tag,\n * then a length-delimiter, then the element values.\n *\n * Unpacked repeated fields are encoded with a tag and\n * value for each element.\n *\n * `bytes` and `string` cannot be packed.\n */\nexport var RepeatType;\n(function (RepeatType) {\n    /**\n     * The field is not repeated.\n     */\n    RepeatType[RepeatType[\"NO\"] = 0] = \"NO\";\n    /**\n     * The field is repeated and should be packed.\n     * Invalid for `bytes` and `string`, they cannot be packed.\n     */\n    RepeatType[RepeatType[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * The field is repeated but should not be packed.\n     * The only valid repeat type for repeated `bytes` and `string`.\n     */\n    RepeatType[RepeatType[\"UNPACKED\"] = 2] = \"UNPACKED\";\n})(RepeatType || (RepeatType = {}));\n/**\n * Turns PartialFieldInfo into FieldInfo.\n */\nexport function normalizeFieldInfo(field) {\n    var _a, _b, _c, _d;\n    field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);\n    field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);\n    field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;\n    field.opt = (_d = field.opt) !== null && _d !== void 0 ? _d : (field.repeat ? false : field.oneof ? false : field.kind == \"message\");\n    return field;\n}\n/**\n * Read custom field options from a generated message type.\n *\n * @deprecated use readFieldOption()\n */\nexport function readFieldOptions(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readFieldOption(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    if (!options) {\n        return undefined;\n    }\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readMessageOption(messageType, extensionName, extensionType) {\n    const options = messageType.options;\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\n","/**\n * Is the given value a valid oneof group?\n *\n * We represent protobuf `oneof` as algebraic data types (ADT) in generated\n * code. But when working with messages of unknown type, the ADT does not\n * help us.\n *\n * This type guard checks if the given object adheres to the ADT rules, which\n * are as follows:\n *\n * 1) Must be an object.\n *\n * 2) Must have a \"oneofKind\" discriminator property.\n *\n * 3) If \"oneofKind\" is `undefined`, no member field is selected. The object\n * must not have any other properties.\n *\n * 4) If \"oneofKind\" is a `string`, the member field with this name is\n * selected.\n *\n * 5) If a member field is selected, the object must have a second property\n * with this name. The property must not be `undefined`.\n *\n * 6) No extra properties are allowed. The object has either one property\n * (no selection) or two properties (selection).\n *\n */\nexport function isOneofGroup(any) {\n    if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {\n        return false;\n    }\n    switch (typeof any.oneofKind) {\n        case \"string\":\n            if (any[any.oneofKind] === undefined)\n                return false;\n            return Object.keys(any).length == 2;\n        case \"undefined\":\n            return Object.keys(any).length == 1;\n        default:\n            return false;\n    }\n}\n/**\n * Returns the value of the given field in a oneof group.\n */\nexport function getOneofValue(oneof, kind) {\n    return oneof[kind];\n}\nexport function setOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined) {\n        oneof[kind] = value;\n    }\n}\nexport function setUnknownOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined && kind !== undefined) {\n        oneof[kind] = value;\n    }\n}\n/**\n * Removes the selected field in a oneof group.\n *\n * Note that the recommended way to modify a oneof group is to set\n * a new object:\n *\n * ```ts\n * message.result = { oneofKind: undefined };\n * ```\n */\nexport function clearOneofValue(oneof) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = undefined;\n}\n/**\n * Returns the selected value of the given oneof group.\n *\n * Not that the recommended way to access a oneof group is to check\n * the \"oneofKind\" property and let TypeScript narrow down the union\n * type for you:\n *\n * ```ts\n * if (message.result.oneofKind === \"error\") {\n *   message.result.error; // string\n * }\n * ```\n *\n * In the rare case you just need the value, and do not care about\n * which protobuf field is selected, you can use this function\n * for convenience.\n */\nexport function getSelectedOneofValue(oneof) {\n    if (oneof.oneofKind === undefined) {\n        return undefined;\n    }\n    return oneof[oneof.oneofKind];\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { isOneofGroup } from \"./oneof\";\n// noinspection JSMethodCanBeStatic\nexport class ReflectionTypeCheck {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    prepare() {\n        if (this.data)\n            return;\n        const req = [], known = [], oneofs = [];\n        for (let field of this.fields) {\n            if (field.oneof) {\n                if (!oneofs.includes(field.oneof)) {\n                    oneofs.push(field.oneof);\n                    req.push(field.oneof);\n                    known.push(field.oneof);\n                }\n            }\n            else {\n                known.push(field.localName);\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        if (!field.opt || field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"message\":\n                        if (field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"map\":\n                        req.push(field.localName);\n                        break;\n                }\n            }\n        }\n        this.data = { req, known, oneofs: Object.values(oneofs) };\n    }\n    /**\n     * Is the argument a valid message as specified by the\n     * reflection information?\n     *\n     * Checks all field types recursively. The `depth`\n     * specifies how deep into the structure the check will be.\n     *\n     * With a depth of 0, only the presence of fields\n     * is checked.\n     *\n     * With a depth of 1 or more, the field types are checked.\n     *\n     * With a depth of 2 or more, the members of map, repeated\n     * and message fields are checked.\n     *\n     * Message fields will be checked recursively with depth - 1.\n     *\n     * The number of map entries / repeated values being checked\n     * is < depth.\n     */\n    is(message, depth, allowExcessProperties = false) {\n        if (depth < 0)\n            return true;\n        if (message === null || message === undefined || typeof message != 'object')\n            return false;\n        this.prepare();\n        let keys = Object.keys(message), data = this.data;\n        // if a required field is missing in arg, this cannot be a T\n        if (keys.length < data.req.length || data.req.some(n => !keys.includes(n)))\n            return false;\n        if (!allowExcessProperties) {\n            // if the arg contains a key we dont know, this is not a literal T\n            if (keys.some(k => !data.known.includes(k)))\n                return false;\n        }\n        // \"With a depth of 0, only the presence and absence of fields is checked.\"\n        // \"With a depth of 1 or more, the field types are checked.\"\n        if (depth < 1) {\n            return true;\n        }\n        // check oneof group\n        for (const name of data.oneofs) {\n            const group = message[name];\n            if (!isOneofGroup(group))\n                return false;\n            if (group.oneofKind === undefined)\n                continue;\n            const field = this.fields.find(f => f.localName === group.oneofKind);\n            if (!field)\n                return false; // we found no field, but have a kind, something is wrong\n            if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth))\n                return false;\n        }\n        // check types\n        for (const field of this.fields) {\n            if (field.oneof !== undefined)\n                continue;\n            if (!this.field(message[field.localName], field, allowExcessProperties, depth))\n                return false;\n        }\n        return true;\n    }\n    field(arg, field, allowExcessProperties, depth) {\n        let repeated = field.repeat;\n        switch (field.kind) {\n            case \"scalar\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, field.T, depth, field.L);\n                return this.scalar(arg, field.T, field.L);\n            case \"enum\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, ScalarType.INT32, depth);\n                return this.scalar(arg, ScalarType.INT32);\n            case \"message\":\n                if (arg === undefined)\n                    return true;\n                if (repeated)\n                    return this.messages(arg, field.T(), allowExcessProperties, depth);\n                return this.message(arg, field.T(), allowExcessProperties, depth);\n            case \"map\":\n                if (typeof arg != 'object' || arg === null)\n                    return false;\n                if (depth < 2)\n                    return true;\n                if (!this.mapKeys(arg, field.K, depth))\n                    return false;\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);\n                    case \"enum\":\n                        return this.scalars(Object.values(arg), ScalarType.INT32, depth);\n                    case \"message\":\n                        return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);\n                }\n                break;\n        }\n        return true;\n    }\n    message(arg, type, allowExcessProperties, depth) {\n        if (allowExcessProperties) {\n            return type.isAssignable(arg, depth);\n        }\n        return type.is(arg, depth);\n    }\n    messages(arg, type, allowExcessProperties, depth) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (allowExcessProperties) {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.isAssignable(arg[i], depth - 1))\n                    return false;\n        }\n        else {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.is(arg[i], depth - 1))\n                    return false;\n        }\n        return true;\n    }\n    scalar(arg, type, longType) {\n        let argType = typeof arg;\n        switch (type) {\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                switch (longType) {\n                    case LongType.BIGINT:\n                        return argType == \"bigint\";\n                    case LongType.NUMBER:\n                        return argType == \"number\" && !isNaN(arg);\n                    default:\n                        return argType == \"string\";\n                }\n            case ScalarType.BOOL:\n                return argType == 'boolean';\n            case ScalarType.STRING:\n                return argType == 'string';\n            case ScalarType.BYTES:\n                return arg instanceof Uint8Array;\n            case ScalarType.DOUBLE:\n            case ScalarType.FLOAT:\n                return argType == 'number' && !isNaN(arg);\n            default:\n                // case ScalarType.UINT32:\n                // case ScalarType.FIXED32:\n                // case ScalarType.INT32:\n                // case ScalarType.SINT32:\n                // case ScalarType.SFIXED32:\n                return argType == 'number' && Number.isInteger(arg);\n        }\n    }\n    scalars(arg, type, depth, longType) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (Array.isArray(arg))\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!this.scalar(arg[i], type, longType))\n                    return false;\n        return true;\n    }\n    mapKeys(map, type, depth) {\n        let keys = Object.keys(map);\n        switch (type) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n            case ScalarType.UINT32:\n                return this.scalars(keys.slice(0, depth).map(k => parseInt(k)), type, depth);\n            case ScalarType.BOOL:\n                return this.scalars(keys.slice(0, depth).map(k => k == 'true' ? true : k == 'false' ? false : k), type, depth);\n            default:\n                return this.scalars(keys, type, depth, LongType.STRING);\n        }\n    }\n}\n","import { LongType } from \"./reflection-info\";\n/**\n * Utility method to convert a PbLong or PbUlong to a JavaScript\n * representation during runtime.\n *\n * Works with generated field information, `undefined` is equivalent\n * to `STRING`.\n */\nexport function reflectionLongConvert(long, type) {\n    switch (type) {\n        case LongType.BIGINT:\n            return long.toBigInt();\n        case LongType.NUMBER:\n            return long.toNumber();\n        default:\n            // case undefined:\n            // case LongType.STRING:\n            return long.toString();\n    }\n}\n","import { isJsonObject, typeofJsonValue } from \"./json-typings\";\nimport { base64decode } from \"./base64\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\n/**\n * Reads proto3 messages in canonical JSON format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (this.fMap === undefined) {\n            this.fMap = {};\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            for (const field of fieldsInput) {\n                this.fMap[field.name] = field;\n                this.fMap[field.jsonName] = field;\n                this.fMap[field.localName] = field;\n            }\n        }\n    }\n    // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.\n    assert(condition, fieldName, jsonValue) {\n        if (!condition) {\n            let what = typeofJsonValue(jsonValue);\n            if (what == \"number\" || what == \"boolean\")\n                what = jsonValue.toString();\n            throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);\n        }\n    }\n    /**\n     * Reads a message from canonical JSON format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(input, message, options) {\n        this.prepare();\n        const oneofsHandled = [];\n        for (const [jsonKey, jsonValue] of Object.entries(input)) {\n            const field = this.fMap[jsonKey];\n            if (!field) {\n                if (!options.ignoreUnknownFields)\n                    throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);\n                continue;\n            }\n            const localName = field.localName;\n            // handle oneof ADT\n            let target; // this will be the target for the field value, whether it is member of a oneof or not\n            if (field.oneof) {\n                if (jsonValue === null && (field.kind !== 'enum' || field.T()[0] !== 'google.protobuf.NullValue')) {\n                    continue;\n                }\n                // since json objects are unordered by specification, it is not possible to take the last of multiple oneofs\n                if (oneofsHandled.includes(field.oneof))\n                    throw new Error(`Multiple members of the oneof group \"${field.oneof}\" of ${this.info.typeName} are present in JSON.`);\n                oneofsHandled.push(field.oneof);\n                target = message[field.oneof] = {\n                    oneofKind: localName\n                };\n            }\n            else {\n                target = message;\n            }\n            // we have handled oneof above. we just have read the value into `target`.\n            if (field.kind == 'map') {\n                if (jsonValue === null) {\n                    continue;\n                }\n                // check input\n                this.assert(isJsonObject(jsonValue), field.name, jsonValue);\n                // our target to put map entries into\n                const fieldObj = target[localName];\n                // read entries\n                for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {\n                    this.assert(jsonObjValue !== null, field.name + \" map value\", null);\n                    // read value\n                    let val;\n                    switch (field.V.kind) {\n                        case \"message\":\n                            val = field.V.T().internalJsonRead(jsonObjValue, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.V.T(), jsonObjValue, field.name, options.ignoreUnknownFields);\n                            if (val === false)\n                                continue;\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name + \" map value\", jsonObjValue);\n                    // read key\n                    let key = jsonObjKey;\n                    if (field.K == ScalarType.BOOL)\n                        key = key == \"true\" ? true : key == \"false\" ? false : key;\n                    key = this.scalar(key, field.K, LongType.STRING, field.name).toString();\n                    fieldObj[key] = val;\n                }\n            }\n            else if (field.repeat) {\n                if (jsonValue === null)\n                    continue;\n                // check input\n                this.assert(Array.isArray(jsonValue), field.name, jsonValue);\n                // our target to put array entries into\n                const fieldArr = target[localName];\n                // read array entries\n                for (const jsonItem of jsonValue) {\n                    this.assert(jsonItem !== null, field.name, null);\n                    let val;\n                    switch (field.kind) {\n                        case \"message\":\n                            val = field.T().internalJsonRead(jsonItem, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.T(), jsonItem, field.name, options.ignoreUnknownFields);\n                            if (val === false)\n                                continue;\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonItem, field.T, field.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name, jsonValue);\n                    fieldArr.push(val);\n                }\n            }\n            else {\n                switch (field.kind) {\n                    case \"message\":\n                        if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {\n                            this.assert(field.oneof === undefined, field.name + \" (oneof member)\", null);\n                            continue;\n                        }\n                        target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);\n                        break;\n                    case \"enum\":\n                        let val = this.enum(field.T(), jsonValue, field.name, options.ignoreUnknownFields);\n                        if (val === false)\n                            continue;\n                        target[localName] = val;\n                        break;\n                    case \"scalar\":\n                        target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * Returns `false` for unrecognized string representations.\n     *\n     * google.protobuf.NullValue accepts only JSON `null` (or the old `\"NULL_VALUE\"`).\n     */\n    enum(type, json, fieldName, ignoreUnknownFields) {\n        if (type[0] == 'google.protobuf.NullValue')\n            assert(json === null || json === \"NULL_VALUE\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`);\n        if (json === null)\n            // we require 0 to be default value for all enums\n            return 0;\n        switch (typeof json) {\n            case \"number\":\n                assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);\n                return json;\n            case \"string\":\n                let localEnumName = json;\n                if (type[2] && json.substring(0, type[2].length) === type[2])\n                    // lookup without the shared prefix\n                    localEnumName = json.substring(type[2].length);\n                let enumNumber = type[1][localEnumName];\n                if (typeof enumNumber === 'undefined' && ignoreUnknownFields) {\n                    return false;\n                }\n                assert(typeof enumNumber == \"number\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for \"${json}\".`);\n                return enumNumber;\n        }\n        assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}\".`);\n    }\n    scalar(json, type, longType, fieldName) {\n        let e;\n        try {\n            switch (type) {\n                // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n                // Either numbers or strings are accepted. Exponent notation is also accepted.\n                case ScalarType.DOUBLE:\n                case ScalarType.FLOAT:\n                    if (json === null)\n                        return .0;\n                    if (json === \"NaN\")\n                        return Number.NaN;\n                    if (json === \"Infinity\")\n                        return Number.POSITIVE_INFINITY;\n                    if (json === \"-Infinity\")\n                        return Number.NEGATIVE_INFINITY;\n                    if (json === \"\") {\n                        e = \"empty string\";\n                        break;\n                    }\n                    if (typeof json == \"string\" && json.trim().length !== json.length) {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    if (typeof json != \"string\" && typeof json != \"number\") {\n                        break;\n                    }\n                    let float = Number(json);\n                    if (Number.isNaN(float)) {\n                        e = \"not a number\";\n                        break;\n                    }\n                    if (!Number.isFinite(float)) {\n                        // infinity and -infinity are handled by string representation above, so this is an error\n                        e = \"too large or small\";\n                        break;\n                    }\n                    if (type == ScalarType.FLOAT)\n                        assertFloat32(float);\n                    return float;\n                // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n                case ScalarType.INT32:\n                case ScalarType.FIXED32:\n                case ScalarType.SFIXED32:\n                case ScalarType.SINT32:\n                case ScalarType.UINT32:\n                    if (json === null)\n                        return 0;\n                    let int32;\n                    if (typeof json == \"number\")\n                        int32 = json;\n                    else if (json === \"\")\n                        e = \"empty string\";\n                    else if (typeof json == \"string\") {\n                        if (json.trim().length !== json.length)\n                            e = \"extra whitespace\";\n                        else\n                            int32 = Number(json);\n                    }\n                    if (int32 === undefined)\n                        break;\n                    if (type == ScalarType.UINT32)\n                        assertUInt32(int32);\n                    else\n                        assertInt32(int32);\n                    return int32;\n                // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n                case ScalarType.INT64:\n                case ScalarType.SFIXED64:\n                case ScalarType.SINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbLong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbLong.from(json), longType);\n                case ScalarType.FIXED64:\n                case ScalarType.UINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbULong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbULong.from(json), longType);\n                // bool:\n                case ScalarType.BOOL:\n                    if (json === null)\n                        return false;\n                    if (typeof json !== \"boolean\")\n                        break;\n                    return json;\n                // string:\n                case ScalarType.STRING:\n                    if (json === null)\n                        return \"\";\n                    if (typeof json !== \"string\") {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    try {\n                        encodeURIComponent(json);\n                    }\n                    catch (e) {\n                        e = \"invalid UTF8\";\n                        break;\n                    }\n                    return json;\n                // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n                // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n                case ScalarType.BYTES:\n                    if (json === null || json === \"\")\n                        return new Uint8Array(0);\n                    if (typeof json !== 'string')\n                        break;\n                    return base64decode(json);\n            }\n        }\n        catch (error) {\n            e = error.message;\n        }\n        this.assert(false, fieldName + (e ? \" - \" + e : \"\"), json);\n    }\n}\n","import { base64encode } from \"./base64\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { ScalarType } from \"./reflection-info\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\n/**\n * Writes proto3 messages in canonical JSON format using reflection\n * information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonWriter {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Converts the message to a JSON object, based on the field descriptors.\n     */\n    write(message, options) {\n        const json = {}, source = message;\n        for (const field of this.fields) {\n            // field is not part of a oneof, simply write as is\n            if (!field.oneof) {\n                let jsonValue = this.field(field, source[field.localName], options);\n                if (jsonValue !== undefined)\n                    json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n                continue;\n            }\n            // field is part of a oneof\n            const group = source[field.oneof];\n            if (group.oneofKind !== field.localName)\n                continue; // not selected, skip\n            const opt = field.kind == 'scalar' || field.kind == 'enum'\n                ? Object.assign(Object.assign({}, options), { emitDefaultValues: true }) : options;\n            let jsonValue = this.field(field, group[field.localName], opt);\n            assert(jsonValue !== undefined);\n            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        return json;\n    }\n    field(field, value, options) {\n        let jsonValue = undefined;\n        if (field.kind == 'map') {\n            assert(typeof value == \"object\" && value !== null);\n            const jsonObj = {};\n            switch (field.V.kind) {\n                case \"scalar\":\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.scalar(field.V.T, entryValue, field.name, false, true);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.message(messageType, entryValue, field.name, options);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        assert(entryValue === undefined || typeof entryValue == 'number');\n                        const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n            }\n            if (options.emitDefaultValues || Object.keys(jsonObj).length > 0)\n                jsonValue = jsonObj;\n        }\n        else if (field.repeat) {\n            assert(Array.isArray(value));\n            const jsonArr = [];\n            switch (field.kind) {\n                case \"scalar\":\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.scalar(field.T, value[i], field.name, field.opt, true);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        assert(value[i] === undefined || typeof value[i] == 'number');\n                        const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.message(messageType, value[i], field.name, options);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n            }\n            // add converted array to json output\n            if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues)\n                jsonValue = jsonArr;\n        }\n        else {\n            switch (field.kind) {\n                case \"scalar\":\n                    jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);\n                    break;\n                case \"enum\":\n                    jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);\n                    break;\n                case \"message\":\n                    jsonValue = this.message(field.T(), value, field.name, options);\n                    break;\n            }\n        }\n        return jsonValue;\n    }\n    /**\n     * Returns `null` as the default for google.protobuf.NullValue.\n     */\n    enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {\n        if (type[0] == 'google.protobuf.NullValue')\n            return !emitDefaultValues && !optional ? undefined : null;\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        if (value === 0 && !emitDefaultValues && !optional)\n            // we require 0 to be default value for all enums\n            return undefined;\n        assert(typeof value == 'number');\n        assert(Number.isInteger(value));\n        if (enumAsInteger || !type[1].hasOwnProperty(value))\n            // if we don't now the enum value, just return the number\n            return value;\n        if (type[2])\n            // restore the dropped prefix\n            return type[2] + type[1][value];\n        return type[1][value];\n    }\n    message(type, value, fieldName, options) {\n        if (value === undefined)\n            return options.emitDefaultValues ? null : undefined;\n        return type.internalJsonWrite(value, options);\n    }\n    scalar(type, value, fieldName, optional, emitDefaultValues) {\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        const ed = emitDefaultValues || optional;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (type) {\n            // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n            case ScalarType.INT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertInt32(value);\n                return value;\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertUInt32(value);\n                return value;\n            // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n            // Either numbers or strings are accepted. Exponent notation is also accepted.\n            case ScalarType.FLOAT:\n                assertFloat32(value);\n            case ScalarType.DOUBLE:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assert(typeof value == 'number');\n                if (Number.isNaN(value))\n                    return 'NaN';\n                if (value === Number.POSITIVE_INFINITY)\n                    return 'Infinity';\n                if (value === Number.NEGATIVE_INFINITY)\n                    return '-Infinity';\n                return value;\n            // string:\n            case ScalarType.STRING:\n                if (value === \"\")\n                    return ed ? '' : undefined;\n                assert(typeof value == 'string');\n                return value;\n            // bool:\n            case ScalarType.BOOL:\n                if (value === false)\n                    return ed ? false : undefined;\n                assert(typeof value == 'boolean');\n                return value;\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let ulong = PbULong.from(value);\n                if (ulong.isZero() && !ed)\n                    return undefined;\n                return ulong.toString();\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let long = PbLong.from(value);\n                if (long.isZero() && !ed)\n                    return undefined;\n                return long.toString();\n            // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n            // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n            case ScalarType.BYTES:\n                assert(value instanceof Uint8Array);\n                if (!value.byteLength)\n                    return ed ? \"\" : undefined;\n                return base64encode(value);\n        }\n    }\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Creates the default value for a scalar type.\n */\nexport function reflectionScalarDefault(type, longType = LongType.STRING) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            return reflectionLongConvert(PbULong.ZERO, longType);\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            return reflectionLongConvert(PbLong.ZERO, longType);\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // case ScalarType.INT32:\n            // case ScalarType.UINT32:\n            // case ScalarType.SINT32:\n            // case ScalarType.FIXED32:\n            // case ScalarType.SFIXED32:\n            return 0;\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { reflectionScalarDefault } from \"./reflection-scalar-default\";\n/**\n * Reads proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (!this.fieldNoToField) {\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            this.fieldNoToField = new Map(fieldsInput.map(field => [field.no, field]));\n        }\n    }\n    /**\n     * Reads a message from binary format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(reader, message, options, length) {\n        this.prepare();\n        const end = length === undefined ? reader.len : reader.pos + length;\n        while (reader.pos < end) {\n            // read the tag and find the field\n            const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);\n            if (!field) {\n                let u = options.readUnknownField;\n                if (u == \"throw\")\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);\n                let d = reader.skip(wireType);\n                if (u !== false)\n                    (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);\n                continue;\n            }\n            // target object for the field we are reading\n            let target = message, repeated = field.repeat, localName = field.localName;\n            // if field is member of oneof ADT, use ADT as target\n            if (field.oneof) {\n                target = target[field.oneof];\n                // if other oneof member selected, set new ADT\n                if (target.oneofKind !== localName)\n                    target = message[field.oneof] = {\n                        oneofKind: localName\n                    };\n            }\n            // we have handled oneof above, we just have read the value into `target[localName]`\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    let L = field.kind == \"scalar\" ? field.L : undefined;\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {\n                            let e = reader.uint32() + reader.pos;\n                            while (reader.pos < e)\n                                arr.push(this.scalar(reader, T, L));\n                        }\n                        else\n                            arr.push(this.scalar(reader, T, L));\n                    }\n                    else\n                        target[localName] = this.scalar(reader, T, L);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);\n                        arr.push(msg);\n                    }\n                    else\n                        target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);\n                    break;\n                case \"map\":\n                    let [mapKey, mapVal] = this.mapEntry(field, reader, options);\n                    // safe to assume presence of map object, oneof cannot contain repeated values\n                    target[localName][mapKey] = mapVal;\n                    break;\n            }\n        }\n    }\n    /**\n     * Read a map field, expecting key field = 1, value field = 2\n     */\n    mapEntry(field, reader, options) {\n        let length = reader.uint32();\n        let end = reader.pos + length;\n        let key = undefined; // javascript only allows number or string for object properties\n        let val = undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    if (field.K == ScalarType.BOOL)\n                        key = reader.bool().toString();\n                    else\n                        // long types are read as string, number types are okay as number\n                        key = this.scalar(reader, field.K, LongType.STRING);\n                    break;\n                case 2:\n                    switch (field.V.kind) {\n                        case \"scalar\":\n                            val = this.scalar(reader, field.V.T, field.V.L);\n                            break;\n                        case \"enum\":\n                            val = reader.int32();\n                            break;\n                        case \"message\":\n                            val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);\n                            break;\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);\n            }\n        }\n        if (key === undefined) {\n            let keyRaw = reflectionScalarDefault(field.K);\n            key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n        }\n        if (val === undefined)\n            switch (field.V.kind) {\n                case \"scalar\":\n                    val = reflectionScalarDefault(field.V.T, field.V.L);\n                    break;\n                case \"enum\":\n                    val = 0;\n                    break;\n                case \"message\":\n                    val = field.V.T().create();\n                    break;\n            }\n        return [key, val];\n    }\n    scalar(reader, type, longType) {\n        switch (type) {\n            case ScalarType.INT32:\n                return reader.int32();\n            case ScalarType.STRING:\n                return reader.string();\n            case ScalarType.BOOL:\n                return reader.bool();\n            case ScalarType.DOUBLE:\n                return reader.double();\n            case ScalarType.FLOAT:\n                return reader.float();\n            case ScalarType.INT64:\n                return reflectionLongConvert(reader.int64(), longType);\n            case ScalarType.UINT64:\n                return reflectionLongConvert(reader.uint64(), longType);\n            case ScalarType.FIXED64:\n                return reflectionLongConvert(reader.fixed64(), longType);\n            case ScalarType.FIXED32:\n                return reader.fixed32();\n            case ScalarType.BYTES:\n                return reader.bytes();\n            case ScalarType.UINT32:\n                return reader.uint32();\n            case ScalarType.SFIXED32:\n                return reader.sfixed32();\n            case ScalarType.SFIXED64:\n                return reflectionLongConvert(reader.sfixed64(), longType);\n            case ScalarType.SINT32:\n                return reader.sint32();\n            case ScalarType.SINT64:\n                return reflectionLongConvert(reader.sint64(), longType);\n        }\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { RepeatType, ScalarType } from \"./reflection-info\";\nimport { assert } from \"./assert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Writes proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryWriter {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        if (!this.fields) {\n            const fieldsInput = this.info.fields ? this.info.fields.concat() : [];\n            this.fields = fieldsInput.sort((a, b) => a.no - b.no);\n        }\n    }\n    /**\n     * Writes the message to binary format.\n     */\n    write(message, writer, options) {\n        this.prepare();\n        for (const field of this.fields) {\n            let value, // this will be our field value, whether it is member of a oneof or not\n            emitDefault, // whether we emit the default value (only true for oneof members)\n            repeated = field.repeat, localName = field.localName;\n            // handle oneof ADT\n            if (field.oneof) {\n                const group = message[field.oneof];\n                if (group.oneofKind !== localName)\n                    continue; // if field is not selected, skip\n                value = group[localName];\n                emitDefault = true;\n            }\n            else {\n                value = message[localName];\n                emitDefault = false;\n            }\n            // we have handled oneof above. we just have to honor `emitDefault`.\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        if (repeated == RepeatType.PACKED)\n                            this.packed(writer, T, field.no, value);\n                        else\n                            for (const item of value)\n                                this.scalar(writer, T, field.no, item, true);\n                    }\n                    else if (value === undefined)\n                        assert(field.opt);\n                    else\n                        this.scalar(writer, T, field.no, value, emitDefault || field.opt);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        for (const item of value)\n                            this.message(writer, options, field.T(), field.no, item);\n                    }\n                    else {\n                        this.message(writer, options, field.T(), field.no, value);\n                    }\n                    break;\n                case \"map\":\n                    assert(typeof value == 'object' && value !== null);\n                    for (const [key, val] of Object.entries(value))\n                        this.mapEntry(writer, options, field, key, val);\n                    break;\n            }\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);\n    }\n    mapEntry(writer, options, field, key, value) {\n        writer.tag(field.no, WireType.LengthDelimited);\n        writer.fork();\n        // javascript only allows number or string for object properties\n        // we convert from our representation to the protobuf type\n        let keyValue = key;\n        switch (field.K) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                keyValue = Number.parseInt(key);\n                break;\n            case ScalarType.BOOL:\n                assert(key == 'true' || key == 'false');\n                keyValue = key == 'true';\n                break;\n        }\n        // write key, expecting key field number = 1\n        this.scalar(writer, field.K, 1, keyValue, true);\n        // write value, expecting value field number = 2\n        switch (field.V.kind) {\n            case 'scalar':\n                this.scalar(writer, field.V.T, 2, value, true);\n                break;\n            case 'enum':\n                this.scalar(writer, ScalarType.INT32, 2, value, true);\n                break;\n            case 'message':\n                this.message(writer, options, field.V.T(), 2, value);\n                break;\n        }\n        writer.join();\n    }\n    message(writer, options, handler, fieldNo, value) {\n        if (value === undefined)\n            return;\n        handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);\n        writer.join();\n    }\n    /**\n     * Write a single scalar value.\n     */\n    scalar(writer, type, fieldNo, value, emitDefault) {\n        let [wireType, method, isDefault] = this.scalarInfo(type, value);\n        if (!isDefault || emitDefault) {\n            writer.tag(fieldNo, wireType);\n            writer[method](value);\n        }\n    }\n    /**\n     * Write an array of scalar values in packed format.\n     */\n    packed(writer, type, fieldNo, value) {\n        if (!value.length)\n            return;\n        assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);\n        // write tag\n        writer.tag(fieldNo, WireType.LengthDelimited);\n        // begin length-delimited\n        writer.fork();\n        // write values without tags\n        let [, method,] = this.scalarInfo(type);\n        for (let i = 0; i < value.length; i++)\n            writer[method](value[i]);\n        // end length delimited\n        writer.join();\n    }\n    /**\n     * Get information for writing a scalar value.\n     *\n     * Returns tuple:\n     * [0]: appropriate WireType\n     * [1]: name of the appropriate method of IBinaryWriter\n     * [2]: whether the given value is a default value\n     *\n     * If argument `value` is omitted, [2] is always false.\n     */\n    scalarInfo(type, value) {\n        let t = WireType.Varint;\n        let m;\n        let i = value === undefined;\n        let d = value === 0;\n        switch (type) {\n            case ScalarType.INT32:\n                m = \"int32\";\n                break;\n            case ScalarType.STRING:\n                d = i || !value.length;\n                t = WireType.LengthDelimited;\n                m = \"string\";\n                break;\n            case ScalarType.BOOL:\n                d = value === false;\n                m = \"bool\";\n                break;\n            case ScalarType.UINT32:\n                m = \"uint32\";\n                break;\n            case ScalarType.DOUBLE:\n                t = WireType.Bit64;\n                m = \"double\";\n                break;\n            case ScalarType.FLOAT:\n                t = WireType.Bit32;\n                m = \"float\";\n                break;\n            case ScalarType.INT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"int64\";\n                break;\n            case ScalarType.UINT64:\n                d = i || PbULong.from(value).isZero();\n                m = \"uint64\";\n                break;\n            case ScalarType.FIXED64:\n                d = i || PbULong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"fixed64\";\n                break;\n            case ScalarType.BYTES:\n                d = i || !value.byteLength;\n                t = WireType.LengthDelimited;\n                m = \"bytes\";\n                break;\n            case ScalarType.FIXED32:\n                t = WireType.Bit32;\n                m = \"fixed32\";\n                break;\n            case ScalarType.SFIXED32:\n                t = WireType.Bit32;\n                m = \"sfixed32\";\n                break;\n            case ScalarType.SFIXED64:\n                d = i || PbLong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"sfixed64\";\n                break;\n            case ScalarType.SINT32:\n                m = \"sint32\";\n                break;\n            case ScalarType.SINT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"sint64\";\n                break;\n        }\n        return [t, m, i || d];\n    }\n}\n","import { reflectionScalarDefault } from \"./reflection-scalar-default\";\nimport { MESSAGE_TYPE } from './message-type-contract';\n/**\n * Creates an instance of the generic message, using the field\n * information.\n */\nexport function reflectionCreate(type) {\n    const msg = {};\n    Object.defineProperty(msg, MESSAGE_TYPE, { enumerable: false, value: type });\n    for (let field of type.fields) {\n        let name = field.localName;\n        if (field.opt)\n            continue;\n        if (field.oneof)\n            msg[field.oneof] = { oneofKind: undefined };\n        else if (field.repeat)\n            msg[name] = [];\n        else\n            switch (field.kind) {\n                case \"scalar\":\n                    msg[name] = reflectionScalarDefault(field.T, field.L);\n                    break;\n                case \"enum\":\n                    // we require 0 to be default value for all enums\n                    msg[name] = 0;\n                    break;\n                case \"map\":\n                    msg[name] = {};\n                    break;\n            }\n    }\n    return msg;\n}\n","/**\n * Copy partial data into the target message.\n *\n * If a singular scalar or enum field is present in the source, it\n * replaces the field in the target.\n *\n * If a singular message field is present in the source, it is merged\n * with the target field by calling mergePartial() of the responsible\n * message type.\n *\n * If a repeated field is present in the source, its values replace\n * all values in the target array, removing extraneous values.\n * Repeated message fields are copied, not merged.\n *\n * If a map field is present in the source, entries are added to the\n * target map, replacing entries with the same key. Entries that only\n * exist in the target remain. Entries with message values are copied,\n * not merged.\n *\n * Note that this function differs from protobuf merge semantics,\n * which appends repeated fields.\n */\nexport function reflectionMergePartial(info, target, source) {\n    let fieldValue, // the field value we are working with\n    input = source, output; // where we want our field value to go\n    for (let field of info.fields) {\n        let name = field.localName;\n        if (field.oneof) {\n            const group = input[field.oneof]; // this is the oneof`s group in the source\n            if ((group === null || group === void 0 ? void 0 : group.oneofKind) == undefined) { // the user is free to omit\n                continue; // we skip this field, and all other members too\n            }\n            fieldValue = group[name]; // our value comes from the the oneof group of the source\n            output = target[field.oneof]; // and our output is the oneof group of the target\n            output.oneofKind = group.oneofKind; // always update discriminator\n            if (fieldValue == undefined) {\n                delete output[name]; // remove any existing value\n                continue; // skip further work on field\n            }\n        }\n        else {\n            fieldValue = input[name]; // we are using the source directly\n            output = target; // we want our field value to go directly into the target\n            if (fieldValue == undefined) {\n                continue; // skip further work on field, existing value is used as is\n            }\n        }\n        if (field.repeat)\n            output[name].length = fieldValue.length; // resize target array to match source array\n        // now we just work with `fieldValue` and `output` to merge the value\n        switch (field.kind) {\n            case \"scalar\":\n            case \"enum\":\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = fieldValue[i]; // not a reference type\n                else\n                    output[name] = fieldValue; // not a reference type\n                break;\n            case \"message\":\n                let T = field.T();\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = T.create(fieldValue[i]);\n                else if (output[name] === undefined)\n                    output[name] = T.create(fieldValue); // nothing to merge with\n                else\n                    T.mergePartial(output[name], fieldValue);\n                break;\n            case \"map\":\n                // Map and repeated fields are simply overwritten, not appended or merged\n                switch (field.V.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        Object.assign(output[name], fieldValue); // elements are not reference types\n                        break;\n                    case \"message\":\n                        let T = field.V.T();\n                        for (let k of Object.keys(fieldValue))\n                            output[name][k] = T.create(fieldValue[k]);\n                        break;\n                }\n                break;\n        }\n    }\n}\n","import { ScalarType } from \"./reflection-info\";\n/**\n * Determines whether two message of the same type have the same field values.\n * Checks for deep equality, traversing repeated fields, oneof groups, maps\n * and messages recursively.\n * Will also return true if both messages are `undefined`.\n */\nexport function reflectionEquals(info, a, b) {\n    if (a === b)\n        return true;\n    if (!a || !b)\n        return false;\n    for (let field of info.fields) {\n        let localName = field.localName;\n        let val_a = field.oneof ? a[field.oneof][localName] : a[localName];\n        let val_b = field.oneof ? b[field.oneof][localName] : b[localName];\n        switch (field.kind) {\n            case \"enum\":\n            case \"scalar\":\n                let t = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                if (!(field.repeat\n                    ? repeatedPrimitiveEq(t, val_a, val_b)\n                    : primitiveEq(t, val_a, val_b)))\n                    return false;\n                break;\n            case \"map\":\n                if (!(field.V.kind == \"message\"\n                    ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b))\n                    : repeatedPrimitiveEq(field.V.kind == \"enum\" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b))))\n                    return false;\n                break;\n            case \"message\":\n                let T = field.T();\n                if (!(field.repeat\n                    ? repeatedMsgEq(T, val_a, val_b)\n                    : T.equals(val_a, val_b)))\n                    return false;\n                break;\n        }\n    }\n    return true;\n}\nconst objectValues = Object.values;\nfunction primitiveEq(type, a, b) {\n    if (a === b)\n        return true;\n    if (type !== ScalarType.BYTES)\n        return false;\n    let ba = a;\n    let bb = b;\n    if (ba.length !== bb.length)\n        return false;\n    for (let i = 0; i < ba.length; i++)\n        if (ba[i] != bb[i])\n            return false;\n    return true;\n}\nfunction repeatedPrimitiveEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!primitiveEq(type, a[i], b[i]))\n            return false;\n    return true;\n}\nfunction repeatedMsgEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!type.equals(a[i], b[i]))\n            return false;\n    return true;\n}\n","import { normalizeFieldInfo } from \"./reflection-info\";\nimport { ReflectionTypeCheck } from \"./reflection-type-check\";\nimport { ReflectionJsonReader } from \"./reflection-json-reader\";\nimport { ReflectionJsonWriter } from \"./reflection-json-writer\";\nimport { ReflectionBinaryReader } from \"./reflection-binary-reader\";\nimport { ReflectionBinaryWriter } from \"./reflection-binary-writer\";\nimport { reflectionCreate } from \"./reflection-create\";\nimport { reflectionMergePartial } from \"./reflection-merge-partial\";\nimport { typeofJsonValue } from \"./json-typings\";\nimport { jsonReadOptions, jsonWriteOptions, } from \"./json-format-contract\";\nimport { reflectionEquals } from \"./reflection-equals\";\nimport { binaryWriteOptions } from \"./binary-writer\";\nimport { binaryReadOptions } from \"./binary-reader\";\n/**\n * This standard message type provides reflection-based\n * operations to work with a message.\n */\nexport class MessageType {\n    constructor(name, fields, options) {\n        this.defaultCheckDepth = 16;\n        this.typeName = name;\n        this.fields = fields.map(normalizeFieldInfo);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.refTypeCheck = new ReflectionTypeCheck(this);\n        this.refJsonReader = new ReflectionJsonReader(this);\n        this.refJsonWriter = new ReflectionJsonWriter(this);\n        this.refBinReader = new ReflectionBinaryReader(this);\n        this.refBinWriter = new ReflectionBinaryWriter(this);\n    }\n    create(value) {\n        let message = reflectionCreate(this);\n        if (value !== undefined) {\n            reflectionMergePartial(this, message, value);\n        }\n        return message;\n    }\n    /**\n     * Clone the message.\n     *\n     * Unknown fields are discarded.\n     */\n    clone(message) {\n        let copy = this.create();\n        reflectionMergePartial(this, copy, message);\n        return copy;\n    }\n    /**\n     * Determines whether two message of the same type have the same field values.\n     * Checks for deep equality, traversing repeated fields, oneof groups, maps\n     * and messages recursively.\n     * Will also return true if both messages are `undefined`.\n     */\n    equals(a, b) {\n        return reflectionEquals(this, a, b);\n    }\n    /**\n     * Is the given value assignable to our message type\n     * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    is(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, false);\n    }\n    /**\n     * Is the given value assignable to our message type,\n     * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    isAssignable(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, true);\n    }\n    /**\n     * Copy partial data into the target message.\n     */\n    mergePartial(target, source) {\n        reflectionMergePartial(this, target, source);\n    }\n    /**\n     * Create a new message from binary format.\n     */\n    fromBinary(data, options) {\n        let opt = binaryReadOptions(options);\n        return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);\n    }\n    /**\n     * Read a new message from a JSON value.\n     */\n    fromJson(json, options) {\n        return this.internalJsonRead(json, jsonReadOptions(options));\n    }\n    /**\n     * Read a new message from a JSON string.\n     * This is equivalent to `T.fromJson(JSON.parse(json))`.\n     */\n    fromJsonString(json, options) {\n        let value = JSON.parse(json);\n        return this.fromJson(value, options);\n    }\n    /**\n     * Write the message to canonical JSON value.\n     */\n    toJson(message, options) {\n        return this.internalJsonWrite(message, jsonWriteOptions(options));\n    }\n    /**\n     * Convert the message to canonical JSON string.\n     * This is equivalent to `JSON.stringify(T.toJson(t))`\n     */\n    toJsonString(message, options) {\n        var _a;\n        let value = this.toJson(message, options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Write the message to binary format.\n     */\n    toBinary(message, options) {\n        let opt = binaryWriteOptions(options);\n        return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * JSON, use `fromJson()` or `fromJsonString()`.\n     *\n     * Reads JSON value and merges the fields into the target\n     * according to protobuf rules. If the target is omitted,\n     * a new instance is created first.\n     */\n    internalJsonRead(json, options, target) {\n        if (json !== null && typeof json == \"object\" && !Array.isArray(json)) {\n            let message = target !== null && target !== void 0 ? target : this.create();\n            this.refJsonReader.read(json, message, options);\n            return message;\n        }\n        throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * to JSON, use `toJson()` or `toJsonString().\n     *\n     * Writes JSON value and returns it.\n     */\n    internalJsonWrite(message, options) {\n        return this.refJsonWriter.write(message, options);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * in binary format, use `toBinary()`.\n     *\n     * Serializes the message in binary format and appends it to the given\n     * writer. Returns passed writer.\n     */\n    internalBinaryWrite(message, writer, options) {\n        this.refBinWriter.write(message, writer, options);\n        return writer;\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * binary data, use `fromBinary()`.\n     *\n     * Reads data from binary format and merges the fields into\n     * the target according to protobuf rules. If the target is\n     * omitted, a new instance is created first.\n     */\n    internalBinaryRead(reader, length, options, target) {\n        let message = target !== null && target !== void 0 ? target : this.create();\n        this.refBinReader.read(reader, message, options, length);\n        return message;\n    }\n}\n","import { MESSAGE_TYPE } from './message-type-contract';\n/**\n * Check if the provided object is a proto message.\n *\n * Note that this is an experimental feature - it is here to stay, but\n * implementation details may change without notice.\n */\nexport function containsMessageType(msg) {\n    return msg[MESSAGE_TYPE] != null;\n}\n","/**\n * Is this a lookup object generated by Typescript, for a Typescript enum\n * generated by protobuf-ts?\n *\n * - No `const enum` (enum must not be inlined, we need reverse mapping).\n * - No string enum (we need int32 for protobuf).\n * - Must have a value for 0 (otherwise, we would need to support custom default values).\n */\nexport function isEnumObject(arg) {\n    if (typeof arg != 'object' || arg === null) {\n        return false;\n    }\n    if (!arg.hasOwnProperty(0)) {\n        return false;\n    }\n    for (let k of Object.keys(arg)) {\n        let num = parseInt(k);\n        if (!Number.isNaN(num)) {\n            // is there a name for the number?\n            let nam = arg[num];\n            if (nam === undefined)\n                return false;\n            // does the name resolve back to the number?\n            if (arg[nam] !== num)\n                return false;\n        }\n        else {\n            // is there a number for the name?\n            let num = arg[k];\n            if (num === undefined)\n                return false;\n            // is it a string enum?\n            if (typeof num !== 'number')\n                return false;\n            // do we know the number?\n            if (arg[num] === undefined)\n                return false;\n        }\n    }\n    return true;\n}\n/**\n * Lists all values of a Typescript enum, as an array of objects with a \"name\"\n * property and a \"number\" property.\n *\n * Note that it is possible that a number appears more than once, because it is\n * possible to have aliases in an enum.\n *\n * Throws if the enum does not adhere to the rules of enums generated by\n * protobuf-ts. See `isEnumObject()`.\n */\nexport function listEnumValues(enumObject) {\n    if (!isEnumObject(enumObject))\n        throw new Error(\"not a typescript enum object\");\n    let values = [];\n    for (let [name, number] of Object.entries(enumObject))\n        if (typeof number == \"number\")\n            values.push({ name, number });\n    return values;\n}\n/**\n * Lists the names of a Typescript enum.\n *\n * Throws if the enum does not adhere to the rules of enums generated by\n * protobuf-ts. See `isEnumObject()`.\n */\nexport function listEnumNames(enumObject) {\n    return listEnumValues(enumObject).map(val => val.name);\n}\n/**\n * Lists the numbers of a Typescript enum.\n *\n * Throws if the enum does not adhere to the rules of enums generated by\n * protobuf-ts. See `isEnumObject()`.\n */\nexport function listEnumNumbers(enumObject) {\n    return listEnumValues(enumObject)\n        .map(val => val.number)\n        .filter((num, index, arr) => arr.indexOf(num) == index);\n}\n","import * as ContractName from '../types/ContractName.js';\nimport * as CredentialRegistrationId from '../types/CredentialRegistrationId.js';\nimport * as EntrypointName from '../types/EntrypointName.js';\nimport * as ModuleClient from '../types/ModuleClient.js';\n// To limit the exports meant only for internal use, we re-create the module exports.\nimport * as AccountAddress from './types/AccountAddress.js';\nimport * as BlockHash from './types/BlockHash.js';\nimport * as CcdAmount from './types/CcdAmount.js';\nimport * as ContractAddress from './types/ContractAddress.js';\nimport * as ContractEvent from './types/ContractEvent.js';\nimport * as Duration from './types/Duration.js';\nimport * as Energy from './types/Energy.js';\nimport * as InitName from './types/InitName.js';\nimport * as ModuleReference from './types/ModuleReference.js';\nimport * as Parameter from './types/Parameter.js';\nimport * as ReceiveName from './types/ReceiveName.js';\nimport * as ReturnValue from './types/ReturnValue.js';\nimport * as SequenceNumber from './types/SequenceNumber.js';\nimport * as Timestamp from './types/Timestamp.js';\nimport * as TransactionExpiry from './types/TransactionExpiry.js';\nimport * as TransactionHash from './types/TransactionHash.js';\n\n// Functionality revolving concordium domain types and utitlity for working with these types.\nexport * from '../types.js';\nexport { DataBlob } from '../types/DataBlob.js';\nexport {\n    getAccountTransactionHash,\n    getAccountTransactionSignDigest,\n    getCredentialDeploymentSignDigest,\n    getCredentialForExistingAccountSignDigest,\n    serializeAccountTransactionForSubmission,\n    serializeAccountTransactionPayload,\n    serializeAccountTransaction,\n} from '../serialization.js';\nexport { encodeHexString } from '../serializationHelpers.js';\nexport { sha256 } from '../hash.js';\n\nexport * from '../types/VersionedModuleSource.js';\nexport {\n    VerifiablePresentation,\n    reviveDateFromTimeStampAttribute,\n    replaceDateWithTimeStampAttribute,\n} from '../types/VerifiablePresentation.js';\n\nexport { deserializeAccountTransaction } from '../deserialization.js';\nexport * from '../signHelpers.js';\nexport * from '../versionedTypeHelpers.js';\nexport * from '../accountHelpers.js';\n\nexport { isHex, streamToList, unwrap } from '../util.js';\n\nexport * from '../accountTransactions.js';\nexport * from '../energyCost.js';\nexport * from '../commonProofTypes.js';\n\nexport * from '../uleb128.js';\nexport {\n    Schema,\n    Contract,\n    ContractDryRun,\n    ContractSchema,\n    ContractUpdateTransaction,\n    ContractTransactionMetadata,\n    ContractInvokeMetadata,\n    CreateContractTransactionMetadata,\n    ContractUpdateTransactionWithSchema,\n} from '../GenericContract.js';\n\nexport { TypedJsonParseError, TypedJsonParseErrorCode, TypedJson } from '../types/util.js';\nexport { jsonParse, jsonStringify, jsonUnwrapStringify, BigintFormatType } from '../types/json.js';\n\n// These cannot be exported directly as modules because of a bug in an eslint plugin.\n// https://github.com/import-js/eslint-plugin-import/issues/2289.\nexport {\n    ModuleClient,\n    Parameter,\n    ReturnValue,\n    SequenceNumber,\n    Energy,\n    TransactionHash,\n    BlockHash,\n    ContractName,\n    InitName,\n    ReceiveName,\n    CredentialRegistrationId,\n    AccountAddress,\n    ContractAddress,\n    EntrypointName,\n    Timestamp,\n    Duration,\n    ContractEvent,\n    CcdAmount,\n    TransactionExpiry,\n    ModuleReference,\n};\n\nexport * from '../types/cbor.js';\n","// Functionality for working with the CIS0 standard\nexport * from '../cis0.js';\n","module.exports = require(\"util\");","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {\n        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\nexports.randomBytes = randomBytes;\n//# sourceMappingURL=utils.js.map","const g=Symbol(\"CBOR_RANGES\");function c(r,n){Object.defineProperty(r,g,{configurable:!1,enumerable:!1,writable:!1,value:n})}function f(r){return r[g]}function l(r){return f(r)!==void 0}function R(r,n=0,t=r.length-1){const o=r.subarray(n,t),a=f(r);if(a){const s=[];for(const e of a)if(e[0]>=n&&e[0]+e[1]<=t){const i=[...e];i[0]-=n,s.push(i)}s.length&&c(o,s)}return o}function b(r){let n=Math.ceil(r.length/2);const t=new Uint8Array(n);n--;for(let o=r.length,a=o-2;o>=0;o=a,a-=2,n--)t[n]=parseInt(r.substring(a,o),16);return t}function A(r){return r.reduce((n,t)=>n+t.toString(16).padStart(2,\"0\"),\"\")}function d(r){const n=r.reduce((e,i)=>e+i.length,0),t=r.some(e=>l(e)),o=[],a=new Uint8Array(n);let s=0;for(const e of r){if(!(e instanceof Uint8Array))throw new TypeError(`Invalid array: ${e}`);if(a.set(e,s),t){const i=e[g]??[[0,e.length]];for(const u of i)u[0]+=s;o.push(...i)}s+=e.length}return t&&c(a,o),a}function y(r){const n=atob(r);return Uint8Array.from(n,t=>t.codePointAt(0))}const p={\"-\":\"+\",_:\"/\"};function x(r){const n=r.replace(/[_-]/g,t=>p[t]);return y(n.padEnd(Math.ceil(n.length/4)*4,\"=\"))}function h(){const r=new Uint8Array(4),n=new Uint32Array(r.buffer);return!((n[0]=1)&r[0])}function U(r){let n=\"\";for(const t of r){const o=t.codePointAt(0)?.toString(16).padStart(4,\"0\");n&&(n+=\", \"),n+=`U+${o}`}return n}export{g as CBOR_RANGES,y as base64ToBytes,x as base64UrlToBytes,f as getRanges,l as hasRanges,b as hexToU8,h as isBigEndian,c as setRanges,U as stringToHex,R as subarrayRanges,d as u8concat,A as u8toHex};\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// self-referencing not allowed by eslint resolver\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as ed from '@concordium/web-sdk/shims/ed25519';\nimport { Buffer } from 'buffer/index.js';\n\nimport { sha256 } from './hash.js';\nimport { getAccountTransactionSignDigest } from './serialization.js';\nimport {\n    AccountInfo,\n    AccountTransaction,\n    AccountTransactionSignature,\n    Base58String,\n    CredentialSignature,\n    HexString,\n    JsonString,\n} from './types.js';\nimport * as AccountAddress from './types/AccountAddress.js';\nimport { mapRecord } from './util.js';\n\nexport interface KeyPair {\n    signKey: HexString;\n    verifyKey: HexString;\n}\n\nexport interface CredentialKeys {\n    keys: Record<number, KeyPair>;\n    threshold: number;\n}\n\nexport interface AccountKeys {\n    keys: Record<number, CredentialKeys>;\n    threshold: number;\n}\n\nexport type SimpleAccountKeys = Record<number, Record<number, HexString>>;\n\nexport interface WithAccountKeys {\n    accountKeys: AccountKeys;\n}\n\nexport type SimpleWalletFormat = WithAccountKeys & {\n    address: Base58String;\n    credentials: Record<number, HexString>;\n};\n\nexport type GenesisFormat = SimpleWalletFormat;\n\nexport interface WalletExportFormat {\n    type: string;\n    v: number;\n    environment: string;\n    value: SimpleWalletFormat;\n}\n\nfunction validateSimpleWallet(wallet: SimpleWalletFormat): void {\n    if (typeof wallet.address !== 'string') {\n        throw Error('Expected field \"address\" to be of type \"string\" but was of type \"' + typeof wallet.address + '\"');\n    }\n    if (typeof wallet.credentials !== 'object') {\n        throw Error(\n            'Expected field \"credentials\" to be of type \"object\" but was of type \"' + typeof wallet.credentials + '\"'\n        );\n    }\n    if (wallet.accountKeys === undefined) {\n        throw Error('Expected field \"accountKeys\" to be defined, but was not');\n    }\n}\n\n/**\n * Parses a wallet export file into a `SimpleWalletFormat`. This format is a subset of the `GenesisFormat`.\n */\nexport function parseSimpleWallet(walletString: JsonString): SimpleWalletFormat {\n    const wallet = JSON.parse(walletString);\n    validateSimpleWallet(wallet);\n    return wallet;\n}\n\n/**\n * Parses a wallet export file into a WalletExportFormat. The wallet export\n * file is exported from a concordium wallet.\n */\nexport function parseWallet(walletString: JsonString): WalletExportFormat {\n    const wallet = JSON.parse(walletString);\n    if (typeof wallet.type !== 'string') {\n        throw Error('Expected field \"type\" to be of type \"string\" but was of type \"' + typeof wallet.type + '\"');\n    }\n    if (typeof wallet.v !== 'number') {\n        throw Error('Expected field \"v\" to be of type \"number\" but was of type \"' + typeof wallet.v + '\"');\n    }\n    if (typeof wallet.environment !== 'string') {\n        throw Error(\n            'Expected field \"environment\" to be of type \"string\" but was of type \"' + typeof wallet.environment + '\"'\n        );\n    }\n    validateSimpleWallet(wallet.value);\n    return wallet;\n}\n\n/**\n * A structure to use for creating signatures on a given digest.\n */\nexport interface AccountSigner {\n    /**\n     * Creates a signature of the provided digest\n     *\n     * @param {ArrayBuffer} digest - The digest to create signatures on.\n     *\n     * @returns {Promise<AccountTransactionSignature>} A promise resolving with a set of signatures for a set of credentials corresponding to some account\n     */\n    sign(digest: ArrayBuffer): Promise<AccountTransactionSignature>;\n    /**\n     * Returns the amount of signatures that the signer produces\n     */ getSignatureCount(): bigint;\n}\n\n/**\n * Gets Ed25519 signature for `digest`.\n *\n * @param {ArrayBuffer} digest - the message to sign.\n * @param {HexString} privateKey - the ed25519 private key in HEX format.\n *\n * @returns {Buffer} the signature.\n */\nexport const getSignature = async (digest: ArrayBuffer, privateKey: HexString): Promise<Buffer> =>\n    Buffer.from(await ed.signAsync(new Uint8Array(digest), privateKey));\n\n/**\n * Creates an `AccountSigner` for an account which uses the first credential's first keypair.\n * Note that if the account has a threshold > 1 or the first credentials has a threshold > 1, the transaction signed using this will fail.\n *\n * @param {HexString} privateKey - the ed25519 private key in HEX format. (First credential's first keypair's private key)\n *\n * @returns {AccountSigner} an `AccountSigner` which creates a signature using the first credentials first keypair\n */\nexport function buildBasicAccountSigner(privateKey: HexString): AccountSigner {\n    return {\n        getSignatureCount() {\n            return 1n;\n        },\n        async sign(digest: ArrayBuffer) {\n            const sig = await getSignature(digest, privateKey);\n            return {\n                0: {\n                    0: sig.toString('hex'),\n                },\n            };\n        },\n    };\n}\n\nconst isWalletExport = <T extends WithAccountKeys>(value: T | WalletExportFormat): value is WalletExportFormat =>\n    (value as WalletExportFormat).value?.accountKeys !== undefined;\n\nconst isSimpleAccountKeys = <T extends WithAccountKeys>(\n    value: T | WalletExportFormat | SimpleAccountKeys\n): value is SimpleAccountKeys =>\n    (value as WalletExportFormat).value?.accountKeys === undefined && (value as T).accountKeys === undefined;\n\nconst getKeys = <T extends WithAccountKeys>(value: T | WalletExportFormat | SimpleAccountKeys): SimpleAccountKeys => {\n    if (isSimpleAccountKeys(value)) {\n        return value;\n    }\n    const { keys } = isWalletExport(value) ? value.value.accountKeys : value.accountKeys;\n\n    return mapRecord(keys, (credKeys) => mapRecord(credKeys.keys, (keyPair) => keyPair.signKey));\n};\n\nconst getCredentialSignature = async (\n    digest: ArrayBuffer,\n    keys: Record<number, HexString>\n): Promise<CredentialSignature> => {\n    const sig: CredentialSignature = {};\n    for (const key in keys) {\n        const signature = await getSignature(digest, keys[key]);\n        sig[key] = signature.toString('hex');\n    }\n    return sig;\n};\n\n/**\n * Creates an `AccountSigner` for an account exported from a Concordium wallet.\n * Creating signatures using the `AccountSigner` will hold signatures for all credentials and all their respective keys included in the export.\n *\n * @param {WalletExportFormat} walletExport - The wallet export object.\n *\n * @returns {AccountSigner} An `AccountSigner` which creates signatures using all keys for all credentials\n */\nexport function buildAccountSigner(walletExport: WalletExportFormat): AccountSigner;\n/**\n * Creates an `AccountSigner` for an arbitrary format extending the {@link WithAccountKeys} type.\n * Creating signatures using the `AccountSigner` will hold signatures for all credentials and all their respective keys included.\n *\n * @param {AccountKeys} value.accountKeys - Account keys of type {@link AccountKeys} to use for creating signatures\n *\n * @returns {AccountSigner} An `AccountSigner` which creates signatures using all keys for all credentials\n */\nexport function buildAccountSigner<T extends WithAccountKeys>(value: T): AccountSigner;\n/**\n * Creates an `AccountSigner` for the {@link SimpleAccountKeys} type.\n * Creating signatures using the `AccountSigner` will hold signatures for all credentials and all their respective keys included.\n *\n * @param {SimpleAccountKeys} keys - Account keys to use for creating signatures\n *\n * @returns {AccountSigner} An `AccountSigner` which creates signatures using all keys for all credentials\n */\nexport function buildAccountSigner(keys: SimpleAccountKeys): AccountSigner;\n/**\n * Creates an `AccountSigner` for an account which uses the first credential's first keypair.\n * Note that if the account has a threshold > 1 or the first credentials has a threshold > 1, the transaction signed using this will fail.\n *\n * @param {HexString} key - The ed25519 private key in HEX format. (First credential's first keypair's private key)\n *\n * @returns {AccountSigner} An `AccountSigner` which creates a signature using the first credentials first keypair\n */\nexport function buildAccountSigner(key: HexString): AccountSigner;\nexport function buildAccountSigner<T extends WithAccountKeys>(\n    value: T | WalletExportFormat | SimpleAccountKeys | string\n): AccountSigner {\n    if (typeof value === 'string') {\n        return buildBasicAccountSigner(value);\n    }\n\n    const keys = getKeys<T>(value);\n    const numKeys = Object.values(keys).reduce((acc, credKeys) => acc + BigInt(Object.keys(credKeys).length), 0n);\n\n    return {\n        getSignatureCount() {\n            return numKeys;\n        },\n        async sign(digest: ArrayBuffer) {\n            const sig: AccountTransactionSignature = {};\n            for (const key in keys) {\n                sig[key] = await getCredentialSignature(digest, keys[key]);\n            }\n            return sig;\n        },\n    };\n}\n\n/**\n * Helper function to sign an AccountTransaction.\n * @param transaction the account transaction to sign\n * @param signer An object that handles the keys of the account, and performs the actual signing.\n */\nexport function signTransaction(\n    transaction: AccountTransaction,\n    signer: AccountSigner\n): Promise<AccountTransactionSignature> {\n    const digest = getAccountTransactionSignDigest(transaction, signer.getSignatureCount());\n    return signer.sign(digest);\n}\n\n/**\n * @param account the address of the account that will sign this message.\n * @param message the message to sign, assumed to be utf8 encoded string or a Uint8Array/buffer.\n */\nfunction getMessageDigest(account: AccountAddress.Type, message: string | Uint8Array): Buffer {\n    const prepend = Buffer.alloc(8, 0);\n    const rawMessage = typeof message === 'string' ? Buffer.from(message, 'utf8') : message;\n    return sha256([AccountAddress.toBuffer(account), prepend, rawMessage]);\n}\n\n/**\n * Helper function to sign a message.\n * Note that this function prepends the account address (32 bytes) and 8 zero-bytes to ensure that the message is not a transaction.\n * Note that the current prepend is temporary and will later be replaced.\n * @param message the message to sign, assumed to be utf8 encoded string or a Uint8Array/buffer.\n * @param signer An object that handles the keys of the account, and performs the actual signing.\n */\nexport function signMessage(\n    account: AccountAddress.Type,\n    message: string | Uint8Array,\n    signer: AccountSigner\n): Promise<AccountTransactionSignature> {\n    return signer.sign(getMessageDigest(account, message));\n}\n\n/**\n * Helper function to verify a signed message.\n * @param message the message to sign, assumed to be utf8 encoded string or a Uint8Array/buffer.\n * @param signature the signature of a message, from a specific account.\n * @param accountInfo the address and credentials of the account\n */\nexport async function verifyMessageSignature(\n    message: string | Uint8Array,\n    signature: AccountTransactionSignature,\n    accountInfo: Pick<AccountInfo, 'accountThreshold' | 'accountCredentials' | 'accountAddress'>\n): Promise<boolean> {\n    if (Object.keys(signature).length < accountInfo.accountThreshold) {\n        // Not enough credentials have signed;\n        return false;\n    }\n\n    const digest = getMessageDigest(accountInfo.accountAddress, message);\n\n    for (const credentialIndex of Object.keys(signature)) {\n        const credential = accountInfo.accountCredentials[Number(credentialIndex)];\n        if (!credential) {\n            throw new Error('Signature contains signature for non-existing credential');\n        }\n        const credentialSignature = signature[Number(credentialIndex)];\n        const credentialKeys = credential.value.contents.credentialPublicKeys;\n\n        if (Object.keys(credentialSignature).length < credentialKeys.threshold) {\n            // Not enough signatures for the current credential;\n            return false;\n        }\n\n        for (const keyIndex of Object.keys(credentialSignature)) {\n            const key = credentialKeys.keys[Number(keyIndex)];\n            switch (key) {\n                case undefined:\n                    throw new Error('Signature contains signature for non-existing keyIndex');\n                case null:\n                    throw new Error('Found \"null\" (represents unknown key variants) in credential keys');\n                default:\n                    break;\n            }\n\n            if (!(await ed.verifyAsync(credentialSignature[Number(keyIndex)], digest, key.verifyKey))) {\n                // Incorrect signature;\n                return false;\n            }\n        }\n    }\n    return true;\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","import { Buffer } from 'buffer/index.js';\n\nimport { AccountTransactionSignature, HexString, IpAddressString } from './types.js';\n\n/**\n * Replaces a string in a JSON string with the same string as a\n * number, i.e. removing quotes (\") prior to and after the string. This\n * is needed as the default JSON stringify cannot serialize BigInts as numbers.\n * So one can turn them into strings, stringify the structure, and then use this function\n * to make those fields into JSON numbers.\n * @param jsonStruct the JSON structure as a string\n * @param keys the keys where the strings has to be unquoted\n * @returns the same JSON string where the strings at the supplied keys are unquoted\n */\nexport function stringToInt(jsonStruct: string, keys: string[]): string {\n    let result = jsonStruct;\n    for (const key of keys) {\n        result = result.replace(new RegExp(`\"${key}\":\\\\s*\"([0-9]+)\"`, 'g'), `\"${key}\":$1`);\n    }\n    return result;\n}\n\n/**\n * Checks if the input string is a valid hexadecimal string.\n * @param str the string to check for hexadecimal\n */\nexport function isHex(str: string): boolean {\n    return /^[A-F0-9]+$/i.test(str);\n}\n\n/**\n * Checks if the input string is a valid utf8 string. Specifically, it checks if the string\n * contains any invalid surrogate pairs.\n * @param str the string to check\n */\nexport function isValidUTF8(str: string) {\n    return !/[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|[\\uDC00-\\uDFFF](?![\\uD800-\\uDBFF])/.test(str);\n}\n\n/**\n * Checks whether the input string looks to be a valid hash,\n * i.e. it has length 64 and consists of hexadecimal characters.\n * @param hash the string to check\n * @returns false if the string cannot be a valid hash, otherwise true\n */\nexport function isValidHash(hash: HexString): boolean {\n    return hash.length === 64 && isHex(hash);\n}\n\nexport function isValidIp(ip: IpAddressString): boolean {\n    // From stackoverflow: https://stackoverflow.com/questions/23483855/javascript-regex-to-validate-ipv4-and-ipv6-address-no-hostnames\n    const expression =\n        /((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))/;\n    return expression.test(ip);\n}\n\n/**\n * Counts the total number of signatures.\n * @param accountSignatures the signature structure to count\n */\nexport function countSignatures(accountSignatures: AccountTransactionSignature): bigint {\n    let totalSignatureCount = 0n;\n    const values = Object.values(accountSignatures);\n    for (const credentialSignature of values) {\n        const signatureCount = BigInt(Object.keys(credentialSignature).length);\n        totalSignatureCount += signatureCount;\n    }\n    return totalSignatureCount;\n}\n\n/**\n * Convert a Date to seconds since epoch.\n */\nexport function secondsSinceEpoch(date: Date): bigint {\n    return BigInt(Math.floor(date.getTime() / 1000));\n}\n\n// Retrieves a value that might be undefined. Throws if value is undefined\nexport function unwrap<A>(x: A | undefined): A {\n    if (x === undefined) {\n        console.trace();\n        throw Error('Undefined value found.');\n    } else {\n        return x;\n    }\n}\n\n// Maps a `Record<A,C>` to a `Record<B,D>`.\n// Works the same way as a list mapping, allowing both a value and key mapping.\n// If `keyMapper()` is not provided, it will map `Record<A,C>` to `Record<A,D>`\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport function mapRecord<A extends string | number | symbol, B, C extends string | number | symbol, D>(\n    rec: Record<A, B>,\n    valMapper: (x: B) => D,\n    keyMapper: (x: A) => C = (a: any) => a\n): Record<C, D> {\n    const ret: any = {};\n    for (const i in rec) {\n        ret[keyMapper(i)] = valMapper(rec[i]);\n    }\n    return ret;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Maps an infinite stream of type A to an infinite stream of type B\n * @param mapper: function used to map each element from type A to B.\n */\nexport function mapStream<A, B>(stream: AsyncIterable<A>, mapper: (x: A) => B): AsyncIterable<B> {\n    return {\n        [Symbol.asyncIterator]() {\n            return {\n                async next() {\n                    for await (const val of stream) {\n                        return {\n                            done: false,\n                            value: mapper(val),\n                        };\n                    }\n                    return {\n                        done: true,\n                        value: undefined,\n                    };\n                },\n            };\n        },\n    };\n}\n\n/**\n * Filters entries from a record\n * @param rec the record, whose entries should be filtered.\n * @param predicate predicate to test entries, only if this returns true does the entry remain\n */\nexport function filterRecord<A extends string | number | symbol, B>(\n    rec: Record<A, B>,\n    predicate: (k: A, v: B) => boolean\n): Record<A, B> {\n    return Object.fromEntries(Object.entries(rec).filter(([k, v]) => predicate(k as A, v as B))) as Record<A, B>;\n}\n\n// Converts an async iterable to a list. Beware! This will not terminate if given an infinite stream.\nexport async function streamToList<A>(iterable: AsyncIterable<A>): Promise<A[]> {\n    const list: A[] = [];\n    for await (const iter of iterable) {\n        list.push(iter);\n    }\n    return list;\n}\n\n/**\n * Creates a function that takes either a `T` or `T[]` from a function that takes `T[]`.\n *\n * @param {(input: T[]) => R} fun - A function that takes `T[]`\n *\n * @example\n * const serializer = makeDynamicFunction(serialize);\n * const exampleStruct = {\n    tokenId: '';\n    tokenAmount: 100n;\n    from: {\naddress: \"3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi\"\n};\n    to: 3nsRkrtQVMRtD2Wvm88gEDi6UtqdUVvRN3oGZ1RqNJ3eto8owi;\n    data: '48656c6c6f20776f726c6421';\n};\n * const bytesSingle = serializer(exampleStruct);\n * const bytesMulti = serializer([exampleStruct, exampleStruct]);\n */\nexport const makeDynamicFunction =\n    <T, R>(fun: (a: T[]) => R) =>\n    (input: T | T[]): R =>\n        fun(Array.isArray(input) ? input : [input]);\n\nexport function isDefined<T>(v?: T): v is T {\n    return v !== undefined;\n}\n\nexport function toBuffer(s: string, encoding?: string): Buffer {\n    return Buffer.from(s, encoding);\n}\n\n/**\n * Immediately returns an {@linkcode Error} with the message passed. This allows use of throwing errors as expressions.\n * @param error - The message to pass to the error\n * @throws an error immediately\n *\n * @example\n * const value = maybeValue ?? bail('Turns out there was not value anyway...');\n */\nexport const bail = (error: string | Error): never => {\n    throw error instanceof Error ? error : new Error(error);\n};\n","import { Buffer } from 'buffer/index.js';\n\n/**\n * Decodes an unsigned leb128 encoded value to bigint. Note that if buffer\n * that is provided does not _only_ contain the uleb128 encoded number an\n * error will be thrown.\n *\n * @param {Uint8Array} buffer - The buffer to decode\n *\n * @returns {bigint} the decoded bigint value.\n */\nexport const uleb128Decode = (buffer: Uint8Array): bigint => {\n    const [bigint, index] = uleb128DecodeWithIndex(buffer);\n    if (index !== buffer.length) {\n        throw Error('The provided buffer did not contain just a single ULEB128 encoded number');\n    }\n    return bigint;\n};\n\n/**\n * Decodes an unsigned leb128 encoded value to bigint and returns it along\n * with the index of the end of the encoded uleb128 number + 1.\n *\n * @param {UInt8Array} bytes - The buffer to decode\n * @param {number} index - A non-negative index to decode at, defaults to 0\n *\n * @returns {[bigint, number]} the decoded bigint value and the index of\n * the end of the encoded uleb128 number + 1.\n */\nexport function uleb128DecodeWithIndex(bytes: Uint8Array, index = 0): [bigint, number] {\n    if (bytes.length <= index) {\n        throw Error(\n            `The ULEB128 encoding was not valid: The passed bytes from index ${index} must at least contain a single byte`\n        );\n    }\n\n    let acc = 0n;\n    let nextIndex = index;\n\n    // For each byte, get the value of the 7 least significant bits (byte & 0x7f) and add this to the accumulator (<< 7 * i)\n    for (let i = index; i < bytes.length; i++) {\n        nextIndex += 1;\n        const byte = bytes[i];\n\n        const c = BigInt(byte & 0x7f) << BigInt(7 * (i - index));\n        acc += c;\n\n        if ((byte & 0x80) === 0x00) {\n            return [acc, nextIndex];\n        }\n    }\n\n    throw Error('The ULEB128 encoding was not valid: Could not find end of number');\n}\n\n/**\n * Encodes a bigint value as unsigned leb128.\n *\n * @param {bigint} num - The `bigint` value to encode\n *\n * @returns {Buffer} the encoded value.\n */\nexport const uleb128Encode = (num: bigint): Buffer => {\n    const res: number[] = [];\n    let cursor = 0n; // Where to read from in the bit sequence\n\n    while (true) {\n        const next = cursor + 7n; // Next cursor position\n        const value = (num >> cursor) & BigInt(0x7f); // Read 7 least significant bits of bit sequence from cursor (& 0x7f).\n\n        if (num >> next === 0n) {\n            // Value from next cursor position is 0, i.e. we've reached the end of the bit sequence.\n            res.push(Number(value));\n            break;\n        }\n\n        res.push(Number(value) | 0x80); // Add value to result, signaling more bytes to read (| 0x80).\n        cursor = next;\n    }\n\n    return Buffer.from(res);\n};\n","import type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport { secondsSinceEpoch } from '../util.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.TransactionExpiry;\nexport type Serializable = string;\n\n/**\n * Representation of a transaction expiry date.\n */\nclass TransactionExpiry {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    #nominal = true;\n    constructor(\n        /** Internal representation of expiry. Seconds since unix epoch */\n        public readonly expiryEpochSeconds: bigint\n    ) {}\n\n    /**\n     * Get a string representation of the transaction expiry date in seconds since the Unix epoch.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.expiryEpochSeconds.toString();\n    }\n\n    /**\n     * Get a JSON-serializable representation of the transaction expiry date.\n     * @throws If the expiry represented as seconds after unix epoch is too\n     * large to be represented as a number.\n     * @returns {string} The JSON-serializable representation.\n     */\n    public toJSON(): number {\n        if (this.expiryEpochSeconds > Number.MAX_SAFE_INTEGER || this.expiryEpochSeconds < Number.MIN_SAFE_INTEGER) {\n            throw new Error('Transaction expiry is too large to be represented as a number.');\n        }\n        return Number(this.expiryEpochSeconds);\n    }\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode bigint} value\n */\nexport function toUnwrappedJSON(value: Type): bigint {\n    return value.expiryEpochSeconds;\n}\n\n/**\n * Representation of a transaction expiry date.\n */\nexport type Type = TransactionExpiry;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is TransactionExpiry {\n    return value instanceof TransactionExpiry;\n}\n\n/**\n * Construct a TransactionExpiry from a number of seconds since unix epoch.\n * @param {bigint | number} seconds Number of seconds since unix epoch.\n * @throws If provided a negative number.\n * @returns The transaction expiry.\n */\nexport function fromEpochSeconds(seconds: bigint | number): TransactionExpiry {\n    if (seconds < 0n) {\n        throw new Error('Invalid transaction expiry: Expiry cannot be before unix epoch.');\n    }\n    return new TransactionExpiry(BigInt(seconds));\n}\n\n/**\n * Construct a TransactionExpiry from a Date object.\n * @param {Date} expiry The date representing the expiry time.\n * @throws If provided the date is from before unix epoch.\n * @returns {TransactionExpiry} The transaction expiry.\n */\nexport function fromDate(expiry: Date): TransactionExpiry {\n    return fromEpochSeconds(secondsSinceEpoch(expiry));\n}\n\n/**\n * Convert a TransactionExpiry into a Date object.\n * @param {TransactionExpiry} expiry A TransactionExpiry to convert.\n * @returns {Date} The date object.\n */\nexport function toDate(expiry: TransactionExpiry): Date {\n    return new Date(Number(expiry.expiryEpochSeconds) * 1000);\n}\n\n/**\n * Construct a TransactionExpiry minutes in the future from the time of calling this function.\n * @param {number} minutes The number of minutes in the future to set as the expiry time.\n * @returns {TransactionExpiry} The transaction expiry.\n */\nexport function futureMinutes(minutes: number): TransactionExpiry {\n    const expiryMillis = Date.now() + minutes * 60 * 1000;\n    return fromDate(new Date(expiryMillis));\n}\n\n/**\n * Convert expiry from its protobuf encoding.\n * @param {Proto.TransactionTime} expiry The expiry in protobuf.\n * @returns {TransactionExpiry} The expiry.\n */\nexport function fromProto(expiry: Proto.TransactionTime): TransactionExpiry {\n    return new TransactionExpiry(expiry.value);\n}\n\n/**\n * Convert expiry into its protobuf encoding.\n * @param {TransactionExpiry} expiry The expiry.\n * @returns {Proto.TransactionTime} The protobuf encoding.\n */\nexport function toProto(expiry: TransactionExpiry): Proto.TransactionTime {\n    return {\n        value: expiry.expiryEpochSeconds,\n    };\n}\n\n/**\n * Constructs a {@linkcode Type} from {@linkcode Serializable}.\n * @param {Serializable} value\n * @returns {Type} The duration.\n */\nexport function fromSerializable(value: Serializable): Type {\n    return fromEpochSeconds(BigInt(value));\n}\n\n/**\n * Converts {@linkcode Type} into {@linkcode Serializable}\n * @param {Type} value\n * @returns {Serializable} The serializable value\n */\nexport function toSerializable(value: Type): Serializable {\n    return value.expiryEpochSeconds.toString();\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode toSerializable} function instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: TransactionExpiry): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toSerializable(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromSerializable} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromSerializable);\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","import { Buffer } from 'buffer/index.js';\n\nimport { serializeAccountAddress, serializeContractAddress, serializeReceiveHookName } from '../cis2/util.js';\nimport { serializeDate } from '../cis4/util.js';\nimport { deserializeUint8 } from '../deserialization.js';\nimport { Cursor, makeDeserializeListResponse } from '../deserializationHelpers.js';\nimport { isKnown } from '../grpc/index.js';\nimport {\n    encodeWord8,\n    encodeWord8FromString,\n    encodeWord16,\n    encodeWord64,\n    serializeMap,\n} from '../serializationHelpers.js';\nimport {\n    AccountTransactionSignature,\n    Base58String,\n    BlockItemSummary,\n    ContractTraceEvent,\n    CredentialSignature,\n    HexString,\n    InvokeContractSuccessResult,\n    TransactionKindString,\n    TransactionSummaryType,\n} from '../types.js';\nimport * as AccountAddress from '../types/AccountAddress.js';\nimport * as ContractAddress from '../types/ContractAddress.js';\nimport * as ContractEvent from '../types/ContractEvent.js';\nimport * as EntrypointName from '../types/EntrypointName.js';\nimport * as Parameter from '../types/Parameter.js';\nimport * as Timestamp from '../types/Timestamp.js';\n\nconst PERMIT_PAYLOAD_MAX_LENGTH = 65535;\nconst SUPPORTS_PERMIT_QUERY_MAX_LENGTH = 65535;\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace CIS3 {\n    /**\n     * A `permit` message containing invokation information for an entrypoint, part of the CIS3 specification.\n     */\n    export type PermitMessage = {\n        /** The address of the intended contract. */\n        contractAddress: ContractAddress.Type;\n        /** A nonce to prevent replay attacks. */\n        nonce: bigint;\n        /** The timestamp of the message. */\n        timestamp: Timestamp.Type;\n        /** The entrypoint to be invoked. */\n        entrypoint: EntrypointName.Type;\n        /** The parameters to be passed to the entrypoint. */\n        payload: Parameter.Type;\n    };\n\n    /**\n     * The parameters to the `permit` function according to the CIS3 specification.\n     */\n    export type PermitParam = {\n        /** The signature of the sponsoree. */\n        signature: AccountTransactionSignature;\n        /** The address of the sponsoree. */\n        signer: AccountAddress.Type;\n        /** The signed message to be invoked by the contract. */\n        message: PermitMessage;\n    };\n\n    /**\n     * Structure of JSON-formatted CIS3 `permit` message used for transactions.\n     */\n    export type PermitMessageJson = {\n        contract_address: { index: number; subindex: number };\n        nonce: number;\n        timestamp: Timestamp.SchemaValue;\n        entry_point: string;\n        payload: number[];\n    };\n\n    /**\n     * Structure of JSON-formatted parameter used for CIS3 `permit` transactions.\n     */\n    export type PermitParamJson = {\n        signature: [number, [number, { Ed25519: [HexString] }][]][];\n        signer: Base58String;\n        message: PermitMessageJson;\n    };\n\n    /**\n     * The type of a CIS-3 event.\n     * @see {@linkcode Event}\n     */\n    export enum EventType {\n        Nonce,\n        Custom,\n    }\n\n    /**\n     * A CIS-3 nonce event. This event is logged every time the `permit` function is invoked.\n     */\n    export type NonceEvent = {\n        /** The type of the event */\n        type: EventType.Nonce;\n        /** The nonce used for the `permit` invocation */\n        nonce: bigint;\n        /** The address of the sponsoree */\n        sponsoree: AccountAddress.Type;\n    };\n\n    /**\n     * A custom event outside CIS-3.\n     */\n    export type CustomEvent = {\n        /** The type of the event */\n        type: EventType.Custom;\n        /** The raw data of the custom event */\n        data: Uint8Array;\n    };\n\n    /**\n     * A CIS-3 event.\n     */\n    export type Event = NonceEvent | CustomEvent;\n}\n\n/**\n * Serialize a {@link CIS3.PermitMessage} to a buffer according to the CIS3 standard.\n *\n * @param {CIS3.PermitMessage} message - The message to serialize.\n *\n * @returns {Buffer} The serialized message.\n */\nexport function serializeCIS3PermitMessage(message: CIS3.PermitMessage): Buffer {\n    const contract = serializeContractAddress(message.contractAddress);\n    const nonce = encodeWord64(message.nonce, true);\n    const timestamp = serializeDate(message.timestamp);\n    const entryPoint = serializeReceiveHookName(message.entrypoint);\n    const payload = serializeCIS3PermitPayload(message.payload);\n\n    return Buffer.concat([contract, nonce, timestamp, entryPoint, payload]);\n}\n\n/**\n * Serialize a `permit` payload to a buffer according to the CIS3 standard.\n *\n * @param {Parameter.Type} payload - The payload to serialize.\n *\n * @returns {Buffer} The serialized payload.\n *\n * @throws If the payload is too large.\n */\nexport function serializeCIS3PermitPayload(payload: Parameter.Type): Buffer {\n    const payloadBuffer = Parameter.toBuffer(payload);\n    if (payloadBuffer.length > PERMIT_PAYLOAD_MAX_LENGTH) {\n        throw new Error('Permit payload is too large');\n    }\n    const numBytes = encodeWord16(payloadBuffer.length, true);\n\n    return Buffer.concat([numBytes, payloadBuffer]);\n}\n\n/**\n * Serialize a {@link CIS3.PermitParam} to a buffer according to the CIS3 standard.\n *\n * @param {CIS3.PermitParam} param - The parameter to serialize.\n *\n * @returns {Buffer} The serialized parameter.\n */\nexport function serializeCIS3PermitParam(param: CIS3.PermitParam): Buffer {\n    const signature = serializeCIS3AccountTransactionSignature(param.signature);\n    const signer = serializeAccountAddress(param.signer);\n    const message = serializeCIS3PermitMessage(param.message);\n\n    return Buffer.concat([signature, signer, message]);\n}\n\n/**\n * Serializes a map of account transaction signatures according to the CIS-3 standard.\n * If no signatures are provided, then an error is thrown.\n */\nexport function serializeCIS3AccountTransactionSignature(signatures: AccountTransactionSignature): Buffer {\n    if (Object.keys(signatures).length === 0) {\n        throw new Error('No signatures were provided');\n    }\n\n    const putSignature = (signature: string) => {\n        const signatureBytes = Buffer.from(signature, 'hex');\n        // CIS-3 requires a 0 byte prefix for each signature\n        return Buffer.concat([Buffer.from([0]), signatureBytes]);\n    };\n    const putCredentialSignatures = (credSig: CredentialSignature) =>\n        serializeMap(credSig, encodeWord8, encodeWord8FromString, putSignature);\n    return serializeMap(signatures, encodeWord8, encodeWord8FromString, putCredentialSignatures);\n}\n\n/**\n * Serialize the parameters for `supportsPermit` to a buffer according to the CIS3 standard.\n * The paramteres are a list of {@link EntrypointName}.\n *\n * @param {EntrypointName.Type[]} params - The parameters to serialize.\n *\n * @returns {Buffer} The serialized parameters.\n *\n * @throws If the list of entrypoints is too long.\n */\nexport function serializeCIS3SupportsPermitQueryParams(params: EntrypointName.Type[]): Buffer {\n    if (params.length > SUPPORTS_PERMIT_QUERY_MAX_LENGTH) {\n        throw new Error('Too many entrypoints');\n    }\n    const numQueries = encodeWord16(params.length, true);\n    const encoded: (Buffer | Uint8Array)[] = [numQueries];\n    for (const entrypoint of params) {\n        encoded.push(serializeReceiveHookName(entrypoint));\n    }\n\n    return Buffer.concat(encoded);\n}\n\n/**\n * Deserialize a `supportsPermit` response from a buffer according to the CIS3 standard.\n *\n * @param {Buffer} cursor - The buffer to deserialize.\n *\n * @returns {boolean[]} The deserialized list of booleans indicating support for each entrypoint.\n */\nexport const deserializeCIS3SupportsPermitResponse = makeDeserializeListResponse((cursor) => {\n    const value = Boolean(cursor.read(1).readUInt8(0));\n    return value;\n});\n\n/**\n * Format {@link CIS3.PermitParam} as a JSON compatible object.\n *\n * @param {CIS3.PermitParam} params - The parameters to format.\n *\n * @returns {CIS3.PermitParamJson} The formatted parameters.\n */\nexport function formatCIS3PermitParam(params: CIS3.PermitParam): CIS3.PermitParamJson {\n    return {\n        signature: Object.entries(params.signature).map(([key1, innerMap]) => [\n            parseInt(key1),\n            Object.entries(innerMap).map(([key2, value]) => [parseInt(key2), { Ed25519: [value] }]),\n        ]),\n        signer: AccountAddress.toBase58(params.signer),\n        message: formatCIS3PermitMessage(params.message),\n    };\n}\n\n/**\n * Format {@link CIS3.PermitMessage} as a JSON compatible object.\n *\n * @param {CIS3.PermitMessage} message - The message to format.\n *\n * @returns {CIS3.PermitMessageJson} The formatted message.\n *\n * @throws If the of the message is outside of the safe integer range.\n */\nfunction formatCIS3PermitMessage(message: CIS3.PermitMessage): CIS3.PermitMessageJson {\n    if (message.nonce < Number.MIN_SAFE_INTEGER || message.nonce > Number.MAX_SAFE_INTEGER) {\n        throw new Error('Nonce is too large');\n    }\n\n    return {\n        contract_address: {\n            index: Number(message.contractAddress.index),\n            subindex: Number(message.contractAddress.subindex),\n        },\n        nonce: Number(message.nonce),\n        timestamp: Timestamp.toSchemaValue(message.timestamp),\n        entry_point: EntrypointName.toString(message.entrypoint),\n        payload: [...Parameter.toBuffer(message.payload)],\n    };\n}\n\n/**\n * Deserializes a CIS-3 event according to the CIS-3 standard.\n *\n * @param {ContractEvent.Type} event - The event to deserialize\n *\n * @returns {CIS3.Event} The deserialized event\n */\nexport function deserializeCIS3Event(event: ContractEvent.Type): CIS3.Event {\n    const buffer = event.buffer;\n    // An empty buffer is a valid custom event\n    if (buffer.length === 0) {\n        return {\n            type: CIS3.EventType.Custom,\n            data: buffer,\n        };\n    }\n\n    const cursor = Cursor.fromBuffer(buffer);\n    const tag = deserializeUint8(cursor);\n    if (tag == 250) {\n        // Nonce event\n        const nonce = cursor.read(8).readBigUInt64LE(0).valueOf();\n        const sponsoree = AccountAddress.fromBuffer(cursor.read(32));\n\n        return {\n            type: CIS3.EventType.Nonce,\n            nonce,\n            sponsoree,\n        };\n    } else {\n        // Custom event\n        return {\n            type: CIS3.EventType.Custom,\n            data: buffer,\n        };\n    }\n}\n\n/**\n * Deserializes a successful contract invokation to a list of CIS-3 events according to the CIS-3 standard.\n *\n * @param {InvokeContractSuccessResult} result - The contract invokation result to deserialize\n *\n * @returns {CIS3.NonceEvent[]} The deserialized `nonce` events\n */\nexport function deserializeCIS3EventsFromInvokationResult(result: InvokeContractSuccessResult): CIS3.NonceEvent[] {\n    return deserializeCIS3ContractTraceEvents(result.events.filter(isKnown));\n}\n\n/**\n * Deserializes all CIS-3 `nonce` events (skipping custom events) from a {@linkcode BlockItemSummary}.\n *\n * @param {BlockItemSummary} summary - The summary to deserialize\n *\n * @returns {CIS3.NonceEvent[]} The deserialized `nonce` events\n */\nexport function deserializeCIS3EventsFromSummary(summary: BlockItemSummary): CIS3.NonceEvent[] {\n    if (summary.type !== TransactionSummaryType.AccountTransaction) {\n        return [];\n    }\n\n    switch (summary.transactionType) {\n        case TransactionKindString.Update:\n            return deserializeCIS3ContractTraceEvents(summary.events.filter(isKnown));\n        case TransactionKindString.InitContract:\n            const deserializedEvents = [];\n            for (const event of summary.contractInitialized.events) {\n                const deserializedEvent = deserializeCIS3Event(ContractEvent.fromHexString(event));\n                if (deserializedEvent.type === CIS3.EventType.Nonce) {\n                    deserializedEvents.push(deserializedEvent);\n                }\n            }\n            return deserializedEvents;\n        default:\n            return [];\n    }\n}\n\n/**\n * Deserializes a list of {@linkcode ContractTraceEvent} into a list of CIS-3 events.\n * This function filters out any custom events, and so only returns {@linkcode CIS3.NonceEvent}.\n *\n * @param {ContractTraceEvent[]} events - The list of contract trace events to deserialize\n *\n * @returns {CIS3.NonceEvent[]} The deserialized CIS-3 `nonce` events\n */\nfunction deserializeCIS3ContractTraceEvents(events: ContractTraceEvent[]): CIS3.NonceEvent[] {\n    const deserializedEvents = [];\n    for (const traceEvent of events) {\n        if (!('events' in traceEvent)) {\n            continue;\n        }\n        for (const event of traceEvent.events) {\n            const deserializedEvent = deserializeCIS3Event(event);\n            if (deserializedEvent.type === CIS3.EventType.Nonce) {\n                deserializedEvents.push(deserializedEvent);\n            }\n        }\n    }\n    return deserializedEvents;\n}\n","/**\n * This is the GRPC-Client used by both the Web-SDK and the NodeJS-SDK. Check\n * out the {@link ConcordiumGRPCClient}\n *\n * @module Common GRPC-Client\n */\nimport { GrpcWebFetchTransport, GrpcWebOptions } from '@protobuf-ts/grpcweb-transport';\nimport type { RpcError, RpcTransport } from '@protobuf-ts/runtime-rpc';\nimport { Buffer } from 'buffer/index.js';\n\nimport { getAccountTransactionHandler } from '../accountTransactions.js';\nimport { DEFAULT_INVOKE_ENERGY } from '../constants.js';\nimport { calculateEnergyCost } from '../energyCost.js';\nimport { HealthClient } from '../grpc-api/v2/concordium/health.client.js';\nimport * as GRPCKernel from '../grpc-api/v2/concordium/kernel.js';\nimport { QueriesClient } from '../grpc-api/v2/concordium/service.client.js';\nimport * as GRPC from '../grpc-api/v2/concordium/types.js';\nimport * as PLT from '../plt/index.js';\nimport { RawModuleSchema } from '../schemaTypes.js';\nimport { serializeAccountTransactionPayload } from '../serialization.js';\nimport * as SDK from '../types.js';\nimport { HexString, isRpcError } from '../types.js';\nimport * as AccountAddress from '../types/AccountAddress.js';\nimport * as BlockHash from '../types/BlockHash.js';\nimport * as ContractAddress from '../types/ContractAddress.js';\nimport * as CredentialRegistrationId from '../types/CredentialRegistrationId.js';\nimport * as Energy from '../types/Energy.js';\nimport * as ModuleReference from '../types/ModuleReference.js';\nimport * as Parameter from '../types/Parameter.js';\nimport * as ReceiveName from '../types/ReceiveName.js';\nimport * as SequenceNumber from '../types/SequenceNumber.js';\nimport * as Timestamp from '../types/Timestamp.js';\nimport * as TransactionExpiry from '../types/TransactionExpiry.js';\nimport * as TransactionHash from '../types/TransactionHash.js';\nimport { getEmbeddedModuleSchema } from '../types/VersionedModuleSource.js';\nimport type { BlockItemStatus, BlockItemSummary } from '../types/blockItemSummary.js';\nimport { countSignatures, isHex, isValidIp, mapRecord, mapStream, unwrap } from '../util.js';\nimport * as translate from './translation.js';\nimport type { Upward } from './upward.js';\n\n/**\n * @hidden\n */\nexport type FindInstanceCreationReponse = {\n    hash: BlockHash.Type;\n    height: bigint;\n    instanceInfo: SDK.InstanceInfo;\n};\n\n/**\n * A concordium-node specific gRPC client wrapper. Only use this if you intend to supply a custom\n * transport layer. Otherwise more user-friendly options {@linkcode ConcordiumGRPCWebClient} and\n * `ConcordiumGRPCNodeClient` exist for web/nodejs use respectively.\n */\nexport class ConcordiumGRPCClient {\n    private client: QueriesClient;\n    private healthClient: HealthClient;\n\n    /**\n     * Initialize a gRPC client for a specific concordium node.\n     * @param transport RpcTransport to send communication over\n     */\n    constructor(transport: RpcTransport) {\n        this.client = new QueriesClient(transport);\n        this.healthClient = new HealthClient(transport);\n    }\n\n    /**\n     * Retrieves the next account nonce for the given account. The account nonce is\n     * used in all account transactions as part of their header.\n     *\n     * {@codeblock ~~:nodejs/client/getNextAccountSequenceNumber.ts#documentation-snippet}\n     *\n     * @param accountAddress base58 account address to get the next account nonce for.\n     *\n     * @returns the next account nonce, and a boolean indicating if the nonce is reliable.\n     */\n    async getNextAccountNonce(accountAddress: AccountAddress.Type): Promise<SDK.NextAccountNonce> {\n        const address: GRPCKernel.AccountAddress = {\n            value: AccountAddress.toBuffer(accountAddress),\n        };\n\n        const response = await this.client.getNextAccountSequenceNumber(address).response;\n        return translate.nextAccountSequenceNumber(response);\n    }\n\n    /**\n     * Retrieves the consensus status information from the node. Note that the optional\n     * fields will only be unavailable for a newly started node that has not processed\n     * enough data yet.\n     *\n     * {@codeblock ~~:nodejs/client/getCryptographicParameters.ts#documentation-snippet}\n     *\n     * @param blockHash optional block hash to get the cryptographic parameters at, otherwise retrieves from last finalized block.\n     * @returns the global cryptographic parameters at the given block, or undefined it the block does not exist.\n     */\n    async getCryptographicParameters(blockHash?: BlockHash.Type): Promise<SDK.CryptographicParameters> {\n        const blockHashInput = getBlockHashInput(blockHash);\n\n        const response = await this.client.getCryptographicParameters(blockHashInput).response;\n        return translate.cryptographicParameters(response);\n    }\n\n    /**\n     * Retrieves the account info for the given account. If the provided block\n     * hash is in a block prior to the finalization of the account, then the account\n     * information will not be available.\n     * A credential registration id can also be provided, instead of an address. In this case\n     * the node will return the account info of the account, which the corresponding credential\n     * is (or was) deployed to. An account index can also be provided.\n     *\n     * {@codeblock ~~:nodejs/client/getAccountInfo.ts#documentation-snippet}\n     *\n     * @param accountIdentifier base58 account address, or a credential registration id or account index to get the account info for\n     * @param blockHash optional block hash to get the account info at, otherwise retrieves from last finalized block\n     *\n     * @returns the account info for the provided account address.\n     * @throws An error of type `RpcError` if not found in the block.\n     */\n    async getAccountInfo(\n        accountIdentifier: SDK.AccountIdentifierInput,\n        blockHash?: BlockHash.Type\n    ): Promise<SDK.AccountInfo> {\n        const accountInfoRequest: GRPC.AccountInfoRequest = {\n            blockHash: getBlockHashInput(blockHash),\n            accountIdentifier: getAccountIdentifierInput(accountIdentifier),\n        };\n\n        const response = await this.client.getAccountInfo(accountInfoRequest).response;\n        return translate.accountInfo(response);\n    }\n\n    /**\n     * Retrieves a status for the given transaction/block item.\n     *\n     * {@codeblock ~~:nodejs/client/getBlockItemStatus.ts#documentation-snippet}\n     *\n     * @param transactionHash the transaction/block item to get a status for.\n     *\n     * @returns the status for the given transaction/block item, or undefined if it does not exist.\n     */\n    async getBlockItemStatus(transactionHash: TransactionHash.Type): Promise<BlockItemStatus> {\n        const transactionHashV2: GRPC.TransactionHash = {\n            value: TransactionHash.toBuffer(transactionHash),\n        };\n\n        const response = await this.client.getBlockItemStatus(transactionHashV2).response;\n        return translate.blockItemStatus(response);\n    }\n\n    /**\n     * Retrieves the consensus status information from the node. Note that the optional\n     * fields will only be unavailable for a newly started node that has not processed\n     * enough data yet.\n     *\n     * {@codeblock ~~:nodejs/client/getConsensusStatus.ts#documentation-snippet}\n     */\n    async getConsensusStatus(): Promise<SDK.ConsensusStatus> {\n        const response = await this.client.getConsensusInfo(GRPC.Empty).response;\n        return translate.consensusInfo(response);\n    }\n\n    /**\n     * Retrieves the source of the given module at the provided block.\n     *\n     * {@codeblock ~~:nodejs/client/getModuleSource.ts#documentation-snippet}\n     *\n     * @param moduleRef the module's reference, represented by the ModuleReference class.\n     * @param blockHash optional block hash to get the module source at, otherwise retrieves from last finalized block\n     *\n     * @returns the source of the module as raw bytes.\n     * @throws An error of type `RpcError` if not found in the block.\n     */\n    async getModuleSource(\n        moduleRef: ModuleReference.Type,\n        blockHash?: BlockHash.Type\n    ): Promise<SDK.VersionedModuleSource> {\n        const moduleSourceRequest: GRPC.ModuleSourceRequest = {\n            blockHash: getBlockHashInput(blockHash),\n            moduleRef: { value: moduleRef.decodedModuleRef },\n        };\n\n        const response = await this.client.getModuleSource(moduleSourceRequest).response;\n        if (response.module.oneofKind === 'v0') {\n            return {\n                version: 0,\n                source: Buffer.from(response.module.v0.value),\n            };\n        } else if (response.module.oneofKind === 'v1') {\n            return {\n                version: 1,\n                source: Buffer.from(response.module.v1.value),\n            };\n        } else {\n            throw Error('Invalid ModuleSource response received!');\n        }\n    }\n\n    /**\n     * Retrieves the embedded schema of the given module at the provided block.\n     *\n     * {@codeblock ~~:nodejs/client/getEmbeddedSchema.ts#documentation-snippet}\n     *\n     * @param moduleRef the module's reference, represented by the ModuleReference class.\n     * @param blockHash optional block hash to get the module embedded schema at, otherwise retrieves from last finalized block\n     *\n     * @returns the module schema as a {@link RawModuleSchema} or `null` if not found in the block.\n     * @throws An error of type `RpcError` if the module was not found in the block.\n     * @throws If the module source cannot be parsed or contains duplicate schema sections.\n     */\n    async getEmbeddedSchema(\n        moduleRef: ModuleReference.Type,\n        blockHash?: BlockHash.Type\n    ): Promise<RawModuleSchema | undefined> {\n        const source = await this.getModuleSource(moduleRef, blockHash);\n        return getEmbeddedModuleSchema(source);\n    }\n\n    /**\n     * Retrieve information about a given smart contract instance.\n     *\n     * {@codeblock ~~:nodejs/client/getInstanceInfo.ts#documentation-snippet}\n     *\n     * @param contractAddress the address of the smart contract.\n     * @param blockHash optional block hash to get the smart contact instances at, otherwise retrieves from last finalized block\n     *\n     * @returns An object with information about the contract instance.\n     * @throws An error of type `RpcError` if not found in the block.\n     */\n    async getInstanceInfo(\n        contractAddress: ContractAddress.Type,\n        blockHash?: BlockHash.Type\n    ): Promise<SDK.InstanceInfo> {\n        const instanceInfoRequest: GRPC.InstanceInfoRequest = {\n            blockHash: getBlockHashInput(blockHash),\n            address: ContractAddress.toProto(contractAddress),\n        };\n\n        const response = await this.client.getInstanceInfo(instanceInfoRequest).response;\n        return translate.instanceInfo(response);\n    }\n\n    /**\n     * Invokes a smart contract.\n     *\n     * {@codeblock ~~:nodejs/client/invokeContract.ts#documentation-snippet}\n     *\n     * @param context.contract The address of the smart contract that shall be evoked.\n     * @param context.amount The amount of microCCD to invoke the contract with.\n     * @param context.method The entrypoint (receive function) that shall be invoked.\n     * @param context.parameter The serialized parameters that the contract will be invoked with.\n     * @param context.energy The maximum amount of energy to allow for execution.\n     * @param context.invoker The address of the invoker, if undefined uses the zero account address.\n     * @param blockHash the block hash at which the contract should be invoked at. The contract is invoked in the state at the end of this block.\n     *\n     * @returns If the node was able to invoke, then a object describing the outcome is returned.\n     * The outcome is determined by the `tag` field, which is either `success` or `failure`.\n     * The `usedEnergy` field will always be present, and is the amount of NRG was used during the execution.\n     * If the tag is `success`, then an `events` field is present, and it contains the events that would have been generated.\n     * If invoking a V1 contract and it produces a return value, it will be present in the `returnValue` field.\n     * If the tag is `failure`, then a `reason` field is present, and it contains the reason the update would have been rejected.\n     * If either the block does not exist, or then node fails to parse of any of the inputs, then undefined is returned.\n     */\n    async invokeContract(context: SDK.ContractContext, blockHash?: BlockHash.Type): Promise<SDK.InvokeContractResult> {\n        const blockHashInput = getBlockHashInput(blockHash);\n\n        const invokeInstanceRequest: GRPC.InvokeInstanceRequest = {\n            blockHash: blockHashInput,\n            invoker: getInvokerInput(context.invoker),\n            instance: context.contract,\n            amount: { value: context.amount?.microCcdAmount || 0n },\n            entrypoint: ReceiveName.toProto(context.method),\n            parameter: Parameter.toProto(context.parameter ?? Parameter.empty()),\n            energy: Energy.toProto(context.energy ?? DEFAULT_INVOKE_ENERGY),\n        };\n\n        const response = await this.client.invokeInstance(invokeInstanceRequest).response;\n        return translate.invokeInstanceResponse(response);\n    }\n\n    /**\n     * Serializes and sends an account transaction to the node to be\n     * put in a block on the chain.\n     *\n     * Note that a transaction can still fail even if it was accepted by the node.\n     * To keep track of the transaction use getTransactionStatus.\n     *\n     * {@codeblock ~~:nodejs/common/simpleTransfer.ts#documentation-snippet}\n     *\n     * @param transaction the transaction to send to the node\n     * @param signature the signatures on the signing digest of the transaction\n     * @returns The transaction hash as a hex-encoded string\n     */\n    async sendAccountTransaction(\n        transaction: SDK.AccountTransaction,\n        signature: SDK.AccountTransactionSignature\n    ): Promise<TransactionHash.Type> {\n        const accountTransactionHandler = getAccountTransactionHandler(transaction.type);\n\n        const rawPayload = serializeAccountTransactionPayload(transaction);\n\n        // Energy cost\n        const baseEnergyCost = accountTransactionHandler.getBaseEnergyCost(transaction.payload);\n\n        const energyCost = calculateEnergyCost(countSignatures(signature), BigInt(rawPayload.length), baseEnergyCost);\n\n        return this.sendRawAccountTransaction(transaction.header, energyCost, rawPayload, signature);\n    }\n\n    /**\n     * Sends an account transaction, with an already serialized payload, to the node to be\n     * put in a block on the chain.\n     *\n     * Note that a transaction can still fail even if it was accepted by the node.\n     * To keep track of the transaction use getTransactionStatus.\n     *\n     * In general, { @link ConcordiumGRPCClient.sendAccountTransaction } is the recommended\n     * method to send account transactions, as this does not require the caller to serialize the payload themselves.\n     *\n     * @param header the transactionheader to send to the node\n     * @param energyAmount the amount of energy allotted for the transaction\n     * @param payload the payload serialized to a buffer\n     * @param signature the signatures on the signing digest of the transaction\n     * @returns The transaction hash as a byte array\n     */\n    async sendRawAccountTransaction(\n        header: SDK.AccountTransactionHeader,\n        energyAmount: Energy.Type,\n        payload: Uint8Array,\n        signature: SDK.AccountTransactionSignature\n    ): Promise<TransactionHash.Type> {\n        const transactionSignature: GRPC.AccountTransactionSignature =\n            translate.accountTransactionSignatureToV2(signature);\n\n        if (TransactionExpiry.toDate(header.expiry) < new Date()) {\n            throw new Error(\n                'A transaction expiry is not allowed to be in the past: ' + TransactionExpiry.toDate(header.expiry)\n            );\n        }\n\n        // Put together sendBlockItemRequest\n        const convertedHeader: GRPC.AccountTransactionHeader = {\n            sender: AccountAddress.toProto(header.sender),\n            sequenceNumber: SequenceNumber.toProto(header.nonce),\n            energyAmount: Energy.toProto(energyAmount),\n            expiry: TransactionExpiry.toProto(header.expiry),\n        };\n        const accountTransaction: GRPC.AccountTransaction = {\n            signature: transactionSignature,\n            header: convertedHeader,\n            payload: {\n                payload: { oneofKind: 'rawPayload', rawPayload: payload },\n            },\n        };\n        const sendBlockItemRequest: GRPC.SendBlockItemRequest = {\n            blockItem: {\n                oneofKind: 'accountTransaction',\n                accountTransaction: accountTransaction,\n            },\n        };\n\n        const response = await this.client.sendBlockItem(sendBlockItemRequest).response;\n        return TransactionHash.fromProto(response);\n    }\n\n    /**\n     * Sends a credential deployment transaction, for creating a new account,\n     * to the node to be put in a block on the chain.\n     *\n     * Note that a transaction can still fail even if it was accepted by the node.\n     * To keep track of the transaction use getTransactionStatus.\n     *\n     * See [this](git:docs/account-creation.md) document for how this function can be used.\n     *\n     * @param rawPayload the serialized payload, consisting of the {@link SDK.CredentialDeploymentTransaction}\n     * along with corresponding signatures. This can be serialized by utilizing the `serializeCredentialDeploymentPayload` function.\n     * @param expiry the expiry of the transaction\n     * @returns The transaction hash\n     */\n    async sendCredentialDeploymentTransaction(\n        rawPayload: Uint8Array,\n        expiry: TransactionExpiry.Type\n    ): Promise<TransactionHash.Type> {\n        const credentialDeployment: GRPC.CredentialDeployment = {\n            messageExpiry: TransactionExpiry.toProto(expiry),\n            payload: {\n                oneofKind: 'rawPayload',\n                rawPayload,\n            },\n        };\n        const sendBlockItemRequest: GRPC.SendBlockItemRequest = {\n            blockItem: {\n                oneofKind: 'credentialDeployment',\n                credentialDeployment: credentialDeployment,\n            },\n        };\n\n        const response = await this.client.sendBlockItem(sendBlockItemRequest).response;\n        return TransactionHash.fromProto(response);\n    }\n\n    /**\n     * Sends an update instruction transaction for updating a chain parameter\n     * to the node to be put in a block on the chain.\n     *\n     * @param updateInstructionTransaction the update instruction transaction to send to the node\n     * @param signatures map of the signatures on the hash of the serialized unsigned update instruction, with the key index as map key\n     * @returns The transaction hash\n     */\n    async sendUpdateInstruction(\n        updateInstructionTransaction: SDK.UpdateInstruction,\n        signatures: Record<number, HexString>\n    ): Promise<TransactionHash.Type> {\n        const header = updateInstructionTransaction.header;\n        const updateInstruction: GRPC.UpdateInstruction = {\n            header: {\n                sequenceNumber: {\n                    value: header.sequenceNumber,\n                },\n                effectiveTime: {\n                    value: header.effectiveTime,\n                },\n                timeout: {\n                    value: header.timeout,\n                },\n            },\n            payload: {\n                payload: {\n                    oneofKind: 'rawPayload',\n                    rawPayload: Buffer.from(updateInstructionTransaction.payload, 'hex'),\n                },\n            },\n            signatures: {\n                signatures: mapRecord(signatures, (x) => ({\n                    value: Buffer.from(x, 'hex'),\n                })),\n            },\n        };\n\n        const sendBlockItemRequest: GRPC.SendBlockItemRequest = {\n            blockItem: {\n                oneofKind: 'updateInstruction',\n                updateInstruction: updateInstruction,\n            },\n        };\n\n        const response = await this.client.sendBlockItem(sendBlockItemRequest).response;\n        return TransactionHash.fromProto(response);\n    }\n\n    /**\n     * Retrieves the status of the block chain parameters at the given blockHash.\n     *\n     * {@codeblock ~~:nodejs/client/getBlockChainParameters.ts#documentation-snippet}\n     *\n     * @param blockHash the block hash of the block to get the information from.\n     * @returns Info on all of the block chain parameters.\n     */\n    async getBlockChainParameters(blockHash?: BlockHash.Type): Promise<SDK.ChainParameters> {\n        const blockHashInput = getBlockHashInput(blockHash);\n        const response = await this.client.getBlockChainParameters(blockHashInput).response;\n        return translate.blockChainParameters(response);\n    }\n\n    /**\n     * Retrieves information on the baker pool of the given bakerId.\n     *\n     * {@codeblock ~~:nodejs/client/getPoolInfo.ts#documentation-snippet}\n     *\n     * @param blockHash the block hash of the block to get the information from.\n     * @param bakerId the ID of the baker to get the status for.\n     * @returns The status of the corresponding baker pool.\n     */\n    async getPoolInfo(bakerId: SDK.BakerId, blockHash?: BlockHash.Type): Promise<SDK.BakerPoolStatus> {\n        const input: GRPC.PoolInfoRequest = {\n            blockHash: getBlockHashInput(blockHash),\n            baker: {\n                value: bakerId,\n            },\n        };\n        const response = await this.client.getPoolInfo(input).response;\n        return translate.bakerPoolInfo(response);\n    }\n\n    /**\n     * Retrieves information on the passive delegators.\n     *\n     * {@codeblock ~~:nodejs/client/getPassiveDelegationInfo.ts#documentation-snippet}\n     *\n     * @param blockHash the block hash of the block to get the information from.\n     * @returns The status of the passive delegators.\n     */\n    async getPassiveDelegationInfo(blockHash?: BlockHash.Type): Promise<SDK.PassiveDelegationStatus> {\n        const input = getBlockHashInput(blockHash);\n        const response = await this.client.getPassiveDelegationInfo(input).response;\n        return translate.passiveDelegationInfo(response);\n    }\n\n    /**\n     * Retrieves the reward status at the given blockHash\n     *\n     * {@codeblock ~~:nodejs/client/getTokenomicsInfo.ts#documentation-snippet}\n     *\n     * @param blockHash optional block hash to get the reward status at, otherwise retrieves from last finalized block\n     * @returns the reward status at the given block, or undefined it the block does not exist.\n     */\n    async getTokenomicsInfo(blockHash?: BlockHash.Type): Promise<Upward<SDK.TokenomicsInfo>> {\n        const blockHashInput = getBlockHashInput(blockHash);\n\n        const response = await this.client.getTokenomicsInfo(blockHashInput).response;\n        return translate.tokenomicsInfo(response);\n    }\n\n    /**\n     * Gets a stream of finalized blocks.\n     *\n     * {@codeblock ~~:nodejs/client/getFinalizedBlocks.ts#documentation-snippet}\n     *\n     * @param abortSignal an AbortSignal to close the stream. Note that the\n     * stream does not close itself as it is infinite, so usually you'd want\n     * to provide this parameter.\n     * @returns An AsyncIterator stream of finalized blocks.\n     */\n    getFinalizedBlocks(abortSignal?: AbortSignal): AsyncIterable<SDK.FinalizedBlockInfo> {\n        const opts = { abort: abortSignal };\n        const blocks = this.client.getFinalizedBlocks(GRPC.Empty, opts).responses;\n        return mapStream(blocks, translate.commonBlockInfo);\n    }\n\n    /**\n     * Gets a stream of blocks. To get a stream of only finalized blocks\n     * use `getFinalizedBlocks()` instead.\n     *\n     * {@codeblock ~~:nodejs/client/getBlocks.ts#documentation-snippet}\n     *\n     * @param abortSignal an AbortSignal to close the stream. Note that the\n     * stream does not close itself as it is infinite, so usually you'd want\n     * to provide this parameter.\n     * @returns An AsyncIterator stream of blocks.\n     */\n    getBlocks(abortSignal?: AbortSignal): AsyncIterable<SDK.ArrivedBlockInfo> {\n        const opts = { abort: abortSignal };\n        const blocks = this.client.getBlocks(GRPC.Empty, opts).responses;\n        return mapStream(blocks, translate.commonBlockInfo);\n    }\n\n    /**\n     * Waits until given transaction is finalized.\n     *\n     * {@codeblock ~~:nodejs/common/simpleTransfer.ts#documentation-snippet}\n     *\n     * @param transactionHash a transaction hash as a bytearray.\n     * @param timeoutTime the number of milliseconds until the function throws error.\n     * @returns BlockItemSummary of the transaction.\n     */\n    async waitForTransactionFinalization(\n        transactionHash: TransactionHash.Type,\n        timeoutTime?: number\n    ): Promise<SDK.BlockItemSummaryInBlock> {\n        return new Promise(async (resolve, reject) => {\n            const abortController = new AbortController();\n            if (timeoutTime) {\n                setTimeout(() => {\n                    abortController.abort();\n                    reject(new Error('Function timed out.'));\n                }, timeoutTime);\n            }\n\n            try {\n                const blockStream = this.getFinalizedBlocks(abortController.signal);\n\n                const response = await this.getBlockItemStatus(transactionHash);\n                if (response.status === 'finalized') {\n                    // Simply doing `abortController.abort()` causes an error.\n                    // See: https://github.com/grpc/grpc-node/issues/1652\n                    setTimeout(() => abortController.abort(), 0);\n                    return resolve(response.outcome);\n                }\n\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                for await (const _ of blockStream) {\n                    const response = await this.getBlockItemStatus(transactionHash);\n                    if (response.status === 'finalized') {\n                        setTimeout(() => abortController.abort(), 0);\n                        return resolve(response.outcome);\n                    }\n                }\n\n                if (!abortController.signal.aborted) {\n                    return reject(new Error('Unexpected end of stream.'));\n                }\n            } catch (error) {\n                return reject(error);\n            }\n        });\n    }\n\n    /**\n     * Retrieve a stream of accounts that exist at the end of the given block.\n     *\n     * {@codeblock ~~:nodejs/client/getAccountList.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the accounts at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns an async iterable of account addresses.\n     */\n    getAccountList(blockHash?: BlockHash.Type, abortSignal?: AbortSignal): AsyncIterable<AccountAddress.Type> {\n        const opts = { abort: abortSignal };\n        const hash = getBlockHashInput(blockHash);\n        const asyncIter = this.client.getAccountList(hash, opts).responses;\n        return mapStream(asyncIter, AccountAddress.fromProto);\n    }\n\n    /**\n     * Get a stream of all smart contract modules' references. The stream will end\n     * when all modules that exist in the state at the end of the given\n     * block have been returned.\n     *\n     * {@codeblock ~~:nodejs/client/getModuleList.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the contract modules at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns an async iterable of contract module references.\n     */\n    getModuleList(blockHash?: BlockHash.Type, abortSignal?: AbortSignal): AsyncIterable<ModuleReference.Type> {\n        const opts = { abort: abortSignal };\n        const hash = getBlockHashInput(blockHash);\n        const asyncIter = this.client.getModuleList(hash, opts).responses;\n        return mapStream(asyncIter, ModuleReference.fromProto);\n    }\n\n    /**\n     * Get a stream of ancestors for the provided block.\n     * Starting with the provided block itself, moving backwards until no more\n     * ancestors or the requested number of ancestors has been returned.\n     *\n     * {@codeblock ~~:nodejs/client/getAncestors.ts#documentation-snippet}\n     *\n     * @param maxAmountOfAncestors the maximum amount of ancestors as a bigint.\n     * @param blockHash a optional block hash to get the ancestors at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns an async iterable of ancestors' block hashes.\n     */\n    getAncestors(\n        maxAmountOfAncestors: bigint,\n        blockHash?: BlockHash.Type,\n        abortSignal?: AbortSignal\n    ): AsyncIterable<BlockHash.Type> {\n        const opts = { abort: abortSignal };\n        const request: GRPC.AncestorsRequest = {\n            blockHash: getBlockHashInput(blockHash),\n            amount: maxAmountOfAncestors,\n        };\n        const asyncIter = this.client.getAncestors(request, opts).responses;\n        return mapStream(asyncIter, BlockHash.fromProto);\n    }\n\n    /**\n     * Get the exact state of a specific contract instance, streamed as a list of\n     * key-value pairs. The list is streamed in lexicographic order of keys.\n     *\n     * {@codeblock ~~:nodejs/client/getInstanceState.ts#documentation-snippet}\n     *\n     * @param contractAddress the contract to get the state of.\n     * @param blockHash a optional block hash to get the instance states at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns an async iterable of instance states as key-value pairs of hex strings.\n     */\n    getInstanceState(\n        contractAddress: ContractAddress.Type,\n        blockHash?: BlockHash.Type,\n        abortSignal?: AbortSignal\n    ): AsyncIterable<SDK.InstanceStateKVPair> {\n        const opts = { abort: abortSignal };\n        const request: GRPC.InstanceInfoRequest = {\n            blockHash: getBlockHashInput(blockHash),\n            address: ContractAddress.toProto(contractAddress),\n        };\n        const asyncIter = this.client.getInstanceState(request, opts).responses;\n        return mapStream(asyncIter, translate.instanceStateKVPair);\n    }\n\n    /**\n     * Get the value at a specific key of a contract state. In contrast to\n     * `GetInstanceState` this is more efficient, but requires the user to know\n     * the specific key to look for.\n     *\n     * {@codeblock ~~:nodejs/client/instanceStateLookup.ts#documentation-snippet}\n     *\n     * @param contractAddress the contract to get the state of.\n     * @param key the key of the desired contract state.\n     * @param blockHash a optional block hash to get the instance states at, otherwise retrieves from last finalized block.\n     * @returns the state of the contract at the given key as a hex string.\n     */\n    async instanceStateLookup(\n        contractAddress: ContractAddress.Type,\n        key: HexString,\n        blockHash?: BlockHash.Type\n    ): Promise<HexString> {\n        assertValidHex(key);\n        const request: GRPC.InstanceStateLookupRequest = {\n            address: ContractAddress.toProto(contractAddress),\n            key: Buffer.from(key, 'hex'),\n            blockHash: getBlockHashInput(blockHash),\n        };\n        const response = await this.client.instanceStateLookup(request).response;\n        return translate.unwrapValToHex(response);\n    }\n\n    /**\n     * Get the identity providers registered as of the end of a given block.\n     * The stream will end when all the identity providers have been returned,\n     * or an abort signal is called.\n     *\n     * {@codeblock ~~:nodejs/client/getIdentityProviders.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the providers at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns an async iterable of identity provider info objects.\n     */\n    getIdentityProviders(blockHash?: BlockHash.Type, abortSignal?: AbortSignal): AsyncIterable<SDK.IpInfo> {\n        const opts = { abort: abortSignal };\n        const block = getBlockHashInput(blockHash);\n        const ips = this.client.getIdentityProviders(block, opts).responses;\n        return mapStream(ips, translate.ipInfo);\n    }\n\n    /**\n     * Get the anonymity revokers registered as of the end of a given block.\n     * The stream will end when all the anonymity revokers have been returned,\n     * or an abort signal is called.\n     *\n     * {@codeblock ~~:nodejs/client/getAnonymityRevokers.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the anonymity revokers at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns an async iterable of identity provider info objects.\n     */\n    getAnonymityRevokers(blockHash?: BlockHash.Type, abortSignal?: AbortSignal): AsyncIterable<SDK.ArInfo> {\n        const opts = { abort: abortSignal };\n        const block = getBlockHashInput(blockHash);\n        const ars = this.client.getAnonymityRevokers(block, opts).responses;\n        return mapStream(ars, translate.arInfo);\n    }\n\n    /**\n     * Get a list of live blocks at a given height.\n     *\n     * {@codeblock ~~:nodejs/client/getBlocksAtHeightAbsolute.ts#documentation-snippet}\n     *\n     * @param blockHeightRequest Either an absolute block height request or a relative block height request\n     * @returns A list of block hashes as hex strings\n     */\n    async getBlocksAtHeight(blockHeightRequest: SDK.BlocksAtHeightRequest): Promise<BlockHash.Type[]> {\n        const requestV2 = translate.BlocksAtHeightRequestToV2(blockHeightRequest);\n        const blocks = await this.client.getBlocksAtHeight(requestV2).response;\n        return blocks.blocks.map(BlockHash.fromProto);\n    }\n\n    /**\n     * Get information, such as height, timings, and transaction counts for the given block.\n     *\n     * {@codeblock ~~:nodejs/client/getBlockInfo.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the info from, otherwise retrieves from last finalized block.\n     * @returns information on a block.\n     */\n    async getBlockInfo(blockHash?: BlockHash.Type): Promise<SDK.BlockInfo> {\n        const block = getBlockHashInput(blockHash);\n        const blockInfo = await this.client.getBlockInfo(block).response;\n        return translate.blockInfo(blockInfo);\n    }\n\n    /**\n     * Get all the bakers at the end of the given block.\n     *\n     * {@codeblock ~~:nodejs/client/getBakerList.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the baker list at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns an async iterable of BakerIds.\n     */\n    getBakerList(blockHash?: BlockHash.Type, abortSignal?: AbortSignal): AsyncIterable<SDK.BakerId> {\n        const opts = { abort: abortSignal };\n        const block = getBlockHashInput(blockHash);\n        const bakers = this.client.getBakerList(block, opts).responses;\n        return mapStream(bakers, (x) => x.value);\n    }\n\n    /**\n     * Get the registered delegators of a given pool at the end of a given block.\n     * In contrast to the `GetPoolDelegatorsRewardPeriod` which returns delegators\n     * that are fixed for the reward period of the block, this endpoint returns the\n     * list of delegators that are registered in the block. Any changes to delegators\n     * are immediately visible in this list.\n     * The stream will end when all the delegators has been returned.\n     *\n     * {@codeblock ~~:nodejs/client/getPoolDelegators.ts#documentation-snippet}\n     *\n     * @param baker The BakerId of the pool owner\n     * @param blockHash an optional block hash to get the delegators at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns a stream of DelegatorInfo\n     */\n    getPoolDelegators(\n        baker: SDK.BakerId,\n        blockHash?: BlockHash.Type,\n        abortSignal?: AbortSignal\n    ): AsyncIterable<SDK.DelegatorInfo> {\n        const request: GRPC.GetPoolDelegatorsRequest = {\n            blockHash: getBlockHashInput(blockHash),\n            baker: { value: baker },\n        };\n        const delegatorInfo = this.client.getPoolDelegators(request, {\n            abort: abortSignal,\n        }).responses;\n\n        return mapStream(delegatorInfo, translate.delegatorInfo);\n    }\n    /**\n     * Get the fixed delegators of a given pool for the reward period of the given block.\n     * In contracts to the `GetPoolDelegators` which returns delegators registered\n     * for the given block, this endpoint returns the fixed delegators contributing\n     * stake in the reward period containing the given block.\n     * The stream will end when all the delegators has been returned.\n     *\n     * {@codeblock ~~:nodejs/client/getPoolDelegatorsRewardPeriod.ts#documentation-snippet}\n     *\n     * @param baker The BakerId of the pool owner\n     * @param blockHash an optional block hash to get the delegators at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns a stream of DelegatorRewardPeriodInfo\n     */\n    getPoolDelegatorsRewardPeriod(\n        baker: SDK.BakerId,\n        blockHash?: BlockHash.Type,\n        abortSignal?: AbortSignal\n    ): AsyncIterable<SDK.DelegatorRewardPeriodInfo> {\n        const request: GRPC.GetPoolDelegatorsRequest = {\n            blockHash: getBlockHashInput(blockHash),\n            baker: { value: baker },\n        };\n        const delegatorInfo = this.client.getPoolDelegatorsRewardPeriod(request, { abort: abortSignal }).responses;\n\n        return mapStream(delegatorInfo, translate.delegatorInfo);\n    }\n\n    /**\n     * Get the registered passive delegators at the end of a given block.\n     * In contrast to the `GetPassiveDelegatorsRewardPeriod` which returns delegators\n     * that are fixed for the reward period of the block, this endpoint returns the\n     * list of delegators that are registered in the block. Any changes to delegators\n     * are immediately visible in this list.\n     * The stream will end when all the delegators has been returned.\n     *\n     * {@codeblock ~~:nodejs/client/getPassiveDelegators.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the delegators at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns a stream of DelegatorInfo\n     */\n    getPassiveDelegators(blockHash?: BlockHash.Type, abortSignal?: AbortSignal): AsyncIterable<SDK.DelegatorInfo> {\n        const delegatorInfo = this.client.getPassiveDelegators(getBlockHashInput(blockHash), {\n            abort: abortSignal,\n        }).responses;\n\n        return mapStream(delegatorInfo, translate.delegatorInfo);\n    }\n\n    /**\n     * Get the fixed passive delegators for the reward period of the given block.\n     * In contracts to the `GetPassiveDelegators` which returns delegators registered\n     * for the given block, this endpoint returns the fixed delegators contributing\n     * stake in the reward period containing the given block.\n     * The stream will end when all the delegators has been returned.\n     *\n     * {@codeblock ~~:nodejs/client/getPassiveDelegatorsRewardPeriod.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the delegators at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns a stream of DelegatorRewardPeriodInfo\n     */\n    getPassiveDelegatorsRewardPeriod(\n        blockHash?: BlockHash.Type,\n        abortSignal?: AbortSignal\n    ): AsyncIterable<SDK.DelegatorRewardPeriodInfo> {\n        const delegatorInfo = this.client.getPassiveDelegatorsRewardPeriod(getBlockHashInput(blockHash), {\n            abort: abortSignal,\n        }).responses;\n\n        return mapStream(delegatorInfo, translate.delegatorInfo);\n    }\n\n    /**\n     * Get the current branches of blocks starting from and including the last finalized block.\n     *\n     * {@codeblock ~~:nodejs/client/getBranches.ts#documentation-snippet}\n     *\n     * @returns a branch with a block hash and a list of branch-children\n     */\n    async getBranches(): Promise<SDK.Branch> {\n        const branch = await this.client.getBranches(GRPC.Empty).response;\n        return translate.branch(branch);\n    }\n\n    /**\n     * Get information related to the baker election for a particular block.\n     *\n     * @param blockHash an optional block hash to get the election info at, otherwise retrieves from last finalized block.\n     * @returns election info for the given block\n     */\n    async getElectionInfo(blockHash?: BlockHash.Type): Promise<SDK.ElectionInfo> {\n        const blockHashInput = getBlockHashInput(blockHash);\n        const electionInfo = await this.client.getElectionInfo(blockHashInput).response;\n        return translate.electionInfo(electionInfo);\n    }\n\n    /**\n     * Get a list of non-finalized transaction hashes for a given account. This\n     * endpoint is not expected to return a large amount of data in most cases,\n     * but in bad network conditions it might. The stream will end when all the\n     * non-finalized transaction hashes have been returned.\n     *\n     * {@codeblock ~~:nodejs/client/getAccountNonFinalizedTransactions.ts#documentation-snippet}\n     *\n     * @param accountAddress The address of the account that you wish to query.\n     * @returns a stream of transaction hashes.\n     */\n    getAccountNonFinalizedTransactions(\n        accountAddress: AccountAddress.Type,\n        abortSignal?: AbortSignal\n    ): AsyncIterable<TransactionHash.Type> {\n        const transactions = this.client.getAccountNonFinalizedTransactions(\n            { value: AccountAddress.toBuffer(accountAddress) },\n            { abort: abortSignal }\n        ).responses;\n\n        return mapStream(transactions, TransactionHash.fromProto);\n    }\n\n    /**\n     * Get a list of transaction events in a given block.\n     * The stream will end when all the transaction events for a given block have been returned.\n     *\n     * {@codeblock ~~:nodejs/client/getBlockTransactionEvents.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the transaction events at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns a stream of block item summaries\n     *\n     * **Please note**, any of these can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    getBlockTransactionEvents(\n        blockHash?: BlockHash.Type,\n        abortSignal?: AbortSignal\n    ): AsyncIterable<Upward<BlockItemSummary>> {\n        const blockItemSummaries = this.client.getBlockTransactionEvents(getBlockHashInput(blockHash), {\n            abort: abortSignal,\n        }).responses;\n\n        return mapStream(blockItemSummaries, translate.blockItemSummary);\n    }\n\n    /**\n     * Get next available sequence numbers for updating chain parameters after a given block.\n     *\n     * {@codeblock ~~:nodejs/client/getNextUpdateSequenceNumbers.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the sequence numbers at, otherwise retrieves from last finalized block.\n     * @return a NextUpdateSequenceNumbers object\n     */\n    async getNextUpdateSequenceNumbers(blockHash?: BlockHash.Type): Promise<SDK.NextUpdateSequenceNumbers> {\n        const sequenceNumbers = await this.client.getNextUpdateSequenceNumbers(getBlockHashInput(blockHash)).response;\n\n        return translate.nextUpdateSequenceNumbers(sequenceNumbers);\n    }\n    /**\n     * Shut down the node.\n     * Return a GRPC error if the shutdown failed.\n     *\n     * {@codeblock ~~:nodejs/client/shutdown.ts#documentation-snippet}\n     */\n    async shutdown(): Promise<void> {\n        await this.client.shutdown(GRPC.Empty);\n    }\n\n    /**\n     * Suggest to a peer to connect to the submitted peer details.\n     * This, if successful, adds the peer to the list of given addresses.\n     * Otherwise return a GRPC error.\n     * Note. The peer might not be connected to instantly, in that case\n     * the node will try to establish the connection in near future. This\n     * function returns a GRPC status 'Ok' in this case.\n     *\n     * {@codeblock ~~:nodejs/client/peerConnect.ts#documentation-snippet}\n     *\n     * @param ip The ip address to connect to. Must be a valid ip address.\n     * @param port The port to connect to. Must be between 0 and 65535.\n     */\n    async peerConnect(ip: SDK.IpAddressString, port: number): Promise<void> {\n        assertValidIp(ip);\n        assertValidPort(port);\n\n        const request: GRPC.IpSocketAddress = {\n            ip: { value: ip },\n            port: { value: port },\n        };\n        await this.client.peerConnect(request);\n    }\n\n    /**\n     * Disconnect from the peer and remove them from the given addresses list\n     * if they are on it. Return if the request was processed successfully.\n     * Otherwise return a GRPC error.\n     *\n     * {@codeblock ~~:nodejs/client/peerDisconnect.ts#documentation-snippet}\n     *\n     * @param ip The ip address to connect to. Must be a valid ip address.\n     * @param port The port to connect to. Must be between 0 and 65535.\n     */\n    async peerDisconnect(ip: SDK.IpAddressString, port: number): Promise<void> {\n        assertValidIp(ip);\n        assertValidPort(port);\n\n        const request: GRPC.IpSocketAddress = {\n            ip: { value: ip },\n            port: { value: port },\n        };\n        await this.client.peerDisconnect(request);\n    }\n\n    /**\n     * Get a list of banned peers.\n     *\n     * {@codeblock ~~:nodejs/client/getBannedPeers.ts#documentation-snippet}\n     *\n     * @return A list of the ip's of banned peers.\n     */\n    async getBannedPeers(): Promise<SDK.IpAddressString[]> {\n        const bannedPeers = await this.client.getBannedPeers(GRPC.Empty).response;\n        return bannedPeers.peers.map((x) => unwrap(x.ipAddress?.value));\n    }\n\n    /**\n     * Ban the given peer.\n     * Rejects if the action fails.\n     *\n     * {@codeblock ~~:nodejs/client/banPeer.ts#documentation-snippet}\n     *\n     * @param ip The ip address of the peer to ban. Must be a valid ip address.\n     */\n    async banPeer(ip: SDK.IpAddressString): Promise<void> {\n        assertValidIp(ip);\n\n        const request: GRPC.PeerToBan = {\n            ipAddress: { value: ip },\n        };\n        await this.client.banPeer(request);\n    }\n\n    /**\n     * Unbans the given peer.\n     * Rejects if the action fails.\n     *\n     * {@codeblock ~~:nodejs/client/unbanPeer.ts#documentation-snippet}\n     *\n     * @param ip The ip address of the peer to unban. Must be a valid ip address.\n     */\n    async unbanPeer(ip: SDK.IpAddressString): Promise<void> {\n        assertValidIp(ip);\n\n        const request: GRPC.BannedPeer = {\n            ipAddress: { value: ip },\n        };\n        await this.client.unbanPeer(request);\n    }\n\n    /**\n     * Start dumping packages into the specified file.\n     * Only enabled if the node was built with the `network_dump` feature.\n     * Rejects if the network dump failed to start.\n     *\n     * {@codeblock ~~:nodejs/client/dumpStart.ts#documentation-snippet}\n     *\n     * @param filePath Which file to dump the packages into. Requires a valid path.\n     * @param raw Whether the node should dump raw packages.\n     */\n    async dumpStart(filePath: string, raw: boolean): Promise<void> {\n        const request: GRPC.DumpRequest = {\n            file: filePath,\n            raw: raw,\n        };\n        await this.client.dumpStart(request);\n    }\n\n    /**\n     * Stop dumping packages.\n     * Only enabled if the node was built with the `network_dump` feature.\n     * Rejects if the network dump failed to be stopped.\n     *\n     * {@codeblock ~~:nodejs/client/dumpStop.ts#documentation-snippet}\n     */\n    async dumpStop(): Promise<void> {\n        await this.client.dumpStop(GRPC.Empty);\n    }\n\n    /**\n     * Get information about the node.\n     * The `NodeInfo` includes information of\n     * * Meta information such as the, version of the node, type of the node, uptime and the local time of the node.\n     * * NetworkInfo which yields data such as the node id, packets sent/received,\n     *   average bytes per second sent/received.\n     * * ConsensusInfo. The `ConsensusInfo` returned depends on if the node supports\n     *   the protocol on chain and whether the node is configured as a baker or not.\n     *\n     * {@codeblock ~~:nodejs/client/getNodeInfo.ts#documentation-snippet}\n     *\n     * @returns Info about the node\n     */\n    async getNodeInfo(): Promise<SDK.NodeInfo> {\n        const nodeInfo = await this.client.getNodeInfo(GRPC.Empty).response;\n        return translate.nodeInfo(nodeInfo);\n    }\n\n    /**\n     * Get a list of the peers that the node is connected to\n     * and associated network related information for each peer.\n     *\n     * {@codeblock ~~:nodejs/client/getPeersInfo.ts#documentation-snippet}\n     *\n     * @returns a list containing info on each peer of the node.\n     */\n    async getPeersInfo(): Promise<SDK.PeerInfo[]> {\n        const peersInfo = await this.client.getPeersInfo(GRPC.Empty).response;\n        return peersInfo.peers.map(translate.peerInfo);\n    }\n\n    /**\n     * Get a list of special events in a given block. These are events generated\n     * by the protocol, such as minting and reward payouts. They are not directly\n     * generated by any transaction. The stream will end when all the special\n     * events for a given block have been returned.\n     *\n     * {@codeblock ~~:nodejs/client/getBlockSpecialEvents.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the special events at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns a stream of block item summaries\n     *\n     * **Please note**, these can possibly be unknown if the SDK is not fully compatible with the Concordium\n     * node queried, in which case `null` is returned.\n     */\n    getBlockSpecialEvents(\n        blockHash?: BlockHash.Type,\n        abortSignal?: AbortSignal\n    ): AsyncIterable<Upward<SDK.BlockSpecialEvent>> {\n        const blockSpecialEvents = this.client.getBlockSpecialEvents(getBlockHashInput(blockHash), {\n            abort: abortSignal,\n        }).responses;\n\n        return mapStream(blockSpecialEvents, translate.blockSpecialEvent);\n    }\n\n    /**\n     * Get the pending updates to chain parameters at the end of a given block.\n     * The stream will end when all the pending updates for a given block have been returned.\n     *\n     * {@codeblock ~~:nodejs/client/getBlockPendingUpdates.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the pending updates at, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     * @returns a stream of pending updates\n     */\n    getBlockPendingUpdates(blockHash?: BlockHash.Type, abortSignal?: AbortSignal): AsyncIterable<SDK.PendingUpdate> {\n        const pendingUpdates = this.client.getBlockPendingUpdates(getBlockHashInput(blockHash), {\n            abort: abortSignal,\n        }).responses;\n\n        return mapStream(pendingUpdates, translate.pendingUpdate);\n    }\n\n    /**\n     * Get the summary of the finalization data in a given block.\n     *\n     * {@codeblock ~~:nodejs/client/getBlockFinalizationSummary.ts#documentation-snippet}\n     *\n     * @param blockHash an optional block hash to get the finalization summaries at, otherwise retrieves from last finalized block.\n     * @returns a finalization summary\n     */\n    async getBlockFinalizationSummary(blockHash?: BlockHash.Type): Promise<SDK.BlockFinalizationSummary> {\n        const finalizationSummary = await this.client.getBlockFinalizationSummary(getBlockHashInput(blockHash))\n            .response;\n\n        return translate.blockFinalizationSummary(finalizationSummary);\n    }\n\n    /**\n     * Gets a stream of finalized blocks from specified `startHeight`.\n     *\n     * @param {bigint} [startHeight=0n] - An optional height to start streaming blocks from. Defaults to 0n.\n     * @param {AbortSignal} [abortSignal] - An optional abort signal, which will end the stream. If this is not specified, the stream continues indefinitely.\n     * @returns {AsyncIterable<SDK.FinalizedBlockInfo>} A stream of {@link SDK.FinalizedBlockInfo}.\n     */\n    getFinalizedBlocksFrom(\n        startHeight: SDK.AbsoluteBlocksAtHeightRequest,\n        abortSignal?: AbortSignal\n    ): AsyncIterable<SDK.FinalizedBlockInfo>;\n    /**\n     * Gets a stream of finalized blocks from specified `startHeight`.\n     *\n     * @param {bigint} [startHeight=0n] - An optional height to start streaming blocks from. Defaults to 0n.\n     * @param {bigint} [endHeight] - An optional height to stop streaming at. If this is not specified, the stream continues indefinitely.\n     * @returns {AsyncIterable<SDK.FinalizedBlockInfo>} A stream of {@link SDK.FinalizedBlockInfo}.\n     */\n    getFinalizedBlocksFrom(\n        startHeight: SDK.AbsoluteBlocksAtHeightRequest,\n        endHeight?: SDK.AbsoluteBlocksAtHeightRequest\n    ): AsyncIterable<SDK.FinalizedBlockInfo>;\n    getFinalizedBlocksFrom(\n        startHeight: SDK.AbsoluteBlocksAtHeightRequest = 0n,\n        end?: AbortSignal | SDK.AbsoluteBlocksAtHeightRequest\n    ): AsyncIterable<SDK.FinalizedBlockInfo> {\n        let height = startHeight;\n        let finHeight: bigint;\n        const abortController = new AbortController();\n        const abortSignal = end instanceof AbortSignal ? end : abortController.signal;\n        const newBlocks = this.getFinalizedBlocks(abortSignal);\n        const endSignal: IteratorReturnResult<undefined> = {\n            done: true,\n            value: undefined,\n        };\n        let searchKnown = true;\n\n        const nextKnown = async (): Promise<SDK.FinalizedBlockInfo | undefined> => {\n            // Refresh latest finalized height from consensus\n            if (height > finHeight) {\n                finHeight = await this.getConsensusHeight();\n            }\n            // As long as height is lower than latest finalized height, query blocks at height\n            if (height > finHeight) {\n                searchKnown = false;\n                return undefined;\n            }\n\n            const [hash] = (await this.getBlocksAtHeight(height)).reverse();\n            const bi: SDK.FinalizedBlockInfo = { hash, height };\n            height += 1n;\n\n            return bi;\n        };\n\n        const nextNew = async (): Promise<SDK.FinalizedBlockInfo | undefined> => {\n            // At this point, we've found all blocks already finalized on chain. Start streaming new blocks.\n            for await (const block of newBlocks) {\n                if (block.height < height) {\n                    // Skip blocks already found.\n                    continue;\n                }\n\n                return block;\n            }\n        };\n\n        const next = async (): Promise<IteratorResult<SDK.FinalizedBlockInfo>> => {\n            if (abortSignal.aborted) {\n                return endSignal;\n            }\n\n            if (finHeight === undefined) {\n                finHeight = await this.getConsensusHeight();\n            }\n\n            let bi: SDK.FinalizedBlockInfo | undefined;\n            if (searchKnown) {\n                bi = (await nextKnown()) ?? (await nextNew());\n            } else {\n                bi = await nextNew();\n            }\n\n            if (bi === undefined) {\n                return endSignal;\n            }\n\n            if (typeof end === 'bigint' && bi.height >= end) {\n                abortController.abort();\n            }\n\n            return {\n                done: false,\n                value: bi,\n            };\n        };\n\n        return {\n            [Symbol.asyncIterator]: () => ({ next }),\n        };\n    }\n\n    /**\n     * Find a block with lowest possible height where the predicate holds.\n     * Note that this function uses binary search and is only intended to work for monotone predicates.\n     *\n     * @template R\n     * @param {(bi: SDK.FinalizedBlockInfo) => Promise<R | undefined>} predicate - A predicate function resolving with value of type {@link R} if the predicate holds, and undefined if not.\n     * The precondition for this method is that the function is monotone, i.e., if block at height `h` satisfies the test then also a block at height `h+1` does.\n     * If this precondition does not hold then the return value from this method is unspecified.\n     * @param {bigint} [from=0n] - An optional lower bound of the range of blocks to search. Defaults to 0n.\n     * @param {bigint} [to] - An optional upper bound of the range of blocks to search. Defaults to latest finalized block.\n     *\n     * @returns {Promise<R | undefined>} The value returned from `predicate` at the lowest block (in terms of height) where the predicate holds.\n     */\n    async findEarliestFinalized<R>(\n        predicate: (bi: SDK.FinalizedBlockInfo) => Promise<R | undefined>,\n        from: SDK.AbsoluteBlocksAtHeightRequest = 0n,\n        to?: SDK.AbsoluteBlocksAtHeightRequest\n    ): Promise<R | undefined> {\n        let lower = from;\n        let upper = to ?? (await this.getConsensusHeight());\n\n        if (lower > upper) {\n            throw new Error('Please specify a \"to\" value greater than the specified \"from\" value');\n        }\n\n        let result: R | undefined;\n        while (lower <= upper) {\n            const mid = lower + (upper - lower) / 2n;\n            const [hash] = await this.getBlocksAtHeight(mid);\n            const res = await predicate({ hash, height: mid });\n\n            if (upper === mid) {\n                result = res;\n                break;\n            } else if (res !== undefined) {\n                result = res;\n                upper = mid;\n            } else {\n                lower = mid + 1n;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Find the block where a smart contract instance was created. This is a specialized form of {@link findEarliestFinalized}.\n     *\n     * @param {ContractAddress} address - The contract address to search for.\n     * @param {bigint} [from=0n] - An optional lower bound of the range of blocks to search. Defaults to 0n.\n     * @param {bigint} [to] - An optional upper bound of the range of blocks to search. Defaults to latest finalized block.\n     *\n     * @returns {FindInstanceCreationReponse} Information about the block and the contract instance, or undefined if not found.\n     */\n    async findInstanceCreation(\n        address: ContractAddress.Type,\n        from?: SDK.AbsoluteBlocksAtHeightRequest,\n        to?: SDK.AbsoluteBlocksAtHeightRequest\n    ): Promise<FindInstanceCreationReponse | undefined> {\n        return this.findEarliestFinalized(\n            async ({ hash, height }) => {\n                try {\n                    const instanceInfo = await this.getInstanceInfo(address, hash);\n                    return { hash, height, instanceInfo };\n                } catch (e) {\n                    if (isRpcError(e) && e.code === 'NOT_FOUND') {\n                        return undefined;\n                    }\n\n                    throw e;\n                }\n            },\n            from,\n            to\n        );\n    }\n\n    /**\n     * Find the first block finalized after a given time.\n     *\n     * @param {Date} time - The time to find first block after\n     * @param {bigint} [from=0n] - An optional lower bound of the range of blocks to search. Defaults to 0n.\n     * @param {bigint} [to] - An optional upper bound of the range of blocks to search. Defaults to latest finalized block.\n     *\n     * @returns {SDK.BlockInfo} Information about the block found, or undefined if no block was found.\n     */\n    async findFirstFinalizedBlockNoLaterThan(\n        time: Date,\n        from?: SDK.AbsoluteBlocksAtHeightRequest,\n        to?: SDK.AbsoluteBlocksAtHeightRequest\n    ): Promise<SDK.BlockInfo | undefined> {\n        return this.findEarliestFinalized(\n            async ({ hash }) => {\n                const bi = await this.getBlockInfo(hash);\n                return bi.blockSlotTime >= time ? bi : undefined;\n            },\n            from,\n            to\n        );\n    }\n\n    /**\n     * Get the projected earliest time at which a particular baker will be required to bake a block.\n     *\n     * If the baker is not a baker for the current reward period, this returns a timestamp at the\n     * start of the next reward period. If the baker is a baker for the current reward period, the\n     * earliest win time is projected from the current round forward, assuming that each round after\n     * the last finalized round will take the minimum block time. (If blocks take longer, or timeouts\n     * occur, the actual time may be later, and the reported time in subsequent queries may reflect\n     * this.) At the end of an epoch (or if the baker is not projected to bake before the end of the\n     * epoch) the earliest win time for a (current) baker will be projected as the start of the next\n     * epoch. This is because the seed for the leader election is updated at the epoch boundary, and\n     * so the winners cannot be predicted beyond that. Note that in some circumstances the returned\n     * timestamp can be in the past, especially at the end of an epoch.\n     *\n     * @throws an `UNAVAILABLE` RPC error if the current consensus version is 0 (prior to protocol version 6), as the endpoint is only supported from consensus version 1 (from protocol version 6).\n     *\n     * @param {SDK.BakerId} baker - The baker that should be queried for.\n     *\n     * @returns {Timestamp.Type} The projected earliest time at which a particular baker will be required to bake a block, as a unix timestamp in milliseconds.\n     */\n    async getBakerEarliestWinTime(baker: SDK.BakerId): Promise<Timestamp.Type> {\n        const bakerId = {\n            value: baker,\n        };\n        const winTime = await this.client.getBakerEarliestWinTime(bakerId).response;\n        return Timestamp.fromMillis(winTime.value);\n    }\n\n    /**\n     * For a non-genesis block, this returns the quorum certificate, a timeout\n     * certificate (if present) and epoch finalization entry (if present).\n     *\n     * @throws an `UNIMPLEMENTED` RPC error if the endpoint is not enabled by the node.\n     * @throws an `INVALID_ARGUMENT` if the block being pointed to is not a product of ConcordiumBFT\n     *\n     * @param blockHash optional block hash to get the cryptographic parameters at, otherwise retrieves from last finalized block.\n     *\n     * @returns the requested block certificates.\n     */\n    async getBlockCertificates(blockHash?: BlockHash.Type): Promise<SDK.BlockCertificates> {\n        const blockHashInput = getBlockHashInput(blockHash);\n        const blockCertificates = await this.client.getBlockCertificates(blockHashInput).response;\n        return translate.blockCertificates(blockCertificates);\n    }\n\n    /**\n     * Get all bakers in the reward period of a block.\n     * This endpoint is only supported for protocol version 6 and onwards.\n     *\n     * @throws an `IllegalArgument` RPC error if the protocol does not support the endpoint.\n     *\n     * @param blockHash optional block hash to get the cryptographic parameters at, otherwise retrieves from last finalized block.\n     *\n     * @returns All bakers in the reward period of a block\n     */\n    getBakersRewardPeriod(blockHash?: BlockHash.Type): AsyncIterable<SDK.BakerRewardPeriodInfo> {\n        const blockHashInput = getBlockHashInput(blockHash);\n        const bakersRewardPeriod = this.client.getBakersRewardPeriod(blockHashInput).responses;\n        return mapStream(bakersRewardPeriod, translate.bakerRewardPeriodInfo);\n    }\n\n    /**\n     * Get the list of bakers that won the lottery in a particular historical epoch (i.e. the\n     * last finalized block is in a later epoch). This lists the winners for each round in the\n     * epoch, starting from the round after the last block in the previous epoch, running to\n     * the round before the first block in the next epoch. It also indicates if a block in each\n     * round was included in the finalized chain.\n     *\n     * The following error cases are possible:\n     * @throws a `NOT_FOUND` RPC error if the query specifies an unknown block.\n     * @throws an `UNAVAILABLE` RPC error if the query is for an epoch that is not finalized in the current genesis index, or is for a future genesis index.\n     * @throws an `INVALID_ARGUMENT` RPC error if the query is for an epoch that is not finalized for a past genesis index.\n     * @throws an `INVALID_ARGUMENT` RPC error if the query is for a genesis index at consensus version 0.\n     * @throws an `INVALID_ARGUMENT` RPC error if the input `EpochRequest` is malformed.\n     * @throws an `UNAVAILABLE` RPC error if the endpoint is disabled on the node.\n     *\n     * @param {BlockHash.Type | SDK.RelativeEpochRequest } epochRequest - Consists of either a block hash or a relative epoch request consisting of a genesis index and an epoch. If none is passed, it queries the last finalized block.\n     *\n     * @returns {SDK.WinningBaker} A stream of winning bakers for a given epoch.\n     */\n    getWinningBakersEpoch(epochRequest?: BlockHash.Type | SDK.RelativeEpochRequest): AsyncIterable<SDK.WinningBaker> {\n        const req = getEpochRequest(epochRequest);\n        const winningBakers = this.client.getWinningBakersEpoch(req).responses;\n\n        return mapStream(winningBakers, translate.winningBaker);\n    }\n\n    /**\n     * Get the block hash of the first finalized block in a specified epoch.\n     *\n     * The following error cases are possible:\n     * @throws - a `NOT_FOUND` RPC error if the query specifies an unknown block.\n     * @throws - an `UNAVAILABLE` RPC error if the query is for an epoch that is not finalized in the current genesis index, or is for a future genesis index.\n     * @throws - an `INVALID_ARGUMENT` RPC error if the query is for an epoch with no finalized blocks for a past genesis index.\n     * @throws - an `INVALID_ARGUMENT` RPC error if the input `EpochRequest` is malformed.\n     * @throws - an `UNAVAILABLE` RPC error if the endpoint is disabled on the node.\n     *\n     * @param {BlockHash.Type | SDK.RelativeEpochRequest } epochRequest - Consists of either a block hash or a relative epoch request consisting of a genesis index and an epoch. If none is passed, it queries the last finalized block.\n     *\n     * @returns {HexString} The block hash as a hex encoded string.\n     */\n    async getFirstBlockEpoch(epochRequest?: BlockHash.Type | SDK.RelativeEpochRequest): Promise<BlockHash.Type> {\n        const req = getEpochRequest(epochRequest);\n        const blockHash = await this.client.getFirstBlockEpoch(req).response;\n\n        return BlockHash.fromProto(blockHash);\n    }\n\n    private async getConsensusHeight() {\n        return (await this.getConsensusStatus()).lastFinalizedBlockHeight;\n    }\n\n    /**\n     * Queries the node to check its health\n     *\n     * {@codeblock ~~:nodejs/client/healthCheck.ts#documentation-snippet}\n     *\n     * @returns a HealthCheck indicating whether the node is healthy or not and provides the message from the client, if not healthy.\n     */\n    async healthCheck(): Promise<SDK.HealthCheckResponse> {\n        try {\n            await this.healthClient.check({});\n            return { isHealthy: true };\n        } catch (e) {\n            return { isHealthy: false, message: (e as RpcError).message };\n        }\n    }\n\n    /**\n     * Get information about a protocol level token (PLT) at a certain block.\n     * This endpoint is only supported for protocol version 9 and onwards.\n     *\n     * {@codeblock ~~:nodejs/client/getTokenInfo.ts#documentation-snippet}\n     *\n     * @param tokenId the ID of the token to query information about\n     * @param blockHash an optional block hash to get the info from, otherwise retrieves from last finalized block.\n     * @returns {PLT.TokenInfo} information about the corresponding token.\n     */\n    async getTokenInfo(tokenId: PLT.TokenId.Type, blockHash?: BlockHash.Type): Promise<PLT.TokenInfo> {\n        const blockHashInput = getBlockHashInput(blockHash);\n        const req: GRPC.TokenInfoRequest = {\n            tokenId: PLT.TokenId.toProto(tokenId),\n            blockHash: blockHashInput,\n        };\n        const res = await this.client.getTokenInfo(req);\n        return translate.trTokenInfo(res.response);\n    }\n\n    /**\n     * Get all token IDs currently registered at a block.\n     * This endpoint is only supported for protocol version 9 and onwards.\n     *\n     * {@codeblock ~~:nodejs/client/getTokenList.ts#documentation-snippet}\n     *\n     * @param blockHash optional block hash, otherwise retrieves from last finalized block.\n     * @param abortSignal an optional AbortSignal to close the stream.\n     *\n     * @returns All token IDs registered at a block\n     */\n    getTokenList(blockHash?: BlockHash.Type, abortSignal?: AbortSignal): AsyncIterable<PLT.TokenId.Type> {\n        const blockHashInput = getBlockHashInput(blockHash);\n        const tokenIds = this.client.getTokenList(blockHashInput, { abort: abortSignal }).responses;\n        return mapStream(tokenIds, PLT.TokenId.fromProto);\n    }\n}\n\n/**\n * @hidden\n */\nexport function getBlockHashInput(blockHash?: BlockHash.Type): GRPC.BlockHashInput {\n    if (blockHash) {\n        return {\n            blockHashInput: {\n                oneofKind: 'given',\n                given: BlockHash.toProto(blockHash),\n            },\n        };\n    } else {\n        return {\n            blockHashInput: {\n                oneofKind: 'lastFinal',\n                lastFinal: GRPC.Empty,\n            },\n        };\n    }\n}\n\n/**\n * @hidden\n */\nexport function getAccountIdentifierInput(accountIdentifier: SDK.AccountIdentifierInput): GRPC.AccountIdentifierInput {\n    let returnIdentifier: GRPC.AccountIdentifierInput['accountIdentifierInput'];\n\n    if (AccountAddress.instanceOf(accountIdentifier)) {\n        returnIdentifier = {\n            oneofKind: 'address',\n            address: AccountAddress.toProto(accountIdentifier),\n        };\n    } else if (CredentialRegistrationId.instanceOf(accountIdentifier)) {\n        returnIdentifier = {\n            oneofKind: 'credId',\n            credId: {\n                value: CredentialRegistrationId.toBuffer(accountIdentifier),\n            },\n        };\n    } else if (typeof accountIdentifier === 'bigint') {\n        returnIdentifier = {\n            oneofKind: 'accountIndex',\n            accountIndex: { value: accountIdentifier },\n        };\n    } else {\n        throw new Error(`Unsupported account identifier: ${accountIdentifier}.`);\n    }\n\n    return { accountIdentifierInput: returnIdentifier };\n}\n\n/**\n * A concordium-node specific gRPC client wrapper, using a grpc-web transport layer.\n * This requires that the node at the address supplied has grpc-web enabled.\n *\n * @example\n * import { ConcordiumGRPCWebClient } from \"...\"\n * const client = new ConcordiumGRPCWebClient('127.0.0.1', 20000);\n */\nexport class ConcordiumGRPCWebClient extends ConcordiumGRPCClient {\n    constructor(address: string, port: number, options?: Partial<GrpcWebOptions>) {\n        const transport = new GrpcWebFetchTransport({\n            baseUrl: `${address}:${port}`,\n            ...options,\n        });\n        super(transport);\n    }\n}\n\n/**\n * @hidden\n */\nexport function getInvokerInput(invoker?: AccountAddress.Type | ContractAddress.Type): GRPC.Address | undefined {\n    if (!invoker) {\n        return undefined;\n    } else if (AccountAddress.instanceOf(invoker)) {\n        return {\n            type: {\n                oneofKind: 'account',\n                account: AccountAddress.toProto(invoker),\n            },\n        };\n    } else if (ContractAddress.instanceOf(invoker)) {\n        return {\n            type: {\n                oneofKind: 'contract',\n                contract: ContractAddress.toProto(invoker),\n            },\n        };\n    } else {\n        throw new Error('Unexpected input to build invoker');\n    }\n}\n\nfunction getEpochRequest(epochRequest?: BlockHash.Type | SDK.RelativeEpochRequest): GRPC.EpochRequest {\n    if (BlockHash.instanceOf(epochRequest) || typeof epochRequest === 'undefined') {\n        return {\n            epochRequestInput: {\n                oneofKind: 'blockHash',\n                blockHash: getBlockHashInput(epochRequest),\n            },\n        };\n    } else {\n        return {\n            epochRequestInput: {\n                oneofKind: 'relativeEpoch',\n                relativeEpoch: {\n                    genesisIndex: { value: epochRequest.genesisIndex },\n                    epoch: { value: epochRequest.epoch },\n                },\n            },\n        };\n    }\n}\n\nfunction assertValidIp(ip: SDK.IpAddressString): void {\n    if (!isValidIp(ip)) {\n        throw new Error('The input was not a valid ip: ' + ip);\n    }\n}\n\nfunction assertValidPort(port: number): void {\n    if (port > 65535 || port < 0) {\n        throw new Error('The input was not a valid port, must be between 0 and 65535: ' + port);\n    }\n}\n\nfunction assertValidHex(hex: HexString): void {\n    if (!isHex(hex)) {\n        throw new Error('The input was not a valid hex: ' + hex);\n    }\n}\n","var BigNumber = require('bignumber.js');\n\n/*\n    json2.js\n    2013-05-26\n\n    Public Domain.\n\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\n    See http://www.JSON.org/js.html\n\n\n    This code should be minified before deployment.\n    See http://javascript.crockford.com/jsmin.html\n\n    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n    NOT CONTROL.\n\n\n    This file creates a global JSON object containing two methods: stringify\n    and parse.\n\n        JSON.stringify(value, replacer, space)\n            value       any JavaScript value, usually an object or array.\n\n            replacer    an optional parameter that determines how object\n                        values are stringified for objects. It can be a\n                        function or an array of strings.\n\n            space       an optional parameter that specifies the indentation\n                        of nested structures. If it is omitted, the text will\n                        be packed without extra whitespace. If it is a number,\n                        it will specify the number of spaces to indent at each\n                        level. If it is a string (such as '\\t' or '&nbsp;'),\n                        it contains the characters used to indent at each level.\n\n            This method produces a JSON text from a JavaScript value.\n\n            When an object value is found, if the object contains a toJSON\n            method, its toJSON method will be called and the result will be\n            stringified. A toJSON method does not serialize: it returns the\n            value represented by the name/value pair that should be serialized,\n            or undefined if nothing should be serialized. The toJSON method\n            will be passed the key associated with the value, and this will be\n            bound to the value\n\n            For example, this would serialize Dates as ISO strings.\n\n                Date.prototype.toJSON = function (key) {\n                    function f(n) {\n                        // Format integers to have at least two digits.\n                        return n < 10 ? '0' + n : n;\n                    }\n\n                    return this.getUTCFullYear()   + '-' +\n                         f(this.getUTCMonth() + 1) + '-' +\n                         f(this.getUTCDate())      + 'T' +\n                         f(this.getUTCHours())     + ':' +\n                         f(this.getUTCMinutes())   + ':' +\n                         f(this.getUTCSeconds())   + 'Z';\n                };\n\n            You can provide an optional replacer method. It will be passed the\n            key and value of each member, with this bound to the containing\n            object. The value that is returned from your method will be\n            serialized. If your method returns undefined, then the member will\n            be excluded from the serialization.\n\n            If the replacer parameter is an array of strings, then it will be\n            used to select the members to be serialized. It filters the results\n            such that only members with keys listed in the replacer array are\n            stringified.\n\n            Values that do not have JSON representations, such as undefined or\n            functions, will not be serialized. Such values in objects will be\n            dropped; in arrays they will be replaced with null. You can use\n            a replacer function to replace those with JSON values.\n            JSON.stringify(undefined) returns undefined.\n\n            The optional space parameter produces a stringification of the\n            value that is filled with line breaks and indentation to make it\n            easier to read.\n\n            If the space parameter is a non-empty string, then that string will\n            be used for indentation. If the space parameter is a number, then\n            the indentation will be that many spaces.\n\n            Example:\n\n            text = JSON.stringify(['e', {pluribus: 'unum'}]);\n            // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n\n            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\\t');\n            // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n            text = JSON.stringify([new Date()], function (key, value) {\n                return this[key] instanceof Date ?\n                    'Date(' + this[key] + ')' : value;\n            });\n            // text is '[\"Date(---current time---)\"]'\n\n\n        JSON.parse(text, reviver)\n            This method parses a JSON text to produce an object or array.\n            It can throw a SyntaxError exception.\n\n            The optional reviver parameter is a function that can filter and\n            transform the results. It receives each of the keys and values,\n            and its return value is used instead of the original value.\n            If it returns what it received, then the structure is not modified.\n            If it returns undefined then the member is deleted.\n\n            Example:\n\n            // Parse the text. Values that look like ISO date strings will\n            // be converted to Date objects.\n\n            myData = JSON.parse(text, function (key, value) {\n                var a;\n                if (typeof value === 'string') {\n                    a =\n/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n                    if (a) {\n                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n                            +a[5], +a[6]));\n                    }\n                }\n                return value;\n            });\n\n            myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n                var d;\n                if (typeof value === 'string' &&\n                        value.slice(0, 5) === 'Date(' &&\n                        value.slice(-1) === ')') {\n                    d = new Date(value.slice(5, -1));\n                    if (d) {\n                        return d;\n                    }\n                }\n                return value;\n            });\n\n\n    This is a reference implementation. You are free to copy, modify, or\n    redistribute.\n*/\n\n/*jslint evil: true, regexp: true */\n\n/*members \"\", \"\\b\", \"\\t\", \"\\n\", \"\\f\", \"\\r\", \"\\\"\", JSON, \"\\\\\", apply,\n    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nvar JSON = module.exports;\n\n(function () {\n    'use strict';\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return n < 10 ? '0' + n : n;\n    }\n\n    var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        gap,\n        indent,\n        meta = {    // table of character substitutions\n            '\\b': '\\\\b',\n            '\\t': '\\\\t',\n            '\\n': '\\\\n',\n            '\\f': '\\\\f',\n            '\\r': '\\\\r',\n            '\"' : '\\\\\"',\n            '\\\\': '\\\\\\\\'\n        },\n        rep;\n\n\n    function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n        escapable.lastIndex = 0;\n        return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n            var c = meta[a];\n            return typeof c === 'string'\n                ? c\n                : '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n        }) + '\"' : '\"' + string + '\"';\n    }\n\n\n    function str(key, holder) {\n\n// Produce a string from holder[key].\n\n        var i,          // The loop counter.\n            k,          // The member key.\n            v,          // The member value.\n            length,\n            mind = gap,\n            partial,\n            value = holder[key],\n            isBigNumber = value != null && (value instanceof BigNumber || BigNumber.isBigNumber(value));\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (value && typeof value === 'object' &&\n                typeof value.toJSON === 'function') {\n            value = value.toJSON(key);\n        }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n        if (typeof rep === 'function') {\n            value = rep.call(holder, key, value);\n        }\n\n// What happens next depends on the value's type.\n\n        switch (typeof value) {\n        case 'string':\n            if (isBigNumber) {\n                return value;\n            } else {\n                return quote(value);\n            }\n\n        case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n            return isFinite(value) ? String(value) : 'null';\n\n        case 'boolean':\n        case 'null':\n        case 'bigint':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n            return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n        case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n            if (!value) {\n                return 'null';\n            }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n            gap += indent;\n            partial = [];\n\n// Is the value an array?\n\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n                v = partial.length === 0\n                    ? '[]'\n                    : gap\n                    ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n                    : '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    if (typeof rep[i] === 'string') {\n                        k = rep[i];\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n                Object.keys(value).forEach(function(k) {\n                    var v = str(k, value);\n                    if (v) {\n                        partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                    }\n                });\n            }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n            v = partial.length === 0\n                ? '{}'\n                : gap\n                ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n                : '{' + partial.join(',') + '}';\n            gap = mind;\n            return v;\n        }\n    }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON.stringify !== 'function') {\n        JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n            var i;\n            gap = '';\n            indent = '';\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n            if (typeof space === 'number') {\n                for (i = 0; i < space; i += 1) {\n                    indent += ' ';\n                }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === 'string') {\n                indent = space;\n            }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== 'function' &&\n                    (typeof replacer !== 'object' ||\n                    typeof replacer.length !== 'number')) {\n                throw new Error('JSON.stringify');\n            }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n            return str('', {'': value});\n        };\n    }\n}());\n","import type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.Timestamp;\nexport type Serializable = string;\n\n/** Represents a timestamp. */\nclass Timestamp {\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** The internal value for representing the timestamp as milliseconds since Unix epoch. */\n        public readonly value: bigint\n    ) {}\n\n    /**\n     * Get a string representation of the timestamp as the number of milliseconds since Unix epoch.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.value.toString();\n    }\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode bigint} value\n */\nexport function toUnwrappedJSON(value: Type): bigint {\n    return value.value;\n}\n\n/** Represents a timestamp. */\nexport type Type = Timestamp;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is Timestamp {\n    return value instanceof Timestamp;\n}\n\n/**\n * Create a Timestamp from milliseconds since Unix epoch.\n * @param {number} value Milliseconds since Unix epoch.\n * @throws If the value is negative.\n * @returns {Timestamp} The created timestamp.\n */\nexport function fromMillis(value: number | bigint): Timestamp {\n    if (value < 0) {\n        throw new Error('Invalid timestamp: The value cannot be a negative number.');\n    }\n    return new Timestamp(BigInt(value));\n}\n\n/**\n * Create a Timestamp from a Date object.\n * @param {Date} date Date representing the timestamp.\n * @throws If the date if from before January 1, 1970 UTC.\n * @returns {Timestamp} The created timestamp.\n */\nexport function fromDate(date: Date): Timestamp {\n    return fromMillis(date.getTime());\n}\n\n/**\n * Construct a Timestamp minutes in the future from the time of calling this function.\n * @param {number} minutes The number of minutes in the future to set as the expiry time.\n * @returns {Timestamp} The transaction expiry.\n */\nexport function futureMinutes(minutes: number): Timestamp {\n    const timestampMillis = Date.now() + minutes * 60 * 1000;\n    return fromDate(new Date(timestampMillis));\n}\n\n/** Type used when encoding a timestamp in the JSON format used when serializing using a smart contract schema type. */\nexport type SchemaValue = string;\n\n/**\n * Get timestamp in the JSON format used when serializing using a smart contract schema type.\n * @param {Timestamp} timestamp The timestamp.\n * @returns {SchemaValue} The schema value representation.\n */\nexport function toSchemaValue(timestamp: Timestamp): SchemaValue {\n    return toDate(timestamp).toISOString();\n}\n\n/**\n * Convert to timestamp from JSON format used when serializing using a smart contract schema type.\n * @param {SchemaValue} timestamp The timestamp in schema format.\n * @returns {Timestamp} The timestamp\n */\nexport function fromSchemaValue(timestamp: SchemaValue): Timestamp {\n    return fromMillis(Date.parse(timestamp));\n}\n\n/**\n * Get timestamp as a Date.\n * @param {Timestamp} timestamp The timestamp.\n * @returns {Date} Date object.\n */\nexport function toDate(timestamp: Timestamp): Date {\n    const number = Number(timestamp.value);\n    if (isNaN(number)) {\n        throw new Error('Timestamp cannot be represented as a date.');\n    }\n    return new Date(number);\n}\n\n/**\n * Convert a timestamp from its protobuf encoding.\n * @param {Proto.Timestamp} timestamp The timestamp in protobuf.\n * @returns {Timestamp} The timestamp.\n */\nexport function fromProto(timestamp: Proto.Timestamp): Timestamp {\n    return fromMillis(timestamp.value);\n}\n\n/**\n * Convert a timestamp into its protobuf encoding.\n * @param {Timestamp} timestamp The timestamp.\n * @returns {Proto.Timestamp} The protobuf encoding.\n */\nexport function toProto(timestamp: Timestamp): Proto.Timestamp {\n    return {\n        value: timestamp.value,\n    };\n}\n\n/**\n * Constructs a {@linkcode Type} from {@linkcode Serializable}.\n * @param {Serializable} value\n * @returns {Type} The duration.\n */\nexport function fromSerializable(value: Serializable): Type {\n    return fromMillis(BigInt(value));\n}\n\n/**\n * Converts {@linkcode Type} into {@linkcode Serializable}\n * @param {Type} value\n * @returns {Serializable} The serializable value\n */\nexport function toSerializable(value: Type): Serializable {\n    return value.value.toString();\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode toSerializable} function instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: Timestamp): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toSerializable(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the{@linkcode fromSerializable} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromSerializable);\n","import type * as Proto from '../grpc-api/v2/concordium/types.js';\nimport { TypedJson, TypedJsonDiscriminator, makeFromTypedJson } from './util.js';\n\n/**\n * The {@linkcode TypedJsonDiscriminator} discriminator associated with {@linkcode Type} type.\n * @deprecated\n */\nexport const JSON_DISCRIMINATOR = TypedJsonDiscriminator.Energy;\nexport type Serializable = string;\n\n/** Energy measure. Used as part of cost calculations for transactions. */\nclass Energy {\n    protected get serializable(): Serializable {\n        return this.value.toString();\n    }\n\n    /** Having a private field prevents similar structured objects to be considered the same type (similar to nominal typing). */\n    private __type = JSON_DISCRIMINATOR;\n    constructor(\n        /** The internal value for representing the energy. */\n        public readonly value: bigint\n    ) {}\n\n    /**\n     * Get a string representation of the energy.\n     * @returns {string} The string representation.\n     */\n    public toString(): string {\n        return this.value.toString();\n    }\n}\n\n/**\n * Unwraps {@linkcode Type} value\n * @param value value to unwrap.\n * @returns the unwrapped {@linkcode bigint} value\n */\nexport function toUnwrappedJSON(value: Type): bigint {\n    return value.value;\n}\n\n/** Energy measure. Used as part of cost calculations for transactions. */\nexport type Type = Energy;\n\n/**\n * Type predicate for {@linkcode Type}\n *\n * @param value value to check.\n * @returns whether `value` is of type {@linkcode Type}\n */\nexport function instanceOf(value: unknown): value is Energy {\n    return value instanceof Energy;\n}\n\n/**\n * Construct an Energy type.\n * @param {bigint | number} value The measure of energy.\n * @throws If the provided value is a negative number.\n * @returns {Energy}\n */\nexport function create(value: bigint | number): Energy {\n    if (value < 0) {\n        throw new Error('Invalid energy: The value cannot be a negative number.');\n    }\n    return new Energy(BigInt(value));\n}\n\n/**\n * Convert energy from its protobuf encoding.\n * @param {Proto.Energy} energy The energy in protobuf.\n * @returns {Energy} The energy.\n */\nexport function fromProto(energy: Proto.Energy): Energy {\n    return new Energy(energy.value);\n}\n\n/**\n * Convert energy into its protobuf encoding.\n * @param {Energy} energy The energy.\n * @returns {Proto.Energy} The protobuf encoding.\n */\nexport function toProto(energy: Energy): Proto.Energy {\n    return {\n        value: energy.value,\n    };\n}\n\n/**\n * Constructs a {@linkcode Type} from {@linkcode Serializable}.\n * @param {Serializable} value\n * @returns {Type} The duration.\n */\nexport function fromSerializable(value: Serializable): Type {\n    return create(BigInt(value));\n}\n\n/**\n * Converts {@linkcode Type} into {@linkcode Serializable}\n * @param {Type} energy\n * @returns {Serializable} The serializable value\n */\nexport function toSerializable(energy: Type): Serializable {\n    return energy.value.toString();\n}\n\n/**\n * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.\n * @deprecated Use the {@linkcode toSerializable} function instead.\n * @param {Type} value - The account address instance to transform.\n * @returns {TypedJson} The transformed object.\n */\nexport function toTypedJSON(value: Type): TypedJson<Serializable> {\n    return {\n        ['@type']: JSON_DISCRIMINATOR,\n        value: toSerializable(value),\n    };\n}\n\n/**\n * Takes a {@linkcode TypedJson} object and converts it to instance of type {@linkcode Type}.\n * @deprecated Use the {@linkcode fromSerializable} function instead.\n * @param {TypedJson} json - The typed JSON to convert.\n * @throws {TypedJsonParseError} - If unexpected JSON string is passed.\n * @returns {Type} The parsed instance.\n */\nexport const fromTypedJSON = /*#__PURE__*/ makeFromTypedJson(JSON_DISCRIMINATOR, fromSerializable);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","export {\n    Type,\n    fromJSON,\n    instanceOf,\n    fromAccountAddress,\n    JSON,\n    Account,\n    AccountJSON,\n    fromBase58,\n    toBase58,\n} from '../../plt/TokenHolder.js';\n","import * as wasm from '@concordium/rust-bindings/wallet';\n// self-referencing not allowed by eslint resolver\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as ed from '@concordium/web-sdk/shims/ed25519';\nimport { Buffer } from 'buffer/index.js';\n\nimport { Known } from '../grpc/upward.js';\nimport { sha256 } from '../hash.js';\nimport { getCredentialDeploymentSignDigest } from '../serialization.js';\nimport {\n    ArInfo,\n    AttributeKey,\n    AttributesKeys,\n    CredentialDeploymentDetails,\n    CredentialDeploymentInfo,\n    CredentialDeploymentPayload,\n    CredentialPublicKeys,\n    CryptographicParameters,\n    HexString,\n    IdentityInput,\n    IdentityObjectV1,\n    IpInfo,\n    Network,\n    UnsignedCdiWithRandomness,\n    UnsignedCredentialDeploymentInformation,\n    VerifyKey,\n} from '../types.js';\nimport * as AccountAddress from '../types/AccountAddress.js';\nimport * as TransactionExpiry from '../types/TransactionExpiry.js';\nimport { filterRecord, mapRecord } from '../util.js';\nimport { ConcordiumHdWallet } from './HdWallet.js';\n\n/**\n * Generates the unsigned credential information that has to be signed when\n * deploying a credential. The randomness for the commitments that are part\n * of the transaction is also outputted, and it should be stored if the\n * commitments should be opened at a later point, i.e. if an attribute should\n * be revealed at a later point.\n * @param identity the identity to create a credential for\n * @param cryptographicParameters the global cryptographic parameters from the chain\n * @param threshold the signature threshold for the credential, has to be less than number of public keys\n * @param publicKeys the public keys for the account\n * @param credentialIndex the index of the credential to create, has to be in sequence and unused\n * @param revealedAttributes the attributes about the account holder that should be revealed on chain\n * @param address the account address, if the credential is to be deployed to an existing account\n * @returns the unsigned credential deployment information (for signing), and the randomness used\n */\nfunction createUnsignedCredentialInfo(\n    identity: IdentityInput,\n    cryptographicParameters: CryptographicParameters,\n    threshold: number,\n    publicKeys: VerifyKey[],\n    credentialIndex: number,\n    revealedAttributes: AttributeKey[],\n    address?: AccountAddress.Type\n): UnsignedCdiWithRandomness {\n    if (publicKeys.length > 255) {\n        throw new Error('The number of keys is greater than what the transaction supports: ' + publicKeys.length);\n    }\n\n    const identityProvider = identity.identityProvider;\n    const credentialInput: Record<string, unknown> = {\n        ipInfo: identityProvider.ipInfo,\n        arsInfos: identityProvider.arsInfos,\n        global: cryptographicParameters,\n        identityObject: identity.identityObject,\n        randomness: {\n            randomness: identity.randomness,\n        },\n        publicKeys,\n        credentialNumber: credentialIndex,\n        threshold,\n        prfKey: identity.prfKey,\n        idCredSec: identity.idCredSecret,\n        revealedAttributes: revealedAttributes,\n    };\n\n    if (address) {\n        credentialInput.address = address.address;\n    }\n\n    const unsignedCredentialDeploymentInfoString = wasm.generateUnsignedCredential(JSON.stringify(credentialInput));\n    const result: UnsignedCdiWithRandomness = JSON.parse(unsignedCredentialDeploymentInfoString);\n    return result;\n}\n\n/**\n * Create a credential deployment transaction payload used when deploying a new account.\n *\n * @deprecated This function doesn't use allow supplying the randomness. {@link createCredentialPayload} or {@link createCredentialPayloadNoSeed} should be used instead.\n * @param identity the identity to create a credential for\n * @param cryptographicParameters the global cryptographic parameters from the chain\n * @param threshold the signature threshold for the credential, has to be less than number of public keys\n * @param publicKeys the public keys for the account\n * @param credentialIndex the index of the credential to create, has to be in sequence and unused\n * @param revealedAttributes the attributes about the account holder that should be revealed on chain\n * @param expiry the expiry of the transaction\n * @returns the details used in a credential deployment transaction\n */\nexport function createCredentialDeploymentPayload(\n    identity: IdentityInput,\n    cryptographicParameters: CryptographicParameters,\n    threshold: number,\n    publicKeys: VerifyKey[],\n    credentialIndex: number,\n    revealedAttributes: AttributeKey[],\n    expiry: TransactionExpiry.Type\n): CredentialDeploymentPayload {\n    const unsignedCredentialInfo = createUnsignedCredentialInfo(\n        identity,\n        cryptographicParameters,\n        threshold,\n        publicKeys,\n        credentialIndex,\n        revealedAttributes\n    );\n    return {\n        unsignedCdi: unsignedCredentialInfo.unsignedCdi,\n        randomness: unsignedCredentialInfo.randomness,\n        expiry: expiry,\n    };\n}\n\n/**\n * Create an unsigned credential for an existing account. This credential has to be signed by\n * the creator before it can be deployed on the existing account.\n * @param identity the identity to create a credential for\n * @param cryptographicParameters the global cryptographic parameters from the chain\n * @param threshold the signature threshold for the credential, has to be less than number of public keys\n * @param publicKeys the public keys for the credential\n * @param credentialIndex the index of the credential to create, has to be in sequence and unused\n * @param revealedAttributes the attributes about the account holder that should be revealed on chain\n * @param address the account address to associated the credential with\n */\nexport function createUnsignedCredentialForExistingAccount(\n    identity: IdentityInput,\n    cryptographicParameters: CryptographicParameters,\n    threshold: number,\n    publicKeys: VerifyKey[],\n    credentialIndex: number,\n    revealedAttributes: AttributeKey[],\n    address: AccountAddress.Type\n): UnsignedCdiWithRandomness {\n    return createUnsignedCredentialInfo(\n        identity,\n        cryptographicParameters,\n        threshold,\n        publicKeys,\n        credentialIndex,\n        revealedAttributes,\n        address\n    );\n}\n\n/**\n * Combines the unsigned credential information and the signatures to the signed credential\n * deployment information. This is the information that the account owner needs to be able\n * to deploy the credential to their account.\n * @param unsignedCredentialInfo the unsigned credential information\n * @param signatures the signatures on the unsigned credential information\n * @returns signed credential deployment information, used in an update credentials transaction to deploy it\n */\nexport function buildSignedCredentialForExistingAccount(\n    unsignedCredentialInfo: UnsignedCredentialDeploymentInformation,\n    signatures: string[]\n): CredentialDeploymentInfo {\n    const signedCredential: CredentialDeploymentInfo = JSON.parse(\n        wasm.getDeploymentInfo(signatures, JSON.stringify(unsignedCredentialInfo))\n    );\n    return signedCredential;\n}\n\n/**\n * Derives the account address from a credential id. This is the address of the\n * account that will be created by the credential deployment transaction containing\n * this credential id.\n * @param credId the credential id from a credential deployment transaction\n * @returns the account address\n */\nexport function getAccountAddress(credId: string): AccountAddress.Type {\n    const hashedCredId = sha256([Buffer.from(credId, 'hex')]);\n    return AccountAddress.fromBuffer(hashedCredId);\n}\n\ntype CredentialInputCommon = {\n    ipInfo: IpInfo;\n    globalContext: CryptographicParameters;\n    arsInfos: Record<string, ArInfo>;\n    idObject: IdentityObjectV1;\n    revealedAttributes: AttributeKey[];\n    credNumber: number;\n};\n\nexport type CredentialInput = CredentialInputCommon & {\n    seedAsHex: string;\n    net: Network;\n    identityIndex: number;\n};\n\nexport type CredentialInputNoSeed = CredentialInputCommon & {\n    idCredSec: HexString;\n    prfKey: HexString;\n    sigRetrievelRandomness: HexString;\n    credentialPublicKeys: Known<CredentialPublicKeys>;\n    attributeRandomness: Record<AttributesKeys, HexString>;\n};\n\n/**\n * Creates an unsigned credential for a new account, using the version 1 algorithm, which uses a seed to generate keys and commitments.\n */\nexport function createCredentialPayload(\n    input: CredentialInput,\n    expiry: TransactionExpiry.Type\n): CredentialDeploymentPayload {\n    const wallet = ConcordiumHdWallet.fromHex(input.seedAsHex, input.net);\n    const publicKey = wallet\n        .getAccountPublicKey(input.ipInfo.ipIdentity, input.identityIndex, input.credNumber)\n        .toString('hex');\n\n    const verifyKey = {\n        schemeId: 'Ed25519',\n        verifyKey: publicKey,\n    };\n    const credentialPublicKeys = {\n        keys: { 0: verifyKey },\n        threshold: 1,\n    };\n\n    const prfKey = wallet.getPrfKey(input.ipInfo.ipIdentity, input.identityIndex).toString('hex');\n    const idCredSec = wallet.getIdCredSec(input.ipInfo.ipIdentity, input.identityIndex).toString('hex');\n    const randomness = wallet\n        .getSignatureBlindingRandomness(input.ipInfo.ipIdentity, input.identityIndex)\n        .toString('hex');\n\n    const attributeRandomness = mapRecord(\n        filterRecord(AttributesKeys, (k) => isNaN(Number(k))),\n        (x) =>\n            wallet\n                .getAttributeCommitmentRandomness(input.ipInfo.ipIdentity, input.identityIndex, input.credNumber, x)\n                .toString('hex')\n    );\n\n    const noSeedInput: CredentialInputNoSeed = {\n        ipInfo: input.ipInfo,\n        globalContext: input.globalContext,\n        arsInfos: input.arsInfos,\n        idObject: input.idObject,\n        idCredSec,\n        prfKey,\n        sigRetrievelRandomness: randomness,\n        credentialPublicKeys,\n        attributeRandomness,\n        revealedAttributes: input.revealedAttributes,\n        credNumber: input.credNumber,\n    };\n\n    return createCredentialPayloadNoSeed(noSeedInput, expiry);\n}\n\n/**\n * Creates an unsigned credential for a new account, using the version 1 algorithm, but without requiring the seed to be provided directly.\n */\nexport function createCredentialPayloadNoSeed(\n    input: CredentialInputNoSeed,\n    expiry: TransactionExpiry.Type\n): CredentialDeploymentPayload {\n    const { sigRetrievelRandomness, ...other } = input;\n    const internalInput = {\n        ...other,\n        blindingRandomness: input.sigRetrievelRandomness,\n    };\n    const rawRequest = wasm.createUnsignedCredentialV1(JSON.stringify(internalInput));\n    let info: UnsignedCdiWithRandomness;\n    try {\n        info = JSON.parse(rawRequest);\n    } catch (e) {\n        throw new Error(rawRequest);\n    }\n    return {\n        expiry,\n        ...info,\n    };\n}\n\nexport async function signCredentialTransaction(\n    credDeployment: CredentialDeploymentDetails,\n    signingKey: HexString\n): Promise<HexString> {\n    const digest = getCredentialDeploymentSignDigest(credDeployment);\n    return Buffer.from(await ed.signAsync(digest, signingKey)).toString('hex');\n}\n","'use strict'\n\nvar { sha256 } = require('@noble/hashes/sha256')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  return sha256(sha256(buffer))\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wordlist = void 0;\nexports.wordlist = `abandon\nability\nable\nabout\nabove\nabsent\nabsorb\nabstract\nabsurd\nabuse\naccess\naccident\naccount\naccuse\nachieve\nacid\nacoustic\nacquire\nacross\nact\naction\nactor\nactress\nactual\nadapt\nadd\naddict\naddress\nadjust\nadmit\nadult\nadvance\nadvice\naerobic\naffair\nafford\nafraid\nagain\nage\nagent\nagree\nahead\naim\nair\nairport\naisle\nalarm\nalbum\nalcohol\nalert\nalien\nall\nalley\nallow\nalmost\nalone\nalpha\nalready\nalso\nalter\nalways\namateur\namazing\namong\namount\namused\nanalyst\nanchor\nancient\nanger\nangle\nangry\nanimal\nankle\nannounce\nannual\nanother\nanswer\nantenna\nantique\nanxiety\nany\napart\napology\nappear\napple\napprove\napril\narch\narctic\narea\narena\nargue\narm\narmed\narmor\narmy\naround\narrange\narrest\narrive\narrow\nart\nartefact\nartist\nartwork\nask\naspect\nassault\nasset\nassist\nassume\nasthma\nathlete\natom\nattack\nattend\nattitude\nattract\nauction\naudit\naugust\naunt\nauthor\nauto\nautumn\naverage\navocado\navoid\nawake\naware\naway\nawesome\nawful\nawkward\naxis\nbaby\nbachelor\nbacon\nbadge\nbag\nbalance\nbalcony\nball\nbamboo\nbanana\nbanner\nbar\nbarely\nbargain\nbarrel\nbase\nbasic\nbasket\nbattle\nbeach\nbean\nbeauty\nbecause\nbecome\nbeef\nbefore\nbegin\nbehave\nbehind\nbelieve\nbelow\nbelt\nbench\nbenefit\nbest\nbetray\nbetter\nbetween\nbeyond\nbicycle\nbid\nbike\nbind\nbiology\nbird\nbirth\nbitter\nblack\nblade\nblame\nblanket\nblast\nbleak\nbless\nblind\nblood\nblossom\nblouse\nblue\nblur\nblush\nboard\nboat\nbody\nboil\nbomb\nbone\nbonus\nbook\nboost\nborder\nboring\nborrow\nboss\nbottom\nbounce\nbox\nboy\nbracket\nbrain\nbrand\nbrass\nbrave\nbread\nbreeze\nbrick\nbridge\nbrief\nbright\nbring\nbrisk\nbroccoli\nbroken\nbronze\nbroom\nbrother\nbrown\nbrush\nbubble\nbuddy\nbudget\nbuffalo\nbuild\nbulb\nbulk\nbullet\nbundle\nbunker\nburden\nburger\nburst\nbus\nbusiness\nbusy\nbutter\nbuyer\nbuzz\ncabbage\ncabin\ncable\ncactus\ncage\ncake\ncall\ncalm\ncamera\ncamp\ncan\ncanal\ncancel\ncandy\ncannon\ncanoe\ncanvas\ncanyon\ncapable\ncapital\ncaptain\ncar\ncarbon\ncard\ncargo\ncarpet\ncarry\ncart\ncase\ncash\ncasino\ncastle\ncasual\ncat\ncatalog\ncatch\ncategory\ncattle\ncaught\ncause\ncaution\ncave\nceiling\ncelery\ncement\ncensus\ncentury\ncereal\ncertain\nchair\nchalk\nchampion\nchange\nchaos\nchapter\ncharge\nchase\nchat\ncheap\ncheck\ncheese\nchef\ncherry\nchest\nchicken\nchief\nchild\nchimney\nchoice\nchoose\nchronic\nchuckle\nchunk\nchurn\ncigar\ncinnamon\ncircle\ncitizen\ncity\ncivil\nclaim\nclap\nclarify\nclaw\nclay\nclean\nclerk\nclever\nclick\nclient\ncliff\nclimb\nclinic\nclip\nclock\nclog\nclose\ncloth\ncloud\nclown\nclub\nclump\ncluster\nclutch\ncoach\ncoast\ncoconut\ncode\ncoffee\ncoil\ncoin\ncollect\ncolor\ncolumn\ncombine\ncome\ncomfort\ncomic\ncommon\ncompany\nconcert\nconduct\nconfirm\ncongress\nconnect\nconsider\ncontrol\nconvince\ncook\ncool\ncopper\ncopy\ncoral\ncore\ncorn\ncorrect\ncost\ncotton\ncouch\ncountry\ncouple\ncourse\ncousin\ncover\ncoyote\ncrack\ncradle\ncraft\ncram\ncrane\ncrash\ncrater\ncrawl\ncrazy\ncream\ncredit\ncreek\ncrew\ncricket\ncrime\ncrisp\ncritic\ncrop\ncross\ncrouch\ncrowd\ncrucial\ncruel\ncruise\ncrumble\ncrunch\ncrush\ncry\ncrystal\ncube\nculture\ncup\ncupboard\ncurious\ncurrent\ncurtain\ncurve\ncushion\ncustom\ncute\ncycle\ndad\ndamage\ndamp\ndance\ndanger\ndaring\ndash\ndaughter\ndawn\nday\ndeal\ndebate\ndebris\ndecade\ndecember\ndecide\ndecline\ndecorate\ndecrease\ndeer\ndefense\ndefine\ndefy\ndegree\ndelay\ndeliver\ndemand\ndemise\ndenial\ndentist\ndeny\ndepart\ndepend\ndeposit\ndepth\ndeputy\nderive\ndescribe\ndesert\ndesign\ndesk\ndespair\ndestroy\ndetail\ndetect\ndevelop\ndevice\ndevote\ndiagram\ndial\ndiamond\ndiary\ndice\ndiesel\ndiet\ndiffer\ndigital\ndignity\ndilemma\ndinner\ndinosaur\ndirect\ndirt\ndisagree\ndiscover\ndisease\ndish\ndismiss\ndisorder\ndisplay\ndistance\ndivert\ndivide\ndivorce\ndizzy\ndoctor\ndocument\ndog\ndoll\ndolphin\ndomain\ndonate\ndonkey\ndonor\ndoor\ndose\ndouble\ndove\ndraft\ndragon\ndrama\ndrastic\ndraw\ndream\ndress\ndrift\ndrill\ndrink\ndrip\ndrive\ndrop\ndrum\ndry\nduck\ndumb\ndune\nduring\ndust\ndutch\nduty\ndwarf\ndynamic\neager\neagle\nearly\nearn\nearth\neasily\neast\neasy\necho\necology\neconomy\nedge\nedit\neducate\neffort\negg\neight\neither\nelbow\nelder\nelectric\nelegant\nelement\nelephant\nelevator\nelite\nelse\nembark\nembody\nembrace\nemerge\nemotion\nemploy\nempower\nempty\nenable\nenact\nend\nendless\nendorse\nenemy\nenergy\nenforce\nengage\nengine\nenhance\nenjoy\nenlist\nenough\nenrich\nenroll\nensure\nenter\nentire\nentry\nenvelope\nepisode\nequal\nequip\nera\nerase\nerode\nerosion\nerror\nerupt\nescape\nessay\nessence\nestate\neternal\nethics\nevidence\nevil\nevoke\nevolve\nexact\nexample\nexcess\nexchange\nexcite\nexclude\nexcuse\nexecute\nexercise\nexhaust\nexhibit\nexile\nexist\nexit\nexotic\nexpand\nexpect\nexpire\nexplain\nexpose\nexpress\nextend\nextra\neye\neyebrow\nfabric\nface\nfaculty\nfade\nfaint\nfaith\nfall\nfalse\nfame\nfamily\nfamous\nfan\nfancy\nfantasy\nfarm\nfashion\nfat\nfatal\nfather\nfatigue\nfault\nfavorite\nfeature\nfebruary\nfederal\nfee\nfeed\nfeel\nfemale\nfence\nfestival\nfetch\nfever\nfew\nfiber\nfiction\nfield\nfigure\nfile\nfilm\nfilter\nfinal\nfind\nfine\nfinger\nfinish\nfire\nfirm\nfirst\nfiscal\nfish\nfit\nfitness\nfix\nflag\nflame\nflash\nflat\nflavor\nflee\nflight\nflip\nfloat\nflock\nfloor\nflower\nfluid\nflush\nfly\nfoam\nfocus\nfog\nfoil\nfold\nfollow\nfood\nfoot\nforce\nforest\nforget\nfork\nfortune\nforum\nforward\nfossil\nfoster\nfound\nfox\nfragile\nframe\nfrequent\nfresh\nfriend\nfringe\nfrog\nfront\nfrost\nfrown\nfrozen\nfruit\nfuel\nfun\nfunny\nfurnace\nfury\nfuture\ngadget\ngain\ngalaxy\ngallery\ngame\ngap\ngarage\ngarbage\ngarden\ngarlic\ngarment\ngas\ngasp\ngate\ngather\ngauge\ngaze\ngeneral\ngenius\ngenre\ngentle\ngenuine\ngesture\nghost\ngiant\ngift\ngiggle\nginger\ngiraffe\ngirl\ngive\nglad\nglance\nglare\nglass\nglide\nglimpse\nglobe\ngloom\nglory\nglove\nglow\nglue\ngoat\ngoddess\ngold\ngood\ngoose\ngorilla\ngospel\ngossip\ngovern\ngown\ngrab\ngrace\ngrain\ngrant\ngrape\ngrass\ngravity\ngreat\ngreen\ngrid\ngrief\ngrit\ngrocery\ngroup\ngrow\ngrunt\nguard\nguess\nguide\nguilt\nguitar\ngun\ngym\nhabit\nhair\nhalf\nhammer\nhamster\nhand\nhappy\nharbor\nhard\nharsh\nharvest\nhat\nhave\nhawk\nhazard\nhead\nhealth\nheart\nheavy\nhedgehog\nheight\nhello\nhelmet\nhelp\nhen\nhero\nhidden\nhigh\nhill\nhint\nhip\nhire\nhistory\nhobby\nhockey\nhold\nhole\nholiday\nhollow\nhome\nhoney\nhood\nhope\nhorn\nhorror\nhorse\nhospital\nhost\nhotel\nhour\nhover\nhub\nhuge\nhuman\nhumble\nhumor\nhundred\nhungry\nhunt\nhurdle\nhurry\nhurt\nhusband\nhybrid\nice\nicon\nidea\nidentify\nidle\nignore\nill\nillegal\nillness\nimage\nimitate\nimmense\nimmune\nimpact\nimpose\nimprove\nimpulse\ninch\ninclude\nincome\nincrease\nindex\nindicate\nindoor\nindustry\ninfant\ninflict\ninform\ninhale\ninherit\ninitial\ninject\ninjury\ninmate\ninner\ninnocent\ninput\ninquiry\ninsane\ninsect\ninside\ninspire\ninstall\nintact\ninterest\ninto\ninvest\ninvite\ninvolve\niron\nisland\nisolate\nissue\nitem\nivory\njacket\njaguar\njar\njazz\njealous\njeans\njelly\njewel\njob\njoin\njoke\njourney\njoy\njudge\njuice\njump\njungle\njunior\njunk\njust\nkangaroo\nkeen\nkeep\nketchup\nkey\nkick\nkid\nkidney\nkind\nkingdom\nkiss\nkit\nkitchen\nkite\nkitten\nkiwi\nknee\nknife\nknock\nknow\nlab\nlabel\nlabor\nladder\nlady\nlake\nlamp\nlanguage\nlaptop\nlarge\nlater\nlatin\nlaugh\nlaundry\nlava\nlaw\nlawn\nlawsuit\nlayer\nlazy\nleader\nleaf\nlearn\nleave\nlecture\nleft\nleg\nlegal\nlegend\nleisure\nlemon\nlend\nlength\nlens\nleopard\nlesson\nletter\nlevel\nliar\nliberty\nlibrary\nlicense\nlife\nlift\nlight\nlike\nlimb\nlimit\nlink\nlion\nliquid\nlist\nlittle\nlive\nlizard\nload\nloan\nlobster\nlocal\nlock\nlogic\nlonely\nlong\nloop\nlottery\nloud\nlounge\nlove\nloyal\nlucky\nluggage\nlumber\nlunar\nlunch\nluxury\nlyrics\nmachine\nmad\nmagic\nmagnet\nmaid\nmail\nmain\nmajor\nmake\nmammal\nman\nmanage\nmandate\nmango\nmansion\nmanual\nmaple\nmarble\nmarch\nmargin\nmarine\nmarket\nmarriage\nmask\nmass\nmaster\nmatch\nmaterial\nmath\nmatrix\nmatter\nmaximum\nmaze\nmeadow\nmean\nmeasure\nmeat\nmechanic\nmedal\nmedia\nmelody\nmelt\nmember\nmemory\nmention\nmenu\nmercy\nmerge\nmerit\nmerry\nmesh\nmessage\nmetal\nmethod\nmiddle\nmidnight\nmilk\nmillion\nmimic\nmind\nminimum\nminor\nminute\nmiracle\nmirror\nmisery\nmiss\nmistake\nmix\nmixed\nmixture\nmobile\nmodel\nmodify\nmom\nmoment\nmonitor\nmonkey\nmonster\nmonth\nmoon\nmoral\nmore\nmorning\nmosquito\nmother\nmotion\nmotor\nmountain\nmouse\nmove\nmovie\nmuch\nmuffin\nmule\nmultiply\nmuscle\nmuseum\nmushroom\nmusic\nmust\nmutual\nmyself\nmystery\nmyth\nnaive\nname\nnapkin\nnarrow\nnasty\nnation\nnature\nnear\nneck\nneed\nnegative\nneglect\nneither\nnephew\nnerve\nnest\nnet\nnetwork\nneutral\nnever\nnews\nnext\nnice\nnight\nnoble\nnoise\nnominee\nnoodle\nnormal\nnorth\nnose\nnotable\nnote\nnothing\nnotice\nnovel\nnow\nnuclear\nnumber\nnurse\nnut\noak\nobey\nobject\noblige\nobscure\nobserve\nobtain\nobvious\noccur\nocean\noctober\nodor\noff\noffer\noffice\noften\noil\nokay\nold\nolive\nolympic\nomit\nonce\none\nonion\nonline\nonly\nopen\nopera\nopinion\noppose\noption\norange\norbit\norchard\norder\nordinary\norgan\norient\noriginal\norphan\nostrich\nother\noutdoor\nouter\noutput\noutside\noval\noven\nover\nown\nowner\noxygen\noyster\nozone\npact\npaddle\npage\npair\npalace\npalm\npanda\npanel\npanic\npanther\npaper\nparade\nparent\npark\nparrot\nparty\npass\npatch\npath\npatient\npatrol\npattern\npause\npave\npayment\npeace\npeanut\npear\npeasant\npelican\npen\npenalty\npencil\npeople\npepper\nperfect\npermit\nperson\npet\nphone\nphoto\nphrase\nphysical\npiano\npicnic\npicture\npiece\npig\npigeon\npill\npilot\npink\npioneer\npipe\npistol\npitch\npizza\nplace\nplanet\nplastic\nplate\nplay\nplease\npledge\npluck\nplug\nplunge\npoem\npoet\npoint\npolar\npole\npolice\npond\npony\npool\npopular\nportion\nposition\npossible\npost\npotato\npottery\npoverty\npowder\npower\npractice\npraise\npredict\nprefer\nprepare\npresent\npretty\nprevent\nprice\npride\nprimary\nprint\npriority\nprison\nprivate\nprize\nproblem\nprocess\nproduce\nprofit\nprogram\nproject\npromote\nproof\nproperty\nprosper\nprotect\nproud\nprovide\npublic\npudding\npull\npulp\npulse\npumpkin\npunch\npupil\npuppy\npurchase\npurity\npurpose\npurse\npush\nput\npuzzle\npyramid\nquality\nquantum\nquarter\nquestion\nquick\nquit\nquiz\nquote\nrabbit\nraccoon\nrace\nrack\nradar\nradio\nrail\nrain\nraise\nrally\nramp\nranch\nrandom\nrange\nrapid\nrare\nrate\nrather\nraven\nraw\nrazor\nready\nreal\nreason\nrebel\nrebuild\nrecall\nreceive\nrecipe\nrecord\nrecycle\nreduce\nreflect\nreform\nrefuse\nregion\nregret\nregular\nreject\nrelax\nrelease\nrelief\nrely\nremain\nremember\nremind\nremove\nrender\nrenew\nrent\nreopen\nrepair\nrepeat\nreplace\nreport\nrequire\nrescue\nresemble\nresist\nresource\nresponse\nresult\nretire\nretreat\nreturn\nreunion\nreveal\nreview\nreward\nrhythm\nrib\nribbon\nrice\nrich\nride\nridge\nrifle\nright\nrigid\nring\nriot\nripple\nrisk\nritual\nrival\nriver\nroad\nroast\nrobot\nrobust\nrocket\nromance\nroof\nrookie\nroom\nrose\nrotate\nrough\nround\nroute\nroyal\nrubber\nrude\nrug\nrule\nrun\nrunway\nrural\nsad\nsaddle\nsadness\nsafe\nsail\nsalad\nsalmon\nsalon\nsalt\nsalute\nsame\nsample\nsand\nsatisfy\nsatoshi\nsauce\nsausage\nsave\nsay\nscale\nscan\nscare\nscatter\nscene\nscheme\nschool\nscience\nscissors\nscorpion\nscout\nscrap\nscreen\nscript\nscrub\nsea\nsearch\nseason\nseat\nsecond\nsecret\nsection\nsecurity\nseed\nseek\nsegment\nselect\nsell\nseminar\nsenior\nsense\nsentence\nseries\nservice\nsession\nsettle\nsetup\nseven\nshadow\nshaft\nshallow\nshare\nshed\nshell\nsheriff\nshield\nshift\nshine\nship\nshiver\nshock\nshoe\nshoot\nshop\nshort\nshoulder\nshove\nshrimp\nshrug\nshuffle\nshy\nsibling\nsick\nside\nsiege\nsight\nsign\nsilent\nsilk\nsilly\nsilver\nsimilar\nsimple\nsince\nsing\nsiren\nsister\nsituate\nsix\nsize\nskate\nsketch\nski\nskill\nskin\nskirt\nskull\nslab\nslam\nsleep\nslender\nslice\nslide\nslight\nslim\nslogan\nslot\nslow\nslush\nsmall\nsmart\nsmile\nsmoke\nsmooth\nsnack\nsnake\nsnap\nsniff\nsnow\nsoap\nsoccer\nsocial\nsock\nsoda\nsoft\nsolar\nsoldier\nsolid\nsolution\nsolve\nsomeone\nsong\nsoon\nsorry\nsort\nsoul\nsound\nsoup\nsource\nsouth\nspace\nspare\nspatial\nspawn\nspeak\nspecial\nspeed\nspell\nspend\nsphere\nspice\nspider\nspike\nspin\nspirit\nsplit\nspoil\nsponsor\nspoon\nsport\nspot\nspray\nspread\nspring\nspy\nsquare\nsqueeze\nsquirrel\nstable\nstadium\nstaff\nstage\nstairs\nstamp\nstand\nstart\nstate\nstay\nsteak\nsteel\nstem\nstep\nstereo\nstick\nstill\nsting\nstock\nstomach\nstone\nstool\nstory\nstove\nstrategy\nstreet\nstrike\nstrong\nstruggle\nstudent\nstuff\nstumble\nstyle\nsubject\nsubmit\nsubway\nsuccess\nsuch\nsudden\nsuffer\nsugar\nsuggest\nsuit\nsummer\nsun\nsunny\nsunset\nsuper\nsupply\nsupreme\nsure\nsurface\nsurge\nsurprise\nsurround\nsurvey\nsuspect\nsustain\nswallow\nswamp\nswap\nswarm\nswear\nsweet\nswift\nswim\nswing\nswitch\nsword\nsymbol\nsymptom\nsyrup\nsystem\ntable\ntackle\ntag\ntail\ntalent\ntalk\ntank\ntape\ntarget\ntask\ntaste\ntattoo\ntaxi\nteach\nteam\ntell\nten\ntenant\ntennis\ntent\nterm\ntest\ntext\nthank\nthat\ntheme\nthen\ntheory\nthere\nthey\nthing\nthis\nthought\nthree\nthrive\nthrow\nthumb\nthunder\nticket\ntide\ntiger\ntilt\ntimber\ntime\ntiny\ntip\ntired\ntissue\ntitle\ntoast\ntobacco\ntoday\ntoddler\ntoe\ntogether\ntoilet\ntoken\ntomato\ntomorrow\ntone\ntongue\ntonight\ntool\ntooth\ntop\ntopic\ntopple\ntorch\ntornado\ntortoise\ntoss\ntotal\ntourist\ntoward\ntower\ntown\ntoy\ntrack\ntrade\ntraffic\ntragic\ntrain\ntransfer\ntrap\ntrash\ntravel\ntray\ntreat\ntree\ntrend\ntrial\ntribe\ntrick\ntrigger\ntrim\ntrip\ntrophy\ntrouble\ntruck\ntrue\ntruly\ntrumpet\ntrust\ntruth\ntry\ntube\ntuition\ntumble\ntuna\ntunnel\nturkey\nturn\nturtle\ntwelve\ntwenty\ntwice\ntwin\ntwist\ntwo\ntype\ntypical\nugly\numbrella\nunable\nunaware\nuncle\nuncover\nunder\nundo\nunfair\nunfold\nunhappy\nuniform\nunique\nunit\nuniverse\nunknown\nunlock\nuntil\nunusual\nunveil\nupdate\nupgrade\nuphold\nupon\nupper\nupset\nurban\nurge\nusage\nuse\nused\nuseful\nuseless\nusual\nutility\nvacant\nvacuum\nvague\nvalid\nvalley\nvalve\nvan\nvanish\nvapor\nvarious\nvast\nvault\nvehicle\nvelvet\nvendor\nventure\nvenue\nverb\nverify\nversion\nvery\nvessel\nveteran\nviable\nvibrant\nvicious\nvictory\nvideo\nview\nvillage\nvintage\nviolin\nvirtual\nvirus\nvisa\nvisit\nvisual\nvital\nvivid\nvocal\nvoice\nvoid\nvolcano\nvolume\nvote\nvoyage\nwage\nwagon\nwait\nwalk\nwall\nwalnut\nwant\nwarfare\nwarm\nwarrior\nwash\nwasp\nwaste\nwater\nwave\nway\nwealth\nweapon\nwear\nweasel\nweather\nweb\nwedding\nweekend\nweird\nwelcome\nwest\nwet\nwhale\nwhat\nwheat\nwheel\nwhen\nwhere\nwhip\nwhisper\nwide\nwidth\nwife\nwild\nwill\nwin\nwindow\nwine\nwing\nwink\nwinner\nwinter\nwire\nwisdom\nwise\nwish\nwitness\nwolf\nwoman\nwonder\nwood\nwool\nword\nwork\nworld\nworry\nworth\nwrap\nwreck\nwrestle\nwrist\nwrite\nwrong\nyard\nyear\nyellow\nyou\nyoung\nyouth\nzebra\nzero\nzone\nzoo`.split('\\n');\n","const f={POS_INT:0,NEG_INT:1,BYTE_STRING:2,UTF8_STRING:3,ARRAY:4,MAP:5,TAG:6,SIMPLE_FLOAT:7},I={DATE_STRING:0,DATE_EPOCH:1,POS_BIGINT:2,NEG_BIGINT:3,DECIMAL_FRAC:4,BIGFLOAT:5,BASE64URL_EXPECTED:21,BASE64_EXPECTED:22,BASE16_EXPECTED:23,CBOR:24,URI:32,BASE64URL:33,BASE64:34,MIME:36,SET:258,JSON:262,REGEXP:21066,SELF_DESCRIBED:55799,INVALID_16:65535,INVALID_32:4294967295,INVALID_64:0xffffffffffffffffn},o={ZERO:0,ONE:24,TWO:25,FOUR:26,EIGHT:27,INDEFINITE:31},T={FALSE:20,TRUE:21,NULL:22,UNDEFINED:23};class N{static BREAK=Symbol.for(\"github.com/hildjj/cbor2/break\");static ENCODED=Symbol.for(\"github.com/hildjj/cbor2/cbor-encoded\");static LENGTH=Symbol.for(\"github.com/hildjj/cbor2/length\")}const S={MIN:-(2n**63n),MAX:2n**64n-1n};export{S as DCBOR_INT,f as MT,o as NUMBYTES,T as SIMPLE,N as SYMS,I as TAG};\n","export {\n    Type,\n    fromBuffer,\n    fromHexString,\n    toHexString,\n    toBuffer,\n    parseWithSchemaType,\n    parseWithSchemaTypeBase64,\n    Serializable,\n    toUnwrappedJSON,\n    fromJSON,\n} from '../../types/ContractEvent.js';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(8344);\n"],"names":["Token","Cbor","CborAccountAddress","CborContractAddress","CborMemo","TokenAmount","TokenHolder","TokenId","TokenMetadataUrl","TokenModuleReference","f","c","d","u","a","n","l","s","t","r","Math","min","length","o","e","isDelegatorAccount","ai","type","AccountInfoType","Delegator","isBakerAccount","Baker","isReduceStakePendingChange","spc","change","StakePendingChangeType","ReduceStake","isRemovalPendingChange","RemoveStake","Type","fromJSON","instanceOf","fromHexString","fromBuffer","toHexString","equals","Serializable","JSON_DISCRIMINATOR","fromTypedJSON","toUnwrappedJSON","toTypedJSON","Object","defineProperty","exports","value","country","alpha2","alpha3","numeric","getPastDate","yearsAgo","daysOffset","date","Date","setDate","getDate","month","getMonth","toString","padStart","day","getFullYear","getAttributeString","key","AttributesKeys","Error","isISO8601","test","Number","substring","isISO3166_1Alpha2","code","Boolean","whereAlpha2","verifySetStatement","statement","typeName","undefined","set","attributeTag","AttributeKeyString","countryOfResidence","nationality","every","idDocIssuer","x","idDocType","v","values","IdDocType","includes","legalCountry","verifyAtomicStatement","existingStatements","some","StatementTypes","AttributeInRange","lower","upper","dob","idDocIssuedAt","idDocExpiresAt","verifyRangeStatement","AttributeInSet","AttributeNotInSet","RevealAttribute","statements","checkedStatements","push","constructor","checkConstraints","this","getStatement","check","addRange","attribute","addMembership","addNonMembership","revealAttribute","addMinimumAge","age","MIN_DATE","addMaximumAge","MAX_DATE","addAgeInRange","minAge","maxAge","documentExpiryNoEarlierThan","earliestDate","addEUResidency","EU_MEMBERS","addEUNationality","TransactionKindString","getReceiverAccount","summary","TransactionSummaryType","AccountTransaction","transactionType","Transfer","TransferWithMemo","TransferWithScheduleAndMemo","transfer","to","TransferWithSchedule","event","addUnique","list","items","eq","next","flattened","Array","isArray","i","item","filter","isKnown","li","tokenEventsAffectedAccounts","events","sender","reduce","addresses","tag","TransactionEventTag","TokenTransfer","address","from","isDefined","AccountAddress","TokenBurn","TokenMint","target","TokenModuleEvent","AccountTransactionType","isInitContractSummary","InitContract","isUpdateContractSummary","Update","isTransferLikeSummary","isRejectTransaction","Failed","isSuccessTransaction","rejectReason","contractInitialized","Updated","ContractAddress","EncryptedAmountTransfer","EncryptedAmountTransferWithMemo","added","account","removed","TransferToEncrypted","TransferToPublic","Transferred","TokenUpdate","receiver","accTransactionsAffectedAccounts","TokenCreation","map","Interrupted","UnknownFieldHandler","WireType","mergeBinaryOptions","b","assign","symbol","Symbol","for","onRead","message","fieldNo","wireType","data","is","no","onWrite","writer","raw","all","uf","last","slice","assert","inherits","isSurrogatePair","msg","charCodeAt","htonl","w","zero2","word","zero8","toArray","enc","res","replace","parseInt","p","toHex","toHex32","endian","join32","start","end","len","k","split32","m","rotr32","rotl32","sum32","sum32_3","sum32_4","sum32_5","sum64","buf","pos","ah","al","bh","lo","hi","sum64_hi","bl","sum64_lo","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","num","rotr64_lo","shr64_hi","shr64_lo","wasm","imports","module","TextDecoder","TextEncoder","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","getStringFromWasm0","ptr","subarray","heap","fill","heap_next","addHeapObject","obj","idx","getObject","WASM_VECTOR_LEN","cachedTextEncoder","encodeString","encodeInto","arg","view","encode","read","written","passStringToWasm0","malloc","realloc","mem","offset","isLikeNone","cachedDataViewMemory0","getDataViewMemory0","detached","DataView","takeObject","ret","dropObject","debugString","val","description","name","debug","builtInMatches","exec","call","className","JSON","stringify","_","stack","generateUnsignedCredential","input","deferred3_0","deferred3_1","retptr","__wbindgen_add_to_stack_pointer","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","r0","getInt32","r1","r2","r3","ptr2","len2","__wbindgen_free","stack_pointer","addBorrowedObject","handleError","args","apply","__wbindgen_exn_store","getDeploymentDetails","signatures","unsigned_info","expiry","getDeploymentInfo","createIdRequestV1","createIdentityRecoveryRequest","createCredentialV1","raw_input","createUnsignedCredentialV1","createIdProof","getAccountSigningKey","seed_as_hex","raw_net","identity_provider_index","identity_index","credential_counter","deferred4_0","deferred4_1","ptr1","len1","ptr3","len3","getAccountPublicKey","deserializeCredentialDeployment","serialized","getCredentialId","raw_on_chain_commitment_key","deferred5_0","deferred5_1","ptr4","len4","getPrfKey","getIdCredSec","getSignatureBlindingRandomness","getAttributeCommitmentRandomness","getVerifiableCredentialSigningKey","issuer_index","issuer_subindex","verifiable_credential_index","getVerifiableCredentialPublicKey","getVerifiableCredentialBackupEncryptionKey","serializeCredentialDeploymentPayload","v2","generateBakerKeys","createWeb3IdProof","verifyWeb3IdCredentialSignature","verifyPresentation","from_code_iso_3166_3","alpha4","CountryCode3","__wrap","from_alpha2","CountryCode","from_alpha3","from_numeric","from_numeric_str","from_code_iso_3166_2","Subdivision","CountryCodeFinalization","FinalizationRegistry","register","unregister","__wbg_countrycode_free","create","prototype","__wbg_ptr","__destroy_into_raw","free","deferred1_0","deferred1_1","countrycode_name","countrycode_alpha2","countrycode_alpha3","countrycode_numeric","numeric_str","countrycode_numeric_str","subdivisions","countrycode_subdivisions","CountryCode3Finalization","__wbg_countrycode3_free","countrycode3_code","countrycode3_name","former","countrycode3_former","new_countries","countrycode3_new_countries","desc","countrycode3_desc","SubdivisionFinalization","__wbg_subdivision_free","subdivision_name","subdivision_code","subdivision_type","subdivision_subdivision_type","country_name","subdivision_country_name","country_code","subdivision_country_code","region_code","subdivision_region_code","__wbindgen_error_new","arg0","arg1","__wbindgen_string_get","setInt32","__wbindgen_object_drop_ref","__wbindgen_object_clone_ref","__wbindgen_is_object","__wbindgen_jsval_loose_eq","__wbindgen_boolean_get","__wbindgen_number_get","setFloat64","__wbindgen_string_new","__wbg_subdivision_new","__wbg_countrycode_new","__wbg_crypto_566d7465cdbb6b7a","crypto","__wbg_process_dc09a8c7d59982f6","process","__wbg_versions_d98c6400c6ca2bd8","versions","__wbg_node_caaf83d002149bd5","node","__wbindgen_is_string","__wbg_require_94a9da52636aacbf","arguments","__wbindgen_is_function","__wbg_msCrypto_0b84745e9245cdf6","msCrypto","__wbg_randomFillSync_290977693942bf03","randomFillSync","__wbg_getRandomValues_260cc23a41afad9a","getRandomValues","__wbg_get_44be0491f933a435","__wbg_length_fff51ee6522a1a18","__wbg_new_898a68150f225f2e","__wbg_newnoargs_581967eacc0e2604","Function","__wbg_next_526fc47e980da008","__wbg_next_ddb3312ca1c4e32a","__wbg_done_5c1f01fb660d73b5","done","__wbg_value_1695675138684bd5","__wbg_iterator_97f0c81209c6c35a","iterator","__wbg_get_97b561fb56f034b5","Reflect","get","__wbg_call_cb65541d95d71282","__wbg_self_1ff1d729e9aae938","self","__wbg_window_5f4faef6c12b79ec","window","__wbg_globalThis_1d39714405582d3c","globalThis","__wbg_global_651f05c6a0944d1c","global","__wbindgen_is_undefined","__wbg_isArray_4c24b343cb13cfb1","__wbg_push_ca1c26067ef907ac","__wbg_instanceof_ArrayBuffer_39ac22089b74fddb","result","ArrayBuffer","__wbg_call_01734de55d61e11d","arg2","__wbg_getTime_5e2054f832d82ec9","getTime","__wbg_new0_c0be7df4b6bd481f","__wbg_buffer_085ec1f694018c4f","__wbg_newwithbyteoffsetandlength_6da8e527659b86aa","__wbg_new_8125e318e6245eed","__wbg_set_5cf90238115182c3","__wbg_length_72e2208bbc0efc61","__wbg_instanceof_Uint8Array_d8d9cb2b8e8ac1d4","__wbg_newwithlength_e5d69174d6984cd7","__wbg_subarray_13db269f57aa838d","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_memory","path","join","__dirname","bytes","readFileSync","wasmModule","WebAssembly","Module","wasmInstance","Instance","__wasm","utils","common","shaCommon","ch32","maj32","s0_256","s1_256","g0_256","g1_256","BlockHash","sha256_K","SHA256","h","W","blockSize","outSize","hmacStrength","padLength","_update","g","T1","T2","_digest","RpcOutputStreamController","_lis","nxt","err","cmp","_closed","onNext","callback","addLis","onMessage","onError","onComplete","indexOf","splice","clearLis","closed","notifyNext","error","complete","notifyMessage","notifyError","notifyComplete","pushIt","forEach","asyncIterator","_itState","q","state","first","shift","Promise","resolve","reject","promise","PENDING","y","z","p32","ft_1","UpdateType","KeyUpdateEntryStatus","HigherLevelKeyUpdateType","AuthorizationKeysUpdateType","static","Map","contents","noChildren","registerDecoder","comment","clearDecoder","delete","getDecoder","getAllDecoders","toCBOR","TypedJsonDiscriminator","ContractName","__type","toJSON","fromString","isAsciiAlphaNumericPunctuation","fromStringUnchecked","contractName","json","initName","contract","left","right","makeFromTypedJson","tokenAddressFromBase58","tokenAddressToBase58","deserializeCIS2Event","deserializeCIS2EventsFromInvokationResult","deserializeCIS2EventsFromSummary","parseCIS2RejectionError","Err","ErrorType","base64","ieee754","customInspectSymbol","Buffer","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","setPrototypeOf","encodingOrOffset","TypeError","allocUnsafe","string","encoding","isEncoding","actual","write","isView","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","isBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","size","array","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","readUInt16BE","foundIndex","found","j","hexWrite","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","utf16leToBytes","fromByteArray","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","enumerable","poolSize","allocUnsafeSlow","_isBuffer","compare","concat","swap16","swap32","swap64","toLocaleString","inspect","max","trim","thisStart","thisEnd","thisCopy","targetCopy","isFinite","_arr","out","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","boundsError","readBigUInt64BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","super","writable","configurable","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","floor","ERR_BUFFER_OUT_OF_BOUNDS","received","isInteger","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","mnemonicToSeedSync","mnemonicToSeed","validateMnemonic","entropyToMnemonic","mnemonicToEntropy","generateMnemonic","_assert_1","pbkdf2_1","sha256_1","sha512_1","utils_1","base_1","nfkd","normalize","norm","words","assertEntropy","entropy","default","wordlist","strength","number","randomBytes","calcChecksum","bitsLeft","sha256","getCoder","chain","checksum","radix2","mnemonic","isJapanese","salt","passphrase","pbkdf2Async","sha512","dkLen","pbkdf2","O","close","quote","isEmptyStream","mt","UTF8_STRING","BYTE_STRING","count","INDEFINITE","diagnosticSizes","NEVER","ALWAYS","ZERO","TWO","POS_INT","NEG_INT","ONE","FOUR","EIGHT","fround","M","defaultDecodeOptions","ParentType","T","BREAK","MAP","pretty","repeat","depth","SIMPLE_FLOAT","ARRAY","TAG","isStreaming","parent","H","A","leaf","ENCODED","initialDepth","numBytes","padEnd","minCol","children","sort","$","findIndex","D","L","noPrefixHex","saveOriginal","toHere","B","S","U","rejectBigInts","requirePreferred","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","boxed","entries","rejectDuplicateKeys","Set","has","add","sortKeys","toISOString","DATE_STRING","DATE_EPOCH","N","bind","I","BYTES_PER_ELEMENT","forceEndian","NaN","POS_BIGINT","NEG_BIGINT","CBOR","URI","URL","BASE64URL","BASE64","RegExp","REGEXP","source","flags","Uint16Array","Uint32Array","BigUint64Array","Uint8ClampedArray","Int8Array","Int16Array","Int32Array","BigInt64Array","Float32Array","Float64Array","SET","decodeToEncodeOpts","parse","SELF_DESCRIBED","INVALID_16","INVALID_32","INVALID_64","cdeDecodeOptions","dcborDecodeOptions","MAX_STRING_BYTE_LENGTH","MIN_DATE_ISO","MAX_DATE_ISO","MIN_DATE_TIMESTAMP","MAX_DATE_TIMESTAMP","TIMESTAMP_VALID_VALUES","STRING_VALID_VALUES","INTEGER_VALID_VALUES","MAX_U64","throwRangeError","title","property","mustBe","validRange","isTimestampAttributeSchemaProperty","properties","const","validateTimestampAttribute","isTimestampAttribute","attributeValue","timestampToDate","validateStringAttribute","validateIntegerAttribute","statementTypeName","checkSet","validate","typeString","validValues","throwSetError","verifyAtomicStatementInContext","schema","keys","attributes","checkRange","compareStringAttributes","AtomicStatementBuilder","statementAttributeTypeToAttributeType","createAccountCommitmentInput","identityProvider","randomness","issuer","acc","attr","chosenAttributes","createWeb3CommitmentInput","verifiableCredentialPrivateKey","credentialSubject","signature","signer","isInSet","timestamp","canProveAtomicStatement","isStringAttributeInRange","idQualifier","builderCallback","builder","addForVerifiableCredentials","validContractAddresses","issuers","getWeb3IdCredentialQualifier","addForIdentityCredentials","validIdentityProviders","getAccountCredentialQualifier","IDENTITY_SUBJECT_SCHEMA","getStatements","network","publicKey","index","subindex","credId","wallet","identityIndex","credIndex","credentialIndex","credentialStatement","TokenOperationType","parseTransfer","details","amount","recipient","memo","parseSupplyUpdate","parseListUpdate","parseEmpty","parseTokenOperation","decoded","Mint","Burn","AddAllowList","RemoveAllowList","AddDenyList","RemoveDenyList","Pause","Unpause","decodeTokenOperations","cbor","tokenId","operations","ops","flat","payload","_transport","Health","methods","options","method","opt","mergeOptions","stackIntercept","registerCBOREncoders","registerCBOREncoder","removeUndefined","getPrototypeOf","registerCBORDecoders","registerCBORDecoder","processedValue","dcbor","oldDecoders","cleanup","TokenHolderAccount","fromAccountAddress","fromBase58","accountAddress","tokenHolder","oneofKind","fromProto","toProto","params","decimals","MAX_U8","initializationParameters","SHA2","_assert_js_1","utils_js_1","Hash","blockLen","outputLen","padOffset","isLE","finished","destroyed","createView","update","exists","toBytes","take","dataView","roundClean","digestInto","output","setBigUint64","_32n","_u32_max","wh","wl","setUint32","oview","outLen","digest","destroy","_cloneInto","toBuffer","parseWithSchemaTypeBase64","parseWithSchemaType","empty","BigNumber","suspectProtoRx","suspectConstructorRx","_options","strict","storeAsString","alwaysParseAsBig","useNativeBigInt","protoAction","constructorAction","at","text","escapee","charAt","hex","uffff","startAt","white","object","hasOwnProperty","reviver","walk","holder","sha256Hash","CIS4","CredentialStatus","RevokerType","RevocationKeyAction","EventType","Web3IdSigner","privateKey","ed","getPublicKeyAsync","pubKey","sign","getSignature","REVOKE_DOMAIN","deserializeOptional","cursor","fun","serializeDate","encodeWord64","deserializeDate","Timestamp","fromMillis","deserializeEd25519PublicKey","serializeAdditionalData","packBufferWithWord16Length","formatAdditionalData","serializeReason","reason","packBufferWithWord8Length","deserializeCredentialType","deserializeCIS4Event","Custom","Cursor","credentialPubKey","schemaRef","deserializeCIS2MetadataUrl","credentialType","metadataUrl","RegisterCredential","revokerType","revoker","Issuer","Holder","Other","deserializeReason","RevokeCredential","IssuerMetadata","CredentialMetadata","CredentialSchemaRef","actionByte","action","Register","Remove","RevocationKey","deserializeCIS4ContractTraceEvents","deserializedEvents","traceEvent","deserializedEvent","param","credInfo","holderPubKey","holderRevocable","encodeBool","validFrom","validUntil","makeSerializeOptional","serializeCIS2MetadataUrl","serializeCIS4CredentialInfo","additionalData","fromHex","credentialInfo","deserializeCIS4CredentialInfo","revocationNonce","deserializeCIS4RevocationKeys","makeDeserializeListResponse","nonce","credential_info","holder_id","holder_revocable","valid_from","toSchemaValue","valid_until","toOptionJson","metadata_url","url","hash","auxiliary_data","credHolderPubKey","credential_id","contractAddress","serializeContractAddress","signingData","entrypoint","serializeReceiveHookName","signing_data","contract_address","entry_point","EntrypointName","revocationPubKey","revocation_key","ks","numKeys","encodeWord16","issuerMetadata","credentialSchema","ContractEvent","Hmac","inner","outer","_init","SimpleTransferHandler","getBaseEnergyCost","serialize","serializedToAddress","toAddress","serializedAmount","microCcdAmount","deserialize","serializedPayload","CcdAmount","fromMicroCcd","SimpleTransferWithMemoHandler","serializedMemo","encodeDataBlob","memoLength","DataBlob","DeployModuleHandler","version","cost","serializedWasm","packBufferWithWord32Length","serializedVersion","encodeWord32","InitContractHandler","maxContractExecutionEnergy","initNameBuffer","serializedInitName","serializedModuleRef","moduleRef","decodedModuleRef","parameterBuffer","Parameter","serializedParameters","ModuleReference","Energy","UpdateContractHandler","serializeIndex","serializeSubindex","serializedContractAddress","receiveNameBuffer","receiveName","serializedReceiveName","fromSchemaValue","ReceiveName","UpdateCredentialsHandler","updateCredentials","newCredentialsCost","newCredentials","credential","cdi","credentialPublicKeys","prev","curr","currentNumberOfCredentials","serializedAddedCredentials","serializeList","encodeWord8","serializeCredentialDeploymentInfo","serializedRemovedCredIds","removeCredentialIds","serializedThreshold","threshold","nc","ipIdentity","revocationThreshold","RegisterDataHandler","ConfigureBakerHandler","serializeConfigureBakerPayload","stake","openForDelegation","transactionFeeCommission","bakingRewardCommission","finalizationRewardCommission","ConfigureDelegationHandler","serializeConfigureDelegationPayload","delegationTarget","delegateType","DelegationTargetType","PassiveDelegation","bakerId","TokenUpdateHandler","fromBytes","energyCost","operation","DeployModule","UpdateCredentials","RegisterData","ConfigureDelegation","ConfigureBaker","DEFAULT_INVOKE_ENERGY","Cooldown_CooldownStatus","PeersInfo_Peer_CatchupStatus","NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo","OpenStatus","ContractVersion","CredentialType","TransactionType","ProtocolVersion","Empty$Type","MessageType","Empty","BlockHash$Type","kind","Sha256Hash$Type","Sha256Hash","TransactionHash$Type","TransactionHash","StateHash$Type","StateHash","AbsoluteBlockHeight$Type","AbsoluteBlockHeight","BlockHeight$Type","BlockHeight","BakerId$Type","BakerId","AccountIndex$Type","AccountIndex","ModuleRef$Type","ModuleRef","VersionedModuleSource$Type","oneof","VersionedModuleSource_ModuleSourceV0","VersionedModuleSource_ModuleSourceV1","VersionedModuleSource","VersionedModuleSource_ModuleSourceV0$Type","VersionedModuleSource_ModuleSourceV1$Type","Timestamp$Type","Release$Type","Amount","Release","NewRelease$Type","NewRelease","ReleaseSchedule$Type","ReleaseSchedule","EncryptedAmount$Type","EncryptedAmount","EncryptedBalance$Type","EncryptedBalance","DelegationTarget$Type","DelegationTarget","BakerElectionVerifyKey$Type","BakerElectionVerifyKey","BakerSignatureVerifyKey$Type","BakerSignatureVerifyKey","BakerAggregationVerifyKey$Type","BakerAggregationVerifyKey","BakerInfo$Type","BakerInfo","StakePendingChange$Type","StakePendingChange_Reduce","StakePendingChange","StakePendingChange_Reduce$Type","AmountFraction$Type","AmountFraction","CommissionRates$Type","CommissionRates","BakerPoolInfo$Type","BakerPoolInfo","AccountStakingInfo$Type","AccountStakingInfo_Baker","AccountStakingInfo_Delegator","AccountStakingInfo","AccountStakingInfo_Baker$Type","AccountStakingInfo_Delegator$Type","SequenceNumber$Type","SequenceNumber","UpdateSequenceNumber$Type","UpdateSequenceNumber","Amount$Type","CredentialIndex$Type","CredentialIndex","SignatureThreshold$Type","SignatureThreshold","AccountThreshold$Type","AccountThreshold","EncryptionKey$Type","EncryptionKey","Address$Type","Address","AccountVerifyKey$Type","AccountVerifyKey","CredentialPublicKeys$Type","K","V","CredentialPublicKeys","CredentialRegistrationId$Type","CredentialRegistrationId","IdentityProviderIdentity$Type","IdentityProviderIdentity","YearMonth$Type","YearMonth","Policy$Type","Policy","InitialCredentialValues$Type","InitialCredentialValues","ChainArData$Type","ChainArData","ArThreshold$Type","ArThreshold","Commitment$Type","Commitment","CredentialCommitments$Type","CredentialCommitments","NormalCredentialValues$Type","NormalCredentialValues","AccountCredential$Type","AccountCredential","Cooldown$Type","Cooldown","TokenInfo$Type","TokenState","TokenInfo","AccountInfo$Type","AccountInfo_Token","AccountInfo","AccountInfo_Token$Type","TokenAccountState","BlockHashInput$Type","BlockHashInput_RelativeHeight","BlockHashInput","BlockHashInput_RelativeHeight$Type","GenesisIndex","EpochRequest$Type","EpochRequest_RelativeEpoch","EpochRequest","EpochRequest_RelativeEpoch$Type","Epoch","AccountIdentifierInput$Type","AccountIdentifierInput","AccountInfoRequest$Type","AccountInfoRequest","TokenInfoRequest$Type","TokenInfoRequest","FinalizedBlockInfo$Type","FinalizedBlockInfo","AncestorsRequest$Type","AncestorsRequest","ModuleSourceRequest$Type","ModuleSourceRequest","ContractAddress$Type","InstanceInfoRequest$Type","InstanceInfoRequest","InstanceInfo$Type","InstanceInfo_V0","InstanceInfo_V1","InstanceInfo","InstanceInfo_V0$Type","ContractStateV0","InitName","InstanceInfo_V1$Type","InstanceStateKVPair$Type","InstanceStateKVPair","InstanceStateLookupRequest$Type","InstanceStateLookupRequest","InstanceStateValueAtKey$Type","InstanceStateValueAtKey","ReceiveName$Type","InitName$Type","Parameter$Type","ContractStateV0$Type","BlockItemStatus$Type","BlockItemStatus_Committed","BlockItemStatus_Finalized","BlockItemStatus","BlockItemStatus_Committed$Type","BlockItemSummaryInBlock","BlockItemStatus_Finalized$Type","BlockItemSummaryInBlock$Type","BlockItemSummary","Energy$Type","Slot$Type","Slot","NextAccountSequenceNumber$Type","NextAccountSequenceNumber","Duration$Type","Duration","RejectReason$Type","RejectReason_InvalidInitMethod","RejectReason_InvalidReceiveMethod","RejectReason_AmountTooLarge","RejectReason_RejectedInit","RejectReason_RejectedReceive","RejectReason_DuplicateCredIds","RejectReason_NonExistentCredIds","TokenModuleRejectReason","RejectReason","RejectReason_InvalidInitMethod$Type","RejectReason_InvalidReceiveMethod$Type","RejectReason_AmountTooLarge$Type","RejectReason_RejectedInit$Type","RejectReason_RejectedReceive$Type","RejectReason_DuplicateCredIds$Type","RejectReason_NonExistentCredIds$Type","ContractInitializedEvent$Type","ContractInitializedEvent","ContractEvent$Type","InstanceUpdatedEvent$Type","InstanceUpdatedEvent","ContractTraceElement$Type","ContractTraceElement_Transferred","ContractTraceElement_Interrupted","ContractTraceElement_Resumed","ContractTraceElement_Upgraded","ContractTraceElement","ContractTraceElement_Transferred$Type","ContractTraceElement_Interrupted$Type","ContractTraceElement_Resumed$Type","ContractTraceElement_Upgraded$Type","BakerKeysEvent$Type","BakerKeysEvent","BakerStakeUpdatedData$Type","BakerStakeUpdatedData","EncryptedAmountRemovedEvent$Type","EncryptedAmountRemovedEvent","NewEncryptedAmountEvent$Type","NewEncryptedAmountEvent","EncryptedSelfAmountAddedEvent$Type","EncryptedSelfAmountAddedEvent","RegisteredData$Type","RegisteredData","BakerEvent$Type","BakerEvent_BakerAdded","BakerEvent_BakerStakeIncreased","BakerEvent_BakerStakeDecreased","BakerEvent_BakerRestakeEarningsUpdated","BakerEvent_BakerSetOpenStatus","BakerEvent_BakerSetMetadataUrl","BakerEvent_BakerSetTransactionFeeCommission","BakerEvent_BakerSetBakingRewardCommission","BakerEvent_BakerSetFinalizationRewardCommission","BakerEvent_DelegationRemoved","BakerEvent_BakerSuspended","BakerEvent_BakerResumed","BakerEvent","BakerEvent_BakerAdded$Type","BakerEvent_BakerStakeIncreased$Type","BakerEvent_BakerStakeDecreased$Type","BakerEvent_BakerRestakeEarningsUpdated$Type","BakerEvent_BakerSetOpenStatus$Type","BakerEvent_BakerSetMetadataUrl$Type","BakerEvent_BakerSetTransactionFeeCommission$Type","BakerEvent_BakerSetBakingRewardCommission$Type","BakerEvent_BakerSetFinalizationRewardCommission$Type","BakerEvent_DelegationRemoved$Type","DelegatorId","BakerEvent_BakerSuspended$Type","BakerEvent_BakerResumed$Type","DelegatorId$Type","DelegationEvent$Type","DelegationEvent_DelegationStakeIncreased","DelegationEvent_DelegationStakeDecreased","DelegationEvent_DelegationSetRestakeEarnings","DelegationEvent_DelegationSetDelegationTarget","DelegationEvent_BakerRemoved","DelegationEvent","DelegationEvent_DelegationStakeIncreased$Type","DelegationEvent_DelegationStakeDecreased$Type","DelegationEvent_DelegationSetRestakeEarnings$Type","DelegationEvent_DelegationSetDelegationTarget$Type","DelegationEvent_BakerRemoved$Type","AccountTransactionEffects$Type","AccountTransactionEffects_None","AccountTransactionEffects_ContractUpdateIssued","AccountTransactionEffects_AccountTransfer","AccountTransactionEffects_BakerStakeUpdated","AccountTransactionEffects_EncryptedAmountTransferred","AccountTransactionEffects_TransferredToPublic","AccountTransactionEffects_TransferredWithSchedule","AccountTransactionEffects_CredentialsUpdated","AccountTransactionEffects_BakerConfigured","AccountTransactionEffects_DelegationConfigured","TokenEffect","AccountTransactionEffects","AccountTransactionEffects_None$Type","AccountTransactionEffects_ContractUpdateIssued$Type","AccountTransactionEffects_AccountTransfer$Type","Memo","AccountTransactionEffects_BakerStakeUpdated$Type","AccountTransactionEffects_EncryptedAmountTransferred$Type","AccountTransactionEffects_TransferredToPublic$Type","AccountTransactionEffects_TransferredWithSchedule$Type","AccountTransactionEffects_CredentialsUpdated$Type","AccountTransactionEffects_BakerConfigured$Type","AccountTransactionEffects_DelegationConfigured$Type","ElectionDifficulty$Type","ElectionDifficulty","TimeoutParameters$Type","Ratio","TimeoutParameters","FinalizationCommitteeParameters$Type","FinalizationCommitteeParameters","ValidatorScoreParameters$Type","ValidatorScoreParameters","ConsensusParametersV1$Type","ConsensusParametersV1","ExchangeRate$Type","ExchangeRate","Ratio$Type","UpdatePublicKey$Type","UpdatePublicKey","UpdateKeysThreshold$Type","UpdateKeysThreshold","UpdateKeysIndex$Type","UpdateKeysIndex","HigherLevelKeys$Type","HigherLevelKeys","AccessStructure$Type","AccessStructure","AuthorizationsV0$Type","AuthorizationsV0","AuthorizationsV1$Type","AuthorizationsV1","Description$Type","Description","ArInfo$Type","ArInfo_ArIdentity","ArInfo_ArPublicKey","ArInfo","ArInfo_ArIdentity$Type","ArInfo_ArPublicKey$Type","IpIdentity$Type","IpIdentity","IpInfo$Type","IpInfo_IpVerifyKey","IpInfo_IpCdiVerifyKey","IpInfo","IpInfo_IpVerifyKey$Type","IpInfo_IpCdiVerifyKey$Type","DurationSeconds$Type","DurationSeconds","InclusiveRangeAmountFraction$Type","InclusiveRangeAmountFraction","CommissionRanges$Type","CommissionRanges","CapitalBound$Type","CapitalBound","LeverageFactor$Type","LeverageFactor","Epoch$Type","Round$Type","Round","RewardPeriodLength$Type","RewardPeriodLength","MintRate$Type","MintRate","CooldownParametersCpv1$Type","CooldownParametersCpv1","PoolParametersCpv1$Type","PoolParametersCpv1","TimeParametersCpv1$Type","TimeParametersCpv1","MintDistributionCpv1$Type","MintDistributionCpv1","ProtocolUpdate$Type","ProtocolUpdate","MintDistributionCpv0$Type","MintDistributionCpv0","TransactionFeeDistribution$Type","TransactionFeeDistribution","GasRewards$Type","GasRewards","GasRewardsCpv2$Type","GasRewardsCpv2","BakerStakeThreshold$Type","BakerStakeThreshold","RootUpdate$Type","RootUpdate","Level1Update$Type","Level1Update","UpdatePayload$Type","CreatePLT","UpdatePayload","AccountTransactionDetails$Type","AccountTransactionDetails","AccountCreationDetails$Type","AccountCreationDetails","TransactionTime$Type","TransactionTime","UpdateDetails$Type","UpdateDetails","BlockItemSummary$Type","BlockItemSummary_TransactionIndex","TokenCreationDetails","BlockItemSummary_TransactionIndex$Type","GenesisIndex$Type","ConsensusInfo$Type","ConsensusInfo","ArrivedBlockInfo$Type","ArrivedBlockInfo","CryptographicParameters$Type","CryptographicParameters","BlockInfo$Type","BlockInfo","PoolInfoRequest$Type","PoolInfoRequest","PoolPendingChange$Type","PoolPendingChange_Reduce","PoolPendingChange_Remove","PoolPendingChange","PoolPendingChange_Reduce$Type","PoolPendingChange_Remove$Type","PoolCurrentPaydayInfo$Type","PoolCurrentPaydayInfo","PoolInfoResponse$Type","PoolInfoResponse","PassiveDelegationInfo$Type","PassiveDelegationInfo","BlocksAtHeightRequest$Type","BlocksAtHeightRequest_Absolute","BlocksAtHeightRequest_Relative","BlocksAtHeightRequest","BlocksAtHeightRequest_Absolute$Type","BlocksAtHeightRequest_Relative$Type","BlocksAtHeightResponse$Type","BlocksAtHeightResponse","TokenomicsInfo$Type","TokenomicsInfo_V0","TokenomicsInfo_V1","TokenomicsInfo","TokenomicsInfo_V0$Type","TokenomicsInfo_V1$Type","InvokeInstanceRequest$Type","InvokeInstanceRequest","InvokeInstanceResponse$Type","InvokeInstanceResponse_Success","InvokeInstanceResponse_Failure","InvokeInstanceResponse","InvokeInstanceResponse_Failure$Type","InvokeInstanceResponse_Success$Type","GetPoolDelegatorsRequest$Type","GetPoolDelegatorsRequest","DelegatorInfo$Type","DelegatorInfo","DelegatorRewardPeriodInfo$Type","DelegatorRewardPeriodInfo","Branch$Type","Branch","LeadershipElectionNonce$Type","LeadershipElectionNonce","ElectionInfo$Type","ElectionInfo_Baker","ElectionInfo","ElectionInfo_Baker$Type","BlockSpecialEvent$Type","BlockSpecialEvent_BakingRewards","BlockSpecialEvent_Mint","BlockSpecialEvent_FinalizationRewards","BlockSpecialEvent_BlockReward","BlockSpecialEvent_PaydayFoundationReward","BlockSpecialEvent_PaydayAccountReward","BlockSpecialEvent_BlockAccrueReward","BlockSpecialEvent_PaydayPoolReward","BlockSpecialEvent_ValidatorSuspended","BlockSpecialEvent_ValidatorPrimedForSuspension","BlockSpecialEvent","BlockSpecialEvent_AccountAmounts$Type","BlockSpecialEvent_AccountAmounts_Entry","BlockSpecialEvent_AccountAmounts","BlockSpecialEvent_AccountAmounts_Entry$Type","BlockSpecialEvent_BakingRewards$Type","BlockSpecialEvent_Mint$Type","BlockSpecialEvent_FinalizationRewards$Type","BlockSpecialEvent_BlockReward$Type","BlockSpecialEvent_PaydayFoundationReward$Type","BlockSpecialEvent_PaydayAccountReward$Type","BlockSpecialEvent_BlockAccrueReward$Type","BlockSpecialEvent_PaydayPoolReward$Type","BlockSpecialEvent_ValidatorSuspended$Type","BlockSpecialEvent_ValidatorPrimedForSuspension$Type","PendingUpdate$Type","PendingUpdate","NextUpdateSequenceNumbers$Type","NextUpdateSequenceNumbers","IpAddress$Type","IpAddress","Port$Type","Port","IpSocketAddress$Type","IpSocketAddress","PeerId$Type","PeerId","BannedPeer$Type","BannedPeer","BannedPeers$Type","BannedPeers","PeerToBan$Type","PeerToBan","DumpRequest$Type","DumpRequest","PeersInfo$Type","PeersInfo_Peer","PeersInfo","PeersInfo_Peer$Type","PeersInfo_Peer_NetworkStats","PeersInfo_Peer_NetworkStats$Type","NodeInfo$Type","NodeInfo_NetworkInfo","NodeInfo_Node","NodeInfo","NodeInfo_NetworkInfo$Type","NodeInfo_BakerConsensusInfo$Type","NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo","NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo","NodeInfo_BakerConsensusInfo","NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo$Type","NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo$Type","NodeInfo_Node$Type","SendBlockItemRequest$Type","CredentialDeployment","UpdateInstruction","SendBlockItemRequest","CredentialDeployment$Type","Signature$Type","Signature","SignatureMap$Type","SignatureMap","AccountSignatureMap$Type","AccountSignatureMap","AccountTransactionSignature$Type","AccountTransactionSignature","AccountTransactionHeader$Type","AccountTransactionHeader","InitContractPayload$Type","InitContractPayload","UpdateContractPayload$Type","UpdateContractPayload","TransferPayload$Type","TransferPayload","TransferWithMemoPayload$Type","TransferWithMemoPayload","AccountTransactionPayload$Type","AccountTransactionPayload","PreAccountTransaction$Type","PreAccountTransaction","AccountTransaction$Type","UpdateInstructionHeader$Type","UpdateInstructionHeader","UpdateInstructionPayload$Type","UpdateInstructionPayload","UpdateInstruction$Type","AccountTransactionSignHash$Type","AccountTransactionSignHash","CredentialsPerBlockLimit$Type","CredentialsPerBlockLimit","ChainParametersV0$Type","ChainParametersV0","ChainParametersV1$Type","ChainParametersV1","ChainParametersV2$Type","ChainParametersV2","ChainParametersV3$Type","ChainParametersV3","ChainParameters$Type","ChainParameters","FinalizationSummaryParty$Type","FinalizationSummaryParty","FinalizationIndex$Type","FinalizationIndex","FinalizationSummary$Type","FinalizationSummary","BlockFinalizationSummary$Type","BlockFinalizationSummary","BlockItem$Type","BlockItem","BakerRewardPeriodInfo$Type","BakerRewardPeriodInfo","QuorumSignature$Type","QuorumSignature","QuorumCertificate$Type","QuorumCertificate","FinalizerRound$Type","FinalizerRound","TimeoutSignature$Type","TimeoutSignature","TimeoutCertificate$Type","TimeoutCertificate","SuccessorProof$Type","SuccessorProof","EpochFinalizationEntry$Type","EpochFinalizationEntry","BlockCertificates$Type","BlockCertificates","WinningBaker$Type","WinningBaker","DryRunRequest$Type","DryRunStateQuery","DryRunStateOperation","DryRunRequest","DryRunStateQuery$Type","DryRunInvokeInstance","DryRunInvokeInstance$Type","DryRunStateOperation$Type","DryRunMintToAccount","DryRunTransaction","DryRunMintToAccount$Type","DryRunTransaction$Type","DryRunSignature","DryRunSignature$Type","DryRunResponse$Type","DryRunErrorResponse","DryRunSuccessResponse","DryRunResponse","DryRunErrorResponse$Type","DryRunErrorResponse_NoState","DryRunErrorResponse_BlockNotFound","DryRunErrorResponse_AccountNotFound","DryRunErrorResponse_InstanceNotFound","DryRunErrorResponse_AmountOverLimit","DryRunErrorResponse_BalanceInsufficient","DryRunErrorResponse_EnergyInsufficient","DryRunErrorResponse_InvokeFailure","DryRunErrorResponse_NoState$Type","DryRunErrorResponse_BlockNotFound$Type","DryRunErrorResponse_AccountNotFound$Type","DryRunErrorResponse_InstanceNotFound$Type","DryRunErrorResponse_AmountOverLimit$Type","DryRunErrorResponse_BalanceInsufficient$Type","DryRunErrorResponse_EnergyInsufficient$Type","DryRunErrorResponse_InvokeFailure$Type","DryRunSuccessResponse$Type","DryRunSuccessResponse_BlockStateLoaded","DryRunSuccessResponse_InvokeSuccess","DryRunSuccessResponse_TimestampSet","DryRunSuccessResponse_MintedToAccount","DryRunSuccessResponse_TransactionExecuted","DryRunSuccessResponse_BlockStateLoaded$Type","DryRunSuccessResponse_TimestampSet$Type","DryRunSuccessResponse_MintedToAccount$Type","DryRunSuccessResponse_TransactionExecuted$Type","DryRunSuccessResponse_InvokeSuccess$Type","FinalizerIndex$Type","FinalizerIndex","QuorumMessage$Type","QuorumMessage","RawQuorumCertificate$Type","RawQuorumCertificate","BlockSignature$Type","BlockSignature","TimeoutMessage$Type","TimeoutMessage","RawFinalizerRound$Type","RawFinalizerRound","RawTimeoutCertificate$Type","RawTimeoutCertificate","PersistentRoundStatus$Type","PersistentRoundStatus","RoundTimeout$Type","RoundTimeout","RawFinalizationEntry$Type","RawFinalizationEntry","RoundStatus$Type","RoundStatus","BlockTableSummary$Type","BlockTableSummary","BranchBlocks$Type","BranchBlocks","RoundExistingBlock$Type","RoundExistingBlock","RoundExistingQC$Type","RoundExistingQC","FullBakerInfo$Type","FullBakerInfo","FinalizationCommitteeHash$Type","FinalizationCommitteeHash","BakersAndFinalizers$Type","BakersAndFinalizers","EpochBakers$Type","EpochBakers","TimeoutMessages$Type","TimeoutMessages","AggregatedSignatures$Type","AggregatedSignatures","QuorumMessages$Type","QuorumMessages","ConsensusDetailedStatusQuery$Type","ConsensusDetailedStatusQuery","ConsensusDetailedStatus$Type","ConsensusDetailedStatus","AccountPending$Type","AccountPending","SchemaValue","toContractName","toEntrypointName","exceedsMaxValue","EXCEEDS_MAX_VALUE","negative","NEGATIVE","toContractAddress","TAGGED_CONTRACT_ADDRESS","toCBORValue","Tag","fromCBORValue","validateUint","registerEncoder","old","decoder","checkParameterLength","fromBufferUnchecked","parameter","schemaType","schemaBytes","serializeSchemaType","serializeTypeValue","schemaBase64","deserializeTypeValue","decodedAddress","toBase58","of","BYTES_LENGTH","COMMON_BYTES_LENGTH","alias","counter","commonBytes","aliasBytes","TokenErrorCode","TokenError","_name","expectedRef","foundRef","INCORRECT_MODULE_VERSION","InvalidTokenAmountError","tokenDecimals","INVALID_TOKEN_AMOUNT","NotAllowedError","NOT_ALLOWED","InsufficientFundsError","requiredAmount","INSUFFICIENT_FUNDS","PausedError","PAUSED","NotMintableError","NOT_MINTABLE","NotBurnableError","NOT_BURNABLE","NoAllowListError","NO_ALLOW_LIST","NoDenyListError","NO_DENY_LIST","InsufficientSupplyError","INSUFFICIENT_SUPPLY","grpc","info","_info","_moduleState","moduleState","getTokenInfo","id","validateAmount","token","scaleAmount","async","sendRaw","TransactionExpiry","futureMinutes","nextNonce","getNextAccountNonce","header","transaction","signTransaction","sendAccountTransaction","balanceOf","getAccountInfo","then","accInfo","accountTokens","find","balance","validateTransfer","paused","bail","payloads","senderInfo","senderBalance","zero","payloadTotal","toDecimal","lt","fromDecimal","allowList","denyList","accountToken","accountModuleState","validateMint","amounts","amountsList","mintable","validateBurn","burnable","senderAdderss","burnableAmount","validateAllowListUpdate","validateDenyListUpdate","sendOperations","metadata","createTokenUpdatePayload","tokenInfo","autoScale","transfers","targets","sha512_K","SHA512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","pending","pendingTotal","_delta8","_delta32","_pad","isAuthorizationsV1","as","isChainParametersV0","cp","isChainParametersV1","isChainParametersV2","isBlockInfoV0","bi","isBlockInfoV1","isConsensusStatusV0","cs","isConsensusStatusV1","isElectionInfoV0","ei","isElectionInfoV1","isInstanceInfoV1","isInstanceInfoV0","rs","util","fromCBOR","P","Gx","Gy","CURVE","au8","u8n","toU8","h2b","mod","isPoint","Point","Gpows","ex","ey","ez","et","fromAffine","normed","b2n_LE","y2","isValid","uvRatio","isXOdd","toAffine","other","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","is0","negate","double","C","x1y1","G","F","X3","Y3","T3","Z3","safe","wNAF","multiply","scalar","clearCofactor","isSmallOrder","isTorsionFree","iz","invert","toRawBytes","n2b_32LE","b2h","BASE","padh","pad","isNaN","reverse","concatB","arrs","sum","md","pow2","power","RM1","v3","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","pow_2_252_3","vx2","root1","root2","useRoot1","useRoot2","noRoot","modL_LE","_shaS","sha512a","etc","sha512Async","sha512s","hash2extK","hashed","head","prefix","point","pointBytes","getExtendedPublicKeyAsync","priv","getExtendedPublicKey","getPublicKey","hashFinish","asynchronous","hashable","finish","_sign","rBytes","R","signAsync","privKey","_verify","sig","pub","SB","verifyAsync","verify","cr","bytesToHex","hexToBytes","concatBytes","messages","subtle","sha512Sync","defineProperties","randomPrivateKey","precompute","comp","points","neg","cnd","mask","shiftBy","off","wbits","off1","off2","cnd1","cnd2","webcrypto","SHA384","parseTokenListUpdateEventDetails","parseTokenPauseEventDetails","cborDecode","__nominal","cborEncode","encodeHexString","reviveConcordiumTypes","isTypedJsonCandidate","ReturnValue","ccdTypesReplacer","transformConcordiumType","ccdUnwrapReplacer","unwrapConcordiumType","BigintFormatType","replacer","space","transformedValue","bigintFormat","None","replaceBigintValue","replaced","Integer","moduleSchema","schemaVersion","parameterSchema","getInitContractParameterSchema","receiveFunctionName","getReceiveContractParameterSchema","rawSchema","displayTypeSchemaTemplate","parameters","verboseErrorMessage","serializeInitContractParameters","serializeReceiveContractParameters","serializedValue","serializedState","deserializeState","returnValueBytes","functionName","deserializedReturnValue","deserializeReceiveReturnValue","errorBytes","deserializedError","deserializeReceiveError","deserializeInitError","deserializedValue","FALSE","TRUE","NULL","UNDEFINED","KnownSimple","rejectCustomSimples","ConcordiumGRPCClient","ConcordiumGRPCWebClient","getAccountIdentifierInput","getBlockHashInput","chunkSize","defaultOptions","setUint8","writeUint16","setUint16","writeUint32","writeBigUint64","writeInt16","setInt16","writeInt32","writeBigInt64","setBigInt64","writeFloat32","setFloat32","writeFloat64","clear","pop","te","avoidInts","cde","collapseBigInts","float64","flushToZero","ignoreOriginalEncoding","largeNegativeAsBigInt","reduceUnsafeNumbers","rejectFloats","rejectUndefined","simplifyNegativeZero","stringNormalization","isSafeInteger","MIN","MAX","Z","ie","re","Y","J","oe","sequenceNumber","fromSerializable","toSerializable","sha1_K","SHA1","TokenRejectReasonType","parseAddressNotFound","parseMintWouldOverflow","requestedAmount","currentSupply","maxRepresentableAmount","parseTokenBalanceInsufficient","availableBalance","requiredBalance","parseDeserializationFailure","cause","parseUnsupportedOperation","operationType","parseOperationNotPermitted","AddressNotFound","MintWouldOverflow","TokenBalanceInsufficient","DeserializationFailure","UnsupportedOperation","OperationNotPermitted","DeferredState","Deferred","preventUnhandledRejectionWarning","_state","_promise","_resolve","_reject","catch","RESOLVED","REJECTED","resolvePending","rejectPending","CIS3","preferMap","fromEntries","PREFERRED","convertUnsafeIntsToFloat","createObject","rejectLargeNegatives","rejectInts","rejectLongLoundNaN","rejectLongFloats","rejectNegativeZero","rejectSimple","rejectStreaming","rejectStringsNotNormalizedAs","rejectSubnormals","rejectUnsafeFloatInts","replaceLast","convert","remainingBytes","deserializer","ensureMatchesInput","expectList","expectLength","splitAt","entrypointName","func","lowerCamelCase","snakeCase","capNext","sb","toUpperCase","Sex","TransactionStatusEnum","OpenStatusText","BakerPoolPendingChangeType","PoolStatusType","BlockItemKind","SchemaVersion","CooldownStatus","candidate","__importDefault","__esModule","whereNumeric","whereAlpha3","whereCountry","iso_3166_1","VerifiablePresentation","presentation","globalContext","publicData","CIS2","serializeCIS2TokenId","deserializeCIS2TokenId","serializeAccountAddress","serializeAddress","hook","serializeContractReceiver","hookName","hasChecksum","addressDeserializer","deserializeUint8","deserializeBigUInt64LE","tokenAmount","uleb128DecodeWithIndex","owner","updateType","operator","UpdateOperatorOf","updateOperatorData","TokenMetadata","deserializeCIS2ContractTraceEvents","serializeCIS2Transfers","makeSerializeList","uleb128Encode","serializeTokenAmount","serializeCIS2UpdateOperators","serializeCIS2BalanceOfQueries","query","deserializeCIS2BalanceOfResponse","leb128Slice","uleb128Decode","serializeCIS2TokenIds","bUrl","bHash","deserializeCIS2TokenMetadataResponse","tokenIdBytes","tokenAddress","indexBytes","subindexBytes","tokenBytes","serializeCIS2OperatorOfQueries","deserializeCIS2OperatorOfResponse","Add","Contract","Account","token_id","rejection","InvalidTokenId","InsufficientFunds","Unauthorized","readMethodOptions","service","methodName","extensionName","extensionType","_a","localName","fromJson","readMethodOption","optionVal","readServiceOption","ServiceType","_b","_c","serverStreaming","clientStreaming","idempotency","normalizeMethodInfo","ClientStreamingCall","requestHeaders","request","headers","response","status","trailers","requests","onfulfilled","onrejected","promiseFinished","thisArg","_arguments","generator","fulfilled","step","rejected","DuplexStreamingCall","responses","TestTransport","suppressUncaughtRejections","headerDelay","responseDelay","betweenResponseDelay","afterResponseDelay","sentMessages","lastInput","TestInputStream","sent","single","sendComplete","completed","promiseHeaders","defaultHeaders","promiseSingleResponse","streamResponses","stream","abort","delay","promiseStatus","defaultStatus","promiseTrailers","defaultTrailers","maybeSuppressUncaught","unary","meta","headersPromise","responsePromise","statusPromise","trailersPromise","outputStream","responseStreamClosedPromise","duplex","ms","aborted","setTimeout","addEventListener","ev","clearTimeout","responseHeader","detail","responseTrailer","_completed","_sent","send","inputMessage","delayMs","inputComplete","transport","_d","tail","mtd","inp","interceptors","interceptUnary","interceptServerStreaming","interceptClientStreaming","interceptDuplex","stackUnaryInterceptors","stackServerStreamingInterceptors","stackClientStreamingInterceptors","stackDuplexStreamingInterceptors","ServerCallContextController","deadline","sendResponseHeadersFn","_cancelled","_listeners","_sendRH","notifyCancelled","sendResponseHeaders","cancelled","onCancel","serializeAccountTransactionHeader","payloadSize","energyAmount","serializedSender","serializedNonce","serializedEnergyAmount","serializedPayloadSize","serializedExpiry","expiryEpochSeconds","serializeAccountTransactionSignature","putSignature","signatureBytes","serializeMap","encodeWord8FromString","credSig","serializeAccountTransaction","accountTransaction","serializedBlockItemKind","AccountTransactionKind","serializedAccountTransactionSignatures","accountTransactionHandler","getAccountTransactionHandler","serializeAccountTransactionPayload","baseEnergyCost","calculateEnergyCost","countSignatures","serializedHeader","serializedType","serializeCredentialDeploymentValues","buffers","serializeVerifyKey","arData","encIdCredPubShare","serializeYearMonth","policy","validTo","createdAt","revealedAttributes","tagName","serializedAttributeValue","serializedTag","serializedAttributeValueLength","serializeIdOwnershipProofs","proofs","proofIdCredPub","idCredPubProofs","indexA","indexB","serializedIndex","commitments","challenge","proofIpSig","proofRegId","credCounterLessThanMaxAccounts","serializedAccountTransaction","signatureCount","serializedCredentialDeploymentValues","serializedProofs","serializedProofsLength","unsignedCredentialDeploymentInfo","serializedCredentialValues","serializedIdOwnershipProofs","existingAccountByte","credentialDeployment","unsignedCdi","newAccountByte","serializable","startsWith","toMillis","UnaryCall","RIPEMD160","Kh","ripemd160","Ah","Bh","Ch","Dh","Eh","rh","sh","condition","assertNever","FLOAT32_MAX","FLOAT32_MIN","UINT32_MAX","INT32_MAX","INT32_MIN","assertInt32","assertUInt32","assertFloat32","getAlias","isAlias","GrpcStatusCode","GrpcWebFrame","__awaiter","createGrpcWebRequestHeader","format","timeout","userAgent","append","DEADLINE_EXCEEDED","now","createGrpcWebRequestBody","body","DATA","msgLen","readGrpcWebResponseHeader","headersOrFetchResponse","httpStatus","httpStatusText","responseType","fetchResponse","UNKNOWN","fetchHeaders","fetchHeadersToHttp","statusText","httpOk","responseMeta","parseMetadata","statusCode","statusDetail","parseStatus","OK","INVALID_ARGUMENT","UNAUTHENTICATED","PERMISSION_DENIED","NOT_FOUND","ABORTED","FAILED_PRECONDITION","RESOURCE_EXHAUSTED","CANCELLED","UNIMPLEMENTED","UNAVAILABLE","httpStatusToGrpc","readGrpcWebResponseTrailer","trailerData","chunk","parseTrailer","readGrpcWebResponseBody","contentType","onFrame","streamReader","base64queue","byteQueue","INTERNAL","parseFormat","isReadableStream","whatWgReadableStream","getReader","safeLen","TRAILER","DATA_LOSS","GrpcWebFetchTransport","makeUrl","base","baseUrl","endsWith","serviceName","maybeStatus","maybeTrailer","fetchInit","inputBytes","toBinary","binaryOptions","defHeader","responseStream","responseEmptyBody","defStatus","defTrailer","fetch","Headers","signal","fromBinary","maybeMessage","defMessage","json_stringify","json_parse","CIS3DryRun","ContractDryRun","permit","blockHash","invokeMethod","serializeCIS3PermitParam","CIS3Contract","CISContract","grpcClient","getContractName","makeDryRunInstance","createPermit","createUpdateTransaction","formatCIS3PermitParam","sendUpdateTransaction","supportsPermit","entrypoints","makeDynamicFunction","serializeCIS3SupportsPermitQueryParams","deserializeCIS3SupportsPermitResponse","invokeView","attributesWithRange","attributesWithSet","hmac","HMAC","_key","iHash","oHash","fromAny","verifyCredentialMetadata","parsedNetwork","match","isWeb3IdProof","cred","_bail","parseWeb3IdProofMetadata","cis4","CIS4Contract","issuerPk","credentialStatus","inputs","parseAccountProofMetadata","accountCredentials","_credId","regId","parseYearMonth","blockSlotTime","getBlockInfo","Active","NotActivated","Expired","cmmAttributes","promises","verifiableCredential","vc","getOrInsert","current","deserializeUInt32BE","sourceLength","moduleSource","versionBytes","lengthBytes","compile","wasmExports","exp","isInitName","getContractNameFromInit","entrypointNames","isReceiveName","parts","getNamesFromReceive","sections","moduleVersion","getCustomSections","sectionName","unversionedSchemaVersion","customSections","findCustomSections","CIS0","serializeSupportIdentifier","serializeSupportIdentifiers","ids","SupportType","deserializeSupportResult","SupportBy","numAddresses","standardIds","instanceInfo","getInstanceInfo","fromInitName","supportReceiveName","invokeContract","returnValue","results","isListInput","expectedValuesLength","Some","rawModuleSchema","deserializeVersionedSchemaModule","deserializeUnversionedSchemaModule","magicPrefixVersionedSchema","deserializeUInt8","deserializeSchemaModuleV0","deserializeSchemaModuleV1","deserializeSchemaModuleV2","deserializeSchemaModuleV3","deserializeMap","sizeLength","deserialKey","deserialValue","itemLen","deserializeSize","deserializeSizeLength","deserializeUInt16LE","deserializeUInt32LE","deserializeString","byteLen","deserializeList","deserializeItem","deserializeOption","deserializeValue","byte","deserialSchemaType","second","fields","deserializeFields","variants","deserializeEnumVariant","maxByteSize","deserializeNamedField","field","deserializeSchemaFunctionV1","deserializeSchemaFunctionV2","deserializeContractV0","init","receive","deserializeContractV1","deserializeContractV2","deserializeContractV3","contracts","serialSizeLength","serialFields","serializeEnumVariant","serialSize","serialNamedField","named","serializeString","variant","serialItem","serialKey","serialValue","fromSchemaType","fromBase64SchemaType","exceedsMaxDecimals","EXCEEDS_MAX_DECIMALS","fractionalDecimals","FRACTIONAL_DECIMALS","amountString","padded","toCBORDecFrac","exponent","mantissa","bigAmount","big","getDecimalPlaces","intAmount","toFixed","tagged","defaultsWrite","emitDefaultValues","enumAsInteger","useProtoFieldName","prettySpaces","defaultsRead","ignoreUnknownFields","jsonReadOptions","jsonWriteOptions","mergeJsonOptions","typeRegistry","CBor$Type","CBor","TokenId$Type","TokenModuleRef$Type","TokenModuleRef","TokenAmount$Type","TokenState$Type","TokenAccountState$Type","TokenModuleEvent$Type","TokenHolder$Type","TokenTransferEvent$Type","TokenTransferEvent","TokenSupplyUpdateEvent$Type","TokenSupplyUpdateEvent","TokenEvent$Type","TokenEvent","TokenEffect$Type","TokenModuleRejectReason$Type","CreatePLT$Type","TokenCreationDetails$Type","createIdentityRequestWithKeys","rawRequest","idObjectRequest","createIdentityRecoveryRequestWithKeys","idRecoveryRequest","ConcordiumHdWallet","seed","net","identityProviderIndex","ipInfo","idCredSec","prfKey","blindingRandomness","arsInfos","arThreshold","seedAsHex","transactionHash","credentialDeploymentInfo","serializedTransaction","credentialDeploymentTransaction","payloadByteArray","sha384","sha512_256","sha512_224","_sha2_js_1","_u64_js_1","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","Al","Bl","Cl","Dl","El","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","rotrSH","shrSH","s0l","rotrSL","shrSL","W2h","W2l","s1h","rotrBH","s1l","rotrBL","SUMl","add4L","SUMh","add4H","sigma1h","sigma1l","CHIh","CHIl","T1ll","add5L","T1h","add5H","T1l","sigma0h","sigma0l","MAJh","MAJl","All","add3L","add3H","SHA512_224","SHA512_256","wrapConstructor","fromSeedPhrase","seedPhrase","isHex","credentialCounter","onChainCommitmentKey","verifiableCredentialIndex","mergeRpcOptions","defaults","jsonOptions","into","firstName","lastName","sex","idDocNo","nationalIdNo","taxIdNo","lei","legalName","businessNumber","registrationAuth","required","getContractUpdateDefaultExpiryDate","metaOrInvoker","serializer","invoker","ContractBase","dryRunInstance","checkOnChain","contractNameOnChain","moduleReference","sourceModule","dryRun","serializeInput","energy","inputJsonFormatter","jsonParameter","transactionBase","senderAddress","createAndSendUpdateTransaction","deserializeResponse","mSchema","getEmbeddedSchema","encoded","TAGGED_MEMO","content","SHA224","serializedDeployment","messageExpiry","deserializeAccountTransaction","CredentialDeploymentKind","UpdateInstructionKind","setInt8","useLittleEndian","encodeInt8","SchemeId","getPayloadBitmap","fieldOrder","reduceRight","cur","encodeSize","encodeKey","encodeValue","putSize","putMember","member","blob","scheme","schemeId","keyBuffer","verifyKey","serializedScheme","yearMonth","year","serializedYear","serializedMonth","serializeFromSpec","spec","orUndefined","configureDelegationSerializationSpec","restakeEarnings","getSerializedConfigureDelegationBitmap","bitmap","serializeVerifyKeys","electionVerifyKey","proofElection","signatureVerifyKey","proofSig","aggregationVerifyKey","proofAggregation","configureBakerSerializationSpec","suspended","getSerializedConfigureBakerBitmap","CIS4DryRun","registerCredential","serializeCIS4RegisterCredentialParam","revokeCredentialAsIssuer","serializeCIS4RevokeCredentialIssuerParam","revokeCredentialAsHolder","credHolderSigner","fromDate","serializedData","serializeCIS4RevocationDataHolder","revokeCredentialAsOther","revokerSigner","serializeCIS4RevocationDataOther","registerRevocationKeys","serializeCIS4UpdateRevocationKeysParam","removeRevocationKeys","revokeCredentialHolder","revokeCredentialIssuer","revokeCredentialOther","credentialEntry","deserializeCIS4CredentialEntry","deserializeCIS4CredentialStatus","revocationKeys","registryMetadata","deserializeCIS4MetadataResponse","createRegisterCredential","formatCIS4RegisterCredential","createRevokeCredentialAsIssuer","formatCIS4RevokeCredentialIssuer","createRevokeCredentialAsHolder","formatCIS4RevokeCredentialHolder","toDate","createRevokeCredentialAsOther","formatCIS4RevokeCredentialOther","createRegisterRevocationKeys","formatCIS4UpdateRevocationKeys","createRemoveRevocationKeys","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","LOG_BASE","POWS_TEN","SQRT_BASE","bitFloor","coeffToString","xc","yc","intCheck","isOdd","toExponential","toFixedPoint","zs","clone","configObject","div","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","caseChanged","isNum","_isBigNumber","search","round","DEBUG","rm","c0","ne","maxOrMin","normalise","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","minimum","gt","random","dp","rand","plus","decimal","toBaseOut","baseIn","baseOut","arrL","callerIsToString","temp","xlo","xhi","klo","khi","aL","bL","subtract","more","prod","prodL","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","p1","p2","absoluteValue","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","times","integerValue","isEqualTo","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","toFraction","d0","d1","d2","n0","n1","toNumber","toPrecision","ctor","superCtor","super_","TempCtor","CIS2DryRun","updateOperator","updates","CIS2Contract","cis0Supports","Support","createTransfer","us","formatCIS2Transfer","createUpdateOperator","formatCIS2UpdateOperator","queries","operatorOf","tokenMetadata","tokenIds","decodeSize","decodeKey","decodeValue","decodeSignature","deserializeAccountTransactionSignature","AccountSequenceNumber","fromEpochSeconds","deserializeTransactionHeader","isAccountTransactionType","sha1","sha224","Queries","getBlocks","getFinalizedBlocks","getAccountList","getTokenList","getModuleList","getAncestors","getModuleSource","getInstanceList","getInstanceState","instanceStateLookup","getNextAccountSequenceNumber","getConsensusInfo","getBlockItemStatus","getCryptographicParameters","getBakerList","getPoolInfo","getPassiveDelegationInfo","getBlocksAtHeight","getTokenomicsInfo","invokeInstance","getPoolDelegators","getPoolDelegatorsRewardPeriod","getPassiveDelegators","getPassiveDelegatorsRewardPeriod","getBranches","getElectionInfo","getIdentityProviders","getAnonymityRevokers","getAccountNonFinalizedTransactions","getBlockTransactionEvents","getBlockSpecialEvents","getBlockPendingUpdates","getNextUpdateSequenceNumbers","getScheduledReleaseAccounts","getCooldownAccounts","getPreCooldownAccounts","getPrePreCooldownAccounts","getBakerEarliestWinTime","shutdown","peerConnect","peerDisconnect","getBannedPeers","banPeer","unbanPeer","dumpStart","dumpStop","getPeersInfo","getNodeInfo","sendBlockItem","getAccountTransactionSignHash","getBlockChainParameters","getBlockFinalizationSummary","getBlockItems","getBakersRewardPeriod","getBlockCertificates","getWinningBakersEpoch","getFirstBlockEpoch","getConsensusDetailedStatus","MODULE_REF_BYTE_LENGTH","fromContractAddress","ServerStreamingCall","charCode","isEqualContractAddress","splitPoint","parameterSize","receiveNameLength","incorrectLength","INCORRECT_LENGTH","ALLOWED_CHARS_REGEX","exceedsMaxLength","EXCEEDS_MAX_LENGTH","belowMinLength","BELOW_MIN_LENGTH","invalidCharacters","INVALID_CHARACTERS","NodeCatchupStatus","MICRO_CCD_PER_CCD","Big","fromCcd","ccd","toMicroCcd","toCcd","microCcd","microCcdString","governanceAccount","decodeTokenModuleState","decodeTokenModuleAccountState","initialSupply","decodeTokenInitializationParameters","LENGTH","PassiveCommitteeInfo","AccountAddress$Type","Memo$Type","MAX_DP","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","NUMERIC","RM","unshift","doExponential","isNonzero","isneg","DP","bt","ri","bz","rl","qi","xlty","ygtx","one","prec","NE","PE","_Big_","nl","roundDown","roundHalfUp","roundHalfEven","roundUp","assertNumber","wrap","digits","letter","separator","padding","bits","chr","convertRadix","digit","digitBase","stringToBytes","bytesToString","utf8","bech32m","bech32","base58check","base58xmr","base58xrp","base58flickr","base58","base64url","base32crockford","base32hex","base32","base16","gcd","radix2carry","convertRadix2","radix","revPadding","unsafeWrapper","newChecksum","oldChecksum","genBase58","abc","XMR_BLOCK_LEN","block","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","encodingConst","genBech32","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","lowered","sepIndex","actualLength","decodeToBytes","decodeUnsafe","CODERS","coderTypeError","stringMeasureRegexp","durationString","durationInMillis","measure","valueString","unit","duration","CCD_NETWORK_ID","coinInfo","TAGGED_ADDRESS","mapContents","validKeys","addressBytes","coinInfoValue","coinInfoMap","fromCBORValueAccount","constantA","constantB","ACCOUNT_TRANSACTION_HEADER_SIZE","transactionSpecificCost","getExchangeRate","euroPerEnergy","microGTUPerEuro","denominator","numerator","handler","getUpdatePayloadSize","usedEnergy","chainParameters","rate","collapseRatio","multiplyRatio","encoder","aBytes","bBytes","aByte","bByte","dateToTimestampAttribute","statementAttribute","TypedJsonParseErrorCode","getOwnPropertyNames","TypedJsonParseError","TypedJsonMalformedError","MALFORMED","TypedJsonWrongTypeError","expected","WRONG_TYPE","TypedJsonInvalidValueError","INVALID_VALUE","expectedTypeDiscriminator","toType","hmac_js_1","pbkdf2Init","_password","_salt","_opts","opts","checkOpts","asyncTick","password","DK","PRF","PRFSalt","pbkdf2Output","prfW","ti","Ti","ui","asyncLoop","RpcError","unwrapToHex","unwrap","unwrapValToHex","unwrapToBase58","trRelease","release","trTimestamp","transactions","trNewRelease","trDate","ym","trAttKey","attributeKey","SDK","trVerifyKey","ed25519Key","trChainArData","chainArData","trCommissionRates","rates","transactionCommission","trAmountFraction","bakingCommission","baking","finalizationCommission","finalization","trCred","crd","credentialValues","isNormal","credVals","normal","initial","mapRecord","commonValues","ipId","credKeys","cmm","cmmPrf","prf","cmmCredCounter","credCounter","cmmIdCredSecSharingCoeff","idCredSecSharingCoeff","cmmMaxAccounts","maxAccounts","trDelegatorTarget","baker","trPendingChange","pendingChange","newStake","effectiveTime","remove","partsPerHundredThousand","trOpenStatus","openStatus","GRPC","OPEN_FOR_ALL","OpenForAll","CLOSED_FOR_NEW","ClosedForNew","CLOSED_FOR_ALL","ClosedForAll","trBaker","bakerInfo","isSuspended","v0","bakerAggregationVerifyKey","aggregationKey","bakerElectionVerifyKey","electionKey","bakerSignatureVerifyKey","signatureKey","stakedAmount","poolInfo","bakerPoolInfo","transPoolInfo","trHigherLevelKeysUpdate","trUpdatePublicKey","translateChainParametersCommon","microCcdPerEuro","accountCreationLimit","foundationAccount","level1Keys","rootKeys","translateCommissionRange","translateRewardParametersCommon","feeDistribution","transactionFeeDistribution","gasAccount","transPoolPendingChange","pendingChangeType","ReduceBakerCapital","bakerEquityCapital","reducedEquityCapital","RemovePool","NoChange","commissionRates","transCooldown","cooldown","endTime","trTokenAccountInfo","PLT","tokenAccountState","trChainParametersV2","commonRewardParameters","level2Keys","trAuthorizationsV1","rewardPeriodLength","timeParameters","mintPerPayday","trMintRate","delegatorCooldown","cooldownParameters","poolOwnerCooldown","passiveFinalizationCommission","poolParameters","passiveBakingCommission","passiveTransactionCommission","finalizationCommissionRange","commissionBounds","bakingCommissionRange","transactionCommissionRange","minimumEquityCapital","capitalBound","leverageBound","rewardParameters","gASRewards","gasRewards","accountCreation","chainUpdate","mintDistribution","bakingReward","finalizationReward","timeoutBase","consensusParameters","timeoutParameters","timeoutDecrease","timeoutIncrease","minBlockTime","blockEnergyLimit","finalizerRelativeStakeThreshold","finalizationCommitteeParameters","minimumFinalizers","maximumFinalizers","translateProtocolVersion","pv","trAddress","trContractTraceElement","contractTraceElement","element","contractVersion","updated","instigator","transferred","interrupted","Resumed","resumed","success","Upgraded","upgraded","trBakerEvent","bakerEvent","keysEvent","bakerAdded","BakerAdded","signKey","BakerRemoved","bakerRemoved","BakerStakeIncreased","bakerStakeIncreased","BakerStakeDecreased","bakerStakeDecreased","bakerRestakeEarningsUpdated","BakerSetRestakeEarnings","BakerKeysUpdated","bakerKeysUpdated","setOpenStatus","bakerSetOpenStatus","BakerSetOpenStatus","setURL","bakerSetMetadataUrl","BakerSetMetadataURL","metadataURL","transferFeeComm","bakerSetTransactionFeeCommission","BakerSetTransactionFeeCommission","rewardComm","bakerSetBakingRewardCommission","BakerSetBakingRewardCommission","bakerSetFinalizationRewardCommission","BakerSetFinalizationRewardCommission","BakerDelegationRemoved","delegatorId","delegationRemoved","BakerSuspended","bakerSuspended","BakerResumed","bakerResumed","trDelegTarget","trRejectReason","simpleReason","RejectReasonTag","ModuleNotWF","RuntimeFailure","SerializationFailure","OutOfEnergy","InvalidProof","InsufficientBalanceForBakerStake","StakeUnderMinimumThresholdForBaking","BakerInCooldown","NonExistentCredentialID","KeyIndexAlreadyInUse","InvalidAccountThreshold","InvalidCredentialKeySignThreshold","InvalidEncryptedAmountTransferProof","InvalidTransferToPublicProof","InvalidIndexOnEncryptedTransfer","ZeroScheduledAmount","NonIncreasingSchedule","FirstScheduledReleaseExpired","InvalidCredentials","RemoveFirstCredential","CredentialHolderDidNotSign","NotAllowedMultipleCredentials","NotAllowedToReceiveEncrypted","NotAllowedToHandleEncrypted","MissingBakerAddParameters","FinalizationRewardCommissionNotInRange","BakingRewardCommissionNotInRange","TransactionFeeCommissionNotInRange","AlreadyADelegator","InsufficientBalanceForDelegationStake","MissingDelegationAddParameters","InsufficientDelegationStake","DelegatorInCooldown","StakeOverMaximumThresholdForPool","PoolWouldBecomeOverDelegated","PoolClosed","ModuleHashAlreadyExists","moduleHashAlreadyExists","InvalidAccountReference","invalidAccountReference","InvalidInitMethod","invalidInitMethod","InvalidReceiveMethod","invalidReceiveMethod","InvalidModuleReference","invalidModuleReference","InvalidContractAddress","invalidContractAddress","AmountTooLarge","amountTooLarge","RejectedInit","rejectedInit","RejectedReceive","rejectedReceive","AlreadyABaker","alreadyABaker","NotABaker","notABaker","DuplicateAggregationKey","duplicateAggregationKey","EncryptedAmountSelfTransfer","encryptedAmountSelfTransfer","ScheduledSelfTransfer","scheduledSelfTransfer","DuplicateCredIDs","duplicateCredIds","NonExistentCredIDs","nonExistentCredIds","NotADelegator","notADelegator","DelegationTargetNotABaker","delegationTargetNotABaker","NonExistentTokenId","nonExistentTokenId","TokenUpdateTransactionFailed","tokenUpdateTransactionFailed","mintRate","trProtocolUpdate","Protocol","specificationHash","specificationUrl","specificationAuxiliaryData","trElectionDifficultyUpdate","elecDiff","electionDifficulty","trEuroPerEnergyUpdate","exchangeRate","EuroPerEnergy","trMicroCcdPerEuroUpdate","MicroGtuPerEuro","trFoundationAccountUpdate","FoundationAccount","trTransactionFeeDistributionUpdate","transFeeDist","trGasRewardsUpdate","finalizationProof","trGasRewardsCpv2Update","trBakerStakeThresholdUpdate","bakerStakeThreshold","trPoolParametersCpv1Update","poolParams","PoolParameters","passiveCommissions","trCommissionRange","trAddAnonymityRevokerUpdate","ar","AddAnonymityRevoker","arInfo","trAddIdentityProviderUpdate","ip","AddIdentityProvider","trCooldownParametersCpv1Update","cooldownParams","CooldownParameters","trTimeParametersCpv1Update","timeParams","TimeParameters","mintRatePerPayday","trTimeoutParameteresUpdate","trMinBlockTimeUpdate","MinBlockTime","trBlockEnergyLimitUpdate","BlockEnergyLimit","trFinalizationCommitteeParametersUpdate","trMintDistributionCpv1Update","mintDist","MintDistribution","trPendingUpdateEffect","pendingUpdate","effect","protocol","poolParametersCpv0","poolParametersCpv1","addAnonymityRevoker","addIdentityProvider","mintDistributionCpv0","mintPerSlot","mintDistributionCpv1","gasRewardsCpv2","HigherLevelKeyUpdate","typeOfUpdate","RootKeysUpdate","updateKeys","Level1KeysUpdate","AuthorizationKeysUpdate","Level2KeysUpdate","updatePayload","trAuthorizationsV0","level2KeysCpv0","Level2KeysUpdateV1","level2KeysCpv1","maxMissedRounds","validatorScoreParameters","maximumMissedRounds","trUpdatePayload","protocolUpdate","electionDifficultyUpdate","euroPerEnergyUpdate","microCcdPerEuroUpdate","foundationAccountUpdate","mintDistributionUpdate","transactionFeeDistributionUpdate","gasRewardsUpdate","bakerStakeThresholdUpdate","addAnonymityRevokerUpdate","addIdentityProviderUpdate","cooldownParametersCpv1Update","poolParametersCpv1Update","timeParametersCpv1Update","mintDistributionCpv1Update","gasRewardsCpv2Update","timeoutParametersUpdate","minBlockTimeUpdate","blockEnergyLimitUpdate","finalizationCommitteeParametersUpdate","keyUpdate","trKeyUpdate","rootUpdate","Root","level1Update","Level1","validatorScoreParametersUpdate","createPltUpdate","tokenModule","trAccessStructure","auths","authorizedKeys","accessPublicKeys","accessThreshold","trOptionalAccessStructure","rootKeysUpdate","level1KeysUpdate","level2KeysUpdateV0","level2KeysUpdateV1","parameterCooldown","parameterTime","emergency","parameterConsensus","parameterEuroPerEnergy","parameterFoundationAccount","parameterMicroCCDPerEuro","paramGASRewards","parameterGasRewards","parameterMintDistribution","parameterTransactionFeeDistribution","createPlt","trMemoEvent","TransferMemo","trTransactionType","DEPLOY_MODULE","INIT_CONTRACT","UPDATE","TRANSFER","ADD_BAKER","AddBaker","REMOVE_BAKER","RemoveBaker","UPDATE_BAKER_STAKE","UpdateBakerStake","UPDATE_BAKER_RESTAKE_EARNINGS","UpdateBakerRestakeEarnings","UPDATE_BAKER_KEYS","UpdateBakerKeys","UPDATE_CREDENTIAL_KEYS","UpdateCredentialKeys","ENCRYPTED_AMOUNT_TRANSFER","TRANSFER_TO_ENCRYPTED","TRANSFER_TO_PUBLIC","TRANSFER_WITH_SCHEDULE","UPDATE_CREDENTIALS","REGISTER_DATA","TRANSFER_WITH_MEMO","ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO","TRANSFER_WITH_SCHEDULE_AND_MEMO","CONFIGURE_BAKER","CONFIGURE_DELEGATION","TOKEN_UPDATE","tokenEvent","transferEvent","moduleEvent","mintEvent","burnEvent","blockItemSummary","baseBlockItemSummary","effects","failedTransactionType","none","ModuleDeployed","moduleDeployed","contractInit","ContractInitialized","ref","originRef","contractUpdateIssued","accountTransfer","increased","bakerStakeUpdated","bakerStakeChanged","encryptedAmountTransferred","EncryptedAmountsRemoved","inputAmount","newAmount","upToIndex","NewEncryptedAmount","newIndex","encryptedAmount","transferredToEncrypted","EncryptedSelfAmountAdded","transferredToPublic","AmountAddedByDecryption","transferredWithSchedule","TransferredWithSchedule","CredentialKeysUpdated","credentialKeysUpdated","keysUpdated","credentialsUpdated","CredentialsUpdated","newCredIds","removedCredIds","newThreshold","DataRegistered","dataRegistered","bakerConfigured","delegationConfigured","delegationEvent","stakeIncr","delegationStakeIncreased","DelegationStakeIncreased","stakeDecr","delegationStakeDecreased","DelegationStakeDecreased","restake","delegationSetRestakeEarnings","DelegationSetRestakeEarnings","delegationSetDelegationTarget","DelegationSetDelegationTarget","DelegationAdded","delegationAdded","DelegationRemoved","DelegationBakerRemoved","trDelegationEvent","tokenUpdateEffect","trAccountTransactionSummary","AccountCreation","INITIAL","UpdateTransaction","tokenCreation","trBlockItemSummaryInBlock","outcome","trInstanceInfoCommon","identity","ipDescription","ipVerifyKey","ipCdiVerifyKey","cdiVerifyKey","arIdentity","arDescription","arPublicKey","trBakerElectionInfo","bakerElectionInfo","lotteryPower","trPassiveCommitteeInfo","passiveCommitteeInfo","passiveCommitteeInfoV2","NOT_IN_COMMITTEE","NotInCommittee","ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE","AddedButNotActiveInCommittee","ADDED_BUT_WRONG_KEYS","AddedButWrongKeys","trBakerConsensusInfoStatus","consensusInfo","trNodeInfo_Node","consensusStatus","active","trCatchupStatus","catchupStatus","CatchupStatus","CATCHINGUP","CatchingUp","Pending","UPTODATE","UpToDate","trAccountAmount","accountAmount","trFinalizationSummaryParty","party","weight","signed","trFinalizationSummary","finalizers","quorumCertificate","cert","epoch","aggregateSignature","signatories","timeoutCertificate","minEpoch","qcRoundsFirstEpoch","finalizerRound","qcRoundsSecondEpoch","epochFinalizationEntry","finalizedQc","successorQc","successorProof","aggAmount","encryptedBalance","aggregatedAmount","numAggregated","accountEncryptedAmount","selfAmount","startIndex","incomingAmounts","accountReleaseSchedule","total","schedule","schedules","accountCooldowns","cooldowns","accountAvailableBalance","staked","stakingInfo","delegator","scheduled","atDisposal","accInfoCommon","Simple","accountNonce","accountIndex","accountThreshold","accountEncryptionKey","encryptionKey","creds","tokens","accountDelegation","deleg","accountBaker","Unknown","nasn","allFinal","bulletproofGenerators","genesisString","trChainParametersV3","trChainParametersV1","v1","bakerCooldownEpochs","minimumThresholdForBaking","trChainParametersV0","poolType","BakerPool","bakerAddress","equityCapital","delegatedCapital","delegatedCapitalCap","bakerStakePendingChange","equityPendingChange","currentPaydayStatus","currentPaydayInfo","blocksBaked","finalizationLive","transactionFeesEarned","effectiveStake","isPrimedForSuspension","missedRounds","allPoolTotalCapital","currentPaydayTransactionFeesEarned","currentPaydayDelegatedCapital","tokenomics","protocolVersion","totalAmount","totalEncryptedAmount","bakingRewardAccount","finalizationRewardAccount","foundationTransactionRewards","nextPaydayTime","nextPaydayMintRate","totalStakedCapital","ci","bestBlock","genesisBlock","currentEraGenesisBlock","lastFinalizedBlock","epochDuration","bestBlockHeight","lastFinalizedBlockHeight","finalizationCount","blocksVerifiedCount","blocksReceivedCount","blockArriveLatencyEMA","blockArriveLatencyEma","blockArriveLatencyEMSD","blockArriveLatencyEmsd","blockReceiveLatencyEMA","blockReceiveLatencyEma","blockReceiveLatencyEMSD","blockReceiveLatencyEmsd","transactionsPerBlockEMA","transactionsPerBlockEma","transactionsPerBlockEMSD","transactionsPerBlockEmsd","genesisTime","currentEraGenesisTime","genesisIndex","blockReceivePeriodEma","blockReceivePeriodEMA","blockReceivePeriodEmsd","blockReceivePeriodEMSD","blockArrivePeriodEma","blockArrivePeriodEMA","blockArrivePeriodEmsd","blockArrivePeriodEMSD","finalizationPeriodEma","finalizationPeriodEmsd","blockLastReceivedTime","blockLastArrivedTime","lastFinalizedTime","PROTOCOL_VERSION_6","slotDuration","concordiumBFTStatus","currentTimeoutDuration","currentRound","currentEpoch","triggerBlockTime","itemStatus","Received","Committed","outcomes","committed","Finalized","finalized","invokeResponse","failure","model","blockInfo","height","blocks","blockParent","parentBlock","blockStateHash","stateHash","blockLastFinalized","blockHeight","blockBaker","blockArriveTime","arriveTime","blockReceiveTime","receiveTime","slotTime","transactionCount","transactionsSize","transactionEnergyCost","transactionsEnergyCost","eraBlockHeight","blockSlot","slotNumber","delegatorInfo","branch","branchV2","electionInfo","electionNonce","nextNums","finalizationCommiteeParameters","protocolLevelTokens","nodeInfo","peerVersion","localTime","peerUptime","networkInfo","nodeId","peerTotalSent","peerTotalReceived","avgBpsIn","avgBpsOut","peerInfo","nodeCatchupStatus","peerId","socketAddress","port","networkStats","packetsSent","packetsReceived","latency","specialEvent","bakingRewards","bakerRewards","remainder","mintBakingReward","mint","mintFinalizationReward","mintPlatformDevelopmentCharge","finalizationRewards","transactionFees","blockReward","oldGasAccount","newGasAccount","bakerReward","foundationCharge","paydayFoundationReward","developmentCharge","paydayAccountReward","blockAccrueReward","passiveReward","poolOwner","paydayPoolReward","validatorSuspended","validatorPrimedForSuspension","finalizationSummary","record","certs","bakerRewardPeriod","isFinalizer","winningBaker","winner","present","tokenState","tokenModuleRef","totalSupply","trSig","blocksAtHeight","absolute","relative","restrict","BASE_MAP","LEADER","FACTOR","log","iFACTOR","psz","zeroes","b256","it3","it4","vch","pbegin","pend","b58","it1","it2","br","fr","ModuleClient","moduleClient","checksumFn","decodeRaw","payloadU8","both","NodeHealthRequest$Type","NodeHealthRequest","NodeHealthResponse$Type","NodeHealthResponse","equal","quotient","factor","ccdToMicroCcd","microCcdToCcd","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","maxChunkLength","encodeChunk","lookup","tripletToBase64","rotlBL","rotlBH","rotlSL","rotlSH","rotr32L","rotr32H","toBig","fromBig","U32_MASK64","le","lst","_l","_h","low","u64","checksumSha256","additional","pairs","_additional","tokenMetadataUrl","maxDepth","getUint8","getUint16","getFloat32","getFloat64","getBigUint64","fromContractName","encTable","decTable","base64decode","base64Str","es","bytePos","groupPos","base64encode","proof","rawValue","presentationContext","bool","lengths","instance","checkFinished","typedJsonType","blockHashInput","given","rawKeys","getCredentialDeploymentTransactionHash","serializeCredentialDeploymentTransactionForSubmission","deserializeTransaction","hasOwn","contract_name","state_bytes","verbose_error_message","return_value_bytes","module_schema","function_name","schema_version","deferred6_0","deferred6_1","ptr5","len5","error_bytes","serialized_value","typeofJsonValue","isJsonObject","fromCharCodes","utf8read","varint64read","lowBits","highBits","assertBounds","middleByte","varint64write","hasNext","splitBits","hasMoreBits","TWO_PWR_32_DBL","int64fromString","dec","add1e6digit","begin","digit1e6","int64toString","bitsLow","bitsHigh","mid","high","digitA","digitB","digitC","decimalFrom1e7","digit1e7","needLeadingZeros","partial","varint32write","varint32read","readBytes","BI","assertBi","dv","ok","getBigInt64","UMIN","UMAX","detectBi","RE_DECIMAL_STR","HALF_2_PWR_32","SharedPbLong","PbULong","toBigInt","PbLong","pbl","readUnknownField","readerFactory","BinaryReader","binaryReadOptions","textDecoder","varint64","uint32","skip","Varint","Bit64","Bit32","LengthDelimited","StartGroup","EndGroup","int32","sint32","zze","int64","uint64","sint64","fixed32","sfixed32","fixed64","sfixed64","float","writeUnknownFields","writerFactory","BinaryWriter","binaryWriteOptions","textEncoder","chunks","fork","long","MESSAGE_TYPE","ScalarType","LongType","RepeatType","normalizeFieldInfo","jsonName","NO","readFieldOptions","messageType","fieldName","readFieldOption","readMessageOption","isOneofGroup","any","getOneofValue","setOneofValue","clearOneofValue","getSelectedOneofValue","ReflectionTypeCheck","prepare","req","known","oneofs","allowExcessProperties","group","repeated","scalars","INT32","mapKeys","isAssignable","longType","argType","UINT64","FIXED64","INT64","SFIXED64","SINT64","BIGINT","NUMBER","BOOL","STRING","BYTES","DOUBLE","FLOAT","FIXED32","SFIXED32","SINT32","UINT32","reflectionLongConvert","ReflectionJsonReader","fMap","fieldsInput","jsonValue","what","oneofsHandled","jsonKey","fieldObj","jsonObjKey","jsonObjValue","internalJsonRead","enum","fieldArr","jsonItem","localEnumName","enumNumber","POSITIVE_INFINITY","NEGATIVE_INFINITY","encodeURIComponent","ReflectionJsonWriter","jsonObj","entryKey","entryValue","enumInfo","jsonArr","optional","internalJsonWrite","ulong","reflectionScalarDefault","ReflectionBinaryReader","fieldNoToField","reader","internalBinaryRead","mapKey","mapVal","mapEntry","keyRaw","ReflectionBinaryWriter","emitDefault","PACKED","packed","keyValue","internalBinaryWrite","isDefault","scalarInfo","reflectionCreate","reflectionMergePartial","fieldValue","mergePartial","reflectionEquals","val_a","val_b","repeatedPrimitiveEq","primitiveEq","repeatedMsgEq","objectValues","ba","bb","defaultCheckDepth","refTypeCheck","refJsonReader","refJsonWriter","refBinReader","refBinWriter","fromJsonString","toJson","toJsonString","containsMessageType","isEnumObject","nam","listEnumValues","enumObject","listEnumNames","listEnumNumbers","getAccountTransactionHash","getAccountTransactionSignDigest","getCredentialDeploymentSignDigest","getCredentialForExistingAccountSignDigest","serializeAccountTransactionForSubmission","reviveDateFromTimeStampAttribute","replaceDateWithTimeStampAttribute","streamToList","Schema","ContractSchema","ContractUpdateTransaction","ContractTransactionMetadata","ContractInvokeMetadata","CreateContractTransactionMetadata","ContractUpdateTransactionWithSchema","TypedJson","jsonParse","jsonStringify","jsonUnwrapStringify","wrapXOFConstructorWithOpts","wrapConstructorWithOpts","nextTick","rotr","u32","u8","crypto_1","u8a","hexes","hexByte","iters","tick","cb","ts","diff","arrays","toStr","hashCons","hashC","bytesLength","atob","codePointAt","basex","validateSimpleWallet","credentials","accountKeys","buildBasicAccountSigner","getSignatureCount","walletString","environment","getCredentialSignature","getMessageDigest","prepend","rawMessage","isSimpleAccountKeys","isWalletExport","keyPair","getKeys","accountInfo","credentialSignature","credentialKeys","keyIndex","mLen","nBytes","eLen","eMax","eBias","nBits","rt","LN2","jsonStruct","accountSignatures","totalSignatureCount","trace","rec","valMapper","keyMapper","mapper","predicate","iterable","iter","nextIndex","bigint","seconds","secondsSinceEpoch","minutes","expiryMillis","sha","ripemd","serializeCIS3PermitMessage","entryPoint","serializeCIS3PermitPayload","payloadBuffer","serializeCIS3AccountTransactionSignature","formatCIS3PermitMessage","deserializeCIS3Event","sponsoree","Nonce","deserializeCIS3ContractTraceEvents","key1","innerMap","key2","Ed25519","client","QueriesClient","healthClient","HealthClient","translate","nextAccountSequenceNumber","cryptographicParameters","accountIdentifier","accountInfoRequest","transactionHashV2","blockItemStatus","getConsensusStatus","moduleSourceRequest","getEmbeddedModuleSchema","instanceInfoRequest","context","invokeInstanceRequest","getInvokerInput","invokeInstanceResponse","rawPayload","sendRawAccountTransaction","transactionSignature","accountTransactionSignatureToV2","sendBlockItemRequest","blockItem","sendCredentialDeploymentTransaction","sendUpdateInstruction","updateInstructionTransaction","updateInstruction","blockChainParameters","passiveDelegationInfo","tokenomicsInfo","abortSignal","mapStream","commonBlockInfo","waitForTransactionFinalization","timeoutTime","abortController","AbortController","blockStream","asyncIter","maxAmountOfAncestors","instanceStateKVPair","assertValidHex","ips","ars","blockHeightRequest","requestV2","BlocksAtHeightRequestToV2","bakers","blockItemSummaries","sequenceNumbers","nextUpdateSequenceNumbers","assertValidIp","assertValidPort","peers","ipAddress","filePath","file","blockSpecialEvents","blockSpecialEvent","pendingUpdates","blockFinalizationSummary","getFinalizedBlocksFrom","startHeight","finHeight","AbortSignal","newBlocks","endSignal","searchKnown","nextKnown","getConsensusHeight","nextNew","findEarliestFinalized","findInstanceCreation","isRpcError","findFirstFinalizedBlockNoLaterThan","time","winTime","blockCertificates","bakersRewardPeriod","bakerRewardPeriodInfo","epochRequest","getEpochRequest","winningBakers","healthCheck","isHealthy","trTokenInfo","lastFinal","returnIdentifier","accountIdentifierInput","epochRequestInput","relativeEpoch","isValidIp","gap","indent","escapable","lastIndex","mind","timestampMillis","Chi","Maj","SHA256_K","IV","SHA256_W","W15","W2","s0","s1","AccountJSON","createUnsignedCredentialInfo","publicKeys","credentialInput","identityObject","credentialNumber","idCredSecret","unsignedCredentialDeploymentInfoString","createCredentialPayloadNoSeed","sigRetrievelRandomness","internalInput","unsignedCredentialInfo","hashedCredId","credNumber","attributeRandomness","filterRecord","idObject","credDeployment","signingKey","bs58checkBase","DECIMAL_FRAC","BIGFLOAT","BASE64URL_EXPECTED","BASE64_EXPECTED","BASE16_EXPECTED","MIME","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","prop","toStringTag","__webpack_exports__"],"sourceRoot":""}